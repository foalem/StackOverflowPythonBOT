Question	Answer	Source	Metadata	SuggestedQuestions	IsContextOnly	Prompts	QnaId
What does the "yield" keyword do?	<p>To understand what <code>yield</code> does, you must understand what <em>generators</em> are. And before you can understand generators, you must understand <em>iterables</em>.</p>\n\n<h2>Iterables</h2>\n\n<p>When you create a list, you can read its items one by one. Reading its items one by one is called iteration:</p>\n\n<pre><code>>>> mylist = [1, 2, 3]\n\n>>> for i in mylist:\n\n... print(i)\n\n1\n\n2\n\n3\n\n</code></pre>\n\n<p><code>mylist</code> is an <em>iterable</em>. When you use a list comprehension, you create a list, and so an iterable:</p>\n\n<pre><code>>>> mylist = [x*x for x in range(3)]\n\n>>> for i in mylist:\n\n... print(i)\n\n0\n\n1\n\n4\n\n</code></pre>\n\n<p>Everything you can use "<code>for... in...</code>" on is an iterable; <code>lists</code>, <code>strings</code>, files...</p>\n\n<p>These iterables are handy because you can read them as much as you wish, but you store all the values in memory and this is not always what you want when you have a lot of values.</p>\n\n<h2>Generators</h2>\n\n<p>Generators are iterators, a kind of iterable <strong>you can only iterate over once</strong>. Generators do not store all the values in memory, <strong>they generate the values on the fly</strong>:</p>\n\n<pre><code>>>> mygenerator = (x*x for x in range(3))\n\n>>> for i in mygenerator:\n\n... print(i)\n\n0\n\n1\n\n4\n\n</code></pre>\n\n<p>It is just the same except you used <code>()</code> instead of <code>[]</code>. BUT, you <strong>cannot</strong> perform <code>for i in mygenerator</code> a second time since generators can only be used once: they calculate 0, then forget about it and calculate 1, and end calculating 4, one by one.</p>\n\n<h2>Yield</h2>\n\n<p><code>yield</code> is a keyword that is used like <code>return</code>, except the function will return a generator.</p>\n\n<pre><code>>>> def createGenerator():\n\n... mylist = range(3)\n\n... for i in mylist:\n\n... yield i*i\n\n...\n\n>>> mygenerator = createGenerator() # create a generator\n\n>>> print(mygenerator) # mygenerator is an object!\n\n<generator object createGenerator at 0xb7555c34>\n\n>>> for i in mygenerator:\n\n... print(i)\n\n0\n\n1\n\n4\n\n</code></pre>\n\n<p>Here it's a useless example, but it's handy when you know your function will return a huge set of values that you will only need to read once.</p>\n\n<p>To master <code>yield</code>, you must understand that <strong>when you call the function, the code you have written in the function body does not run.</strong> The function only returns the generator object, this is a bit tricky :-)</p>\n\n<p>Then, your code will continue from where it left off each time <code>for</code> uses the generator.</p>\n\n<p>Now the hard part:</p>\n\n<p>The first time the <code>for</code> calls the generator object created from your function, it will run the code in your function from the beginning until it hits <code>yield</code>, then it'll return the first value of the loop. Then, each subsequent call will run another iteration of the loop you have written in the function and return the next value. This will continue until the generator is considered empty, which happens when the function runs without hitting <code>yield</code>. That can be because the loop has come to an end, or because you no longer satisfy an <code>"if/else"</code>.</p>\n\n<hr>\n\n<h2>Your code explained</h2>\n\n<p><em>Generator:</em></p>\n\n<pre><code># Here you create the method of the node object that will return the generator\n\ndef _get_child_candidates(self, distance, min_dist, max_dist):\n\n # Here is the code that will be called each time you use the generator object:\n\n # If there is still a child of the node object on its left\n\n # AND if the distance is ok, return the next child\n\n if self._leftchild and distance - max_dist < self._median:\n\n yield self._leftchild\n\n # If there is still a child of the node object on its right\n\n # AND if the distance is ok, return the next child\n\n if self._rightchild and distance + max_dist >= self._median:\n\n yield self._rightchild\n\n # If the function arrives here, the generator will be considered empty\n\n # there is no more than two values: the left and the right children\n\n</code></pre>\n\n<p><em>Caller:</em></p>\n\n<pre><code># Create an empty list and a list with the current object reference\n\nresult, candidates = list(), [self]\n\n# Loop on candidates (they contain only one element at the beginning)\n\nwhile candidates:\n\n # Get the last candidate and remove it from the list\n\n node = candidates.pop()\n\n # Get the distance between obj and the candidate\n\n distance = node._get_dist(obj)\n\n # If distance is ok, then you can fill the result\n\n if distance <= max_dist and distance >= min_dist:\n\n result.extend(node._values)\n\n # Add the children of the candidate in the candidate's list\n\n # so the loop will keep running until it will have looked\n\n # at all the children of the children of the children, etc. of the candidate\n\n candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))\n\nreturn result\n\n</code></pre>\n\n<p>This code contains several smart parts:</p>\n\n<ul>\n\n<li><p>The loop iterates on a list, but the list expands while the loop is being iterated :-) It's a concise way to go through all these nested data even if it's a bit dangerous since you can end up with an infinite loop. In this case, <code>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</code> exhaust all the values of the generator, but <code>while</code> keeps creating new generator objects which will produce different values from the previous ones since it's not applied on the same node.</p></li>\n\n<li><p>The <code>extend()</code> method is a list object method that expects an iterable and adds its values to the list.</p></li>\n\n</ul>\n\n<p>Usually we pass a list to it:</p>\n\n<pre><code>>>> a = [1, 2]\n\n>>> b = [3, 4]\n\n>>> a.extend(b)\n\n>>> print(a)\n\n[1, 2, 3, 4]\n\n</code></pre>\n\n<p>But in your code, it gets a generator, which is good because:</p>\n\n<ol>\n\n<li>You don't need to read the values twice.</li>\n\n<li>You may have a lot of children and you don't want them all stored in memory.</li>\n\n</ol>\n\n<p>And it works because Python does not care if the argument of a method is a list or not. Python expects iterables so it will work with strings, lists, tuples, and generators! This is called duck typing and is one of the reasons why Python is so cool. But this is another story, for another question...</p>\n\n<p>You can stop here, or read a little bit to see an advanced use of a generator:</p>\n\n<h2>Controlling a generator exhaustion</h2>\n\n<pre><code>>>> class Bank(): # Let's create a bank, building ATMs\n\n... crisis = False\n\n... def create_atm(self):\n\n... while not self.crisis:\n\n... yield "$100"\n\n>>> hsbc = Bank() # When everything's ok the ATM gives you as much as you want\n\n>>> corner_street_atm = hsbc.create_atm()\n\n>>> print(corner_street_atm.next())\n\n$100\n\n>>> print(corner_street_atm.next())\n\n$100\n\n>>> print([corner_street_atm.next() for cash in range(5)])\n\n['$100', '$100', '$100', '$100', '$100']\n\n>>> hsbc.crisis = True # Crisis is coming, no more money!\n\n>>> print(corner_street_atm.next())\n\n<type 'exceptions.StopIteration'>\n\n>>> wall_street_atm = hsbc.create_atm() # It's even true for new ATMs\n\n>>> print(wall_street_atm.next())\n\n<type 'exceptions.StopIteration'>\n\n>>> hsbc.crisis = False # The trouble is, even post-crisis the ATM remains empty\n\n>>> print(corner_street_atm.next())\n\n<type 'exceptions.StopIteration'>\n\n>>> brand_new_atm = hsbc.create_atm() # Build a new one to get back in business\n\n>>> for cash in brand_new_atm:\n\n... print cash\n\n$100\n\n$100\n\n$100\n\n$100\n\n$100\n\n$100\n\n$100\n\n$100\n\n$100\n\n...\n\n</code></pre>\n\n<p><strong>Note:</strong> For Python 3, use<code>print(corner_street_atm.__next__())</code> or <code>print(next(corner_street_atm))</code></p>\n\n<p>It can be useful for various things like controlling access to a resource.</p>\n\n<h2>Itertools, your best friend</h2>\n\n<p>The itertools module contains special functions to manipulate iterables. Ever wish to duplicate a generator?\n\nChain two generators? Group values in a nested list with a one-liner? <code>Map / Zip</code> without creating another list?</p>\n\n<p>Then just <code>import itertools</code>.</p>\n\n<p>An example? Let's see the possible orders of arrival for a four-horse race:</p>\n\n<pre><code>>>> horses = [1, 2, 3, 4]\n\n>>> races = itertools.permutations(horses)\n\n>>> print(races)\n\n<itertools.permutations object at 0xb754f1dc>\n\n>>> print(list(itertools.permutations(horses)))\n\n[(1, 2, 3, 4),\n\n (1, 2, 4, 3),\n\n (1, 3, 2, 4),\n\n (1, 3, 4, 2),\n\n (1, 4, 2, 3),\n\n (1, 4, 3, 2),\n\n (2, 1, 3, 4),\n\n (2, 1, 4, 3),\n\n (2, 3, 1, 4),\n\n (2, 3, 4, 1),\n\n (2, 4, 1, 3),\n\n (2, 4, 3, 1),\n\n (3, 1, 2, 4),\n\n (3, 1, 4, 2),\n\n (3, 2, 1, 4),\n\n (3, 2, 4, 1),\n\n (3, 4, 1, 2),\n\n (3, 4, 2, 1),\n\n (4, 1, 2, 3),\n\n (4, 1, 3, 2),\n\n (4, 2, 1, 3),\n\n (4, 2, 3, 1),\n\n (4, 3, 1, 2),\n\n (4, 3, 2, 1)]\n\n</code></pre>\n\n<h2>Understanding the inner mechanisms of iteration</h2>\n\n<p>Iteration is a process implying iterables (implementing the <code>__iter__()</code> method) and iterators (implementing the <code>__next__()</code> method).\n\nIterables are any objects you can get an iterator from. Iterators are objects that let you iterate on iterables.</p>\n\n<p>There is more about it in this article about <a href="http://effbot.org/zone/python-for-statement.htm" rel="noreferrer">how <code>for</code> loops work</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	101
Does Python have a ternary conditional operator?	<p>Yes, it was <a href="https://mail.python.org/pipermail/python-dev/2005-September/056846.html" rel="noreferrer" title="[Python-Dev] Conditional Expression Resolution">added</a> in version 2.5. The expression syntax is:</p>\n\n<pre class="lang-py prettyprint-override"><code>a if condition else b\n\n</code></pre>\n\n<p>First <code>condition</code> is evaluated, then exactly one of either <code>a</code> or <code>b</code> is evaluated and returned based on the <a href="https://en.wikipedia.org/wiki/Boolean_data_type" rel="noreferrer" title="Boolean data type">Boolean</a> value of <code>condition</code>. If <code>condition</code> evaluates to <code>True</code>, then <code>a</code> is evaluated and returned but <code>b</code> is ignored, or else when <code>b</code> is evaluated and returned but <code>a</code> is ignored.</p>\n\n<p>This allows short-circuiting because when <code>condition</code> is true only <code>a</code> is evaluated and <code>b</code> is not evaluated at all, but when <code>condition</code> is false only <code>b</code> is evaluated and <code>a</code> is not evaluated at all.</p>\n\n<p>For example:</p>\n\n<pre class="lang-py prettyprint-override"><code>>>> 'true' if True else 'false'\n\n'true'\n\n>>> 'true' if False else 'false'\n\n'false'\n\n</code></pre>\n\n<p>Note that conditionals are an <em>expression</em>, not a <em>statement</em>. This means you can't use assignment statements or <code>pass</code> or other <strong>statements</strong> within a conditional <strong>expression</strong>:</p>\n\n<pre class="lang-py prettyprint-override"><code>>>> pass if False else x = 3\n\n File "<stdin>", line 1\n\n pass if False else x = 3\n\n ^\n\nSyntaxError: invalid syntax\n\n</code></pre>\n\n<p>You can, however, use conditional expressions to assign a variable like so:</p>\n\n<pre class="lang-py prettyprint-override"><code>x = a if True else b\n\n</code></pre>\n\n<p>Think of the conditional expression as switching between two values. It is very useful when you're in a 'one value or another' situation, it but doesn't do much else.</p>\n\n<p>If you need to use statements, you have to use a normal <code>if</code> <strong>statement</strong> instead of a conditional <strong>expression</strong>.</p>\n\n<hr>\n\n<p>Keep in mind that it's frowned upon by some Pythonistas for several reasons:</p>\n\n<ul>\n\n<li>The order of the arguments is different from those of the classic <code>condition ? a : b</code> ternary operator from many other languages (such as C, C++, Go, Perl, Ruby, Java, Javascript, etc.), which may lead to bugs when people unfamiliar with Python's "surprising" behaviour use it (they may reverse the argument order).</li>\n\n<li>Some find it "unwieldy", since it goes contrary to the normal flow of thought (thinking of the condition first and then the effects).</li>\n\n<li>Stylistic reasons. (Although the 'inline <code>if</code>' can be <em>really</em> useful, and make your script more concise, it really does complicate your code)</li>\n\n</ul>\n\n<p>If you're having trouble remembering the order, then remember that when read aloud, you (almost) say what you mean. For example, <code>x = 4 if b > 8 else 9</code> is read aloud as <code>x will be 4 if b is greater than 8 otherwise 9</code>.</p>\n\n<p>Official documentation: </p>\n\n<ul>\n\n<li><a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer" title="Conditional expressions">Conditional expressions</a></li>\n\n<li><a href="https://docs.python.org/3.3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="noreferrer" title="Is there an equivalent of Câs â?:â ternary operator?">Is there an equivalent of Câs â?:â ternary operator?</a></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	102
What are metaclasses in Python?	<h1>Classes as objects</h1>\n\n<p>Before understanding metaclasses, you need to master classes in Python. And Python has a very peculiar idea of what classes are, borrowed from the Smalltalk language.</p>\n\n<p>In most languages, classes are just pieces of code that describe how to produce an object. That's kinda true in Python too:</p>\n\n<pre><code>>>> class ObjectCreator(object):\n\n... pass\n\n...\n\n>>> my_object = ObjectCreator()\n\n>>> print(my_object)\n\n<__main__.ObjectCreator object at 0x8974f2c>\n\n</code></pre>\n\n<p>But classes are more than that in Python. Classes are objects too.</p>\n\n<p>Yes, objects.</p>\n\n<p>As soon as you use the keyword <code>class</code>, Python executes it and creates\n\nan OBJECT. The instruction</p>\n\n<pre><code>>>> class ObjectCreator(object):\n\n... pass\n\n...\n\n</code></pre>\n\n<p>creates in memory an object with the name "ObjectCreator".</p>\n\n<p><strong>This object (the class) is itself capable of creating objects (the instances),\n\nand this is why it's a class</strong>.</p>\n\n<p>But still, it's an object, and therefore:</p>\n\n<ul>\n\n<li>you can assign it to a variable</li>\n\n<li>you can copy it</li>\n\n<li>you can add attributes to it</li>\n\n<li>you can pass it as a function parameter</li>\n\n</ul>\n\n<p>e.g.:</p>\n\n<pre><code>>>> print(ObjectCreator) # you can print a class because it's an object\n\n<class '__main__.ObjectCreator'>\n\n>>> def echo(o):\n\n... print(o)\n\n...\n\n>>> echo(ObjectCreator) # you can pass a class as a parameter\n\n<class '__main__.ObjectCreator'>\n\n>>> print(hasattr(ObjectCreator, 'new_attribute'))\n\nFalse\n\n>>> ObjectCreator.new_attribute = 'foo' # you can add attributes to a class\n\n>>> print(hasattr(ObjectCreator, 'new_attribute'))\n\nTrue\n\n>>> print(ObjectCreator.new_attribute)\n\nfoo\n\n>>> ObjectCreatorMirror = ObjectCreator # you can assign a class to a variable\n\n>>> print(ObjectCreatorMirror.new_attribute)\n\nfoo\n\n>>> print(ObjectCreatorMirror())\n\n<__main__.ObjectCreator object at 0x8997b4c>\n\n</code></pre>\n\n<h1>Creating classes dynamically</h1>\n\n<p>Since classes are objects, you can create them on the fly, like any object.</p>\n\n<p>First, you can create a class in a function using <code>class</code>:</p>\n\n<pre><code>>>> def choose_class(name):\n\n... if name == 'foo':\n\n... class Foo(object):\n\n... pass\n\n... return Foo # return the class, not an instance\n\n... else:\n\n... class Bar(object):\n\n... pass\n\n... return Bar\n\n...\n\n>>> MyClass = choose_class('foo')\n\n>>> print(MyClass) # the function returns a class, not an instance\n\n<class '__main__.Foo'>\n\n>>> print(MyClass()) # you can create an object from this class\n\n<__main__.Foo object at 0x89c6d4c>\n\n</code></pre>\n\n<p>But it's not so dynamic, since you still have to write the whole class yourself.</p>\n\n<p>Since classes are objects, they must be generated by something.</p>\n\n<p>When you use the <code>class</code> keyword, Python creates this object automatically. But as\n\nwith most things in Python, it gives you a way to do it manually.</p>\n\n<p>Remember the function <code>type</code>? The good old function that lets you know what\n\ntype an object is:</p>\n\n<pre><code>>>> print(type(1))\n\n<type 'int'>\n\n>>> print(type("1"))\n\n<type 'str'>\n\n>>> print(type(ObjectCreator))\n\n<type 'type'>\n\n>>> print(type(ObjectCreator()))\n\n<class '__main__.ObjectCreator'>\n\n</code></pre>\n\n<p>Well, <a href="http://docs.python.org/2/library/functions.html#type" rel="noreferrer"><code>type</code></a> has a completely different ability, it can also create classes on the fly. <code>type</code> can take the description of a class as parameters,\n\nand return a class.</p>\n\n<p>(I know, it's silly that the same function can have two completely different uses according to the parameters you pass to it. It's an issue due to backwards\n\ncompatibility in Python)</p>\n\n<p><code>type</code> works this way:</p>\n\n<pre><code>type(name, bases, attrs)\n\n</code></pre>\n\n<p>Where:</p>\n\n<ul>\n\n<li><strong><code>name</code></strong>: name of the class</li>\n\n<li><strong><code>bases</code></strong>: tuple of the parent class (for inheritance, can be empty)</li>\n\n<li><strong><code>attrs</code></strong>: dictionary containing attributes names and values</li>\n\n</ul>\n\n<p>e.g.:</p>\n\n<pre><code>>>> class MyShinyClass(object):\n\n... pass\n\n</code></pre>\n\n<p>can be created manually this way:</p>\n\n<pre><code>>>> MyShinyClass = type('MyShinyClass', (), {}) # returns a class object\n\n>>> print(MyShinyClass)\n\n<class '__main__.MyShinyClass'>\n\n>>> print(MyShinyClass()) # create an instance with the class\n\n<__main__.MyShinyClass object at 0x8997cec>\n\n</code></pre>\n\n<p>You'll notice that we use "MyShinyClass" as the name of the class\n\nand as the variable to hold the class reference. They can be different,\n\nbut there is no reason to complicate things.</p>\n\n<p><code>type</code> accepts a dictionary to define the attributes of the class. So:</p>\n\n<pre><code>>>> class Foo(object):\n\n... bar = True\n\n</code></pre>\n\n<p>Can be translated to:</p>\n\n<pre><code>>>> Foo = type('Foo', (), {'bar':True})\n\n</code></pre>\n\n<p>And used as a normal class:</p>\n\n<pre><code>>>> print(Foo)\n\n<class '__main__.Foo'>\n\n>>> print(Foo.bar)\n\nTrue\n\n>>> f = Foo()\n\n>>> print(f)\n\n<__main__.Foo object at 0x8a9b84c>\n\n>>> print(f.bar)\n\nTrue\n\n</code></pre>\n\n<p>And of course, you can inherit from it, so:</p>\n\n<pre><code>>>> class FooChild(Foo):\n\n... pass\n\n</code></pre>\n\n<p>would be:</p>\n\n<pre><code>>>> FooChild = type('FooChild', (Foo,), {})\n\n>>> print(FooChild)\n\n<class '__main__.FooChild'>\n\n>>> print(FooChild.bar) # bar is inherited from Foo\n\nTrue\n\n</code></pre>\n\n<p>Eventually you'll want to add methods to your class. Just define a function\n\nwith the proper signature and assign it as an attribute.</p>\n\n<pre><code>>>> def echo_bar(self):\n\n... print(self.bar)\n\n...\n\n>>> FooChild = type('FooChild', (Foo,), {'echo_bar': echo_bar})\n\n>>> hasattr(Foo, 'echo_bar')\n\nFalse\n\n>>> hasattr(FooChild, 'echo_bar')\n\nTrue\n\n>>> my_foo = FooChild()\n\n>>> my_foo.echo_bar()\n\nTrue\n\n</code></pre>\n\n<p>And you can add even more methods after you dynamically create the class, just like adding methods to a normally created class object.</p>\n\n<pre><code>>>> def echo_bar_more(self):\n\n... print('yet another method')\n\n...\n\n>>> FooChild.echo_bar_more = echo_bar_more\n\n>>> hasattr(FooChild, 'echo_bar_more')\n\nTrue\n\n</code></pre>\n\n<p>You see where we are going: in Python, classes are objects, and you can create a class on the fly, dynamically.</p>\n\n<p>This is what Python does when you use the keyword <code>class</code>, and it does so by using a metaclass.</p>\n\n<h1>What are metaclasses (finally)</h1>\n\n<p>Metaclasses are the 'stuff' that creates classes.</p>\n\n<p>You define classes in order to create objects, right?</p>\n\n<p>But we learned that Python classes are objects.</p>\n\n<p>Well, metaclasses are what create these objects. They are the classes' classes,\n\nyou can picture them this way:</p>\n\n<pre><code>MyClass = MetaClass()\n\nmy_object = MyClass()\n\n</code></pre>\n\n<p>You've seen that <code>type</code> lets you do something like this:</p>\n\n<pre><code>MyClass = type('MyClass', (), {})\n\n</code></pre>\n\n<p>It's because the function <code>type</code> is in fact a metaclass. <code>type</code> is the\n\nmetaclass Python uses to create all classes behind the scenes.</p>\n\n<p>Now you wonder why the heck is it written in lowercase, and not <code>Type</code>?</p>\n\n<p>Well, I guess it's a matter of consistency with <code>str</code>, the class that creates\n\nstrings objects, and <code>int</code> the class that creates integer objects. <code>type</code> is\n\njust the class that creates class objects.</p>\n\n<p>You see that by checking the <code>__class__</code> attribute.</p>\n\n<p>Everything, and I mean everything, is an object in Python. That includes ints,\n\nstrings, functions and classes. All of them are objects. And all of them have\n\nbeen created from a class:</p>\n\n<pre><code>>>> age = 35\n\n>>> age.__class__\n\n<type 'int'>\n\n>>> name = 'bob'\n\n>>> name.__class__\n\n<type 'str'>\n\n>>> def foo(): pass\n\n>>> foo.__class__\n\n<type 'function'>\n\n>>> class Bar(object): pass\n\n>>> b = Bar()\n\n>>> b.__class__\n\n<class '__main__.Bar'>\n\n</code></pre>\n\n<p>Now, what is the <code>__class__</code> of any <code>__class__</code> ?</p>\n\n<pre><code>>>> age.__class__.__class__\n\n<type 'type'>\n\n>>> name.__class__.__class__\n\n<type 'type'>\n\n>>> foo.__class__.__class__\n\n<type 'type'>\n\n>>> b.__class__.__class__\n\n<type 'type'>\n\n</code></pre>\n\n<p>So, a metaclass is just the stuff that creates class objects.</p>\n\n<p>You can call it a 'class factory' if you wish.</p>\n\n<p><code>type</code> is the built-in metaclass Python uses, but of course, you can create your\n\nown metaclass.</p>\n\n<h1>The <a href="http://docs.python.org/2/reference/datamodel.html?highlight=__metaclass__#__metaclass__" rel="noreferrer"><code>__metaclass__</code></a> attribute</h1>\n\n<p>In Python 2, you can add a <code>__metaclass__</code> attribute when you write a class (see next section for the Python 3 syntax):</p>\n\n<pre><code>class Foo(object):\n\n __metaclass__ = something...\n\n [...]\n\n</code></pre>\n\n<p>If you do so, Python will use the metaclass to create the class <code>Foo</code>.</p>\n\n<p>Careful, it's tricky.</p>\n\n<p>You write <code>class Foo(object)</code> first, but the class object <code>Foo</code> is not created\n\nin memory yet.</p>\n\n<p>Python will look for <code>__metaclass__</code> in the class definition. If it finds it,\n\nit will use it to create the object class <code>Foo</code>. If it doesn't, it will use\n\n<code>type</code> to create the class.</p>\n\n<p>Read that several times.</p>\n\n<p>When you do:</p>\n\n<pre><code>class Foo(Bar):\n\n pass\n\n</code></pre>\n\n<p>Python does the following:</p>\n\n<p>Is there a <code>__metaclass__</code> attribute in <code>Foo</code>?</p>\n\n<p>If yes, create in memory a class object (I said a class object, stay with me here), with the name <code>Foo</code> by using what is in <code>__metaclass__</code>.</p>\n\n<p>If Python can't find <code>__metaclass__</code>, it will look for a <code>__metaclass__</code> at the MODULE level, and try to do the same (but only for classes that don't inherit anything, basically old-style classes).</p>\n\n<p>Then if it can't find any <code>__metaclass__</code> at all, it will use the <code>Bar</code>'s (the first parent) own metaclass (which might be the default <code>type</code>) to create the class object.</p>\n\n<p>Be careful here that the <code>__metaclass__</code> attribute will not be inherited, the metaclass of the parent (<code>Bar.__class__</code>) will be. If <code>Bar</code> used a <code>__metaclass__</code> attribute that created <code>Bar</code> with <code>type()</code> (and not <code>type.__new__()</code>), the subclasses will not inherit that behavior.</p>\n\n<p>Now the big question is, what can you put in <code>__metaclass__</code> ?</p>\n\n<p>The answer is: something that can create a class.</p>\n\n<p>And what can create a class? <code>type</code>, or anything that subclasses or uses it.</p>\n\n<h1>Metaclasses in Python 3</h1>\n\n<p>The syntax to set the metaclass has been changed in Python 3:</p>\n\n<pre><code>class Foo(object, metaclass=something):\n\n ...\n\n</code></pre>\n\n<p>i.e. the <code>__metaclass__</code> attribute is no longer used, in favor of a keyword argument in the list of base classes.</p>\n\n<p>The behaviour of metaclasses however stays <a href="https://www.python.org/dev/peps/pep-3115/" rel="noreferrer">largely the same</a>.</p>\n\n<p>One thing added to metaclasses in python 3 is that you can also pass attributes as keyword-arguments into a metaclass, like so:</p>\n\n<pre><code>class Foo(object, metaclass=something, kwarg1=value1, kwarg2=value2):\n\n ...\n\n</code></pre>\n\n<p>Read the section below for how python handles this.</p>\n\n<h1>Custom metaclasses</h1>\n\n<p>The main purpose of a metaclass is to change the class automatically,\n\nwhen it's created.</p>\n\n<p>You usually do this for APIs, where you want to create classes matching the\n\ncurrent context.</p>\n\n<p>Imagine a stupid example, where you decide that all classes in your module\n\nshould have their attributes written in uppercase. There are several ways to\n\ndo this, but one way is to set <code>__metaclass__</code> at the module level.</p>\n\n<p>This way, all classes of this module will be created using this metaclass,\n\nand we just have to tell the metaclass to turn all attributes to uppercase.</p>\n\n<p>Luckily, <code>__metaclass__</code> can actually be any callable, it doesn't need to be a\n\nformal class (I know, something with 'class' in its name doesn't need to be\n\na class, go figure... but it's helpful).</p>\n\n<p>So we will start with a simple example, by using a function.</p>\n\n<pre><code># the metaclass will automatically get passed the same argument\n\n# that you usually pass to `type`\n\ndef upper_attr(future_class_name, future_class_parents, future_class_attrs):\n\n """\n\n Return a class object, with the list of its attribute turned\n\n into uppercase.\n\n """\n\n # pick up any attribute that doesn't start with '__' and uppercase it\n\n uppercase_attrs = {\n\n attr if attr.startswith("__") else attr.upper(): v\n\n for attr, v in future_class_attrs.items()\n\n }\n\n # let `type` do the class creation\n\n return type(future_class_name, future_class_parents, uppercase_attrs)\n\n__metaclass__ = upper_attr # this will affect all classes in the module\n\nclass Foo(): # global __metaclass__ won't work with "object" though\n\n # but we can define __metaclass__ here instead to affect only this class\n\n # and this will work with "object" children\n\n bar = 'bip'\n\n</code></pre>\n\n<p>Let's check:</p>\n\n<pre><code>>>> hasattr(Foo, 'bar')\n\nFalse\n\n>>> hasattr(Foo, 'BAR')\n\nTrue\n\n>>> Foo.BAR\n\n'bip'\n\n</code></pre>\n\n<p>Now, let's do exactly the same, but using a real class for a metaclass:</p>\n\n<pre><code># remember that `type` is actually a class like `str` and `int`\n\n# so you can inherit from it\n\nclass UpperAttrMetaclass(type):\n\n # __new__ is the method called before __init__\n\n # it's the method that creates the object and returns it\n\n # while __init__ just initializes the object passed as parameter\n\n # you rarely use __new__, except when you want to control how the object\n\n # is created.\n\n # here the created object is the class, and we want to customize it\n\n # so we override __new__\n\n # you can do some stuff in __init__ too if you wish\n\n # some advanced use involves overriding __call__ as well, but we won't\n\n # see this\n\n def __new__(upperattr_metaclass, future_class_name,\n\n future_class_parents, future_class_attrs):\n\n uppercase_attrs = {\n\n attr if attr.startswith("__") else attr.upper(): v\n\n for attr, v in future_class_attrs.items()\n\n }\n\n return type(future_class_name, future_class_parents, uppercase_attrs)\n\n</code></pre>\n\n<p>Let's rewrite the above, but with shorter and more realistic variable names now that we know what they mean:</p>\n\n<pre><code>class UpperAttrMetaclass(type):\n\n def __new__(cls, clsname, bases, attrs):\n\n uppercase_attrs = {\n\n attr if attr.startswith("__") else attr.upper(): v\n\n for attr, v in attrs.items()\n\n }\n\n return type(clsname, bases, uppercase_attrs)\n\n</code></pre>\n\n<p>You may have noticed the extra argument <code>cls</code>. There is\n\nnothing special about it: <code>__new__</code> always receives the class it's defined in, as first parameter. Just like you have <code>self</code> for ordinary methods which receive the instance as first parameter, or the defining class for class methods.</p>\n\n<p>But this is not proper OOP. We are calling <code>type</code> directly and we aren't overriding or calling the parent's <code>__new__</code>. Let's do that instead:</p>\n\n<pre><code>class UpperAttrMetaclass(type):\n\n def __new__(cls, clsname, bases, attrs):\n\n uppercase_attrs = {\n\n attr if attr.startswith("__") else attr.upper(): v\n\n for attr, v in attrs.items()\n\n }\n\n return type.__new__(cls, clsname, bases, uppercase_attrs)\n\n</code></pre>\n\n<p>We can make it even cleaner by using <code>super</code>, which will ease inheritance (because yes, you can have metaclasses, inheriting from metaclasses, inheriting from type):</p>\n\n<pre><code>class UpperAttrMetaclass(type):\n\n def __new__(cls, clsname, bases, attrs):\n\n uppercase_attrs = {\n\n attr if attr.startswith("__") else attr.upper(): v\n\n for attr, v in attrs.items()\n\n }\n\n return super(UpperAttrMetaclass, cls).__new__(\n\n cls, clsname, bases, uppercase_attrs)\n\n</code></pre>\n\n<p>Oh, and in python 3 if you do this call with keyword arguments, like this:</p>\n\n<pre><code>class Foo(object, metaclass=MyMetaclass, kwarg1=value1):\n\n ...\n\n</code></pre>\n\n<p>It translates to this in the metaclass to use it:</p>\n\n<pre><code>class MyMetaclass(type):\n\n def __new__(cls, clsname, bases, dct, kwargs1=default):\n\n ...\n\n</code></pre>\n\n<p>That's it. There is really nothing more about metaclasses.</p>\n\n<p>The reason behind the complexity of the code using metaclasses is not because\n\nof metaclasses, it's because you usually use metaclasses to do twisted stuff\n\nrelying on introspection, manipulating inheritance, vars such as <code>__dict__</code>, etc.</p>\n\n<p>Indeed, metaclasses are especially useful to do black magic, and therefore\n\ncomplicated stuff. But by themselves, they are simple:</p>\n\n<ul>\n\n<li>intercept a class creation</li>\n\n<li>modify the class</li>\n\n<li>return the modified class</li>\n\n</ul>\n\n<h1>Why would you use metaclasses classes instead of functions?</h1>\n\n<p>Since <code>__metaclass__</code> can accept any callable, why would you use a class\n\nsince it's obviously more complicated?</p>\n\n<p>There are several reasons to do so:</p>\n\n<ul>\n\n<li>The intention is clear. When you read <code>UpperAttrMetaclass(type)</code>, you know\n\nwhat's going to follow</li>\n\n<li>You can use OOP. Metaclass can inherit from metaclass, override parent methods. Metaclasses can even use metaclasses.</li>\n\n<li>Subclasses of a class will be instances of its metaclass if you specified a metaclass-class, but not with a metaclass-function.</li>\n\n<li>You can structure your code better. You never use metaclasses for something as\n\ntrivial as the above example. It's usually for something complicated. Having the\n\nability to make several methods and group them in one class is very useful\n\nto make the code easier to read.</li>\n\n<li>You can hook on <code>__new__</code>, <code>__init__</code> and <code>__call__</code>. Which will allow\n\nyou to do different stuff. Even if usually you can do it all in <code>__new__</code>,\n\nsome people are just more comfortable using <code>__init__</code>.</li>\n\n<li>These are called metaclasses, damn it! It must mean something!</li>\n\n</ul>\n\n<h1>Why would you use metaclasses?</h1>\n\n<p>Now the big question. Why would you use some obscure error prone feature?</p>\n\n<p>Well, usually you don't:</p>\n\n<blockquote>\n\n <p>Metaclasses are deeper magic that\n\n 99% of users should never worry about.\n\n If you wonder whether you need them,\n\n you don't (the people who actually\n\n need them know with certainty that\n\n they need them, and don't need an\n\n explanation about why).</p>\n\n</blockquote>\n\n<p><em>Python Guru Tim Peters</em></p>\n\n<p>The main use case for a metaclass is creating an API. A typical example of this is the Django ORM. It allows you to define something like this:</p>\n\n<pre><code>class Person(models.Model):\n\n name = models.CharField(max_length=30)\n\n age = models.IntegerField()\n\n</code></pre>\n\n<p>But if you do this:</p>\n\n<pre><code>person = Person(name='bob', age='35')\n\nprint(person.age)\n\n</code></pre>\n\n<p>It won't return an <code>IntegerField</code> object. It will return an <code>int</code>, and can even take it directly from the database.</p>\n\n<p>This is possible because <code>models.Model</code> defines <code>__metaclass__</code> and\n\nit uses some magic that will turn the <code>Person</code> you just defined with simple statements\n\ninto a complex hook to a database field.</p>\n\n<p>Django makes something complex look simple by exposing a simple API\n\nand using metaclasses, recreating code from this API to do the real job\n\nbehind the scenes.</p>\n\n<h1>The last word</h1>\n\n<p>First, you know that classes are objects that can create instances.</p>\n\n<p>Well in fact, classes are themselves instances. Of metaclasses.</p>\n\n<pre><code>>>> class Foo(object): pass\n\n>>> id(Foo)\n\n142630324\n\n</code></pre>\n\n<p>Everything is an object in Python, and they are all either instances of classes\n\nor instances of metaclasses.</p>\n\n<p>Except for <code>type</code>.</p>\n\n<p><code>type</code> is actually its own metaclass. This is not something you could\n\nreproduce in pure Python, and is done by cheating a little bit at the implementation\n\nlevel.</p>\n\n<p>Secondly, metaclasses are complicated. You may not want to use them for\n\nvery simple class alterations. You can change classes by using two different techniques:</p>\n\n<ul>\n\n<li><a href="http://en.wikipedia.org/wiki/Monkey_patch" rel="noreferrer">monkey patching</a></li>\n\n<li>class decorators</li>\n\n</ul>\n\n<p>99% of the time you need class alteration, you are better off using these.</p>\n\n<p>But 98% of the time, you don't need class alteration at all.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	103
What does if __name__ == "__main__": do?	<p>Whenever the Python interpreter reads a source file, it does two things:</p>\n\n<ul>\n\n<li><p>it sets a few special variables like <code>__name__</code>, and then</p>\n\n</li>\n\n<li><p>it executes all of the code found in the file.</p>\n\n</li>\n\n</ul>\n\n<p>Let's see how this works and how it relates to your question about the <code>__name__</code> checks we always see in Python scripts.</p>\n\n<h1>Code Sample</h1>\n\n<p>Let's use a slightly different code sample to explore how imports and scripts work. Suppose the following is in a file called <code>foo.py</code>.</p>\n\n<pre><code># Suppose this is foo.py.\n\nprint("before import")\n\nimport math\n\nprint("before functionA")\n\ndef functionA():\n\n print("Function A")\n\nprint("before functionB")\n\ndef functionB():\n\n print("Function B {}".format(math.sqrt(100)))\n\nprint("before __name__ guard")\n\nif __name__ == '__main__':\n\n functionA()\n\n functionB()\n\nprint("after __name__ guard")\n\n</code></pre>\n\n<h1>Special Variables</h1>\n\n<p>When the Python interpeter reads a source file, it first defines a few special variables. In this case, we care about the <code>__name__</code> variable.</p>\n\n<p><strong>When Your Module Is the Main Program</strong></p>\n\n<p>If you are running your module (the source file) as the main program, e.g.</p>\n\n<pre><code>python foo.py\n\n</code></pre>\n\n<p>the interpreter will assign the hard-coded string <code>"__main__"</code> to the <code>__name__</code> variable, i.e.</p>\n\n<pre><code># It's as if the interpreter inserts this at the top\n\n# of your module when run as the main program.\n\n__name__ = "__main__" \n\n</code></pre>\n\n<p><strong>When Your Module Is Imported By Another</strong></p>\n\n<p>On the other hand, suppose some other module is the main program and it imports your module. This means there's a statement like this in the main program, or in some other module the main program imports:</p>\n\n<pre><code># Suppose this is in some other main program.\n\nimport foo\n\n</code></pre>\n\n<p>The interpreter will search for your <code>foo.py</code> file (along with searching for a few other variants), and prior to executing that module, it will assign the name <code>"foo"</code> from the import statement to the <code>__name__</code> variable, i.e.</p>\n\n<pre><code># It's as if the interpreter inserts this at the top\n\n# of your module when it's imported from another module.\n\n__name__ = "foo"\n\n</code></pre>\n\n<h1>Executing the Module's Code</h1>\n\n<p>After the special variables are set up, the interpreter executes all the code in the module, one statement at a time. You may want to open another window on the side with the code sample so you can follow along with this explanation.</p>\n\n<p><strong>Always</strong></p>\n\n<ol>\n\n<li><p>It prints the string <code>"before import"</code> (without quotes).</p>\n\n</li>\n\n<li><p>It loads the <code>math</code> module and assigns it to a variable called <code>math</code>. This is equivalent to replacing <code>import math</code> with the following (note that <code>__import__</code> is a low-level function in Python that takes a string and triggers the actual import):</p>\n\n</li>\n\n</ol>\n\n<pre><code># Find and load a module given its string name, "math",\n\n# then assign it to a local variable called math.\n\nmath = __import__("math")\n\n</code></pre>\n\n<ol start="3">\n\n<li><p>It prints the string <code>"before functionA"</code>.</p>\n\n</li>\n\n<li><p>It executes the <code>def</code> block, creating a function object, then assigning that function object to a variable called <code>functionA</code>.</p>\n\n</li>\n\n<li><p>It prints the string <code>"before functionB"</code>.</p>\n\n</li>\n\n<li><p>It executes the second <code>def</code> block, creating another function object, then assigning it to a variable called <code>functionB</code>.</p>\n\n</li>\n\n<li><p>It prints the string <code>"before __name__ guard"</code>.</p>\n\n</li>\n\n</ol>\n\n<p><strong>Only When Your Module Is the Main Program</strong></p>\n\n<ol start="8">\n\n<li>If your module is the main program, then it will see that <code>__name__</code> was indeed set to <code>"__main__"</code> and it calls the two functions, printing the strings <code>"Function A"</code> and <code>"Function B 10.0"</code>.</li>\n\n</ol>\n\n<p><strong>Only When Your Module Is Imported by Another</strong></p>\n\n<ol start="8">\n\n<li>(<strong>instead</strong>) If your module is not the main program but was imported by another one, then <code>__name__</code> will be <code>"foo"</code>, not <code>"__main__"</code>, and it'll skip the body of the <code>if</code> statement.</li>\n\n</ol>\n\n<p><strong>Always</strong></p>\n\n<ol start="9">\n\n<li>It will print the string <code>"after __name__ guard"</code> in both situations.</li>\n\n</ol>\n\n<p><em><strong>Summary</strong></em></p>\n\n<p>In summary, here's what'd be printed in the two cases:</p>\n\n<pre class="lang-none prettyprint-override"><code># What gets printed if foo is the main program\n\nbefore import\n\nbefore functionA\n\nbefore functionB\n\nbefore __name__ guard\n\nFunction A\n\nFunction B 10.0\n\nafter __name__ guard\n\n</code></pre>\n\n<pre class="lang-none prettyprint-override"><code># What gets printed if foo is imported as a regular module\n\nbefore import\n\nbefore functionA\n\nbefore functionB\n\nbefore __name__ guard\n\nafter __name__ guard\n\n</code></pre>\n\n<h1>Why Does It Work This Way?</h1>\n\n<p>You might naturally wonder why anybody would want this. Well, sometimes you want to write a <code>.py</code> file that can be both used by other programs and/or modules as a module, and can also be run as the main program itself. Examples:</p>\n\n<ul>\n\n<li><p>Your module is a library, but you want to have a script mode where it runs some unit tests or a demo.</p>\n\n</li>\n\n<li><p>Your module is only used as a main program, but it has some unit tests, and the testing framework works by importing <code>.py</code> files like your script and running special test functions. You don't want it to try running the script just because it's importing the module.</p>\n\n</li>\n\n<li><p>Your module is mostly used as a main program, but it also provides a programmer-friendly API for advanced users.</p>\n\n</li>\n\n</ul>\n\n<p>Beyond those examples, it's elegant that running a script in Python is just setting up a few magic variables and importing the script. "Running" the script is a side effect of importing the script's module.</p>\n\n<h1>Food for Thought</h1>\n\n<ul>\n\n<li><p>Question: Can I have multiple <code>__name__</code> checking blocks? Answer: it's strange to do so, but the language won't stop you.</p>\n\n</li>\n\n<li><p>Suppose the following is in <code>foo2.py</code>. What happens if you say <code>python foo2.py</code> on the command-line? Why?</p>\n\n</li>\n\n</ul>\n\n<pre class="lang-py prettyprint-override"><code># Suppose this is foo2.py.\n\nimport os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters\n\ndef functionA():\n\n print("a1")\n\n from foo2 import functionB\n\n print("a2")\n\n functionB()\n\n print("a3")\n\ndef functionB():\n\n print("b")\n\nprint("t1")\n\nif __name__ == "__main__":\n\n print("m1")\n\n functionA()\n\n print("m2")\n\nprint("t2")\n\n</code></pre>\n\n<ul>\n\n<li>Now, figure out what will happen if you remove the <code>__name__</code> check in <code>foo3.py</code>:</li>\n\n</ul>\n\n<pre class="lang-py prettyprint-override"><code># Suppose this is foo3.py.\n\nimport os, sys; sys.path.insert(0, os.path.dirname(__file__)) # needed for some interpreters\n\ndef functionA():\n\n print("a1")\n\n from foo3 import functionB\n\n print("a2")\n\n functionB()\n\n print("a3")\n\ndef functionB():\n\n print("b")\n\nprint("t1")\n\nprint("m1")\n\nfunctionA()\n\nprint("m2")\n\nprint("t2")\n\n</code></pre>\n\n<ul>\n\n<li>What will this do when used as a script? When imported as a module?</li>\n\n</ul>\n\n<pre class="lang-py prettyprint-override"><code># Suppose this is in foo4.py\n\n__name__ = "__main__"\n\ndef bar():\n\n print("bar")\n\nprint("before __name__ guard")\n\nif __name__ == "__main__":\n\n bar()\n\nprint("after __name__ guard")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	104
Does Python have a string 'contains' substring method?	<p>You can use the <a href="https://docs.python.org/reference/expressions.html#membership-test-details" rel="noreferrer"><code>in</code> operator</a>:</p>\n\n<pre><code>if "blah" not in somestring: \n\n continue\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	105
Accessing the index in 'for' loops?	<p>Using an additional state variable, such as an index variable (which you would normally use in languages such as C or PHP), is considered non-pythonic.</p>\n\n<p>The better option is to use the built-in function <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer" title="enumerate"><code>enumerate()</code></a>, available in both Python 2 and 3:</p>\n\n<pre><code>for idx, val in enumerate(ints):\n\n print(idx, val)\n\n</code></pre>\n\n<p>Check out <a href="https://www.python.org/dev/peps/pep-0279/" rel="noreferrer" title="PEP 279">PEP 279</a> for more.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	106
How do I merge two dictionaries in a single expression in Python?	<blockquote>\n\n<h2>How can I merge two Python dictionaries in a single expression?</h2>\n\n</blockquote>\n\n<p>For dictionaries <code>x</code> and <code>y</code>, <code>z</code> becomes a shallowly merged dictionary with values from <code>y</code> replacing those from <code>x</code>.</p>\n\n<ul>\n\n<li><p>In Python 3.5 or greater:</p>\n\n<pre><code> z = {**x, **y}\n\n</code></pre>\n\n</li>\n\n<li><p>In Python 2, (or 3.4 or lower) write a function:</p>\n\n<pre><code> def merge_two_dicts(x, y):\n\n z = x.copy() # start with x's keys and values\n\n z.update(y) # modifies z with y's keys and values & returns None\n\n return z\n\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code> z = merge_two_dicts(x, y)\n\n</code></pre>\n\n</li>\n\n<li><p>In Python 3.9.0a4 or greater (final release date approx October 2020): <a href="https://www.python.org/dev/peps/pep-0584/" rel="noreferrer">PEP-584</a>, <a href="https://bugs.python.org/issue36144" rel="noreferrer">discussed here</a>, was implemented to further simplify this:</p>\n\n<pre><code> z = x | y # NOTE: 3.9+ ONLY\n\n</code></pre>\n\n</li>\n\n</ul>\n\n<h3>Explanation</h3>\n\n<p>Say you have two dictionaries and you want to merge them into a new dict without altering the original dictionaries:</p>\n\n<pre><code>x = {'a': 1, 'b': 2}\n\ny = {'b': 3, 'c': 4}\n\n</code></pre>\n\n<p>The desired result is to get a new dictionary (<code>z</code>) with the values merged, and the second dictionary's values overwriting those from the first.</p>\n\n<pre><code>>>> z\n\n{'a': 1, 'b': 3, 'c': 4}\n\n</code></pre>\n\n<p>A new syntax for this, proposed in <a href="https://www.python.org/dev/peps/pep-0448" rel="noreferrer">PEP 448</a> and <a href="https://mail.python.org/pipermail/python-dev/2015-February/138564.html" rel="noreferrer">available as of Python 3.5</a>, is</p>\n\n<pre><code>z = {**x, **y}\n\n</code></pre>\n\n<p>And it is indeed a single expression.</p>\n\n<p>Note that we can merge in with literal notation as well:</p>\n\n<pre><code>z = {**x, 'foo': 1, 'bar': 2, **y}\n\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code>>>> z\n\n{'a': 1, 'b': 3, 'foo': 1, 'bar': 2, 'c': 4}\n\n</code></pre>\n\n<p>It is now showing as implemented in the <a href="https://www.python.org/dev/peps/pep-0478/#features-for-3-5" rel="noreferrer">release schedule for 3.5, PEP 478</a>, and it has now made its way into <a href="https://docs.python.org/dev/whatsnew/3.5.html#pep-448-additional-unpacking-generalizations" rel="noreferrer">What's New in Python 3.5</a> document.</p>\n\n<p>However, since many organizations are still on Python 2, you may wish to do this in a backwards compatible way. The classically Pythonic way, available in Python 2 and Python 3.0-3.4, is to do this as a two-step process:</p>\n\n<pre><code>z = x.copy()\n\nz.update(y) # which returns None since it mutates z\n\n</code></pre>\n\n<p>In both approaches, <code>y</code> will come second and its values will replace <code>x</code>'s values, thus <code>'b'</code> will point to <code>3</code> in our final result.</p>\n\n<h2>Not yet on Python 3.5, but want a <em>single expression</em></h2>\n\n<p>If you are not yet on Python 3.5, or need to write backward-compatible code, and you want this in a <em>single expression</em>, the most performant while correct approach is to put it in a function:</p>\n\n<pre><code>def merge_two_dicts(x, y):\n\n """Given two dictionaries, merge them into a new dict as a shallow copy."""\n\n z = x.copy()\n\n z.update(y)\n\n return z\n\n</code></pre>\n\n<p>and then you have a single expression:</p>\n\n<pre><code>z = merge_two_dicts(x, y)\n\n</code></pre>\n\n<p>You can also make a function to merge an undefined number of dictionaries, from zero to a very large number:</p>\n\n<pre><code>def merge_dicts(*dict_args):\n\n """\n\n Given any number of dictionaries, shallow copy and merge into a new dict,\n\n precedence goes to key value pairs in latter dictionaries.\n\n """\n\n result = {}\n\n for dictionary in dict_args:\n\n result.update(dictionary)\n\n return result\n\n</code></pre>\n\n<p>This function will work in Python 2 and 3 for all dictionaries. e.g. given dictionaries <code>a</code> to <code>g</code>:</p>\n\n<pre><code>z = merge_dicts(a, b, c, d, e, f, g) \n\n</code></pre>\n\n<p>and key value pairs in <code>g</code> will take precedence over dictionaries <code>a</code> to <code>f</code>, and so on.</p>\n\n<h2>Critiques of Other Answers</h2>\n\n<p>Don't use what you see in the formerly accepted answer:</p>\n\n<pre><code>z = dict(x.items() + y.items())\n\n</code></pre>\n\n<p>In Python 2, you create two lists in memory for each dict, create a third list in memory with length equal to the length of the first two put together, and then discard all three lists to create the dict. <strong>In Python 3, this will fail</strong> because you're adding two <code>dict_items</code> objects together, not two lists -</p>\n\n<pre><code>>>> c = dict(a.items() + b.items())\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: unsupported operand type(s) for +: 'dict_items' and 'dict_items'\n\n</code></pre>\n\n<p>and you would have to explicitly create them as lists, e.g. <code>z = dict(list(x.items()) + list(y.items()))</code>. This is a waste of resources and computation power.</p>\n\n<p>Similarly, taking the union of <code>items()</code> in Python 3 (<code>viewitems()</code> in Python 2.7) will also fail when values are unhashable objects (like lists, for example). Even if your values are hashable, <strong>since sets are semantically unordered, the behavior is undefined in regards to precedence. So don't do this:</strong></p>\n\n<pre><code>>>> c = dict(a.items() | b.items())\n\n</code></pre>\n\n<p>This example demonstrates what happens when values are unhashable:</p>\n\n<pre><code>>>> x = {'a': []}\n\n>>> y = {'b': []}\n\n>>> dict(x.items() | y.items())\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: unhashable type: 'list'\n\n</code></pre>\n\n<p>Here's an example where y should have precedence, but instead the value from x is retained due to the arbitrary order of sets:</p>\n\n<pre><code>>>> x = {'a': 2}\n\n>>> y = {'a': 1}\n\n>>> dict(x.items() | y.items())\n\n{'a': 2}\n\n</code></pre>\n\n<p>Another hack you should not use:</p>\n\n<pre><code>z = dict(x, **y)\n\n</code></pre>\n\n<p>This uses the <code>dict</code> constructor, and is very fast and memory efficient (even slightly more-so than our two-step process) but unless you know precisely what is happening here (that is, the second dict is being passed as keyword arguments to the dict constructor), it's difficult to read, it's not the intended usage, and so it is not Pythonic.</p>\n\n<p>Here's an example of the usage being <a href="https://code.djangoproject.com/attachment/ticket/13357/django-pypy.2.diff" rel="noreferrer">remediated in django</a>.</p>\n\n<p>Dictionaries are intended to take hashable keys (e.g. frozensets or tuples), but <strong>this method fails in Python 3 when keys are not strings.</strong></p>\n\n<pre><code>>>> c = dict(a, **b)\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: keyword arguments must be strings\n\n</code></pre>\n\n<p>From the <a href="https://mail.python.org/pipermail/python-dev/2010-April/099459.html" rel="noreferrer">mailing list</a>, Guido van Rossum, the creator of the language, wrote:</p>\n\n<blockquote>\n\n<p>I am fine with\n\ndeclaring dict({}, **{1:3}) illegal, since after all it is abuse of\n\nthe ** mechanism.</p>\n\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n\n<p>Apparently dict(x, **y) is going around as "cool hack" for "call\n\nx.update(y) and return x". Personally I find it more despicable than\n\ncool.</p>\n\n</blockquote>\n\n<p>It is my understanding (as well as the understanding of the <a href="https://mail.python.org/pipermail/python-dev/2010-April/099485.html" rel="noreferrer">creator of the language</a>) that the intended usage for <code>dict(**y)</code> is for creating dictionaries for readability purposes, e.g.:</p>\n\n<pre><code>dict(a=1, b=10, c=11)\n\n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>{'a': 1, 'b': 10, 'c': 11}\n\n</code></pre>\n\n<h2>Response to comments</h2>\n\n<blockquote>\n\n<p>Despite what Guido says, <code>dict(x, **y)</code> is in line with the dict specification, which btw. works for both Python 2 and 3. The fact that this only works for string keys is a direct consequence of how keyword parameters work and not a short-comming of dict. Nor is using the ** operator in this place an abuse of the mechanism, in fact ** was designed precisely to pass dictionaries as keywords.</p>\n\n</blockquote>\n\n<p>Again, it doesn't work for 3 when keys are non-strings. The implicit calling contract is that namespaces take ordinary dictionaries, while users must only pass keyword arguments that are strings. All other callables enforced it. <code>dict</code> broke this consistency in Python 2:</p>\n\n<pre><code>>>> foo(**{('a', 'b'): None})\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: foo() keywords must be strings\n\n>>> dict(**{('a', 'b'): None})\n\n{('a', 'b'): None}\n\n</code></pre>\n\n<p>This inconsistency was bad given other implementations of Python (Pypy, Jython, IronPython). Thus it was fixed in Python 3, as this usage could be a breaking change.</p>\n\n<p>I submit to you that it is malicious incompetence to intentionally write code that only works in one version of a language or that only works given certain arbitrary constraints.</p>\n\n<p>More comments:</p>\n\n<blockquote>\n\n<p><code>dict(x.items() + y.items())</code> is still the most readable solution for Python 2. Readability counts.</p>\n\n</blockquote>\n\n<p>My response: <code>merge_two_dicts(x, y)</code> actually seems much clearer to me, if we're actually concerned about readability. And it is not forward compatible, as Python 2 is increasingly deprecated.</p>\n\n<blockquote>\n\n<p><code>{**x, **y}</code> does not seem to handle nested dictionaries. the contents of nested keys are simply overwritten, not merged [...] I ended up being burnt by these answers that do not merge recursively and I was surprised no one mentioned it. In my interpretation of the word "merging" these answers describe "updating one dict with another", and not merging.</p>\n\n</blockquote>\n\n<p>Yes. I must refer you back to the question, which is asking for a <em>shallow</em> merge of <em><strong>two</strong></em> dictionaries, with the first's values being overwritten by the second's - in a single expression.</p>\n\n<p>Assuming two dictionary of dictionaries, one might recursively merge them in a single function, but you should be careful not to modify the dictionaries from either source, and the surest way to avoid that is to make a copy when assigning values. As keys must be hashable and are usually therefore immutable, it is pointless to copy them:</p>\n\n<pre><code>from copy import deepcopy\n\ndef dict_of_dicts_merge(x, y):\n\n z = {}\n\n overlapping_keys = x.keys() & y.keys()\n\n for key in overlapping_keys:\n\n z[key] = dict_of_dicts_merge(x[key], y[key])\n\n for key in x.keys() - overlapping_keys:\n\n z[key] = deepcopy(x[key])\n\n for key in y.keys() - overlapping_keys:\n\n z[key] = deepcopy(y[key])\n\n return z\n\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>>>> x = {'a':{1:{}}, 'b': {2:{}}}\n\n>>> y = {'b':{10:{}}, 'c': {11:{}}}\n\n>>> dict_of_dicts_merge(x, y)\n\n{'b': {2: {}, 10: {}}, 'a': {1: {}}, 'c': {11: {}}}\n\n</code></pre>\n\n<p>Coming up with contingencies for other value types is far beyond the scope of this question, so I will point you at <a href="https://stackoverflow.com/a/24088493/541136">my answer to the canonical question on a "Dictionaries of dictionaries merge"</a>.</p>\n\n<h2>Less Performant But Correct Ad-hocs</h2>\n\n<p>These approaches are less performant, but they will provide correct behavior.\n\nThey will be <em>much less</em> performant than <code>copy</code> and <code>update</code> or the new unpacking because they iterate through each key-value pair at a higher level of abstraction, but they <em>do</em> respect the order of precedence (latter dictionaries have precedence)</p>\n\n<p>You can also chain the dictionaries manually inside a <a href="https://www.python.org/dev/peps/pep-0274/" rel="noreferrer">dict comprehension</a>:</p>\n\n<pre><code>{k: v for d in dicts for k, v in d.items()} # iteritems in Python 2.7\n\n</code></pre>\n\n<p>or in python 2.6 (and perhaps as early as 2.4 when generator expressions were introduced):</p>\n\n<pre><code>dict((k, v) for d in dicts for k, v in d.items())\n\n</code></pre>\n\n<p><code>itertools.chain</code> will chain the iterators over the key-value pairs in the correct order:</p>\n\n<pre><code>import itertools\n\nz = dict(itertools.chain(x.iteritems(), y.iteritems()))\n\n</code></pre>\n\n<h2>Performance Analysis</h2>\n\n<p>I'm only going to do the performance analysis of the usages known to behave correctly.</p>\n\n<pre><code>import timeit\n\n</code></pre>\n\n<p>The following is done on Ubuntu 14.04</p>\n\n<p>In Python 2.7 (system Python):</p>\n\n<pre><code>>>> min(timeit.repeat(lambda: merge_two_dicts(x, y)))\n\n0.5726828575134277\n\n>>> min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\n\n1.163769006729126\n\n>>> min(timeit.repeat(lambda: dict(itertools.chain(x.iteritems(), y.iteritems()))))\n\n1.1614501476287842\n\n>>> min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\n\n2.2345519065856934\n\n</code></pre>\n\n<p>In Python 3.5 (deadsnakes PPA):</p>\n\n<pre><code>>>> min(timeit.repeat(lambda: {**x, **y}))\n\n0.4094954460160807\n\n>>> min(timeit.repeat(lambda: merge_two_dicts(x, y)))\n\n0.7881555100320838\n\n>>> min(timeit.repeat(lambda: {k: v for d in (x, y) for k, v in d.items()} ))\n\n1.4525277839857154\n\n>>> min(timeit.repeat(lambda: dict(itertools.chain(x.items(), y.items()))))\n\n2.3143140770262107\n\n>>> min(timeit.repeat(lambda: dict((k, v) for d in (x, y) for k, v in d.items())))\n\n3.2069112799945287\n\n</code></pre>\n\n<h2>Resources on Dictionaries</h2>\n\n<ul>\n\n<li><a href="https://stackoverflow.com/questions/327311/how-are-pythons-built-in-dictionaries-implemented/44509302#44509302">My explanation of Python's <strong>dictionary implementation</strong>, updated for 3.6.</a></li>\n\n<li><a href="https://stackoverflow.com/questions/1024847/add-new-keys-to-a-dictionary/27208535#27208535">Answer on how to add new keys to a dictionary</a></li>\n\n<li><a href="https://stackoverflow.com/questions/209840/map-two-lists-into-a-dictionary-in-python/33737067#33737067">Mapping two lists into a dictionary</a></li>\n\n<li>The official Python <a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="noreferrer">docs on dictionaries</a></li>\n\n<li><a href="https://www.youtube.com/watch?v=66P5FMkWoVU" rel="noreferrer">The Dictionary Even Mightier</a> - talk by Brandon Rhodes at Pycon 2017</li>\n\n<li><a href="https://www.youtube.com/watch?v=npw4s1QTmPg" rel="noreferrer">Modern Python Dictionaries, A Confluence of Great Ideas</a> - talk by Raymond Hettinger at Pycon 2017</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	107
How do I check if a list is empty?	<pre><code>if not a:\n\n print("List is empty")\n\n</code></pre>\n\n<p>Using the <a href="https://docs.python.org/library/stdtypes.html#truth-value-testing" rel="noreferrer">implicit booleanness</a> of the empty <code>list</code> is quite pythonic.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	108
Iterating over dictionaries using 'for' loops	<p><code>key</code> is just a variable name. </p>\n\n<pre><code>for key in d:\n\n</code></pre>\n\n<p>will simply loop over the keys in the dictionary, rather than the keys and values. To loop over both key and value you can use the following:</p>\n\n<p>For Python 3.x:</p>\n\n<pre><code>for key, value in d.items():\n\n</code></pre>\n\n<p>For Python 2.x:</p>\n\n<pre><code>for key, value in d.iteritems():\n\n</code></pre>\n\n<p>To test for yourself, change the word <code>key</code> to <code>poop</code>.</p>\n\n<p>In Python 3.x, <code>iteritems()</code> was replaced with simply <code>items()</code>, which returns a set-like view backed by the dict, like <code>iteritems()</code> but even better. \n\nThis is also available in 2.7 as <code>viewitems()</code>. </p>\n\n<p>The operation <code>items()</code> will work for both 2 and 3, but in 2 it will return a list of the dictionary's <code>(key, value)</code> pairs, which will not reflect changes to the dict that happen after the <code>items()</code> call. If you want the 2.x behavior in 3.x, you can call <code>list(d.items())</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	109
What is the difference between Python's list methods append and extend?	<p><a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="noreferrer"><code>append</code></a>: Appends object at the end.</p>\n\n<pre><code>x = [1, 2, 3]\n\nx.append([4, 5])\n\nprint (x)\n\n</code></pre>\n\n<p>gives you: <code>[1, 2, 3, [4, 5]]</code></p>\n\n<hr>\n\n<p><a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="noreferrer"><code>extend</code></a>: Extends list by appending elements from the iterable.</p>\n\n<pre><code>x = [1, 2, 3]\n\nx.extend([4, 5])\n\nprint (x)\n\n</code></pre>\n\n<p>gives you: <code>[1, 2, 3, 4, 5]</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	110
How can I safely create a nested directory?	<p>On Python â¥ 3.5, use <a href="https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir" rel="noreferrer"><code>pathlib.Path.mkdir</code></a>:</p>\n\n<pre><code>from pathlib import Path\n\nPath("/my/directory").mkdir(parents=True, exist_ok=True)\n\n</code></pre>\n\n<p>For older versions of Python, I see two answers with good qualities, each with a small flaw, so I will give my take on it:</p>\n\n<p>Try <a href="https://docs.python.org/library/os.path.html#os.path.exists" rel="noreferrer"><code>os.path.exists</code></a>, and consider <a href="https://docs.python.org/library/os.html#os.makedirs" rel="noreferrer"><code>os.makedirs</code></a> for the creation.</p>\n\n<pre><code>import os\n\nif not os.path.exists(directory):\n\n os.makedirs(directory)\n\n</code></pre>\n\n<p>As noted in comments and elsewhere, there's a race condition – if the directory is created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, the <code>os.makedirs</code> will fail with an <code>OSError</code>. Unfortunately, blanket-catching <code>OSError</code> and continuing is not foolproof, as it will ignore a failure to create the directory due to other factors, such as insufficient permissions, full disk, etc.</p>\n\n<p>One option would be to trap the <code>OSError</code> and examine the embedded error code (see <a href="https://stackoverflow.com/questions/273698/is-there-a-cross-platform-way-of-getting-information-from-pythons-oserror">Is there a cross-platform way of getting information from Pythonâs OSError</a>):</p>\n\n<pre><code>import os, errno\n\ntry:\n\n os.makedirs(directory)\n\nexcept OSError as e:\n\n if e.errno != errno.EEXIST:\n\n raise\n\n</code></pre>\n\n<p>Alternatively, there could be a second <code>os.path.exists</code>, but suppose another created the directory after the first check, then removed it before the second one – we could still be fooled. </p>\n\n<p>Depending on the application, the danger of concurrent operations may be more or less than the danger posed by other factors such as file permissions. The developer would have to know more about the particular application being developed and its expected environment before choosing an implementation.</p>\n\n<p>Modern versions of Python improve this code quite a bit, both by exposing <a href="https://docs.python.org/3.3/library/exceptions.html?#FileExistsError" rel="noreferrer"><code>FileExistsError</code></a> (in 3.3+)...</p>\n\n<pre><code>try:\n\n os.makedirs("path/to/directory")\n\nexcept FileExistsError:\n\n # directory already exists\n\n pass\n\n</code></pre>\n\n<p>...and by allowing <a href="https://docs.python.org/3.2/library/os.html#os.makedirs" rel="noreferrer">a keyword argument to <code>os.makedirs</code> called <code>exist_ok</code></a> (in 3.2+).</p>\n\n<pre><code>os.makedirs("path/to/directory", exist_ok=True) # succeeds even if directory exists.\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	111
How do I check whether a file exists without exceptions?	<p>If the reason you're checking is so you can do something like <code>if file_exists: open_it()</code>, it's safer to use a <code>try</code> around the attempt to open it. Checking and then opening risks the file being deleted or moved or something between when you check and when you try to open it.</p>\n\n<p>If you're not planning to open the file immediately, you can use <a href="https://docs.python.org/library/os.path.html#os.path.isfile" rel="noreferrer"><code>os.path.isfile</code></a></p>\n\n<blockquote>\n\n <p>Return <code>True</code> if path is an existing regular file. This follows symbolic links, so both <a href="https://docs.python.org/library/os.path.html#os.path.islink" rel="noreferrer">islink()</a> and <a href="https://docs.python.org/library/os.path.html#os.path.isfile" rel="noreferrer">isfile()</a> can be true for the same path.</p>\n\n</blockquote>\n\n<pre><code>import os.path\n\nos.path.isfile(fname) \n\n</code></pre>\n\n<p>if you need to be sure it's a file.</p>\n\n<p>Starting with Python 3.4, the <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_file" rel="noreferrer"><code>pathlib</code> module</a> offers an object-oriented approach (backported to <code>pathlib2</code> in Python 2.7):</p>\n\n<pre><code>from pathlib import Path\n\nmy_file = Path("/path/to/file")\n\nif my_file.is_file():\n\n # file exists\n\n</code></pre>\n\n<p>To check a directory, do:</p>\n\n<pre><code>if my_file.is_dir():\n\n # directory exists\n\n</code></pre>\n\n<p>To check whether a <code>Path</code> object exists independently of whether is it a file or directory, use <code>exists()</code>:</p>\n\n<pre><code>if my_file.exists():\n\n # path exists\n\n</code></pre>\n\n<p>You can also use <code>resolve(strict=True)</code> in a <code>try</code> block:</p>\n\n<pre><code>try:\n\n my_abs_path = my_file.resolve(strict=True)\n\nexcept FileNotFoundError:\n\n # doesn't exist\n\nelse:\n\n # exists\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	112
How do I sort a dictionary by value?	<h3>Python 3.6+</h3>\n\n<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\n{k: v for k, v in sorted(x.items(), key=lambda item: item[1])}\n\n{0: 0, 2: 1, 1: 2, 4: 3, 3: 4}\n\n</code></pre>\n\n<h3>Older Python</h3>\n\n<p>It is not possible to sort a dictionary, only to get a representation of a dictionary that is sorted. Dictionaries are inherently orderless, but other types, such as lists and tuples, are not. So you need an ordered data type to represent sorted values, which will be a listâprobably a list of tuples.</p>\n\n<p>For instance,</p>\n\n<pre><code>import operator\n\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nsorted_x = sorted(x.items(), key=operator.itemgetter(1))\n\n</code></pre>\n\n<p><code>sorted_x</code> will be a list of tuples sorted by the second element in each tuple. <code>dict(sorted_x) == x</code>.</p>\n\n<p>And for those wishing to sort on keys instead of values:</p>\n\n<pre><code>import operator\n\nx = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nsorted_x = sorted(x.items(), key=operator.itemgetter(0))\n\n</code></pre>\n\n<p>In Python3 since unpacking is not allowed <a href="https://stackoverflow.com/a/15712231/4293057">[1]</a> we can use </p>\n\n<pre><code>x = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n\nsorted_x = sorted(x.items(), key=lambda kv: kv[1])\n\n</code></pre>\n\n<p>If you want the output as a dict, you can use <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>collections.OrderedDict</code></a>:</p>\n\n<pre><code>import collections\n\nsorted_dict = collections.OrderedDict(sorted_x)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	113
How to make a flat list out of list of lists?	<p>Given a list of lists <code>l</code>,</p>\n\n<p><code>flat_list = [item for sublist in l for item in sublist]</code></p>\n\n<p>which means:</p>\n\n<pre><code>flat_list = []\n\nfor sublist in l:\n\n for item in sublist:\n\n flat_list.append(item)\n\n</code></pre>\n\n<p>is faster than the shortcuts posted so far. (<code>l</code> is the list to flatten.)</p>\n\n<p>Here is the corresponding function:</p>\n\n<pre><code>flatten = lambda l: [item for sublist in l for item in sublist]\n\n</code></pre>\n\n<p>As evidence, you can use the <code>timeit</code> module in the standard library:</p>\n\n<pre><code>$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' '[item for sublist in l for item in sublist]'\n\n10000 loops, best of 3: 143 usec per loop\n\n$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'sum(l, [])'\n\n1000 loops, best of 3: 969 usec per loop\n\n$ python -mtimeit -s'l=[[1,2,3],[4,5,6], [7], [8,9]]*99' 'reduce(lambda x,y: x+y,l)'\n\n1000 loops, best of 3: 1.1 msec per loop\n\n</code></pre>\n\n<p>Explanation: the shortcuts based on <code>+</code> (including the implied use in <code>sum</code>) are, of necessity, <code>O(L**2)</code> when there are L sublists -- as the intermediate result list keeps getting longer, at each step a new intermediate result list object gets allocated, and all the items in the previous intermediate result must be copied over (as well as a few new ones added at the end). So, for simplicity and without actual loss of generality, say you have L sublists of I items each: the first I items are copied back and forth L-1 times, the second I items L-2 times, and so on; total number of copies is I times the sum of x for x from 1 to L excluded, i.e., <code>I * (L**2)/2</code>.</p>\n\n<p>The list comprehension just generates one list, once, and copies each item over (from its original place of residence to the result list) also exactly once.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	114
Calling an external command from Python	<p>Look at the <a href="https://docs.python.org/library/subprocess.html" rel="noreferrer">subprocess</a> module in the standard library:</p>\n\n<pre><code>import subprocess\n\nsubprocess.run(["ls", "-l"])\n\n</code></pre>\n\n<p>The advantage of <code>subprocess</code> vs. <code>system</code> is that it is more flexible (you can get the <code>stdout</code>, <code>stderr</code>, the "real" status code, better error handling, etc...).</p>\n\n<p>The <a href="https://docs.python.org/library/os.html#os.system" rel="noreferrer">official documentation</a> recommends the <code>subprocess</code> module over the alternative <code>os.system()</code>:</p>\n\n<blockquote>\n\n <p>The <code>subprocess</code> module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function [<a href="https://docs.python.org/library/os.html#os.system" rel="noreferrer"><code>os.system()</code></a>].</p>\n\n</blockquote>\n\n<p>The <a href="https://docs.python.org/library/subprocess.html#replacing-older-functions-with-the-subprocess-module" rel="noreferrer">Replacing Older Functions with the subprocess Module</a> section in the <code>subprocess</code> documentation may have some helpful recipes.</p>\n\n<p>For versions of Python before 3.5, use <code>call</code>:</p>\n\n<pre><code>import subprocess\n\nsubprocess.call(["ls", "-l"])\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	115
Understanding slice notation	<p>It's pretty simple really:</p>\n\n<pre><code>a[start:stop] # items start through stop-1\n\na[start:] # items start through the rest of the array\n\na[:stop] # items from the beginning through stop-1\n\na[:] # a copy of the whole array\n\n</code></pre>\n\n<p>There is also the <code>step</code> value, which can be used with any of the above:</p>\n\n<pre><code>a[start:stop:step] # start through not past stop, by step\n\n</code></pre>\n\n<p>The key point to remember is that the <code>:stop</code> value represents the first value that is <em>not</em> in the selected slice. So, the difference between <code>stop</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p>\n\n<p>The other feature is that <code>start</code> or <code>stop</code> may be a <em>negative</em> number, which means it counts from the end of the array instead of the beginning. So:</p>\n\n<pre><code>a[-1] # last item in the array\n\na[-2:] # last two items in the array\n\na[:-2] # everything except the last two items\n\n</code></pre>\n\n<p>Similarly, <code>step</code> may be a negative number:</p>\n\n<pre><code>a[::-1] # all items in the array, reversed\n\na[1::-1] # the first two items, reversed\n\na[:-3:-1] # the last two items, reversed\n\na[-3::-1] # everything except the last two items, reversed\n\n</code></pre>\n\n<p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>\n\n<h3>Relation to <code>slice()</code> object</h3>\n\n<p>The slicing operator <code>[]</code> is actually being used in the above code with a <code>slice()</code> object using the <code>:</code> notation (which is only valid within <code>[]</code>), i.e.:</p>\n\n<pre><code>a[start:stop:step]\n\n</code></pre>\n\n<p>is equivalent to:</p>\n\n<pre><code>a[slice(start, stop, step)]\n\n</code></pre>\n\n<p>Slice objects also behave slightly differently depending on the number of arguments, similarly to <code>range()</code>, i.e. both <code>slice(stop)</code> and <code>slice(start, stop[, step])</code> are supported.\n\nTo skip specifying a given argument, one might use <code>None</code>, so that e.g. <code>a[start:]</code> is equivalent to <code>a[slice(start, None)]</code> or <code>a[::-1]</code> is equivalent to <code>a[slice(None, None, -1)]</code>.</p>\n\n<p>While the <code>:</code>-based notation is very helpful for simple slicing, the explicit use of <code>slice()</code> objects simplifies the programmatic generation of slicing.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	116
Finding the index of an item in a list	<pre><code>>>> ["foo", "bar", "baz"].index("bar")\n\n1\n\n</code></pre>\n\n<p>Reference: <a href="https://docs.python.org/tutorial/datastructures.html#more-on-lists" rel="noreferrer">Data Structures > More on Lists</a></p>\n\n<h1>Caveats follow</h1>\n\n<p>Note that while this is perhaps the cleanest way to answer the question <em>as asked</em>, <code>index</code> is a rather weak component of the <code>list</code> API, and I can't remember the last time I used it in anger. It's been pointed out to me in the comments that because this answer is heavily referenced, it should be made more complete. Some caveats about <code>list.index</code> follow. It is probably worth initially taking a look at the documentation for it:</p>\n\n<blockquote>\n\n<pre><code>list.index(x[, start[, end]])\n\n</code></pre>\n\n<p>Return zero-based index in the list of the first item whose value is equal to <em>x</em>. Raises a <a href="https://docs.python.org/library/exceptions.html#ValueError" rel="noreferrer"><code>ValueError</code></a> if there is no such item.</p>\n\n<p>The optional arguments <em>start</em> and <em>end</em> are interpreted as in the <a href="https://docs.python.org/tutorial/introduction.html#lists" rel="noreferrer">slice notation</a> and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.</p>\n\n</blockquote>\n\n<h2>Linear time-complexity in list length</h2>\n\n<p>An <code>index</code> call checks every element of the list in order, until it finds a match. If your list is long, and you don't know roughly where in the list it occurs, this search could become a bottleneck. In that case, you should consider a different data structure. Note that if you know roughly where to find the match, you can give <code>index</code> a hint. For instance, in this snippet, <code>l.index(999_999, 999_990, 1_000_000)</code> is roughly five orders of magnitude faster than straight <code>l.index(999_999)</code>, because the former only has to search 10 entries, while the latter searches a million:</p>\n\n<pre><code>>>> import timeit\n\n>>> timeit.timeit('l.index(999_999)', setup='l = list(range(0, 1_000_000))', number=1000)\n\n9.356267921015387\n\n>>> timeit.timeit('l.index(999_999, 999_990, 1_000_000)', setup='l = list(range(0, 1_000_000))', number=1000)\n\n0.0004404920036904514\n\n</code></pre>\n\n<h2>Only returns the index of the <em>first match</em> to its argument</h2>\n\n<p>A call to <code>index</code> searches through the list in order until it finds a match, and <em>stops there.</em> If you expect to need indices of more matches, you should use a list comprehension, or generator expression.</p>\n\n<pre><code>>>> [1, 1].index(1)\n\n0\n\n>>> [i for i, e in enumerate([1, 2, 1]) if e == 1]\n\n[0, 2]\n\n>>> g = (i for i, e in enumerate([1, 2, 1]) if e == 1)\n\n>>> next(g)\n\n0\n\n>>> next(g)\n\n2\n\n</code></pre>\n\n<p>Most places where I once would have used <code>index</code>, I now use a list comprehension or generator expression because they're more generalizable. So if you're considering reaching for <code>index</code>, take a look at these excellent Python features.</p>\n\n<h2>Throws if element not present in list</h2>\n\n<p>A call to <code>index</code> results in a <a href="https://docs.python.org/library/exceptions.html#ValueError" rel="noreferrer"><code>ValueError</code></a> if the item's not present.</p>\n\n<pre><code>>>> [1, 1].index(2)\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nValueError: 2 is not in list\n\n</code></pre>\n\n<p>If the item might not be present in the list, you should either</p>\n\n<ol>\n\n<li>Check for it first with <code>item in my_list</code> (clean, readable approach), or</li>\n\n<li>Wrap the <code>index</code> call in a <code>try/except</code> block which catches <code>ValueError</code> (probably faster, at least when the list to search is long, and the item is usually present.)</li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	117
How do I list all files of a directory?	<p><strong><a href="https://docs.python.org/2/library/os.html#os.listdir" rel="noreferrer" title="os.listdir"><code>os.listdir()</code></a></strong> will get you everything that's in a directory - <strong>files</strong> and <strong>directories</strong>.</p>\n\n<p>If you want <em>just</em> files, you could either filter this down using <a href="https://docs.python.org/2/library/os.path.html#module-os.path" rel="noreferrer"><strong><code>os.path</code></strong></a>:</p>\n\n<pre><code>from os import listdir\n\nfrom os.path import isfile, join\n\nonlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]\n\n</code></pre>\n\n<p>or you could use <strong><a href="https://docs.python.org/2/library/os.html#os.walk" rel="noreferrer" title="os.walk"><code>os.walk()</code></a></strong> which will <strong>yield two lists</strong> for each directory it visits - splitting into <strong>files</strong> and <strong>dirs</strong> for you. If you only want the top directory you can just break the first time it yields</p>\n\n<pre><code>from os import walk\n\nf = []\n\nfor (dirpath, dirnames, filenames) in walk(mypath):\n\n f.extend(filenames)\n\n break\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	118
Using global variables in a function	<p>You can use a global variable in other functions by declaring it as <code>global</code> in each function that assigns to it:</p>\n\n<pre><code>globvar = 0\n\ndef set_globvar_to_one():\n\n global globvar # Needed to modify global copy of globvar\n\n globvar = 1\n\ndef print_globvar():\n\n print(globvar) # No need for global declaration to read value of globvar\n\nset_globvar_to_one()\n\nprint_globvar() # Prints 1\n\n</code></pre>\n\n<p>I imagine the reason for it is that, since global variables are so dangerous, Python wants to make sure that you really know that's what you're playing with by explicitly requiring the <code>global</code> keyword.</p>\n\n<p>See other answers if you want to share a global variable across modules.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	119
How to make a chain of function decorators?	<p>If you are not into long explanations, see <a href="https://stackoverflow.com/questions/739654/understanding-python-decorators#answer-739665">Paolo Bergantinoâs answer</a>.</p>\n\n<h1>Decorator Basics</h1>\n\n<h2>Pythonâs functions are objects</h2>\n\n<p>To understand decorators, you must first understand that functions are objects in Python. This has important consequences. Letâs see why with a simple example :</p>\n\n<pre><code>def shout(word="yes"):\n\n return word.capitalize()+"!"\n\nprint(shout())\n\n# outputs : 'Yes!'\n\n# As an object, you can assign the function to a variable like any other object \n\nscream = shout\n\n# Notice we don't use parentheses: we are not calling the function,\n\n# we are putting the function "shout" into the variable "scream".\n\n# It means you can then call "shout" from "scream":\n\nprint(scream())\n\n# outputs : 'Yes!'\n\n# More than that, it means you can remove the old name 'shout',\n\n#Â and the function will still be accessible from 'scream'\n\ndel shout\n\ntry:\n\n print(shout())\n\nexcept NameError as e:\n\n print(e)\n\n #outputs: "name 'shout' is not defined"\n\nprint(scream())\n\n# outputs: 'Yes!'\n\n</code></pre>\n\n<p>Keep this in mind. Weâll circle back to it shortly. </p>\n\n<p>Another interesting property of Python functions is they can be defined inside another function!</p>\n\n<pre><code>def talk():\n\n # You can define a function on the fly in "talk" ...\n\n def whisper(word="yes"):\n\n return word.lower()+"..."\n\n # ... and use it right away!\n\n print(whisper())\n\n# You call "talk", that defines "whisper" EVERY TIME you call it, then\n\n# "whisper" is called in "talk". \n\ntalk()\n\n# outputs: \n\n# "yes..."\n\n# But "whisper" DOES NOT EXIST outside "talk":\n\ntry:\n\n print(whisper())\n\nexcept NameError as e:\n\n print(e)\n\n #outputs : "name 'whisper' is not defined"*\n\n #Python's functions are objects\n\n</code></pre>\n\n<h2>Functions references</h2>\n\n<p>Okay, still here? Now the fun part...</p>\n\n<p>Youâve seen that functions are objects. Therefore, functions:</p>\n\n<ul>\n\n<li>can be assigned to a variable</li>\n\n<li>can be defined in another function</li>\n\n</ul>\n\n<p>That means that <strong>a function can <code>return</code> another function</strong>.</p>\n\n<pre><code>def getTalk(kind="shout"):\n\n # We define functions on the fly\n\n def shout(word="yes"):\n\n return word.capitalize()+"!"\n\n def whisper(word="yes") :\n\n return word.lower()+"...";\n\n # Then we return one of them\n\n if kind == "shout":\n\n # We don't use "()", we are not calling the function,\n\n # we are returning the function object\n\n return shout \n\n else:\n\n return whisper\n\n# How do you use this strange beast?\n\n# Get the function and assign it to a variable\n\ntalk = getTalk() \n\n# You can see that "talk" is here a function object:\n\nprint(talk)\n\n#outputs : <function shout at 0xb7ea817c>\n\n# The object is the one returned by the function:\n\nprint(talk())\n\n#outputs : Yes!\n\n# And you can even use it directly if you feel wild:\n\nprint(getTalk("whisper")())\n\n#outputs : yes...\n\n</code></pre>\n\n<p>Thereâs more! </p>\n\n<p>If you can <code>return</code> a function, you can pass one as a parameter:</p>\n\n<pre><code>def doSomethingBefore(func): \n\n print("I do something before then I call the function you gave me")\n\n print(func())\n\ndoSomethingBefore(scream)\n\n#outputs: \n\n#I do something before then I call the function you gave me\n\n#Yes!\n\n</code></pre>\n\n<p>Well, you just have everything needed to understand decorators. You see, decorators are âwrappersâ, which means that <strong>they let you execute code before and after the function they decorate</strong> without modifying the function itself.</p>\n\n<h2>Handcrafted decorators</h2>\n\n<p>How youâd do it manually:</p>\n\n<pre><code># A decorator is a function that expects ANOTHER function as parameter\n\ndef my_shiny_new_decorator(a_function_to_decorate):\n\n # Inside, the decorator defines a function on the fly: the wrapper.\n\n # This function is going to be wrapped around the original function\n\n # so it can execute code before and after it.\n\n def the_wrapper_around_the_original_function():\n\n # Put here the code you want to be executed BEFORE the original function is called\n\n print("Before the function runs")\n\n # Call the function here (using parentheses)\n\n a_function_to_decorate()\n\n # Put here the code you want to be executed AFTER the original function is called\n\n print("After the function runs")\n\n # At this point, "a_function_to_decorate" HAS NEVER BEEN EXECUTED.\n\n # We return the wrapper function we have just created.\n\n # The wrapper contains the function and the code to execute before and after. Itâs ready to use!\n\n return the_wrapper_around_the_original_function\n\n# Now imagine you create a function you don't want to ever touch again.\n\ndef a_stand_alone_function():\n\n print("I am a stand alone function, don't you dare modify me")\n\na_stand_alone_function() \n\n#outputs: I am a stand alone function, don't you dare modify me\n\n# Well, you can decorate it to extend its behavior.\n\n# Just pass it to the decorator, it will wrap it dynamically in \n\n# any code you want and return you a new function ready to be used:\n\na_stand_alone_function_decorated = my_shiny_new_decorator(a_stand_alone_function)\n\na_stand_alone_function_decorated()\n\n#outputs:\n\n#Before the function runs\n\n#I am a stand alone function, don't you dare modify me\n\n#After the function runs\n\n</code></pre>\n\n<p>Now, you probably want that every time you call <code>a_stand_alone_function</code>, <code>a_stand_alone_function_decorated</code> is called instead. Thatâs easy, just overwrite <code>a_stand_alone_function</code> with the function returned by <code>my_shiny_new_decorator</code>:</p>\n\n<pre><code>a_stand_alone_function = my_shiny_new_decorator(a_stand_alone_function)\n\na_stand_alone_function()\n\n#outputs:\n\n#Before the function runs\n\n#I am a stand alone function, don't you dare modify me\n\n#After the function runs\n\n# Thatâs EXACTLY what decorators do!\n\n</code></pre>\n\n<h2>Decorators demystified</h2>\n\n<p>The previous example, using the decorator syntax:</p>\n\n<pre><code>@my_shiny_new_decorator\n\ndef another_stand_alone_function():\n\n print("Leave me alone")\n\nanother_stand_alone_function() \n\n#outputs: \n\n#Before the function runs\n\n#Leave me alone\n\n#After the function runs\n\n</code></pre>\n\n<p>Yes, thatâs all, itâs that simple. <code>@decorator</code> is just a shortcut to:</p>\n\n<pre><code>another_stand_alone_function = my_shiny_new_decorator(another_stand_alone_function)\n\n</code></pre>\n\n<p>Decorators are just a pythonic variant of the <a href="http://en.wikipedia.org/wiki/Decorator_pattern" rel="noreferrer">decorator design pattern</a>. There are several classic design patterns embedded in Python to ease development (like iterators).</p>\n\n<p>Of course, you can accumulate decorators:</p>\n\n<pre><code>def bread(func):\n\n def wrapper():\n\n print("</''''''\>")\n\n func()\n\n print("<\______/>")\n\n return wrapper\n\ndef ingredients(func):\n\n def wrapper():\n\n print("#tomatoes#")\n\n func()\n\n print("~salad~")\n\n return wrapper\n\ndef sandwich(food="--ham--"):\n\n print(food)\n\nsandwich()\n\n#outputs: --ham--\n\nsandwich = bread(ingredients(sandwich))\n\nsandwich()\n\n#outputs:\n\n#</''''''\>\n\n# #tomatoes#\n\n# --ham--\n\n# ~salad~\n\n#<\______/>\n\n</code></pre>\n\n<p>Using the Python decorator syntax:</p>\n\n<pre><code>@bread\n\n@ingredients\n\ndef sandwich(food="--ham--"):\n\n print(food)\n\nsandwich()\n\n#outputs:\n\n#</''''''\>\n\n# #tomatoes#\n\n# --ham--\n\n# ~salad~\n\n#<\______/>\n\n</code></pre>\n\n<p>The order you set the decorators MATTERS:</p>\n\n<pre><code>@ingredients\n\n@bread\n\ndef strange_sandwich(food="--ham--"):\n\n print(food)\n\nstrange_sandwich()\n\n#outputs:\n\n##tomatoes#\n\n#</''''''\>\n\n# --ham--\n\n#<\______/>\n\n# ~salad~\n\n</code></pre>\n\n<hr>\n\n<h1>Now: to answer the question...</h1>\n\n<p>As a conclusion, you can easily see how to answer the question:</p>\n\n<pre><code># The decorator to make it bold\n\ndef makebold(fn):\n\n # The new function the decorator returns\n\n def wrapper():\n\n # Insertion of some code before and after\n\n return "<b>" + fn() + "</b>"\n\n return wrapper\n\n# The decorator to make it italic\n\ndef makeitalic(fn):\n\n # The new function the decorator returns\n\n def wrapper():\n\n # Insertion of some code before and after\n\n return "<i>" + fn() + "</i>"\n\n return wrapper\n\n@makebold\n\n@makeitalic\n\ndef say():\n\n return "hello"\n\nprint(say())\n\n#outputs: <b><i>hello</i></b>\n\n# This is the exact equivalent to \n\ndef say():\n\n return "hello"\n\nsay = makebold(makeitalic(say))\n\nprint(say())\n\n#outputs: <b><i>hello</i></b>\n\n</code></pre>\n\n<p>You can now just leave happy, or burn your brain a little bit more and see advanced uses of decorators.</p>\n\n<hr>\n\n<h1>Taking decorators to the next level</h1>\n\n<h2>Passing arguments to the decorated function</h2>\n\n<pre><code># Itâs not black magic, you just have to let the wrapper \n\n# pass the argument:\n\ndef a_decorator_passing_arguments(function_to_decorate):\n\n def a_wrapper_accepting_arguments(arg1, arg2):\n\n print("I got args! Look: {0}, {1}".format(arg1, arg2))\n\n function_to_decorate(arg1, arg2)\n\n return a_wrapper_accepting_arguments\n\n# Since when you are calling the function returned by the decorator, you are\n\n# calling the wrapper, passing arguments to the wrapper will let it pass them to \n\n# the decorated function\n\n@a_decorator_passing_arguments\n\ndef print_full_name(first_name, last_name):\n\n print("My name is {0} {1}".format(first_name, last_name))\n\nprint_full_name("Peter", "Venkman")\n\n# outputs:\n\n#I got args! Look: Peter Venkman\n\n#My name is Peter Venkman\n\n</code></pre>\n\n<h2>Decorating methods</h2>\n\n<p>One nifty thing about Python is that methods and functions are really the same. The only difference is that methods expect that their first argument is a reference to the current object (<code>self</code>). </p>\n\n<p>That means you can build a decorator for methods the same way! Just remember to take <code>self</code> into consideration:</p>\n\n<pre><code>def method_friendly_decorator(method_to_decorate):\n\n def wrapper(self, lie):\n\n lie = lie - 3 # very friendly, decrease age even more :-)\n\n return method_to_decorate(self, lie)\n\n return wrapper\n\nclass Lucy(object):\n\n def __init__(self):\n\n self.age = 32\n\n @method_friendly_decorator\n\n def sayYourAge(self, lie):\n\n print("I am {0}, what did you think?".format(self.age + lie))\n\nl = Lucy()\n\nl.sayYourAge(-3)\n\n#outputs: I am 26, what did you think?\n\n</code></pre>\n\n<p>If youâre making general-purpose decorator--one youâll apply to any function or method, no matter its arguments--then just use <code>*args, **kwargs</code>:</p>\n\n<pre><code>def a_decorator_passing_arbitrary_arguments(function_to_decorate):\n\n # The wrapper accepts any arguments\n\n def a_wrapper_accepting_arbitrary_arguments(*args, **kwargs):\n\n print("Do I have args?:")\n\n print(args)\n\n print(kwargs)\n\n # Then you unpack the arguments, here *args, **kwargs\n\n # If you are not familiar with unpacking, check:\n\n # http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/\n\n function_to_decorate(*args, **kwargs)\n\n return a_wrapper_accepting_arbitrary_arguments\n\n@a_decorator_passing_arbitrary_arguments\n\ndef function_with_no_argument():\n\n print("Python is cool, no argument here.")\n\nfunction_with_no_argument()\n\n#outputs\n\n#Do I have args?:\n\n#()\n\n#{}\n\n#Python is cool, no argument here.\n\n@a_decorator_passing_arbitrary_arguments\n\ndef function_with_arguments(a, b, c):\n\n print(a, b, c)\n\nfunction_with_arguments(1,2,3)\n\n#outputs\n\n#Do I have args?:\n\n#(1, 2, 3)\n\n#{}\n\n#1 2 3 \n\n@a_decorator_passing_arbitrary_arguments\n\ndef function_with_named_arguments(a, b, c, platypus="Why not ?"):\n\n print("Do {0}, {1} and {2} like platypus? {3}".format(a, b, c, platypus))\n\nfunction_with_named_arguments("Bill", "Linus", "Steve", platypus="Indeed!")\n\n#outputs\n\n#Do I have args ? :\n\n#('Bill', 'Linus', 'Steve')\n\n#{'platypus': 'Indeed!'}\n\n#Do Bill, Linus and Steve like platypus? Indeed!\n\nclass Mary(object):\n\n def __init__(self):\n\n self.age = 31\n\n @a_decorator_passing_arbitrary_arguments\n\n def sayYourAge(self, lie=-3): # You can now add a default value\n\n print("I am {0}, what did you think?".format(self.age + lie))\n\nm = Mary()\n\nm.sayYourAge()\n\n#outputs\n\n# Do I have args?:\n\n#(<__main__.Mary object at 0xb7d303ac>,)\n\n#{}\n\n#I am 28, what did you think?\n\n</code></pre>\n\n<h2>Passing arguments to the decorator</h2>\n\n<p>Great, now what would you say about passing arguments to the decorator itself? </p>\n\n<p>This can get somewhat twisted, since a decorator must accept a function as an argument. Therefore, you cannot pass the decorated functionâs arguments directly to the decorator.</p>\n\n<p>Before rushing to the solution, letâs write a little reminder: </p>\n\n<pre><code># Decorators are ORDINARY functions\n\ndef my_decorator(func):\n\n print("I am an ordinary function")\n\n def wrapper():\n\n print("I am function returned by the decorator")\n\n func()\n\n return wrapper\n\n# Therefore, you can call it without any "@"\n\ndef lazy_function():\n\n print("zzzzzzzz")\n\ndecorated_function = my_decorator(lazy_function)\n\n#outputs: I am an ordinary function\n\n# It outputs "I am an ordinary function", because thatâs just what you do:\n\n# calling a function. Nothing magic.\n\n@my_decorator\n\ndef lazy_function():\n\n print("zzzzzzzz")\n\n#outputs: I am an ordinary function\n\n</code></pre>\n\n<p>Itâs exactly the same. "<code>my_decorator</code>" is called. So when you <code>@my_decorator</code>, you are telling Python to call the function 'labelled by the variable "<code>my_decorator</code>"'. </p>\n\n<p>This is important! The label you give can point directly to the decoratorâ<strong>or not</strong>. </p>\n\n<p>Letâs get evil. âº</p>\n\n<pre><code>def decorator_maker():\n\n print("I make decorators! I am executed only once: "\n\n "when you make me create a decorator.")\n\n def my_decorator(func):\n\n print("I am a decorator! I am executed only when you decorate a function.")\n\n def wrapped():\n\n print("I am the wrapper around the decorated function. "\n\n "I am called when you call the decorated function. "\n\n "As the wrapper, I return the RESULT of the decorated function.")\n\n return func()\n\n print("As the decorator, I return the wrapped function.")\n\n return wrapped\n\n print("As a decorator maker, I return a decorator")\n\n return my_decorator\n\n# Letâs create a decorator. Itâs just a new function after all.\n\nnew_decorator = decorator_maker() \n\n#outputs:\n\n#I make decorators! I am executed only once: when you make me create a decorator.\n\n#As a decorator maker, I return a decorator\n\n# Then we decorate the function\n\ndef decorated_function():\n\n print("I am the decorated function.")\n\ndecorated_function = new_decorator(decorated_function)\n\n#outputs:\n\n#I am a decorator! I am executed only when you decorate a function.\n\n#As the decorator, I return the wrapped function\n\n# Letâs call the function:\n\ndecorated_function()\n\n#outputs:\n\n#I am the wrapper around the decorated function. I am called when you call the decorated function.\n\n#As the wrapper, I return the RESULT of the decorated function.\n\n#I am the decorated function.\n\n</code></pre>\n\n<p>No surprise here. </p>\n\n<p>Letâs do EXACTLY the same thing, but skip all the pesky intermediate variables:</p>\n\n<pre><code>def decorated_function():\n\n print("I am the decorated function.")\n\ndecorated_function = decorator_maker()(decorated_function)\n\n#outputs:\n\n#I make decorators! I am executed only once: when you make me create a decorator.\n\n#As a decorator maker, I return a decorator\n\n#I am a decorator! I am executed only when you decorate a function.\n\n#As the decorator, I return the wrapped function.\n\n# Finally:\n\ndecorated_function() \n\n#outputs:\n\n#I am the wrapper around the decorated function. I am called when you call the decorated function.\n\n#As the wrapper, I return the RESULT of the decorated function.\n\n#I am the decorated function.\n\n</code></pre>\n\n<p>Letâs make it <em>even shorter</em>:</p>\n\n<pre><code>@decorator_maker()\n\ndef decorated_function():\n\n print("I am the decorated function.")\n\n#outputs:\n\n#I make decorators! I am executed only once: when you make me create a decorator.\n\n#As a decorator maker, I return a decorator\n\n#I am a decorator! I am executed only when you decorate a function.\n\n#As the decorator, I return the wrapped function.\n\n#Eventually: \n\ndecorated_function() \n\n#outputs:\n\n#I am the wrapper around the decorated function. I am called when you call the decorated function.\n\n#As the wrapper, I return the RESULT of the decorated function.\n\n#I am the decorated function.\n\n</code></pre>\n\n<p>Hey, did you see that? We used a function call with the "<code>@</code>" syntax! :-)</p>\n\n<p>So, back to decorators with arguments. If we can use functions to generate the decorator on the fly, we can pass arguments to that function, right?</p>\n\n<pre><code>def decorator_maker_with_arguments(decorator_arg1, decorator_arg2):\n\n print("I make decorators! And I accept arguments: {0}, {1}".format(decorator_arg1, decorator_arg2))\n\n def my_decorator(func):\n\n # The ability to pass arguments here is a gift from closures.\n\n # If you are not comfortable with closures, you can assume itâs ok,\n\n # or read: https://stackoverflow.com/questions/13857/can-you-explain-closures-as-they-relate-to-python\n\n print("I am the decorator. Somehow you passed me arguments: {0}, {1}".format(decorator_arg1, decorator_arg2))\n\n # Don't confuse decorator arguments and function arguments!\n\n def wrapped(function_arg1, function_arg2) :\n\n print("I am the wrapper around the decorated function. "\n\n "I can access all the variables "\n\n " - from the decorator: {0} {1} "\n\n " - from the function call: {2} {3} "\n\n "Then I can pass them to the decorated function"\n\n .format(decorator_arg1, decorator_arg2,\n\n function_arg1, function_arg2))\n\n return func(function_arg1, function_arg2)\n\n return wrapped\n\n return my_decorator\n\n@decorator_maker_with_arguments("Leonard", "Sheldon")\n\ndef decorated_function_with_arguments(function_arg1, function_arg2):\n\n print("I am the decorated function and only knows about my arguments: {0}"\n\n " {1}".format(function_arg1, function_arg2))\n\ndecorated_function_with_arguments("Rajesh", "Howard")\n\n#outputs:\n\n#I make decorators! And I accept arguments: Leonard Sheldon\n\n#I am the decorator. Somehow you passed me arguments: Leonard Sheldon\n\n#I am the wrapper around the decorated function. \n\n#I can access all the variables \n\n# - from the decorator: Leonard Sheldon \n\n# - from the function call: Rajesh Howard \n\n#Then I can pass them to the decorated function\n\n#I am the decorated function and only knows about my arguments: Rajesh Howard\n\n</code></pre>\n\n<p>Here it is: a decorator with arguments. Arguments can be set as variable:</p>\n\n<pre><code>c1 = "Penny"\n\nc2 = "Leslie"\n\n@decorator_maker_with_arguments("Leonard", c1)\n\ndef decorated_function_with_arguments(function_arg1, function_arg2):\n\n print("I am the decorated function and only knows about my arguments:"\n\n " {0} {1}".format(function_arg1, function_arg2))\n\ndecorated_function_with_arguments(c2, "Howard")\n\n#outputs:\n\n#I make decorators! And I accept arguments: Leonard Penny\n\n#I am the decorator. Somehow you passed me arguments: Leonard Penny\n\n#I am the wrapper around the decorated function. \n\n#I can access all the variables \n\n# - from the decorator: Leonard Penny \n\n# - from the function call: Leslie Howard \n\n#Then I can pass them to the decorated function\n\n#I am the decorated function and only know about my arguments: Leslie Howard\n\n</code></pre>\n\n<p>As you can see, you can pass arguments to the decorator like any function using this trick. You can even use <code>*args, **kwargs</code> if you wish. But remember decorators are called <strong>only once</strong>. Just when Python imports the script. You can't dynamically set the arguments afterwards. When you do "import x", <strong>the function is already decorated</strong>, so you can't\n\nchange anything.</p>\n\n<hr>\n\n<h1>Letâs practice: decorating a decorator</h1>\n\n<p>Okay, as a bonus, I'll give you a snippet to make any decorator accept generically any argument. After all, in order to accept arguments, we created our decorator using another function. </p>\n\n<p>We wrapped the decorator.</p>\n\n<p>Anything else we saw recently that wrapped function?</p>\n\n<p>Oh yes, decorators!</p>\n\n<p>Letâs have some fun and write a decorator for the decorators:</p>\n\n<pre><code>def decorator_with_args(decorator_to_enhance):\n\n """ \n\n This function is supposed to be used as a decorator.\n\n It must decorate an other function, that is intended to be used as a decorator.\n\n Take a cup of coffee.\n\n It will allow any decorator to accept an arbitrary number of arguments,\n\n saving you the headache to remember how to do that every time.\n\n """\n\n # We use the same trick we did to pass arguments\n\n def decorator_maker(*args, **kwargs):\n\n # We create on the fly a decorator that accepts only a function\n\n # but keeps the passed arguments from the maker.\n\n def decorator_wrapper(func):\n\n # We return the result of the original decorator, which, after all, \n\n # IS JUST AN ORDINARY FUNCTION (which returns a function).\n\n # Only pitfall: the decorator must have this specific signature or it won't work:\n\n return decorator_to_enhance(func, *args, **kwargs)\n\n return decorator_wrapper\n\n return decorator_maker\n\n</code></pre>\n\n<p>It can be used as follows:</p>\n\n<pre><code># You create the function you will use as a decorator. And stick a decorator on it :-)\n\n# Don't forget, the signature is "decorator(func, *args, **kwargs)"\n\n@decorator_with_args \n\ndef decorated_decorator(func, *args, **kwargs): \n\n def wrapper(function_arg1, function_arg2):\n\n print("Decorated with {0} {1}".format(args, kwargs))\n\n return func(function_arg1, function_arg2)\n\n return wrapper\n\n# Then you decorate the functions you wish with your brand new decorated decorator.\n\n@decorated_decorator(42, 404, 1024)\n\ndef decorated_function(function_arg1, function_arg2):\n\n print("Hello {0} {1}".format(function_arg1, function_arg2))\n\ndecorated_function("Universe and", "everything")\n\n#outputs:\n\n#Decorated with (42, 404, 1024) {}\n\n#Hello Universe and everything\n\n# Whoooot!\n\n</code></pre>\n\n<p>I know, the last time you had this feeling, it was after listening a guy saying: "before understanding recursion, you must first understand recursion". But now, don't you feel good about mastering this?</p>\n\n<hr>\n\n<h1>Best practices: decorators</h1>\n\n<ul>\n\n<li>Decorators were introduced in Python 2.4, so be sure your code will be run on >= 2.4. </li>\n\n<li>Decorators slow down the function call. Keep that in mind.</li>\n\n<li><strong>You cannot un-decorate a function.</strong> (There <em>are</em> hacks to create decorators that can be removed, but nobody uses them.) So once a function is decorated, itâs decorated <em>for all the code</em>.</li>\n\n<li>Decorators wrap functions, which can make them hard to debug. (This gets better from Python >= 2.5; see below.)</li>\n\n</ul>\n\n<p>The <code>functools</code> module was introduced in Python 2.5. It includes the function <code>functools.wraps()</code>, which copies the name, module, and docstring of the decorated function to its wrapper. </p>\n\n<p>(Fun fact: <code>functools.wraps()</code> is a decorator! âº)</p>\n\n<pre><code># For debugging, the stacktrace prints you the function __name__\n\ndef foo():\n\n print("foo")\n\nprint(foo.__name__)\n\n#outputs: foo\n\n# With a decorator, it gets messy \n\ndef bar(func):\n\n def wrapper():\n\n print("bar")\n\n return func()\n\n return wrapper\n\n@bar\n\ndef foo():\n\n print("foo")\n\nprint(foo.__name__)\n\n#outputs: wrapper\n\n# "functools" can help for that\n\nimport functools\n\ndef bar(func):\n\n # We say that "wrapper", is wrapping "func"\n\n # and the magic begins\n\n @functools.wraps(func)\n\n def wrapper():\n\n print("bar")\n\n return func()\n\n return wrapper\n\n@bar\n\ndef foo():\n\n print("foo")\n\nprint(foo.__name__)\n\n#outputs: foo\n\n</code></pre>\n\n<hr>\n\n<h1>How can the decorators be useful?</h1>\n\n<p><strong>Now the big question:</strong> What can I use decorators for? </p>\n\n<p>Seem cool and powerful, but a practical example would be great. Well, there are 1000 possibilities. Classic uses are extending a function behavior from an external lib (you can't modify it), or for debugging (you don't want to modify it because itâs temporary). </p>\n\n<p>You can use them to extend several functions in a DRYâs way, like so:</p>\n\n<pre><code>def benchmark(func):\n\n """\n\n A decorator that prints the time a function takes\n\n to execute.\n\n """\n\n import time\n\n def wrapper(*args, **kwargs):\n\n t = time.clock()\n\n res = func(*args, **kwargs)\n\n print("{0} {1}".format(func.__name__, time.clock()-t))\n\n return res\n\n return wrapper\n\ndef logging(func):\n\n """\n\n A decorator that logs the activity of the script.\n\n (it actually just prints it, but it could be logging!)\n\n """\n\n def wrapper(*args, **kwargs):\n\n res = func(*args, **kwargs)\n\n print("{0} {1} {2}".format(func.__name__, args, kwargs))\n\n return res\n\n return wrapper\n\ndef counter(func):\n\n """\n\n A decorator that counts and prints the number of times a function has been executed\n\n """\n\n def wrapper(*args, **kwargs):\n\n wrapper.count = wrapper.count + 1\n\n res = func(*args, **kwargs)\n\n print("{0} has been used: {1}x".format(func.__name__, wrapper.count))\n\n return res\n\n wrapper.count = 0\n\n return wrapper\n\n@counter\n\n@benchmark\n\n@logging\n\ndef reverse_string(string):\n\n return str(reversed(string))\n\nprint(reverse_string("Able was I ere I saw Elba"))\n\nprint(reverse_string("A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!"))\n\n#outputs:\n\n#reverse_string ('Able was I ere I saw Elba',) {}\n\n#wrapper 0.0\n\n#wrapper has been used: 1x \n\n#ablE was I ere I saw elbA\n\n#reverse_string ('A man, a plan, a canoe, pasta, heros, rajahs, a coloratura, maps, snipe, percale, macaroni, a gag, a banana bag, a tan, a tag, a banana bag again (or a camel), a crepe, pins, Spam, a rut, a Rolo, cash, a jar, sore hats, a peon, a canal: Panama!',) {}\n\n#wrapper 0.0\n\n#wrapper has been used: 2x\n\n#!amanaP :lanac a ,noep a ,stah eros ,raj a ,hsac ,oloR a ,tur a ,mapS ,snip ,eperc a ,)lemac a ro( niaga gab ananab a ,gat a ,nat a ,gab ananab a ,gag a ,inoracam ,elacrep ,epins ,spam ,arutaroloc a ,shajar ,soreh ,atsap ,eonac a ,nalp a ,nam A\n\n</code></pre>\n\n<p>Of course the good thing with decorators is that you can use them right away on almost anything without rewriting. DRY, I said:</p>\n\n<pre><code>@counter\n\n@benchmark\n\n@logging\n\ndef get_random_futurama_quote():\n\n from urllib import urlopen\n\n result = urlopen("http://subfusion.net/cgi-bin/quote.pl?quote=futurama").read()\n\n try:\n\n value = result.split("<br><b><hr><br>")[1].split("<br><br><hr>")[0]\n\n return value.strip()\n\n except:\n\n return "No, I'm ... doesn't!"\n\nprint(get_random_futurama_quote())\n\nprint(get_random_futurama_quote())\n\n#outputs:\n\n#get_random_futurama_quote () {}\n\n#wrapper 0.02\n\n#wrapper has been used: 1x\n\n#The laws of science be a harsh mistress.\n\n#get_random_futurama_quote () {}\n\n#wrapper 0.01\n\n#wrapper has been used: 2x\n\n#Curse you, merciful Poseidon!\n\n</code></pre>\n\n<p>Python itself provides several decorators: <code>property</code>, <code>staticmethod</code>, etc. </p>\n\n<ul>\n\n<li>Django uses decorators to manage caching and view permissions. </li>\n\n<li>Twisted to fake inlining asynchronous functions calls.</li>\n\n</ul>\n\n<p>This really is a large playground.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	120
How do I concatenate two lists in Python?	<p>You can use the <code>+</code> operator to combine them:</p>\n\n<pre><code>listone = [1,2,3]\n\nlisttwo = [4,5,6]\n\njoinedlist = listone + listtwo\n\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>>>> joinedlist\n\n[1,2,3,4,5,6]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	121
How to select rows from a DataFrame based on column values?	<p>To select rows whose column value equals a scalar, <code>some_value</code>, use <code>==</code>:</p>\n\n<pre><code>df.loc[df['column_name'] == some_value]\n\n</code></pre>\n\n<p>To select rows whose column value is in an iterable, <code>some_values</code>, use <code>isin</code>:</p>\n\n<pre><code>df.loc[df['column_name'].isin(some_values)]\n\n</code></pre>\n\n<p>Combine multiple conditions with <code>&</code>: </p>\n\n<pre><code>df.loc[(df['column_name'] >= A) & (df['column_name'] <= B)]\n\n</code></pre>\n\n<p>Note the parentheses. Due to Python's <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">operator precedence rules</a>, <code>&</code> binds more tightly than <code><=</code> and <code>>=</code>. Thus, the parentheses in the last example are necessary. Without the parentheses </p>\n\n<pre><code>df['column_name'] >= A & df['column_name'] <= B\n\n</code></pre>\n\n<p>is parsed as </p>\n\n<pre><code>df['column_name'] >= (A & df['column_name']) <= B\n\n</code></pre>\n\n<p>which results in a <a href="https://stackoverflow.com/questions/36921951/truth-value-of-a-series-is-ambiguous-use-a-empty-a-bool-a-item-a-any-o">Truth value of a Series is ambiguous error</a>.</p>\n\n<hr>\n\n<p>To select rows whose column value <em>does not equal</em> <code>some_value</code>, use <code>!=</code>:</p>\n\n<pre><code>df.loc[df['column_name'] != some_value]\n\n</code></pre>\n\n<p><code>isin</code> returns a boolean Series, so to select rows whose value is <em>not</em> in <code>some_values</code>, negate the boolean Series using <code>~</code>:</p>\n\n<pre><code>df.loc[~df['column_name'].isin(some_values)]\n\n</code></pre>\n\n<hr>\n\n<p>For example,</p>\n\n<pre><code>import pandas as pd\n\nimport numpy as np\n\ndf = pd.DataFrame({'A': 'foo bar foo bar foo bar foo foo'.split(),\n\n 'B': 'one one two three two two one three'.split(),\n\n 'C': np.arange(8), 'D': np.arange(8) * 2})\n\nprint(df)\n\n# A B C D\n\n# 0 foo one 0 0\n\n# 1 bar one 1 2\n\n# 2 foo two 2 4\n\n# 3 bar three 3 6\n\n# 4 foo two 4 8\n\n# 5 bar two 5 10\n\n# 6 foo one 6 12\n\n# 7 foo three 7 14\n\nprint(df.loc[df['A'] == 'foo'])\n\n</code></pre>\n\n<p>yields</p>\n\n<pre><code> A B C D\n\n0 foo one 0 0\n\n2 foo two 2 4\n\n4 foo two 4 8\n\n6 foo one 6 12\n\n7 foo three 7 14\n\n</code></pre>\n\n<hr>\n\n<p>If you have multiple values you want to include, put them in a\n\nlist (or more generally, any iterable) and use <code>isin</code>:</p>\n\n<pre><code>print(df.loc[df['B'].isin(['one','three'])])\n\n</code></pre>\n\n<p>yields</p>\n\n<pre><code> A B C D\n\n0 foo one 0 0\n\n1 bar one 1 2\n\n3 bar three 3 6\n\n6 foo one 6 12\n\n7 foo three 7 14\n\n</code></pre>\n\n<hr>\n\n<p>Note, however, that if you wish to do this many times, it is more efficient to\n\nmake an index first, and then use <code>df.loc</code>:</p>\n\n<pre><code>df = df.set_index(['B'])\n\nprint(df.loc['one'])\n\n</code></pre>\n\n<p>yields</p>\n\n<pre><code> A C D\n\nB \n\none foo 0 0\n\none bar 1 2\n\none foo 6 12\n\n</code></pre>\n\n<p>or, to include multiple values from the index use <code>df.index.isin</code>:</p>\n\n<pre><code>df.loc[df.index.isin(['one','two'])]\n\n</code></pre>\n\n<p>yields</p>\n\n<pre><code> A C D\n\nB \n\none foo 0 0\n\none bar 1 2\n\ntwo foo 2 4\n\ntwo foo 4 8\n\ntwo bar 5 10\n\none foo 6 12\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	122
Catch multiple exceptions in one line (except block)	<p>From <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="noreferrer">Python Documentation</a>:</p>\n\n<blockquote>\n\n <p>An except clause may name multiple exceptions as a parenthesized tuple, for example</p>\n\n</blockquote>\n\n<pre><code>except (IDontLikeYouException, YouAreBeingMeanException) as e:\n\n pass\n\n</code></pre>\n\n<p>Or, for Python 2 only:</p>\n\n<pre><code>except (IDontLikeYouException, YouAreBeingMeanException), e:\n\n pass\n\n</code></pre>\n\n<p>Separating the exception from the variable with a comma will still work in Python 2.6 and 2.7, but is now deprecated and does not work in Python 3; now you should be using <code>as</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	123
Convert bytes to a string	<p>You need to decode the bytes object to produce a string:</p>\n\n<pre><code>>>> b"abcde"\n\nb'abcde'\n\n# utf-8 is used here because it is a very common encoding, but you\n\n# need to use the encoding your data is actually in.\n\n>>> b"abcde".decode("utf-8") \n\n'abcde'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	124
Converting string into datetime	<p><code>datetime.strptime</code> is the main routine for parsing strings into datetimes. It can handle all sorts of formats, with the format determined by a format string you give it:</p>\n\n<pre><code>from datetime import datetime\n\ndatetime_object = datetime.strptime('Jun 1 2005 1:33PM', '%b %d %Y %I:%M%p')\n\n</code></pre>\n\n<p>The resulting <code>datetime</code> object is timezone-naive.</p>\n\n<p>Links:</p>\n\n<ul>\n\n<li><p>Python documentation for <code>strptime</code>: <a href="https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime" rel="noreferrer" title="datetime.datetime.strptime">Python 2</a>, <a href="https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime" rel="noreferrer">Python 3</a></p></li>\n\n<li><p>Python documentation for <code>strptime</code>/<code>strftime</code> format strings: <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer" title="strftime-and-strptime-behavior">Python 2</a>, <a href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">Python 3</a></p></li>\n\n<li><p><a href="http://strftime.org/" rel="noreferrer">strftime.org</a> is also a really nice reference for strftime</p></li>\n\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n\n<li><code>strptime</code> = "string parse time"</li>\n\n<li><code>strftime</code> = "string format time"</li>\n\n<li>Pronounce it out loud today & you won't have to search for it again in 6 months.</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	125
Find current directory and file's directory	<p>To get the full path to the directory a Python file is contained in, write this in that file:</p>\n\n<pre><code>import os \n\ndir_path = os.path.dirname(os.path.realpath(__file__))\n\n</code></pre>\n\n<p>(Note that the incantation above won't work if you've already used <code>os.chdir()</code> to change your current working directory, since the value of the <code>__file__</code> constant is relative to the current working directory and is not changed by an <code>os.chdir()</code> call.)</p>\n\n<hr>\n\n<p>To get the current working directory use </p>\n\n<pre><code>import os\n\ncwd = os.getcwd()\n\n</code></pre>\n\n<hr>\n\n<p>Documentation references for the modules, constants and functions used above:</p>\n\n<ul>\n\n<li>The <a href="https://docs.python.org/library/os.html"><code>os</code></a> and <a href="https://docs.python.org/library/os.path.html#module-os.path"><code>os.path</code></a> modules.</li>\n\n<li>The <a href="https://docs.python.org/reference/datamodel.html"><code>__file__</code></a> constant</li>\n\n<li><a href="https://docs.python.org/library/os.path.html#os.path.realpath"><code>os.path.realpath(path)</code></a> (returns <em>"the canonical path of the specified filename, eliminating any symbolic links encountered in the path"</em>)</li>\n\n<li><a href="https://docs.python.org/library/os.path.html#os.path.dirname"><code>os.path.dirname(path)</code></a> (returns <em>"the directory name of pathname <code>path</code>"</em>)</li>\n\n<li><a href="https://docs.python.org/library/os.html#os.getcwd"><code>os.getcwd()</code></a> (returns <em>"a string representing the current working directory"</em>)</li>\n\n<li><a href="https://docs.python.org/library/os.html#os.chdir"><code>os.chdir(path)</code></a> (<em>"change the current working directory to <code>path</code>"</em>)</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	126
Check if a given key already exists in a dictionary	<p><a href="https://docs.python.org/reference/expressions.html#membership-test-operations" rel="noreferrer"><code>in</code></a> is the intended way to test for the existence of a key in a <a href="https://docs.python.org/library/stdtypes.html#dict" rel="noreferrer"><code>dict</code></a>.</p>\n\n<pre><code>d = {"key1": 10, "key2": 23}\n\nif "key1" in d:\n\n print("this will execute")\n\nif "nonexistent key" in d:\n\n print("this will not")\n\n</code></pre>\n\n<p>If you wanted a default, you can always use <a href="https://docs.python.org/library/stdtypes.html#dict.get" rel="noreferrer"><code>dict.get()</code></a>:</p>\n\n<pre><code>d = dict()\n\nfor i in range(100):\n\n key = i % 10\n\n d[key] = d.get(key, 0) + 1\n\n</code></pre>\n\n<p>and if you wanted to always ensure a default value for any key you can either use <a href="https://docs.python.org/library/stdtypes.html#dict.setdefault" rel="noreferrer"><code>dict.setdefault()</code></a> repeatedly or <a href="https://docs.python.org/library/collections.html#collections.defaultdict" rel="noreferrer"><code>defaultdict</code></a> from the <a href="https://docs.python.org/library/collections.html" rel="noreferrer"><code>collections</code></a> module, like so:</p>\n\n<pre><code>from collections import defaultdict\n\nd = defaultdict(int)\n\nfor i in range(100):\n\n d[i % 10] += 1\n\n</code></pre>\n\n<p>but in general, the <code>in</code> keyword is the best way to do it.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	127
How can I add new keys to a dictionary?	<pre><code>d = {'key': 'value'}\n\nprint(d)\n\n# {'key': 'value'}\n\nd['mynewkey'] = 'mynewvalue'\n\nprint(d)\n\n# {'key': 'value', 'mynewkey': 'mynewvalue'}\n\n</code></pre>\n\n<blockquote>\n\n <p>you create a new key\value pair on a dictionary by assigning a value\n\n to that key. If the key doesn't exist, it's added and points to that\n\n value. If it exists, the current value it points to is overwritten.\n\n â<a href="https://stackoverflow.com/users/4206247/r-navega">R. Navega</a></p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	128
How to delete a file or folder?	<ul>\n\n<li><p><a href="http://docs.python.org/library/os.html#os.remove" rel="noreferrer"><code>os.remove()</code></a> removes a file.</p></li>\n\n<li><p><a href="http://docs.python.org/library/os.html#os.rmdir" rel="noreferrer"><code>os.rmdir()</code></a> removes an empty directory.</p></li>\n\n<li><p><a href="http://docs.python.org/library/shutil.html#shutil.rmtree" rel="noreferrer"><code>shutil.rmtree()</code></a> deletes a directory and all its contents.</p></li>\n\n</ul>\n\n<hr>\n\n<p><a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path" rel="noreferrer"><code>Path</code></a> objects from the Python 3.4+ <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a> module also expose these instance methods:</p>\n\n<ul>\n\n<li><p><a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink" rel="noreferrer"><code>pathlib.Path.unlink()</code></a> removes a file or symbolic link.</p></li>\n\n<li><p><a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir" rel="noreferrer"><code>pathlib.Path.rmdir()</code></a> removes an empty directory.</p></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	129
How to clone or copy a list?	<p>With <code>new_list = my_list</code>, you don't actually have two lists. The assignment just copies the reference to the list, not the actual list, so both <code>new_list</code> and <code>my_list</code> refer to the same list after the assignment.</p>\n\n<p>To actually copy the list, you have various possibilities:</p>\n\n<ul>\n\n<li><p>You can use the builtin <a href="https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types" rel="noreferrer"><code>list.copy()</code></a> method (available since Python 3.3):</p>\n\n<pre><code>new_list = old_list.copy()\n\n</code></pre></li>\n\n<li><p>You can slice it: </p>\n\n<pre><code>new_list = old_list[:]\n\n</code></pre>\n\n<p><a href="https://en.wikipedia.org/wiki/Alex_Martelli" rel="noreferrer" title="Alex Martelli">Alex Martelli's</a> opinion (at least <a href="https://www.youtube.com/watch?v=g7V89K8QfgQ" rel="noreferrer" title="Bay Area Python Interest Group August 2007 Meeting">back in 2007</a>) about this is, that <em>it is a weird syntax and it does not make sense to use it ever</em>. ;) (In his opinion, the next one is more readable).</p></li>\n\n<li><p>You can use the built in <a href="https://docs.python.org/2/library/functions.html#list" rel="noreferrer" title="list"><code>list()</code></a> function:</p>\n\n<pre><code>new_list = list(old_list)\n\n</code></pre></li>\n\n<li><p>You can use generic <a href="https://docs.python.org/2/library/copy.html#copy.copy" rel="noreferrer" title="copy.copy"><code>copy.copy()</code></a>:</p>\n\n<pre><code>import copy\n\nnew_list = copy.copy(old_list)\n\n</code></pre>\n\n<p>This is a little slower than <code>list()</code> because it has to find out the datatype of <code>old_list</code> first.</p></li>\n\n<li><p>If the list contains objects and you want to copy them as well, use generic <a href="https://docs.python.org/2/library/copy.html#copy.deepcopy" rel="noreferrer" title="copy.deepcopy"><code>copy.deepcopy()</code></a>:</p>\n\n<pre><code>import copy\n\nnew_list = copy.deepcopy(old_list)\n\n</code></pre>\n\n<p>Obviously the slowest and most memory-needing method, but sometimes unavoidable.</p></li>\n\n</ul>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>import copy\n\nclass Foo(object):\n\n def __init__(self, val):\n\n self.val = val\n\n def __repr__(self):\n\n return 'Foo({!r})'.format(self.val)\n\nfoo = Foo(1)\n\na = ['foo', foo]\n\nb = a.copy()\n\nc = a[:]\n\nd = list(a)\n\ne = copy.copy(a)\n\nf = copy.deepcopy(a)\n\n# edit orignal list and instance \n\na.append('baz')\n\nfoo.val = 5\n\nprint('original: %r list.copy(): %r slice: %r list(): %r copy: %r deepcopy: %r'\n\n % (a, b, c, d, e, f))\n\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>original: ['foo', Foo(5), 'baz']\n\nlist.copy(): ['foo', Foo(5)]\n\nslice: ['foo', Foo(5)]\n\nlist(): ['foo', Foo(5)]\n\ncopy: ['foo', Foo(5)]\n\ndeepcopy: ['foo', Foo(1)]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	130
How do I install pip on macOS or OS X?	<p><strong>UPDATE (Jan 2019):</strong></p>\n\n<p><code>easy_install</code> has been <a href="https://setuptools.readthedocs.io/en/latest/easy_install.html" rel="noreferrer">deprecated</a>. Please use <a href="https://pip.pypa.io/en/stable/installing/#installing-with-get-pip-py" rel="noreferrer"><code>get-pip.py</code></a> instead:</p>\n\n<pre><code>curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n\n</code></pre>\n\n<hr>\n\n<p><strong>Old answer:</strong></p>\n\n<pre><code>easy_install pip\n\n</code></pre>\n\n<hr>\n\n<p>If you need admin privileges to run this, try:</p>\n\n<pre><code>sudo easy_install pip\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	131
How do I get a substring of a string in Python?	<pre><code>>>> x = "Hello World!"\n\n>>> x[2:]\n\n'llo World!'\n\n>>> x[:2]\n\n'He'\n\n>>> x[:-2]\n\n'Hello Worl'\n\n>>> x[-2:]\n\n'd!'\n\n>>> x[2:-2]\n\n'llo Worl'\n\n</code></pre>\n\n<p>Python calls this concept "slicing" and it works on more than just strings. Take a look <a href="https://stackoverflow.com/questions/509211/good-primer-for-python-slice-notation">here</a> for a comprehensive introduction.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	132
How to access environment variable values?	<p>Environment variables are accessed through <a href="https://docs.python.org/library/os.html#os.environ" rel="noreferrer">os.environ</a></p>\n\n<pre><code>import os\n\nprint(os.environ['HOME'])\n\n</code></pre>\n\n<p>Or you can see a list of all the environment variables using:</p>\n\n<pre><code>os.environ\n\n</code></pre>\n\n<p>As sometimes you might need to see a complete list!</p>\n\n<pre><code># using get will return `None` if a key is not present rather than raise a `KeyError`\n\nprint(os.environ.get('KEY_THAT_MIGHT_EXIST'))\n\n# os.getenv is equivalent, and can also give a default value instead of `None`\n\nprint(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))\n\n</code></pre>\n\n<p><a href="https://docs.python.org/install/index.html#how-installation-works" rel="noreferrer">Python default installation</a> on Windows is <code>C:\Python</code>. If you want to find out while running python you can do:</p>\n\n<pre><code>import sys\n\nprint(sys.prefix)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	133
How do you split a list into evenly sized chunks?	<p>Here's a generator that yields the chunks you want:</p>\n\n<pre><code>def chunks(lst, n):\n\n """Yield successive n-sized chunks from lst."""\n\n for i in range(0, len(lst), n):\n\n yield lst[i:i + n]\n\n</code></pre>\n\n<hr>\n\n<pre><code>import pprint\n\npprint.pprint(list(chunks(range(10, 75), 10)))\n\n[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],\n\n [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],\n\n [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],\n\n [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],\n\n [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],\n\n [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],\n\n [70, 71, 72, 73, 74]]\n\n</code></pre>\n\n<hr>\n\n<p>If you're using Python 2, you should use <code>xrange()</code> instead of <code>range()</code>:</p>\n\n<pre><code>def chunks(lst, n):\n\n """Yield successive n-sized chunks from lst."""\n\n for i in xrange(0, len(lst), n):\n\n yield lst[i:i + n]\n\n</code></pre>\n\n<hr>\n\n<p>Also you can simply use list comprehension instead of writing a function, though it's a good idea to encapsulate operations like this in named functions so that your code is easier to understand. Python 3:</p>\n\n<pre><code>[lst[i:i + n] for i in range(0, len(lst), n)]\n\n</code></pre>\n\n<p>Python 2 version:</p>\n\n<pre><code>[lst[i:i + n] for i in xrange(0, len(lst), n)]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	134
Difference between staticmethod and classmethod	<p>Maybe a bit of example code will help: Notice the difference in the call signatures of <code>foo</code>, <code>class_foo</code> and <code>static_foo</code>:</p>\n\n<pre><code>class A(object):\n\n def foo(self, x):\n\n print "executing foo(%s, %s)" % (self, x)\n\n @classmethod\n\n def class_foo(cls, x):\n\n print "executing class_foo(%s, %s)" % (cls, x)\n\n @staticmethod\n\n def static_foo(x):\n\n print "executing static_foo(%s)" % x \n\na = A()\n\n</code></pre>\n\n<p>Below is the usual way an object instance calls a method. The object instance, <code>a</code>, is implicitly passed as the first argument.</p>\n\n<pre><code>a.foo(1)\n\n# executing foo(<__main__.A object at 0xb7dbef0c>,1)\n\n</code></pre>\n\n<hr>\n\n<p><strong>With classmethods</strong>, the class of the object instance is implicitly passed as the first argument instead of <code>self</code>.</p>\n\n<pre><code>a.class_foo(1)\n\n# executing class_foo(<class '__main__.A'>,1)\n\n</code></pre>\n\n<p>You can also call <code>class_foo</code> using the class. In fact, if you define something to be\n\na classmethod, it is probably because you intend to call it from the class rather than from a class instance. <code>A.foo(1)</code> would have raised a TypeError, but <code>A.class_foo(1)</code> works just fine:</p>\n\n<pre><code>A.class_foo(1)\n\n# executing class_foo(<class '__main__.A'>,1)\n\n</code></pre>\n\n<p>One use people have found for class methods is to create <a href="https://stackoverflow.com/a/1950927/190597">inheritable alternative constructors</a>.</p>\n\n<hr>\n\n<p><strong>With staticmethods</strong>, neither <code>self</code> (the object instance) nor <code>cls</code> (the class) is implicitly passed as the first argument. They behave like plain functions except that you can call them from an instance or the class:</p>\n\n<pre><code>a.static_foo(1)\n\n# executing static_foo(1)\n\nA.static_foo('hi')\n\n# executing static_foo(hi)\n\n</code></pre>\n\n<p>Staticmethods are used to group functions which have some logical connection with a class to the class.</p>\n\n<hr>\n\n<p><code>foo</code> is just a function, but when you call <code>a.foo</code> you don't just get the function,\n\nyou get a "partially applied" version of the function with the object instance <code>a</code> bound as the first argument to the function. <code>foo</code> expects 2 arguments, while <code>a.foo</code> only expects 1 argument.</p>\n\n<p><code>a</code> is bound to <code>foo</code>. That is what is meant by the term "bound" below:</p>\n\n<pre><code>print(a.foo)\n\n# <bound method A.foo of <__main__.A object at 0xb7d52f0c>>\n\n</code></pre>\n\n<p>With <code>a.class_foo</code>, <code>a</code> is not bound to <code>class_foo</code>, rather the class <code>A</code> is bound to <code>class_foo</code>.</p>\n\n<pre><code>print(a.class_foo)\n\n# <bound method type.class_foo of <class '__main__.A'>>\n\n</code></pre>\n\n<p>Here, with a staticmethod, even though it is a method, <code>a.static_foo</code> just returns\n\na good 'ole function with no arguments bound. <code>static_foo</code> expects 1 argument, and\n\n<code>a.static_foo</code> expects 1 argument too.</p>\n\n<pre><code>print(a.static_foo)\n\n# <function static_foo at 0xb7d479cc>\n\n</code></pre>\n\n<p>And of course the same thing happens when you call <code>static_foo</code> with the class <code>A</code> instead.</p>\n\n<pre><code>print(A.static_foo)\n\n# <function static_foo at 0xb7d479cc>\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	135
Getting the last element of a list	<p><code>some_list[-1]</code> is the shortest and most Pythonic.</p>\n\n<p>In fact, you can do much more with this syntax. The <code>some_list[-n]</code> syntax gets the nth-to-last element. So <code>some_list[-1]</code> gets the last element, <code>some_list[-2]</code> gets the second to last, etc, all the way down to <code>some_list[-len(some_list)]</code>, which gives you the first element.</p>\n\n<p>You can also set list elements in this way. For instance:</p>\n\n<pre><code>>>> some_list = [1, 2, 3]\n\n>>> some_list[-1] = 5 # Set the last element\n\n>>> some_list[-2] = 3 # Set the second to last element\n\n>>> some_list\n\n[1, 3, 5]\n\n</code></pre>\n\n<p>Note that getting a list item by index will raise an <a href="https://docs.python.org/3/library/exceptions.html#IndexError" rel="noreferrer"><code>IndexError</code></a> if the expected item doesn't exist. This means that <code>some_list[-1]</code> will raise an exception if <code>some_list</code> is empty, because an empty list can't have a last element.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	136
How do I lowercase a string in Python?	<p>Use <code>.lower()</code> - For example:</p>\n\n<pre><code>s = "Kilometer"\n\nprint(s.lower())\n\n</code></pre>\n\n<p>The official 2.x documentation is here: <a href="https://docs.python.org/2/library/stdtypes.html?highlight=str.lower#str.lower" rel="noreferrer"><code>str.lower()</code></a><br>\n\nThe official 3.x documentation is here: <a href="https://docs.python.org/3/library/stdtypes.html?highlight=str.lower#str.lower" rel="noreferrer"><code>str.lower()</code></a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	137
How to get the current time in Python	<p>Use:</p>\n\n<pre><code>>>> import datetime\n\n>>> datetime.datetime.now()\n\ndatetime.datetime(2009, 1, 6, 15, 8, 24, 78915)\n\n>>> print(datetime.datetime.now())\n\n2009-01-06 15:08:24.789150\n\n</code></pre>\n\n<p>And just the time:</p>\n\n<pre><code>>>> datetime.datetime.now().time()\n\ndatetime.time(15, 8, 24, 78915)\n\n>>> print(datetime.datetime.now().time())\n\n15:08:24.789150\n\n</code></pre>\n\n<p>See <a href="https://docs.python.org/3/library/datetime.html" rel="noreferrer"><strong>the documentation</strong></a> for more information.</p>\n\n<p>To save typing, you can import the <code>datetime</code> object from the <code>datetime</code> module:</p>\n\n<pre><code>>>> from datetime import datetime\n\n</code></pre>\n\n<p>Then remove the leading <code>datetime.</code> from all of the above.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	138
How do I copy a file in Python?	<p><a href="http://docs.python.org/3/library/shutil.html" rel="noreferrer"><code>shutil</code></a> has many methods you can use. One of which is:</p>\n\n<pre><code>from shutil import copyfile\n\ncopyfile(src, dst)\n\n</code></pre>\n\n<ul>\n\n<li>Copy the contents of the file named <strong>src</strong> to a file named <strong>dst</strong>.</li>\n\n<li>The destination location must be writable; otherwise, an <strong>IOError</strong> exception will be raised.</li>\n\n<li>If <strong>dst</strong> already exists, it will be replaced.</li>\n\n<li>Special files such as character or block devices and pipes cannot be copied with this function. </li>\n\n<li>With <strong>copy</strong>, <strong>src</strong> and <strong>dst</strong> are path names given as <strong>strings</strong>. </li>\n\n</ul>\n\n<p>If you use <strong><code>os.path</code></strong> operations, use <strong><code>copy</code></strong> rather than <strong><code>copyfile</code></strong>. <strong><code>copyfile</code></strong> will <strong>only accept strings</strong>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	139
Calling an external command from Python	<p>Here's a summary of the ways to call external programs and the advantages and disadvantages of each:</p>\n\n<ol>\n\n<li><p><code>os.system("some_command with args")</code> passes the command and arguments to your system's shell. This is nice because you can actually run multiple commands at once in this manner and set up pipes and input/output redirection. For example: </p>\n\n<pre><code>os.system("some_command < input_file | another_command > output_file") \n\n</code></pre></li>\n\n</ol>\n\n<p>However, while this is convenient, you have to manually handle the escaping of shell characters such as spaces, etc. On the other hand, this also lets you run commands which are simply shell commands and not actually external programs. See <a href="https://docs.python.org/2/library/os.html#os.system" rel="noreferrer">the documentation</a>.</p>\n\n<ol start="2">\n\n<li><p><code>stream = os.popen("some_command with args")</code> will do the same thing as <code>os.system</code> except that it gives you a file-like object that you can use to access standard input/output for that process. There are 3 other variants of popen that all handle the i/o slightly differently. If you pass everything as a string, then your command is passed to the shell; if you pass them as a list then you don't need to worry about escaping anything. See <a href="https://docs.python.org/2/library/os.html#os.popen" rel="noreferrer">the documentation</a>.</p></li>\n\n<li><p>The <code>Popen</code> class of the <code>subprocess</code> module. This is intended as a replacement for <code>os.popen</code> but has the downside of being slightly more complicated by virtue of being so comprehensive. For example, you'd say:</p>\n\n<pre><code>print subprocess.Popen("echo Hello World", shell=True, stdout=subprocess.PIPE).stdout.read()\n\n</code></pre>\n\n<p>instead of: </p>\n\n<pre><code>print os.popen("echo Hello World").read()\n\n</code></pre>\n\n<p>but it is nice to have all of the options there in one unified class instead of 4 different popen functions. See <a href="https://docs.python.org/2/library/subprocess.html#popen-constructor" rel="noreferrer">the documentation</a>.</p></li>\n\n<li><p>The <code>call</code> function from the <code>subprocess</code> module. This is basically just like the <code>Popen</code> class and takes all of the same arguments, but it simply waits until the command completes and gives you the return code. For example:</p>\n\n<pre><code>return_code = subprocess.call("echo Hello World", shell=True) \n\n</code></pre>\n\n<p>See <a href="https://docs.python.org/2/library/subprocess.html#subprocess.call" rel="noreferrer">the documentation</a>.</p></li>\n\n<li><p>If you're on Python 3.5 or later, you can use the new <a href="https://docs.python.org/3.5/library/subprocess.html#subprocess.run" rel="noreferrer"><code>subprocess.run</code></a> function, which is a lot like the above but even more flexible and returns a <a href="https://docs.python.org/3.5/library/subprocess.html#subprocess.CompletedProcess" rel="noreferrer"><code>CompletedProcess</code></a> object when the command finishes executing.</p></li>\n\n<li><p>The os module also has all of the fork/exec/spawn functions that you'd have in a C program, but I don't recommend using them directly.</p></li>\n\n</ol>\n\n<p>The <code>subprocess</code> module should probably be what you use.</p>\n\n<p>Finally please be aware that for all methods where you pass the final command to be executed by the shell as a string and you are responsible for escaping it. <strong>There are serious security implications</strong> if any part of the string that you pass can not be fully trusted. For example, if a user is entering some/any part of the string. If you are unsure, only use these methods with constants. To give you a hint of the implications consider this code:</p>\n\n<pre><code>print subprocess.Popen("echo %s " % user_input, stdout=PIPE).stdout.read()\n\n</code></pre>\n\n<p>and imagine that the user enters something "my mama didnt love me && rm -rf /" which could erase the whole filesystem.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	140
How can I make a time delay in Python?	<pre><code>import time\n\ntime.sleep(5) # Delays for 5 seconds. You can also use a float value.\n\n</code></pre>\n\n<p>Here is another example where something is run approximately once a minute:</p>\n\n<pre><code>import time\n\nwhile True:\n\n print("This prints once a minute.")\n\n time.sleep(60) # Delay for 1 minute (60 seconds).\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	141
Manually raising (throwing) an exception in Python	<blockquote>\n\n <h2>How do I manually throw/raise an exception in Python?</h2>\n\n</blockquote>\n\n<p><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="noreferrer">Use the most specific Exception constructor that semantically fits your issue</a>. </p>\n\n<p>Be specific in your message, e.g.:</p>\n\n<pre><code>raise ValueError('A very specific bad thing happened.')\n\n</code></pre>\n\n<h2>Don't raise generic exceptions</h2>\n\n<p>Avoid raising a generic <code>Exception</code>. To catch it, you'll have to catch all other more specific exceptions that subclass it.</p>\n\n<h3>Problem 1: Hiding bugs</h3>\n\n<pre><code>raise Exception('I know Python!') # Don't! If you catch, likely to hide bugs.\n\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>def demo_bad_catch():\n\n try:\n\n raise ValueError('Represents a hidden bug, do not catch this')\n\n raise Exception('This is the exception you expect to handle')\n\n except Exception as error:\n\n print('Caught this error: ' + repr(error))\n\n>>> demo_bad_catch()\n\nCaught this error: ValueError('Represents a hidden bug, do not catch this',)\n\n</code></pre>\n\n<h3>Problem 2: Won't catch</h3>\n\n<p>And more specific catches won't catch the general exception:</p>\n\n<pre><code>def demo_no_catch():\n\n try:\n\n raise Exception('general exceptions not caught by specific handling')\n\n except ValueError as e:\n\n print('we will not catch exception: Exception')\n\n>>> demo_no_catch()\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "<stdin>", line 3, in demo_no_catch\n\nException: general exceptions not caught by specific handling\n\n</code></pre>\n\n<h2>Best Practices: <code>raise</code> statement</h2>\n\n<p><a href="https://docs.python.org/3/library/exceptions.html#exception-hierarchy" rel="noreferrer">Instead, use the most specific Exception constructor that semantically fits your issue</a>.</p>\n\n<pre><code>raise ValueError('A very specific bad thing happened')\n\n</code></pre>\n\n<p>which also handily allows an arbitrary number of arguments to be passed to the constructor:</p>\n\n<pre><code>raise ValueError('A very specific bad thing happened', 'foo', 'bar', 'baz') \n\n</code></pre>\n\n<p>These arguments are accessed by the <code>args</code> attribute on the <code>Exception</code> object. For example:</p>\n\n<pre><code>try:\n\n some_code_that_may_raise_our_value_error()\n\nexcept ValueError as err:\n\n print(err.args)\n\n</code></pre>\n\n<p>prints </p>\n\n<pre><code>('message', 'foo', 'bar', 'baz') \n\n</code></pre>\n\n<p>In Python 2.5, an actual <code>message</code> attribute was added to <code>BaseException</code> in favor of encouraging users to subclass Exceptions and stop using <code>args</code>, but <a href="http://www.python.org/dev/peps/pep-0352/#retracted-ideas" rel="noreferrer">the introduction of <code>message</code> and the original deprecation of args has been retracted</a>.</p>\n\n<h2>Best Practices: <code>except</code> clause</h2>\n\n<p>When inside an except clause, you might want to, for example, log that a specific type of error happened, and then re-raise. The best way to do this while preserving the stack trace is to use a bare raise statement. For example:</p>\n\n<pre><code>logger = logging.getLogger(__name__)\n\ntry:\n\n do_something_in_app_that_breaks_easily()\n\nexcept AppError as error:\n\n logger.error(error)\n\n raise # just this!\n\n # raise AppError # Don't do this, you'll lose the stack trace!\n\n</code></pre>\n\n<h3>Don't modify your errors... but if you insist.</h3>\n\n<p>You can preserve the stacktrace (and error value) with <code>sys.exc_info()</code>, but <strong>this is way more error prone</strong> and <strong>has compatibility problems between Python 2 and 3</strong>, prefer to use a bare <code>raise</code> to re-raise. </p>\n\n<p>To explain - the <code>sys.exc_info()</code> returns the type, value, and traceback. </p>\n\n<pre><code>type, value, traceback = sys.exc_info()\n\n</code></pre>\n\n<p>This is the syntax in Python 2 - note this is not compatible with Python 3:</p>\n\n<pre><code> raise AppError, error, sys.exc_info()[2] # avoid this.\n\n # Equivalently, as error *is* the second object:\n\n raise sys.exc_info()[0], sys.exc_info()[1], sys.exc_info()[2]\n\n</code></pre>\n\n<p>If you want to, you can modify what happens with your new raise - e.g. setting new <code>args</code> for the instance:</p>\n\n<pre><code>def error():\n\n raise ValueError('oops!')\n\ndef catch_error_modify_message():\n\n try:\n\n error()\n\n except ValueError:\n\n error_type, error_instance, traceback = sys.exc_info()\n\n error_instance.args = (error_instance.args[0] + ' <modification>',)\n\n raise error_type, error_instance, traceback\n\n</code></pre>\n\n<p>And we have preserved the whole traceback while modifying the args. Note that this is <strong>not a best practice</strong> and it is <strong>invalid syntax</strong> in Python 3 (making keeping compatibility much harder to work around).</p>\n\n<pre><code>>>> catch_error_modify_message()\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "<stdin>", line 3, in catch_error_modify_message\n\n File "<stdin>", line 2, in error\n\nValueError: oops! <modification>\n\n</code></pre>\n\n<p>In <a href="https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement" rel="noreferrer">Python 3</a>:</p>\n\n<pre><code> raise error.with_traceback(sys.exc_info()[2])\n\n</code></pre>\n\n<p>Again: avoid manually manipulating tracebacks. It's <a href="https://docs.python.org/2/reference/simple_stmts.html#the-raise-statement" rel="noreferrer">less efficient</a> and more error prone. And if you're using threading and <code>sys.exc_info</code> you may even get the wrong traceback (especially if you're using exception handling for control flow - which I'd personally tend to avoid.)</p>\n\n<h3>Python 3, Exception chaining</h3>\n\n<p>In Python 3, you can chain Exceptions, which preserve tracebacks:</p>\n\n<pre><code> raise RuntimeError('specific message') from error\n\n</code></pre>\n\n<p>Be aware:</p>\n\n<ul>\n\n<li>this <em>does</em> allow changing the error type raised, and</li>\n\n<li>this is <em>not</em> compatible with Python 2.</li>\n\n</ul>\n\n<h3>Deprecated Methods:</h3>\n\n<p>These can easily hide and even get into production code. You want to raise an exception, and doing them will raise an exception, <strong>but not the one intended!</strong></p>\n\n<p><a href="http://www.python.org/dev/peps/pep-3109/" rel="noreferrer">Valid in Python 2, but not in Python 3</a> is the following:</p>\n\n<pre><code>raise ValueError, 'message' # Don't do this, it's deprecated!\n\n</code></pre>\n\n<p>Only <a href="https://docs.python.org/2/whatsnew/2.5.html#pep-352-exceptions-as-new-style-classes" rel="noreferrer">valid in much older versions of Python</a> (2.4 and lower), you may still see people raising strings:</p>\n\n<pre><code>raise 'message' # really really wrong. don't do this.\n\n</code></pre>\n\n<p>In all modern versions, this will actually raise a <code>TypeError</code>, because you're not raising a <code>BaseException</code> type. If you're not checking for the right exception and don't have a reviewer that's aware of the issue, it could get into production.</p>\n\n<h2>Example Usage</h2>\n\n<p>I raise Exceptions to warn consumers of my API if they're using it incorrectly:</p>\n\n<pre><code>def api_func(foo):\n\n '''foo should be either 'baz' or 'bar'. returns something very useful.'''\n\n if foo not in _ALLOWED_ARGS:\n\n raise ValueError('{foo} wrong, use "baz" or "bar"'.format(foo=repr(foo)))\n\n</code></pre>\n\n<h2>Create your own error types when apropos</h2>\n\n<blockquote>\n\n <p><strong>"I want to make an error on purpose, so that it would go into the except"</strong></p>\n\n</blockquote>\n\n<p>You can create your own error types, if you want to indicate something specific is wrong with your application, just subclass the appropriate point in the exception hierarchy:</p>\n\n<pre><code>class MyAppLookupError(LookupError):\n\n '''raise this when there's a lookup error for my app'''\n\n</code></pre>\n\n<p>and usage:</p>\n\n<pre><code>if important_key not in resource_dict and not ok_to_be_missing:\n\n raise MyAppLookupError('resource is missing, and that is not ok.')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	142
How to make a chain of function decorators?	<p>Check out <a href="http://docs.python.org/reference/compound_stmts.html#function" rel="noreferrer">the documentation</a> to see how decorators work. Here is what you asked for:</p>\n\n<pre><code>from functools import wraps\n\ndef makebold(fn):\n\n @wraps(fn)\n\n def wrapped(*args, **kwargs):\n\n return "<b>" + fn(*args, **kwargs) + "</b>"\n\n return wrapped\n\ndef makeitalic(fn):\n\n @wraps(fn)\n\n def wrapped(*args, **kwargs):\n\n return "<i>" + fn(*args, **kwargs) + "</i>"\n\n return wrapped\n\n@makebold\n\n@makeitalic\n\ndef hello():\n\n return "hello world"\n\n@makebold\n\n@makeitalic\n\ndef log(s):\n\n return s\n\nprint hello() # returns "<b><i>hello world</i></b>"\n\nprint hello.__name__ # with functools.wraps() this returns "hello"\n\nprint log('hello') # returns "<b><i>hello</i></b>"\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	143
How to remove a key from a Python dictionary?	<p>To delete a key regardless of whether it is in the dictionary, use the two-argument form of <a href="http://docs.python.org/library/stdtypes.html#dict.pop" rel="noreferrer"><code>dict.pop()</code></a>:</p>\n\n<pre class="lang-py prettyprint-override"><code>my_dict.pop('key', None)\n\n</code></pre>\n\n<p>This will return <code>my_dict[key]</code> if <code>key</code> exists in the dictionary, and <code>None</code> otherwise. If the second parameter is not specified (ie. <code>my_dict.pop('key')</code>) and <code>key</code> does not exist, a <code>KeyError</code> is raised.</p>\n\n<p>To delete a key that is guaranteed to exist, you can also use</p>\n\n<pre><code>del my_dict['key']\n\n</code></pre>\n\n<p>This will raise a <code>KeyError</code> if the key is not in the dictionary.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	144
Renaming columns in pandas	<h2><strong>RENAME SPECIFIC COLUMNS</strong></h2>\n\n<p>Use the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.rename.html" rel="noreferrer"><code>df.rename()</code></a> function and refer the columns to be renamed. Not all the columns have to be renamed:</p>\n\n<pre><code>df = df.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'})\n\n# Or rename the existing DataFrame (rather than creating a copy) \n\ndf.rename(columns={'oldName1': 'newName1', 'oldName2': 'newName2'}, inplace=True)\n\n</code></pre>\n\n<p><strong>Minimal Code Example</strong></p>\n\n<pre><code>df = pd.DataFrame('x', index=range(3), columns=list('abcde'))\n\ndf\n\n a b c d e\n\n0 x x x x x\n\n1 x x x x x\n\n2 x x x x x\n\n</code></pre>\n\n<p>The following methods all work and produce the same output:</p>\n\n<pre><code>df2 = df.rename({'a': 'X', 'b': 'Y'}, axis=1) # new method\n\ndf2 = df.rename({'a': 'X', 'b': 'Y'}, axis='columns')\n\ndf2 = df.rename(columns={'a': 'X', 'b': 'Y'}) # old method \n\ndf2\n\n X Y c d e\n\n0 x x x x x\n\n1 x x x x x\n\n2 x x x x x\n\n</code></pre>\n\n<p>Remember to assign the result back, as the modification is not-inplace. Alternatively, specify <code>inplace=True</code>:</p>\n\n<pre><code>df.rename({'a': 'X', 'b': 'Y'}, axis=1, inplace=True)\n\ndf\n\n X Y c d e\n\n0 x x x x x\n\n1 x x x x x\n\n2 x x x x x\n\n</code></pre>\n\n<p>From v0.25, you can also specify <code>errors='raise'</code> to raise errors if an invalid column-to-rename is specified. See <a href="https://pandas-docs.github.io/pandas-docs-travis/reference/api/pandas.DataFrame.rename.html#pandas.DataFrame.rename" rel="noreferrer">v0.25 <code>rename()</code> docs</a>.</p>\n\n<hr />\n\n<h2>REASSIGN COLUMN HEADERS</h2>\n\n<p>Use <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.set_axis.html" rel="noreferrer"><code>df.set_axis()</code></a> with <code>axis=1</code> and <code>inplace=False</code> (to return a copy).</p>\n\n<pre><code>df2 = df.set_axis(['V', 'W', 'X', 'Y', 'Z'], axis=1, inplace=False)\n\ndf2\n\n V W X Y Z\n\n0 x x x x x\n\n1 x x x x x\n\n2 x x x x x\n\n</code></pre>\n\n<p>This returns a copy, but you can modify the DataFrame in-place by setting <code>inplace=True</code> (this is the default behaviour for versions <=0.24 but is likely to change in the future).</p>\n\n<p>You can also assign headers directly:</p>\n\n<pre><code>df.columns = ['V', 'W', 'X', 'Y', 'Z']\n\ndf\n\n V W X Y Z\n\n0 x x x x x\n\n1 x x x x x\n\n2 x x x x x\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	145
What are metaclasses in Python?	<p>A metaclass is the class of a class. A class defines how an instance of the class (i.e. an object) behaves while a metaclass defines how a class behaves. A class is an instance of a metaclass.</p>\n\n<p>While in Python you can use arbitrary callables for metaclasses (like <a href="https://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/100037#100037">Jerub</a> shows), the better approach is to make it an actual class itself. <code>type</code> is the usual metaclass in Python. <code>type</code> is itself a class, and it is its own type. You won't be able to recreate something like <code>type</code> purely in Python, but Python cheats a little. To create your own metaclass in Python you really just want to subclass <code>type</code>.</p>\n\n<p>A metaclass is most commonly used as a class-factory. When you create an object by calling the class, Python creates a new class (when it executes the 'class' statement) by calling the metaclass. Combined with the normal <code>__init__</code> and <code>__new__</code> methods, metaclasses therefore allow you to do 'extra things' when creating a class, like registering the new class with some registry or replace the class with something else entirely.</p>\n\n<p>When the <code>class</code> statement is executed, Python first executes the body of the <code>class</code> statement as a normal block of code. The resulting namespace (a dict) holds the attributes of the class-to-be. The metaclass is determined by looking at the baseclasses of the class-to-be (metaclasses are inherited), at the <code>__metaclass__</code> attribute of the class-to-be (if any) or the <code>__metaclass__</code> global variable. The metaclass is then called with the name, bases and attributes of the class to instantiate it.</p>\n\n<p>However, metaclasses actually define the <em>type</em> of a class, not just a factory for it, so you can do much more with them. You can, for instance, define normal methods on the metaclass. These metaclass-methods are like classmethods in that they can be called on the class without an instance, but they are also not like classmethods in that they cannot be called on an instance of the class. <code>type.__subclasses__()</code> is an example of a method on the <code>type</code> metaclass. You can also define the normal 'magic' methods, like <code>__add__</code>, <code>__iter__</code> and <code>__getattr__</code>, to implement or change how the class behaves.</p>\n\n<p>Here's an aggregated example of the bits and pieces:</p>\n\n<pre><code>def make_hook(f):\n\n """Decorator to turn 'foo' method into '__foo__'"""\n\n f.is_hook = 1\n\n return f\n\nclass MyType(type):\n\n def __new__(mcls, name, bases, attrs):\n\n if name.startswith('None'):\n\n return None\n\n # Go over attributes and see if they should be renamed.\n\n newattrs = {}\n\n for attrname, attrvalue in attrs.iteritems():\n\n if getattr(attrvalue, 'is_hook', 0):\n\n newattrs['__%s__' % attrname] = attrvalue\n\n else:\n\n newattrs[attrname] = attrvalue\n\n return super(MyType, mcls).__new__(mcls, name, bases, newattrs)\n\n def __init__(self, name, bases, attrs):\n\n super(MyType, self).__init__(name, bases, attrs)\n\n # classregistry.register(self, self.interfaces)\n\n print "Would register class %s now." % self\n\n def __add__(self, other):\n\n class AutoClass(self, other):\n\n pass\n\n return AutoClass\n\n # Alternatively, to autogenerate the classname as well as the class:\n\n # return type(self.__name__ + other.__name__, (self, other), {})\n\n def unregister(self):\n\n # classregistry.unregister(self)\n\n print "Would unregister class %s now." % self\n\nclass MyObject:\n\n __metaclass__ = MyType\n\nclass NoneSample(MyObject):\n\n pass\n\n# Will print "NoneType None"\n\nprint type(NoneSample), repr(NoneSample)\n\nclass Example(MyObject):\n\n def __init__(self, value):\n\n self.value = value\n\n @make_hook\n\n def add(self, other):\n\n return self.__class__(self.value + other.value)\n\n# Will unregister the class\n\nExample.unregister()\n\ninst = Example(10)\n\n# Will fail with an AttributeError\n\n#inst.unregister()\n\nprint inst + inst\n\nclass Sibling(MyObject):\n\n pass\n\nExampleSibling = Example + Sibling\n\n# ExampleSibling is now a subclass of both Example and Sibling (with no\n\n# content of its own) although it will believe it's called 'AutoClass'\n\nprint ExampleSibling\n\nprint ExampleSibling.__mro__\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	146
How do I pass a variable by reference?	<p>Arguments are <a href="http://docs.python.org/3/faq/programming.html#how-do-i-write-a-function-with-output-parameters-call-by-reference" rel="noreferrer">passed by assignment</a>. The rationale behind this is twofold:</p>\n\n<ol>\n\n<li>the parameter passed in is actually a <em>reference</em> to an object (but the reference is passed by value)</li>\n\n<li>some data types are mutable, but others aren't</li>\n\n</ol>\n\n<p>So:</p>\n\n<ul>\n\n<li><p>If you pass a <em>mutable</em> object into a method, the method gets a reference to that same object and you can mutate it to your heart's delight, but if you rebind the reference in the method, the outer scope will know nothing about it, and after you're done, the outer reference will still point at the original object. </p></li>\n\n<li><p>If you pass an <em>immutable</em> object to a method, you still can't rebind the outer reference, and you can't even mutate the object.</p></li>\n\n</ul>\n\n<p>To make it even more clear, let's have some examples. </p>\n\n<h2>List - a mutable type</h2>\n\n<p><strong>Let's try to modify the list that was passed to a method:</strong></p>\n\n<pre><code>def try_to_change_list_contents(the_list):\n\n print('got', the_list)\n\n the_list.append('four')\n\n print('changed to', the_list)\n\nouter_list = ['one', 'two', 'three']\n\nprint('before, outer_list =', outer_list)\n\ntry_to_change_list_contents(outer_list)\n\nprint('after, outer_list =', outer_list)\n\n</code></pre>\n\n<p>Output:</p>\n\n<pre class="lang-none prettyprint-override"><code>before, outer_list = ['one', 'two', 'three']\n\ngot ['one', 'two', 'three']\n\nchanged to ['one', 'two', 'three', 'four']\n\nafter, outer_list = ['one', 'two', 'three', 'four']\n\n</code></pre>\n\n<p>Since the parameter passed in is a reference to <code>outer_list</code>, not a copy of it, we can use the mutating list methods to change it and have the changes reflected in the outer scope.</p>\n\n<p><strong>Now let's see what happens when we try to change the reference that was passed in as a parameter:</strong></p>\n\n<pre><code>def try_to_change_list_reference(the_list):\n\n print('got', the_list)\n\n the_list = ['and', 'we', 'can', 'not', 'lie']\n\n print('set to', the_list)\n\nouter_list = ['we', 'like', 'proper', 'English']\n\nprint('before, outer_list =', outer_list)\n\ntry_to_change_list_reference(outer_list)\n\nprint('after, outer_list =', outer_list)\n\n</code></pre>\n\n<p>Output:</p>\n\n<pre class="lang-none prettyprint-override"><code>before, outer_list = ['we', 'like', 'proper', 'English']\n\ngot ['we', 'like', 'proper', 'English']\n\nset to ['and', 'we', 'can', 'not', 'lie']\n\nafter, outer_list = ['we', 'like', 'proper', 'English']\n\n</code></pre>\n\n<p>Since the <code>the_list</code> parameter was passed by value, assigning a new list to it had no effect that the code outside the method could see. The <code>the_list</code> was a copy of the <code>outer_list</code> reference, and we had <code>the_list</code> point to a new list, but there was no way to change where <code>outer_list</code> pointed.</p>\n\n<h2>String - an immutable type</h2>\n\n<p><strong>It's immutable, so there's nothing we can do to change the contents of the string</strong></p>\n\n<p><strong>Now, let's try to change the reference</strong></p>\n\n<pre><code>def try_to_change_string_reference(the_string):\n\n print('got', the_string)\n\n the_string = 'In a kingdom by the sea'\n\n print('set to', the_string)\n\nouter_string = 'It was many and many a year ago'\n\nprint('before, outer_string =', outer_string)\n\ntry_to_change_string_reference(outer_string)\n\nprint('after, outer_string =', outer_string)\n\n</code></pre>\n\n<p>Output:</p>\n\n<pre class="lang-none prettyprint-override"><code>before, outer_string = It was many and many a year ago\n\ngot It was many and many a year ago\n\nset to In a kingdom by the sea\n\nafter, outer_string = It was many and many a year ago\n\n</code></pre>\n\n<p>Again, since the <code>the_string</code> parameter was passed by value, assigning a new string to it had no effect that the code outside the method could see. The <code>the_string</code> was a copy of the <code>outer_string</code> reference, and we had <code>the_string</code> point to a new string, but there was no way to change where <code>outer_string</code> pointed.</p>\n\n<p>I hope this clears things up a little.</p>\n\n<p><strong>EDIT:</strong> It's been noted that this doesn't answer the question that @David originally asked, "Is there something I can do to pass the variable by actual reference?". Let's work on that.</p>\n\n<h2>How do we get around this?</h2>\n\n<p>As @Andrea's answer shows, you could return the new value. This doesn't change the way things are passed in, but does let you get the information you want back out:</p>\n\n<pre><code>def return_a_whole_new_string(the_string):\n\n new_string = something_to_do_with_the_old_string(the_string)\n\n return new_string\n\n# then you could call it like\n\nmy_string = return_a_whole_new_string(my_string)\n\n</code></pre>\n\n<p>If you really wanted to avoid using a return value, you could create a class to hold your value and pass it into the function or use an existing class, like a list:</p>\n\n<pre><code>def use_a_wrapper_to_simulate_pass_by_reference(stuff_to_change):\n\n new_string = something_to_do_with_the_old_string(stuff_to_change[0])\n\n stuff_to_change[0] = new_string\n\n# then you could call it like\n\nwrapper = [my_string]\n\nuse_a_wrapper_to_simulate_pass_by_reference(wrapper)\n\ndo_something_with(wrapper[0])\n\n</code></pre>\n\n<p>Although this seems a little cumbersome.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	147
Difference between __str__ and __repr__?	<p><a href="https://stackoverflow.com/users/95810/alex-martelli">Alex</a> summarized well but, surprisingly, was too succinct.</p>\n\n<p>First, let me reiterate the main points in <a href="https://stackoverflow.com/a/1436756/3798217">Alexâs post</a>:</p>\n\n<ul>\n\n<li>The default implementation is useless (itâs hard to think of one which wouldnât be, but yeah)</li>\n\n<li><code>__repr__</code> goal is to be unambiguous</li>\n\n<li><code>__str__</code> goal is to be readable</li>\n\n<li>Containerâs <code>__str__</code> uses contained objectsâ <code>__repr__</code></li>\n\n</ul>\n\n<p><strong>Default implementation is useless</strong></p>\n\n<p>This is mostly a surprise because Pythonâs defaults tend to be fairly useful. However, in this case, having a default for <code>__repr__</code> which would act like:</p>\n\n<pre><code>return "%s(%r)" % (self.__class__, self.__dict__)\n\n</code></pre>\n\n<p>would have been too dangerous (for example, too easy to get into infinite recursion if objects reference each other). So Python cops out. Note that there is one default which is true: if <code>__repr__</code> is defined, and <code>__str__</code> is not, the object will behave as though <code>__str__=__repr__</code>.</p>\n\n<p>This means, in simple terms: almost every object you implement should have a functional <code>__repr__</code> thatâs usable for understanding the object. Implementing <code>__str__</code> is optional: do that if you need a âpretty printâ functionality (for example, used by a report generator).</p>\n\n<p><strong>The goal of <code>__repr__</code> is to be unambiguous</strong></p>\n\n<p>Let me come right out and say it â I do not believe in debuggers. I donât really know how to use any debugger, and have never used one seriously. Furthermore, I believe that the big fault in debuggers is their basic nature â most failures I debug happened a long long time ago, in a galaxy far far away. This means that I do believe, with religious fervor, in logging. Logging is the lifeblood of any decent fire-and-forget server system. Python makes it easy to log: with maybe some project specific wrappers, all you need is a</p>\n\n<pre><code>log(INFO, "I am in the weird function and a is", a, "and b is", b, "but I got a null C â using default", default_c)\n\n</code></pre>\n\n<p>But you have to do the last step â make sure every object you implement has a useful repr, so code like that can just work. This is why the âevalâ thing comes up: if you have enough information so <code>eval(repr(c))==c</code>, that means you know everything there is to know about <code>c</code>. If thatâs easy enough, at least in a fuzzy way, do it. If not, make sure you have enough information about <code>c</code> anyway. I usually use an eval-like format: <code>"MyClass(this=%r,that=%r)" % (self.this,self.that)</code>. It does not mean that you can actually construct MyClass, or that those are the right constructor arguments â but it is a useful form to express âthis is everything you need to know about this instanceâ.</p>\n\n<p>Note: I used <code>%r</code> above, not <code>%s</code>. You always want to use <code>repr()</code> [or <code>%r</code> formatting character, equivalently] inside <code>__repr__</code> implementation, or youâre defeating the goal of repr. You want to be able to differentiate <code>MyClass(3)</code> and <code>MyClass("3")</code>.</p>\n\n<p><strong>The goal of <code>__str__</code> is to be readable</strong></p>\n\n<p>Specifically, it is not intended to be unambiguous â notice that <code>str(3)==str("3")</code>. Likewise, if you implement an IP abstraction, having the str of it look like 192.168.1.1 is just fine. When implementing a date/time abstraction, the str can be "2010/4/12 15:35:22", etc. The goal is to represent it in a way that a user, not a programmer, would want to read it. Chop off useless digits, pretend to be some other class â as long is it supports readability, it is an improvement.</p>\n\n<p><strong>Containerâs <code>__str__</code> uses contained objectsâ <code>__repr__</code></strong></p>\n\n<p>This seems surprising, doesnât it? It is a little, but how readable would it be if it used their <code>__str__</code>?</p>\n\n<pre><code>[moshe is, 3, hello\n\nworld, this is a list, oh I don't know, containing just 4 elements]\n\n</code></pre>\n\n<p>Not very. Specifically, the strings in a container would find it way too easy to disturb its string representation. In the face of ambiguity, remember, Python resists the temptation to guess. If you want the above behavior when youâre printing a list, just</p>\n\n<pre><code>print "[" + ", ".join(l) + "]"\n\n</code></pre>\n\n<p>(you can probably also figure out what to do about dictionaries.</p>\n\n<p><strong>Summary</strong></p>\n\n<p>Implement <code>__repr__</code> for any class you implement. This should be second nature. Implement <code>__str__</code> if you think it would be useful to have a string version which errs on the side of readability.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	148
How to iterate over rows in a DataFrame in Pandas	<p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html#pandas-dataframe-iterrows" rel="noreferrer">DataFrame.iterrows</a> is a generator which yield both index and row</p>\n\n<pre><code>import pandas as pd\n\nimport numpy as np\n\ndf = pd.DataFrame([{'c1':10, 'c2':100}, {'c1':11,'c2':110}, {'c1':12,'c2':120}])\n\n</code></pre>\n\n<p></p>\n\n<pre><code>for index, row in df.iterrows():\n\n print(row['c1'], row['c2'])\n\nOutput: \n\n 10 100\n\n 11 110\n\n 12 120\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	149
How can I represent an 'Enum' in Python?	<p>Enums have been added to Python 3.4 as described in <a href="http://www.python.org/dev/peps/pep-0435/" rel="noreferrer">PEP 435</a>. It has also been <a href="https://pypi.python.org/pypi/enum34" rel="noreferrer">backported to 3.3, 3.2, 3.1, 2.7, 2.6, 2.5, and 2.4</a> on pypi. </p>\n\n<p>For more advanced Enum techniques try the <a href="https://pypi.python.org/pypi/aenum" rel="noreferrer">aenum library</a> (2.7, 3.3+, same author as <code>enum34</code>. Code is not perfectly compatible between py2 and py3, e.g. you'll need <a href="https://stackoverflow.com/a/25982264/57461"><code>__order__</code> in python 2</a>).</p>\n\n<ul>\n\n<li>To use <code>enum34</code>, do <code>$ pip install enum34</code></li>\n\n<li>To use <code>aenum</code>, do <code>$ pip install aenum</code></li>\n\n</ul>\n\n<p>Installing <code>enum</code> (no numbers) will install a completely different and incompatible version.</p>\n\n<hr>\n\n<pre><code>from enum import Enum # for enum34, or the stdlib version\n\n# from aenum import Enum # for the aenum version\n\nAnimal = Enum('Animal', 'ant bee cat dog')\n\nAnimal.ant # returns <Animal.ant: 1>\n\nAnimal['ant'] # returns <Animal.ant: 1> (string lookup)\n\nAnimal.ant.name # returns 'ant' (inverse lookup)\n\n</code></pre>\n\n<p>or equivalently:</p>\n\n<pre><code>class Animal(Enum):\n\n ant = 1\n\n bee = 2\n\n cat = 3\n\n dog = 4\n\n</code></pre>\n\n<hr>\n\n<p>In earlier versions, one way of accomplishing enums is:</p>\n\n<pre><code>def enum(**enums):\n\n return type('Enum', (), enums)\n\n</code></pre>\n\n<p>which is used like so:</p>\n\n<pre><code>>>> Numbers = enum(ONE=1, TWO=2, THREE='three')\n\n>>> Numbers.ONE\n\n1\n\n>>> Numbers.TWO\n\n2\n\n>>> Numbers.THREE\n\n'three'\n\n</code></pre>\n\n<p>You can also easily support automatic enumeration with something like this:</p>\n\n<pre><code>def enum(*sequential, **named):\n\n enums = dict(zip(sequential, range(len(sequential))), **named)\n\n return type('Enum', (), enums)\n\n</code></pre>\n\n<p>and used like so:</p>\n\n<pre><code>>>> Numbers = enum('ZERO', 'ONE', 'TWO')\n\n>>> Numbers.ZERO\n\n0\n\n>>> Numbers.ONE\n\n1\n\n</code></pre>\n\n<p>Support for converting the values back to names can be added this way:</p>\n\n<pre><code>def enum(*sequential, **named):\n\n enums = dict(zip(sequential, range(len(sequential))), **named)\n\n reverse = dict((value, key) for key, value in enums.iteritems())\n\n enums['reverse_mapping'] = reverse\n\n return type('Enum', (), enums)\n\n</code></pre>\n\n<p>This overwrites anything with that name, but it is useful for rendering your enums in output. It will throw KeyError if the reverse mapping doesn't exist. With the first example:</p>\n\n<pre><code>>>> Numbers.reverse_mapping['three']\n\n'THREE'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	150
How to randomly select an item from a list?	<p>Use <a href="https://docs.python.org/library/random.html#random.choice" rel="noreferrer"><code>random.choice()</code></a></p>\n\n<pre><code>import random\n\nfoo = ['a', 'b', 'c', 'd', 'e']\n\nprint(random.choice(foo))\n\n</code></pre>\n\n<p>For <a href="https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator" rel="noreferrer">cryptographically secure</a> random choices (e.g. for generating a passphrase from a wordlist) use <a href="https://docs.python.org/library/secrets.html#secrets.choice" rel="noreferrer"><code>secrets.choice()</code></a></p>\n\n<pre><code>import secrets\n\nfoo = ['battery', 'correct', 'horse', 'staple']\n\nprint(secrets.choice(foo))\n\n</code></pre>\n\n<p><code>secrets</code> is new in Python 3.6, on older versions of Python you can use the <a href="https://docs.python.org/library/random.html#random.SystemRandom" rel="noreferrer"><code>random.SystemRandom</code></a> class:</p>\n\n<pre><code>import random\n\nsecure_random = random.SystemRandom()\n\nprint(secure_random.choice(foo))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	151
Reverse a string in Python	<p>How about:</p>\n\n<pre><code>>>> 'hello world'[::-1]\n\n'dlrow olleh'\n\n</code></pre>\n\n<p>This is <a href="http://docs.python.org/2/whatsnew/2.3.html#extended-slices" rel="noreferrer">extended slice</a> syntax. It works by doing <code>[begin:end:step]</code> - by leaving begin and end off and specifying a step of -1, it reverses a string.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	152
How do I get the number of elements in a list?	<p>The <code>len()</code> function can be used with several different types in Python - both built-in types and library types. For example:</p>\n\n<pre><code>>>> len([1,2,3])\n\n3\n\n</code></pre>\n\n<p>Official 2.x documentation is here: <a href="https://docs.python.org/2/library/functions.html#len" rel="noreferrer" title="len()"><code>len()</code></a><br>\n\nOfficial 3.x documentation is here: <a href="https://docs.python.org/3/library/functions.html#len" rel="noreferrer" title="len()"><code>len()</code></a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	153
How do I parse a string to a float or int?	<pre><code>>>> a = "545.2222"\n\n>>> float(a)\n\n545.22220000000004\n\n>>> int(float(a))\n\n545\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	154
How to leave/exit/deactivate a Python virtualenv	<p>Usually, activating a virtualenv gives you a shell function named:</p>\n\n<pre><code>$ deactivate\n\n</code></pre>\n\n<p>which puts things back to normal.</p>\n\n<p>I have just looked specifically again at the code for <code>virtualenvwrapper</code>, and, yes, it too supports <code>deactivate</code> as the way to escape from all virtualenvs.</p>\n\n<p>If you are trying to leave an <a href="https://en.wikipedia.org/wiki/Anaconda_(Python_distribution)" rel="noreferrer"><em>Anaconda</em></a> environment, the command depends upon your version of <code>conda</code>. Recent versions (like 4.6) install a <code>conda</code> function directly in your shell, in which case you run:</p>\n\n<pre><code>conda deactivate\n\n</code></pre>\n\n<p>Older conda versions instead implement deactivation using a stand-alone script:</p>\n\n<pre><code>source deactivate\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	155
Meaning of @classmethod and @staticmethod for beginner?	<p>Though <code>classmethod</code> and <code>staticmethod</code> are quite similar, there's a slight difference in usage for both entities: <code>classmethod</code> must have a reference to a class object as the first parameter, whereas <code>staticmethod</code> can have no parameters at all.</p>\n\n<h2>Example</h2>\n\n<pre><code>class Date(object):\n\n def __init__(self, day=0, month=0, year=0):\n\n self.day = day\n\n self.month = month\n\n self.year = year\n\n @classmethod\n\n def from_string(cls, date_as_string):\n\n day, month, year = map(int, date_as_string.split('-'))\n\n date1 = cls(day, month, year)\n\n return date1\n\n @staticmethod\n\n def is_date_valid(date_as_string):\n\n day, month, year = map(int, date_as_string.split('-'))\n\n return day <= 31 and month <= 12 and year <= 3999\n\ndate2 = Date.from_string('11-09-2012')\n\nis_date = Date.is_date_valid('11-09-2012')\n\n</code></pre>\n\n<h2>Explanation</h2>\n\n<p>Let's assume an example of a class, dealing with date information (this will be our boilerplate):</p>\n\n<pre><code>class Date(object):\n\n def __init__(self, day=0, month=0, year=0):\n\n self.day = day\n\n self.month = month\n\n self.year = year\n\n</code></pre>\n\n<p>This class obviously could be used to store information about certain dates (without timezone information; let's assume all dates are presented in UTC).</p>\n\n<p>Here we have <code>__init__</code>, a typical initializer of Python class instances, which receives arguments as a typical <code>instancemethod</code>, having the first non-optional argument (<code>self</code>) that holds a reference to a newly created instance.</p>\n\n<p><strong>Class Method</strong></p>\n\n<p>We have some tasks that can be nicely done using <code>classmethod</code>s.</p>\n\n<p><em>Let's assume that we want to create a lot of <code>Date</code> class instances having date information coming from an outer source encoded as a string with format 'dd-mm-yyyy'. Suppose we have to do this in different places in the source code of our project.</em></p>\n\n<p>So what we must do here is:</p>\n\n<ol>\n\n<li>Parse a string to receive day, month and year as three integer variables or a 3-item tuple consisting of that variable.</li>\n\n<li>Instantiate <code>Date</code> by passing those values to the initialization call.</li>\n\n</ol>\n\n<p>This will look like:</p>\n\n<pre><code>day, month, year = map(int, string_date.split('-'))\n\ndate1 = Date(day, month, year)\n\n</code></pre>\n\n<p>For this purpose, C++ can implement such a feature with overloading, but Python lacks this overloading. Instead, we can use <code>classmethod</code>. Let's create another "<em>constructor</em>".</p>\n\n<pre><code> @classmethod\n\n def from_string(cls, date_as_string):\n\n day, month, year = map(int, date_as_string.split('-'))\n\n date1 = cls(day, month, year)\n\n return date1\n\ndate2 = Date.from_string('11-09-2012')\n\n</code></pre>\n\n<p>Let's look more carefully at the above implementation, and review what advantages we have here:</p>\n\n<ol>\n\n<li>We've implemented date string parsing in one place and it's reusable now.</li>\n\n<li>Encapsulation works fine here (if you think that you could implement string parsing as a single function elsewhere, this solution fits the OOP paradigm far better).</li>\n\n<li><code>cls</code> is an object that holds the <strong>class itself</strong>, not an instance of the class. It's pretty cool because if we inherit our <code>Date</code> class, all children will have <code>from_string</code> defined also.</li>\n\n</ol>\n\n<p><strong>Static method</strong></p>\n\n<p>What about <code>staticmethod</code>? It's pretty similar to <code>classmethod</code> but doesn't take any obligatory parameters (like a class method or instance method does).</p>\n\n<p>Let's look at the next use case.</p>\n\n<p><em>We have a date string that we want to validate somehow. This task is also logically bound to the <code>Date</code> class we've used so far, but doesn't require instantiation of it.</em></p>\n\n<p>Here is where <code>staticmethod</code> can be useful. Let's look at the next piece of code:</p>\n\n<pre><code> @staticmethod\n\n def is_date_valid(date_as_string):\n\n day, month, year = map(int, date_as_string.split('-'))\n\n return day <= 31 and month <= 12 and year <= 3999\n\n # usage:\n\n is_date = Date.is_date_valid('11-09-2012')\n\n</code></pre>\n\n<p>So, as we can see from usage of <code>staticmethod</code>, we don't have any access to what the class is---it's basically just a function, called syntactically like a method, but without access to the object and its internals (fields and another methods), while classmethod does.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	156
Random string generation with upper case letters and digits	<p><strong>Answer in one line:</strong></p>\n\n<pre><code>''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n\n</code></pre>\n\n<p>or even shorter starting with Python 3.6 using <a href="https://docs.python.org/3/library/random.html#random.choices" rel="noreferrer"><code>random.choices()</code></a>:</p>\n\n<pre><code>''.join(random.choices(string.ascii_uppercase + string.digits, k=N))\n\n</code></pre>\n\n<p><strong>A cryptographically more secure version; see <a href="https://stackoverflow.com/a/23728630/2213647">https://stackoverflow.com/a/23728630/2213647</a>:</strong></p>\n\n<pre><code>''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\n\n</code></pre>\n\n<p><strong>In details, with a clean function for further reuse:</strong></p>\n\n<pre><code>>>> import string\n\n>>> import random\n\n>>> def id_generator(size=6, chars=string.ascii_uppercase + string.digits):\n\n... return ''.join(random.choice(chars) for _ in range(size))\n\n...\n\n>>> id_generator()\n\n'G5G74W'\n\n>>> id_generator(3, "6793YUIO")\n\n'Y3U'\n\n</code></pre>\n\n<p><strong>How does it work ?</strong></p>\n\n<p>We import <code>string</code>, a module that contains sequences of common ASCII characters, and <code>random</code>, a module that deals with random generation.</p>\n\n<p><code>string.ascii_uppercase + string.digits</code> just concatenates the list of characters representing uppercase ASCII chars and digits:</p>\n\n<pre><code>>>> string.ascii_uppercase\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n>>> string.digits\n\n'0123456789'\n\n>>> string.ascii_uppercase + string.digits\n\n'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n\n</code></pre>\n\n<p>Then we use a list comprehension to create a list of 'n' elements:</p>\n\n<pre><code>>>> range(4) # range create a list of 'n' numbers\n\n[0, 1, 2, 3]\n\n>>> ['elem' for _ in range(4)] # we use range to create 4 times 'elem'\n\n['elem', 'elem', 'elem', 'elem']\n\n</code></pre>\n\n<p>In the example above, we use <code>[</code> to create the list, but we don't in the <code>id_generator</code> function so Python doesn't create the list in memory, but generates the elements on the fly, one by one (more about this <a href="https://stackoverflow.com/questions/231767/the-python-yield-keyword-explained/231855#231855">here</a>).</p>\n\n<p>Instead of asking to create 'n' times the string <code>elem</code>, we will ask Python to create 'n' times a random character, picked from a sequence of characters:</p>\n\n<pre><code>>>> random.choice("abcde")\n\n'a'\n\n>>> random.choice("abcde")\n\n'd'\n\n>>> random.choice("abcde")\n\n'b'\n\n</code></pre>\n\n<p>Therefore <code>random.choice(chars) for _ in range(size)</code> really is creating a sequence of <code>size</code> characters. Characters that are randomly picked from <code>chars</code>:</p>\n\n<pre><code>>>> [random.choice('abcde') for _ in range(3)]\n\n['a', 'b', 'b']\n\n>>> [random.choice('abcde') for _ in range(3)]\n\n['e', 'b', 'e']\n\n>>> [random.choice('abcde') for _ in range(3)]\n\n['d', 'a', 'c']\n\n</code></pre>\n\n<p>Then we just join them with an empty string so the sequence becomes a string:</p>\n\n<pre><code>>>> ''.join(['a', 'b', 'b'])\n\n'abb'\n\n>>> [random.choice('abcde') for _ in range(3)]\n\n['d', 'c', 'b']\n\n>>> ''.join(random.choice('abcde') for _ in range(3))\n\n'dac'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	157
How to print without newline or space?	<p>In Python 3, you can use the <code>sep=</code> and <code>end=</code> parameters of the <a href="https://docs.python.org/library/functions.html#print" rel="noreferrer"><code>print</code></a> function:</p>\n\n<p>To not add a newline to the end of the string:</p>\n\n<pre><code>print('.', end='')\n\n</code></pre>\n\n<p>To not add a space between all the function arguments you want to print:</p>\n\n<pre><code>print('a', 'b', 'c', sep='')\n\n</code></pre>\n\n<p>You can pass any string to either parameter, and you can use both parameters at the same time.</p>\n\n<p>If you are having trouble with buffering, you can flush the output by adding <code>flush=True</code> keyword argument:</p>\n\n<pre><code>print('.', end='', flush=True)\n\n</code></pre>\n\n<h2>Python 2.6 and 2.7</h2>\n\n<p>From Python 2.6 you can either import the <code>print</code> function from Python 3 using the <a href="https://docs.python.org/2/library/__future__.html" rel="noreferrer"><code>__future__</code> module</a>:</p>\n\n<pre><code>from __future__ import print_function\n\n</code></pre>\n\n<p>which allows you to use the Python 3 solution above.</p>\n\n<p>However, note that the <code>flush</code> keyword is not available in the version of the <code>print</code> function imported from <code>__future__</code> in Python 2; it only works in Python 3, more specifically 3.3 and later. In earlier versions you'll still need to flush manually with a call to <code>sys.stdout.flush()</code>. You'll also have to rewrite all other print statements in the file where you do this import.</p>\n\n<p>Or you can use <a href="https://docs.python.org/library/sys.html#sys.stdout" rel="noreferrer"><code>sys.stdout.write()</code></a></p>\n\n<pre><code>import sys\n\nsys.stdout.write('.')\n\n</code></pre>\n\n<p>You may also need to call</p>\n\n<pre><code>sys.stdout.flush()\n\n</code></pre>\n\n<p>to ensure <code>stdout</code> is flushed immediately.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	158
How do I sort a list of dictionaries by a value of the dictionary?	<p>It may look cleaner using a key instead a cmp:</p>\n\n<pre class="lang-py prettyprint-override"><code>newlist = sorted(list_to_be_sorted, key=lambda k: k['name']) \n\n</code></pre>\n\n<p>or as J.F.Sebastian and others suggested,</p>\n\n<pre class="lang-py prettyprint-override"><code>from operator import itemgetter\n\nnewlist = sorted(list_to_be_sorted, key=itemgetter('name')) \n\n</code></pre>\n\n<p>For completeness (as pointed out in comments by fitzgeraldsteele), add <code>reverse=True</code> to sort descending</p>\n\n<pre class="lang-py prettyprint-override"><code>newlist = sorted(l, key=itemgetter('name'), reverse=True)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	159
How do you append to a file in Python?	<pre><code>with open("test.txt", "a") as myfile:\n\n myfile.write("appended text")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	160
How to pad zeroes to a string?	<p>Strings:</p>\n\n<pre><code>>>> n = '4'\n\n>>> print(n.zfill(3))\n\n004\n\n</code></pre>\n\n<p>And for numbers:</p>\n\n<pre><code>>>> n = 4\n\n>>> print(f'{n:03}') # Preferred method, python >= 3.6\n\n004\n\n>>> print('%03d' % n)\n\n004\n\n>>> print(format(n, '03')) # python >= 2.6\n\n004\n\n>>> print('{0:03d}'.format(n)) # python >= 2.6 + python 3\n\n004\n\n>>> print('{foo:03d}'.format(foo=n)) # python >= 2.6 + python 3\n\n004\n\n>>> print('{:03d}'.format(n)) # python >= 2.7 + python3\n\n004\n\n</code></pre>\n\n<p><a href="https://docs.python.org/2/library/string.html#formatexamples" rel="noreferrer">String formatting documentation</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	161
Find all files in a directory with extension .txt in Python	<p>You can use <a href="https://docs.python.org/2/library/glob.html" rel="noreferrer"><code>glob</code></a>:</p>\n\n<pre><code>import glob, os\n\nos.chdir("/mydir")\n\nfor file in glob.glob("*.txt"):\n\n print(file)\n\n</code></pre>\n\n<p>or simply <a href="https://docs.python.org/2/library/os.html#os.listdir" rel="noreferrer"><code>os.listdir</code></a>:</p>\n\n<pre><code>import os\n\nfor file in os.listdir("/mydir"):\n\n if file.endswith(".txt"):\n\n print(os.path.join("/mydir", file))\n\n</code></pre>\n\n<p>or if you want to traverse directory, use <a href="https://docs.python.org/2/library/os.html#os.walk" rel="noreferrer"><code>os.walk</code></a>:</p>\n\n<pre><code>import os\n\nfor root, dirs, files in os.walk("/mydir"):\n\n for file in files:\n\n if file.endswith(".txt"):\n\n print(os.path.join(root, file))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	162
How to know if an object has an attribute in Python	<p>Try <a href="https://docs.python.org/3/library/functions.html#hasattr" rel="noreferrer"><code>hasattr()</code></a>:</p>\n\n<pre><code>if hasattr(a, 'property'):\n\n a.property\n\n</code></pre>\n\n<p>EDIT: See <a href="https://stackoverflow.com/a/610923/117030">zweiterlinde's answer</a> below, who offers good advice about asking forgiveness! A very pythonic approach! </p>\n\n<p>The general practice in python is that, if the property is likely to be there most of the time, simply call it and either let the exception propagate, or trap it with a try/except block. This will likely be faster than <code>hasattr</code>. If the property is likely to not be there most of the time, or you're not sure, using <code>hasattr</code> will probably be faster than repeatedly falling into an exception block.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	163
How to upgrade all Python packages with pip?	<p>There isn't a built-in flag yet, but you can use</p>\n\n<pre><code>pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip install -U\n\n</code></pre>\n\n<p>Note: there are infinite potential variations for this. I'm trying to keep this answer short and simple, but please do suggest variations in the comments!</p>\n\n<p>In older version of <code>pip</code>, you can use this instead:</p>\n\n<pre><code>pip freeze --local | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip install -U\n\n</code></pre>\n\n<p>The <code>grep</code> is to skip editable ("-e") package definitions, as suggested by @jawache. (Yes, you could replace <code>grep</code>+<code>cut</code> with <code>sed</code> or <code>awk</code> or <code>perl</code> or...).</p>\n\n<p>The <code>-n1</code> flag for <code>xargs</code> prevents stopping everything if updating one package fails (thanks <a href="https://stackoverflow.com/users/339505/andsens">@andsens</a>).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	164
fatal error: Python.h: No such file or directory	<p>Looks like you haven't properly installed the header files and static libraries for python dev. Use your package manager to install them system-wide. </p>\n\n<p>For <code>apt</code> (<strong>Ubuntu, Debian...</strong>):</p>\n\n<pre><code>sudo apt-get install python-dev # for python2.x installs\n\nsudo apt-get install python3-dev # for python3.x installs\n\n</code></pre>\n\n<p>For <code>yum</code> (<strong>CentOS, RHEL...</strong>):</p>\n\n<pre><code>sudo yum install python-devel # for python2.x installs\n\nsudo yum install python3-devel # for python3.x installs\n\n</code></pre>\n\n<p>For <code>dnf</code> (<strong>Fedora...</strong>):</p>\n\n<pre><code>sudo dnf install python2-devel # for python2.x installs\n\nsudo dnf install python3-devel # for python3.x installs\n\n</code></pre>\n\n<p>For <code>zypper</code> (<strong>openSUSE...</strong>):</p>\n\n<pre><code>sudo zypper in python-devel # for python2.x installs\n\nsudo zypper in python3-devel # for python3.x installs\n\n</code></pre>\n\n<p>For <code>apk</code> (<strong>Alpine...</strong>):</p>\n\n<pre><code># This is a departure from the normal Alpine naming\n\n# scheme, which uses py2- and py3- prefixes\n\nsudo apk add python2-dev # for python2.x installs\n\nsudo apk add python3-dev # for python3.x installs\n\n</code></pre>\n\n<p>For <code>apt-cyg</code> (<strong>Cygwin...</strong>):</p>\n\n<pre><code>apt-cyg install python-devel # for python2.x installs\n\napt-cyg install python3-devel # for python3.x installs\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	165
What does ** (double star/asterisk) and * (star/asterisk) do for parameters?	<p>The <code>*args</code> and <code>**kwargs</code> is a common idiom to allow arbitrary number of arguments to functions as described in the section <a href="http://docs.python.org/dev/tutorial/controlflow.html#more-on-defining-functions" rel="noreferrer">more on defining functions</a> in the Python documentation.</p>\n\n<p>The <code>*args</code> will give you all function parameters <a href="https://docs.python.org/dev/tutorial/controlflow.html#arbitrary-argument-lists" rel="noreferrer">as a tuple</a>:</p>\n\n<pre><code>def foo(*args):\n\n for a in args:\n\n print(a) \n\nfoo(1)\n\n# 1\n\nfoo(1,2,3)\n\n# 1\n\n# 2\n\n# 3\n\n</code></pre>\n\n<p>The <code>**kwargs</code> will give you all \n\n<strong>keyword arguments</strong> except for those corresponding to a formal parameter as a dictionary.</p>\n\n<pre><code>def bar(**kwargs):\n\n for a in kwargs:\n\n print(a, kwargs[a]) \n\nbar(name='one', age=27)\n\n# age 27\n\n# name one\n\n</code></pre>\n\n<p>Both idioms can be mixed with normal arguments to allow a set of fixed and some variable arguments:</p>\n\n<pre><code>def foo(kind, *args, **kwargs):\n\n pass\n\n</code></pre>\n\n<p>It is also possible to use this the other way around:</p>\n\n<pre><code>def foo(a, b, c):\n\n print(a, b, c)\n\nobj = {'b':10, 'c':'lee'}\n\nfoo(100,**obj)\n\n# 100 10 lee\n\n</code></pre>\n\n<p>Another usage of the <code>*l</code> idiom is to <strong>unpack argument lists</strong> when calling a function.</p>\n\n<pre><code>def foo(bar, lee):\n\n print(bar, lee)\n\nl = [1,2]\n\nfoo(*l)\n\n# 1 2\n\n</code></pre>\n\n<p>In Python 3 it is possible to use <code>*l</code> on the left side of an assignment (<a href="http://www.python.org/dev/peps/pep-3132/" rel="noreferrer">Extended Iterable Unpacking</a>), though it gives a list instead of a tuple in this context:</p>\n\n<pre><code>first, *rest = [1,2,3,4]\n\nfirst, *l, last = [1,2,3,4]\n\n</code></pre>\n\n<p>Also Python 3 adds new semantic (refer <a href="https://www.python.org/dev/peps/pep-3102/" rel="noreferrer">PEP 3102</a>):</p>\n\n<pre><code>def func(arg1, arg2, arg3, *, kwarg1, kwarg2):\n\n pass\n\n</code></pre>\n\n<p>Such function accepts only 3 positional arguments, and everything after <code>*</code> can only be passed as keyword arguments.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	166
Pythonic way to create a long multi-line string	<p>Are you talking about multi-line strings? Easy, use triple quotes to start and end them.</p>\n\n<pre><code>s = """ this is a very\n\n long string if I had the\n\n energy to type more and more ..."""\n\n</code></pre>\n\n<p>You can use single quotes too (3 of them of course at start and end) and treat the resulting string <code>s</code> just like any other string.</p>\n\n<p><strong>NOTE</strong>: Just as with any string, anything between the starting and ending quotes becomes part of the string, so this example has a leading blank (as pointed out by @root45). This string will also contain both blanks and newlines.</p>\n\n<p>I.e.,:</p>\n\n<pre><code>' this is a very long string if I had the energy to type more and more ...'\n\n</code></pre>\n\n<p>Finally, one can also construct long lines in Python like this:</p>\n\n<pre><code> s = ("this is a very"\n\n "long string too"\n\n "for sure ..."\n\n )\n\n</code></pre>\n\n<p>which will <strong>not</strong> include any extra blanks or newlines (this is a deliberate example showing what the effect of skipping blanks will result in):</p>\n\n<pre><code>'this is a verylong string toofor sure ...'\n\n</code></pre>\n\n<p>No commas required, simply place the strings to be joined together into a pair of parenthesis and be sure to account for any needed blanks and newlines.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	167
Delete column from pandas DataFrame	<p>The best way to do this in pandas is to use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html" rel="noreferrer"><code>drop</code></a>:</p>\n\n<pre><code>df = df.drop('column_name', 1)\n\n</code></pre>\n\n<p>where <code>1</code> is the <em>axis</em> number (<code>0</code> for rows and <code>1</code> for columns.)</p>\n\n<p>To delete the column without having to reassign <code>df</code> you can do:</p>\n\n<pre><code>df.drop('column_name', axis=1, inplace=True)\n\n</code></pre>\n\n<p>Finally, to drop by column <em>number</em> instead of by column <em>label</em>, try this to delete, e.g. the 1st, 2nd and 4th columns:</p>\n\n<pre><code>df = df.drop(df.columns[[0, 1, 3]], axis=1) # df.columns is zero-based pd.Index \n\n</code></pre>\n\n<p>Also working with "text" syntax for the columns:</p>\n\n<pre><code>df.drop(['column_nameA', 'column_nameB'], axis=1, inplace=True)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	168
Why is "1000000000000000 in range(1000000000000001)" so fast in Python 3?	<p>The Python 3 <code>range()</code> object doesn't produce numbers immediately; it is a <a href="https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence" rel="noreferrer">smart sequence object</a> that produces numbers <em>on demand</em>. All it contains is your start, stop and step values, then as you iterate over the object the next integer is calculated each iteration.</p>\n\n<p>The object also implements the <a href="https://docs.python.org/3/reference/datamodel.html#object.__contains__" rel="noreferrer"><code>object.__contains__</code> hook</a>, and <em>calculates</em> if your number is part of its range. Calculating is a (near) constant time operation <sup>*</sup>. There is never a need to scan through all possible integers in the range.</p>\n\n<p>From the <a href="https://docs.python.org/3/library/stdtypes.html#range" rel="noreferrer"><code>range()</code> object documentation</a>:</p>\n\n<blockquote>\n\n <p>The advantage of the <code>range</code> type over a regular <code>list</code> or <code>tuple</code> is that a range object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the <code>start</code>, <code>stop</code> and <code>step</code> values, calculating individual items and subranges as needed).</p>\n\n</blockquote>\n\n<p>So at a minimum, your <code>range()</code> object would do:</p>\n\n<pre><code>class my_range(object):\n\n def __init__(self, start, stop=None, step=1):\n\n if stop is None:\n\n start, stop = 0, start\n\n self.start, self.stop, self.step = start, stop, step\n\n if step < 0:\n\n lo, hi, step = stop, start, -step\n\n else:\n\n lo, hi = start, stop\n\n self.length = 0 if lo > hi else ((hi - lo - 1) // step) + 1\n\n def __iter__(self):\n\n current = self.start\n\n if self.step < 0:\n\n while current > self.stop:\n\n yield current\n\n current += self.step\n\n else:\n\n while current < self.stop:\n\n yield current\n\n current += self.step\n\n def __len__(self):\n\n return self.length\n\n def __getitem__(self, i):\n\n if i < 0:\n\n i += self.length\n\n if 0 <= i < self.length:\n\n return self.start + i * self.step\n\n raise IndexError('Index out of range: {}'.format(i))\n\n def __contains__(self, num):\n\n if self.step < 0:\n\n if not (self.stop < num <= self.start):\n\n return False\n\n else:\n\n if not (self.start <= num < self.stop):\n\n return False\n\n return (num - self.start) % self.step == 0\n\n</code></pre>\n\n<p>This is still missing several things that a real <code>range()</code> supports (such as the <code>.index()</code> or <code>.count()</code> methods, hashing, equality testing, or slicing), but should give you an idea.</p>\n\n<p>I also simplified the <code>__contains__</code> implementation to only focus on integer tests; if you give a real <code>range()</code> object a non-integer value (including subclasses of <code>int</code>), a slow scan is initiated to see if there is a match, just as if you use a containment test against a list of all the contained values. This was done to continue to support other numeric types that just happen to support equality testing with integers but are not expected to support integer arithmetic as well. See the original <a href="http://bugs.python.org/issue1766304" rel="noreferrer">Python issue</a> that implemented the containment test.</p>\n\n<hr>\n\n<p>* <em>Near</em> constant time because Python integers are unbounded and so math operations also grow in time as N grows, making this a O(log N) operation. Since itâs all executed in optimised C code and Python stores integer values in 30-bit chunks, youâd run out of memory before you saw any performance impact due to the size of the integers involved here.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	169
How to read a file line-by-line into a list?	<pre><code>with open(filename) as f:\n\n content = f.readlines()\n\n# you may also want to remove whitespace characters like ` ` at the end of each line\n\ncontent = [x.strip() for x in content] \n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	170
Convert two lists into a dictionary	<p>Like this:</p>\n\n<pre><code>>>> keys = ['a', 'b', 'c']\n\n>>> values = [1, 2, 3]\n\n>>> dictionary = dict(zip(keys, values))\n\n>>> print(dictionary)\n\n{'a': 1, 'b': 2, 'c': 3}\n\n</code></pre>\n\n<p>Voila :-) The pairwise <code>dict</code> constructor and <code>zip</code> function are awesomely useful: <a href="https://docs.python.org/3/library/functions.html#func-dict" rel="noreferrer">https://docs.python.org/3/library/functions.html#func-dict</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	171
How to check if the string is empty?	<p>Empty strings are <a href="http://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="noreferrer">"falsy"</a> which means they are considered false in a Boolean context, so you can just do this:</p>\n\n<pre><code>if not myString:\n\n</code></pre>\n\n<p>This is the preferred way if you know that your variable is a string. If your variable could also be some other type then you should use <code>myString == ""</code>. See the documentation on <a href="http://docs.python.org/library/stdtypes.html#truth-value-testing" rel="noreferrer">Truth Value Testing</a> for other values that are false in Boolean contexts.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	172
Why can't Python parse this JSON data?	<p>Your data is not valid <a href="https://www.json.org/" rel="noreferrer">JSON</a> format. You have <code>[]</code> when you should have <code>{}</code>:</p>\n\n<ul>\n\n<li><code>[]</code> are for JSON arrays, which are called <code>list</code> in Python</li>\n\n<li><code>{}</code> are for JSON objects, which are called <code>dict</code> in Python</li>\n\n</ul>\n\n<p>Here's how your JSON file should look:</p>\n\n<pre><code>{\n\n "maps": [\n\n {\n\n "id": "blabla",\n\n "iscategorical": "0"\n\n },\n\n {\n\n "id": "blabla",\n\n "iscategorical": "0"\n\n }\n\n ],\n\n "masks": {\n\n "id": "valore"\n\n },\n\n "om_points": "value",\n\n "parameters": {\n\n "id": "valore"\n\n }\n\n}\n\n</code></pre>\n\n<p>Then you can use your code:</p>\n\n<pre><code>import json\n\nfrom pprint import pprint\n\nwith open('data.json') as f:\n\n data = json.load(f)\n\npprint(data)\n\n</code></pre>\n\n<p>With data, you can now also find values like so:</p>\n\n<pre><code>data["maps"][0]["id"]\n\ndata["masks"]["id"]\n\ndata["om_points"]\n\n</code></pre>\n\n<p>Try those out and see if it starts to make sense.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	173
How do I check whether a file exists without exceptions?	<p>You have the <a href="https://docs.python.org/2/library/os.path.html#os.path.exists" rel="noreferrer"><code>os.path.exists</code></a> function:</p>\n\n<pre><code>import os.path\n\nos.path.exists(file_path)\n\n</code></pre>\n\n<p>This returns <code>True</code> for both files and directories but you can instead use</p>\n\n<pre><code>os.path.isfile(file_path)\n\n</code></pre>\n\n<p>to test if it's a file specifically. It follows symlinks.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	174
How can I print literal curly-brace characters in python string and also use .format on it?	<p>You need to double the <code>{{</code> and <code>}}</code>:</p>\n\n<pre><code>>>> x = " {{ Hello }} {0} "\n\n>>> print(x.format(42))\n\n' { Hello } 42 '\n\n</code></pre>\n\n<p>Here's the relevant part of the <a href="https://docs.python.org/library/string.html#formatstrings" rel="noreferrer">Python documentation for format string syntax</a>:</p>\n\n<blockquote>\n\n <p>Format strings contain âreplacement fieldsâ surrounded by curly braces <code>{}</code>. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: <code>{{</code> and <code>}}</code>.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	175
Converting integer to string?	<pre><code>>>> str(10)\n\n'10'\n\n>>> int('10')\n\n10\n\n</code></pre>\n\n<p>Links to the documentation:</p>\n\n<ul>\n\n<li><a href="https://docs.python.org/3/library/functions.html#int" rel="noreferrer"><code>int()</code></a> </li>\n\n<li><a href="https://docs.python.org/3/library/functions.html#str" rel="noreferrer"><code>str()</code></a></li>\n\n</ul>\n\n<p>Conversion to a string is done with the builtin <code>str()</code> function, which basically calls the <a href="https://docs.python.org/3/reference/datamodel.html#object.__str__" rel="noreferrer"><code>__str__()</code></a> method of its parameter.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	176
Calling a function of a module by using its name (a string)	<p>Assuming module <code>foo</code> with method <code>bar</code>:</p>\n\n<pre><code>import foo\n\nmethod_to_call = getattr(foo, 'bar')\n\nresult = method_to_call()\n\n</code></pre>\n\n<p>You could shorten lines 2 and 3 to:</p>\n\n<pre><code>result = getattr(foo, 'bar')()\n\n</code></pre>\n\n<p>if that makes more sense for your use case. </p>\n\n<p>You can use <a href="https://docs.python.org/library/functions.html#getattr" rel="noreferrer"><code>getattr</code></a> in this fashion on class instance bound methods, module-level methods, class methods... the list goes on.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	177
How do I write JSON data to a file?	<p>You forgot the actual JSON part - <code>data</code> is a dictionary and not yet JSON-encoded. Write it <a href="https://docs.python.org/3/library/json.html" rel="noreferrer">like this</a> for maximum compatibility (Python 2 and 3):</p>\n\n<pre><code>import json\n\nwith open('data.json', 'w') as f:\n\n json.dump(data, f)\n\n</code></pre>\n\n<p>On a modern system (i.e. Python 3 and UTF-8 support), you can write a nicer file with</p>\n\n<pre><code>import json\n\nwith open('data.json', 'w', encoding='utf-8') as f:\n\n json.dump(data, f, ensure_ascii=False, indent=4)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	178
Generate random integers between 0 and 9	<p>Try:</p>\n\n<pre><code>from random import randrange\n\nprint(randrange(10))\n\n</code></pre>\n\n<p><strong>Docs:</strong> <a href="https://docs.python.org/3/library/random.html#random.randrange" rel="noreferrer">https://docs.python.org/3/library/random.html#random.randrange</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	179
Static methods in Python?	<p>Yep, using the <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="noreferrer" title="staticmethod">staticmethod</a> decorator</p>\n\n<pre><code>class MyClass(object):\n\n @staticmethod\n\n def the_static_method(x):\n\n print(x)\n\nMyClass.the_static_method(2) # outputs 2\n\n</code></pre>\n\n<p>Note that some code might use the old method of defining a static method, using <code>staticmethod</code> as a function rather than a decorator. This should only be used if you have to support ancient versions of Python (2.2 and 2.3)</p>\n\n<pre><code>class MyClass(object):\n\n def the_static_method(x):\n\n print(x)\n\n the_static_method = staticmethod(the_static_method)\n\nMyClass.the_static_method(2) # outputs 2\n\n</code></pre>\n\n<p>This is entirely identical to the first example (using <code>@staticmethod</code>), just not using the nice decorator syntax</p>\n\n<p>Finally, use <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="noreferrer" title="staticmethod"><code>staticmethod()</code></a> sparingly! There are very few situations where static-methods are necessary in Python, and I've seen them used many times where a separate "top-level" function would have been clearer.</p>\n\n<hr>\n\n<p><a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="noreferrer" title="staticmethod">The following is verbatim from the documentation:</a>:</p>\n\n<blockquote>\n\n <p>A static method does not receive an implicit first argument. To declare a static method, use this idiom:</p>\n\n<pre><code>class C:\n\n @staticmethod\n\n def f(arg1, arg2, ...): ...\n\n</code></pre>\n\n <p>The @staticmethod form is a function <a href="https://docs.python.org/3/glossary.html#term-decorator" rel="noreferrer" title="term-decorator"><em>decorator</em></a> â see the description of function definitions in <a href="https://docs.python.org/3/reference/compound_stmts.html#function" rel="noreferrer" title="Function definitions"><em>Function definitions</em></a> for details.</p>\n\n <p>It can be called either on the class (such as <code>C.f()</code>) or on an instance (such as <code>C().f()</code>). The instance is ignored except for its class.</p>\n\n <p>Static methods in Python are similar to those found in Java or C++. For a more advanced concept, see <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="noreferrer" title="classmethod"><code>classmethod()</code></a>.</p>\n\n <p>For more information on static methods, consult the documentation on the standard type hierarchy in <a href="https://docs.python.org/3/reference/datamodel.html#types" rel="noreferrer" title="types"><em>The standard type hierarchy</em></a>.</p>\n\n <p>New in version 2.2.</p>\n\n <p>Changed in version 2.4: Function decorator syntax added.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	180
What does the "yield" keyword do?	<h2>Shortcut to understanding <code>yield</code></h2>\n\n<p>When you see a function with <code>yield</code> statements, apply this easy trick to understand what will happen:</p>\n\n<ol>\n\n<li>Insert a line <code>result = []</code> at the start of the function.</li>\n\n<li>Replace each <code>yield expr</code> with <code>result.append(expr)</code>.</li>\n\n<li>Insert a line <code>return result</code> at the bottom of the function.</li>\n\n<li>Yay - no more <code>yield</code> statements! Read and figure out code.</li>\n\n<li>Compare function to the original definition.</li>\n\n</ol>\n\n<p>This trick may give you an idea of the logic behind the function, but what actually happens with <code>yield</code> is significantly different than what happens in the list based approach. In many cases, the yield approach will be a lot more memory efficient and faster too. In other cases, this trick will get you stuck in an infinite loop, even though the original function works just fine. Read on to learn more...</p>\n\n<h2>Don't confuse your Iterables, Iterators, and Generators</h2>\n\n<p>First, the <strong>iterator protocol</strong> - when you write</p>\n\n<pre><code>for x in mylist:\n\n ...loop body...\n\n</code></pre>\n\n<p>Python performs the following two steps:</p>\n\n<ol>\n\n<li><p>Gets an iterator for <code>mylist</code>:</p>\n\n<p>Call <code>iter(mylist)</code> -> this returns an object with a <code>next()</code> method (or <code>__next__()</code> in Python 3).</p>\n\n<p>[This is the step most people forget to tell you about]</p></li>\n\n<li><p>Uses the iterator to loop over items:</p>\n\n<p>Keep calling the <code>next()</code> method on the iterator returned from step 1. The return value from <code>next()</code> is assigned to <code>x</code> and the loop body is executed. If an exception <code>StopIteration</code> is raised from within <code>next()</code>, it means there are no more values in the iterator and the loop is exited.</p></li>\n\n</ol>\n\n<p>The truth is Python performs the above two steps anytime it wants to <em>loop over</em> the contents of an object - so it could be a for loop, but it could also be code like <code>otherlist.extend(mylist)</code> (where <code>otherlist</code> is a Python list).</p>\n\n<p>Here <code>mylist</code> is an <em>iterable</em> because it implements the iterator protocol. In a user-defined class, you can implement the <code>__iter__()</code> method to make instances of your class iterable. This method should return an <em>iterator</em>. An iterator is an object with a <code>next()</code> method. It is possible to implement both <code>__iter__()</code> and <code>next()</code> on the same class, and have <code>__iter__()</code> return <code>self</code>. This will work for simple cases, but not when you want two iterators looping over the same object at the same time.</p>\n\n<p>So that's the iterator protocol, many objects implement this protocol:</p>\n\n<ol>\n\n<li>Built-in lists, dictionaries, tuples, sets, files.</li>\n\n<li>User-defined classes that implement <code>__iter__()</code>.</li>\n\n<li>Generators.</li>\n\n</ol>\n\n<p>Note that a <code>for</code> loop doesn't know what kind of object it's dealing with - it just follows the iterator protocol, and is happy to get item after item as it calls <code>next()</code>. Built-in lists return their items one by one, dictionaries return the <em>keys</em> one by one, files return the <em>lines</em> one by one, etc. And generators return... well that's where <code>yield</code> comes in:</p>\n\n<pre><code>def f123():\n\n yield 1\n\n yield 2\n\n yield 3\n\nfor item in f123():\n\n print item\n\n</code></pre>\n\n<p>Instead of <code>yield</code> statements, if you had three <code>return</code> statements in <code>f123()</code> only the first would get executed, and the function would exit. But <code>f123()</code> is no ordinary function. When <code>f123()</code> is called, it <em>does not</em> return any of the values in the yield statements! It returns a generator object. Also, the function does not really exit - it goes into a suspended state. When the <code>for</code> loop tries to loop over the generator object, the function resumes from its suspended state at the very next line after the <code>yield</code> it previously returned from, executes the next line of code, in this case, a <code>yield</code> statement, and returns that as the next item. This happens until the function exits, at which point the generator raises <code>StopIteration</code>, and the loop exits. </p>\n\n<p>So the generator object is sort of like an adapter - at one end it exhibits the iterator protocol, by exposing <code>__iter__()</code> and <code>next()</code> methods to keep the <code>for</code> loop happy. At the other end, however, it runs the function just enough to get the next value out of it, and puts it back in suspended mode.</p>\n\n<h2>Why Use Generators?</h2>\n\n<p>Usually, you can write code that doesn't use generators but implements the same logic. One option is to use the temporary list 'trick' I mentioned before. That will not work in all cases, for e.g. if you have infinite loops, or it may make inefficient use of memory when you have a really long list. The other approach is to implement a new iterable class SomethingIter that keeps the state in instance members and performs the next logical step in it's <code>next()</code> (or <code>__next__()</code> in Python 3) method. Depending on the logic, the code inside the <code>next()</code> method may end up looking very complex and be prone to bugs. Here generators provide a clean and easy solution.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	181
Extracting extension from filename in Python	<p>Yes. Use <code>os.path.splitext</code>(see <a href="https://docs.python.org/2/library/os.path.html#os.path.splitext" rel="noreferrer">Python 2.X documentation</a> or <a href="https://docs.python.org/3/library/os.path.html#os.path.splitext" rel="noreferrer">Python 3.X documentation</a>):</p>\n\n<pre><code>>>> import os\n\n>>> filename, file_extension = os.path.splitext('/path/to/somefile.ext')\n\n>>> filename\n\n'/path/to/somefile'\n\n>>> file_extension\n\n'.ext'\n\n</code></pre>\n\n<p>Unlike most manual string-splitting attempts, <code>os.path.splitext</code> will correctly treat <code>/a/b.c/d</code> as having no extension instead of having extension <code>.c/d</code>, and it will treat <code>.bashrc</code> as having no extension instead of having extension <code>.bashrc</code>:</p>\n\n<pre><code>>>> os.path.splitext('/a/b.c/d')\n\n('/a/b.c/d', '')\n\n>>> os.path.splitext('.bashrc')\n\n('.bashrc', '')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	182
Determine the type of an object?	<p>There are two built-in functions that help you identify the type of an object. You can use <a href="http://docs.python.org/3/library/functions.html#type" rel="noreferrer"><code>type()</code></a> if you need the exact type of an object, and <a href="http://docs.python.org/3/library/functions.html#isinstance" rel="noreferrer"><code>isinstance()</code></a> to <em>check</em> an objectâs type against something. Usually, you want to use <code>isistance()</code> most of the times since it is very robust and also supports type inheritance.</p>\n\n<hr>\n\n<p>To get the actual type of an object, you use the built-in <a href="http://docs.python.org/3/library/functions.html#type" rel="noreferrer"><code>type()</code></a> function. Passing an object as the only parameter will return the type object of that object:</p>\n\n<pre><code>>>> type([]) is list\n\nTrue\n\n>>> type({}) is dict\n\nTrue\n\n>>> type('') is str\n\nTrue\n\n>>> type(0) is int\n\nTrue\n\n</code></pre>\n\n<p>This of course also works for custom types:</p>\n\n<pre><code>>>> class Test1 (object):\n\n pass\n\n>>> class Test2 (Test1):\n\n pass\n\n>>> a = Test1()\n\n>>> b = Test2()\n\n>>> type(a) is Test1\n\nTrue\n\n>>> type(b) is Test2\n\nTrue\n\n</code></pre>\n\n<p>Note that <code>type()</code> will only return the immediate type of the object, but wonât be able to tell you about type inheritance.</p>\n\n<pre><code>>>> type(b) is Test1\n\nFalse\n\n</code></pre>\n\n<p>To cover that, you should use the <a href="http://docs.python.org/3/library/functions.html#isinstance" rel="noreferrer"><code>isinstance</code></a> function. This of course also works for built-in types:</p>\n\n<pre><code>>>> isinstance(b, Test1)\n\nTrue\n\n>>> isinstance(b, Test2)\n\nTrue\n\n>>> isinstance(a, Test1)\n\nTrue\n\n>>> isinstance(a, Test2)\n\nFalse\n\n>>> isinstance([], list)\n\nTrue\n\n>>> isinstance({}, dict)\n\nTrue\n\n</code></pre>\n\n<p><code>isinstance()</code> is usually the preferred way to ensure the type of an object because it will also accept derived types. So unless you actually need the type object (for whatever reason), using <code>isinstance()</code> is preferred over <code>type()</code>.</p>\n\n<p>The second parameter of <code>isinstance()</code> also accepts a tuple of types, so itâs possible to check for multiple types at once. <code>isinstance</code> will then return true, if the object is of any of those types:</p>\n\n<pre><code>>>> isinstance([], (tuple, list, set))\n\nTrue\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	183
Getting the class name of an instance?	<p>Have you tried the <a href="https://docs.python.org/library/stdtypes.html#definition.__name__" rel="noreferrer"><code>__name__</code> attribute</a> of the class? ie <code>type(x).__name__</code> will give you the name of the class, which I think is what you want.</p>\n\n<pre><code>>>> import itertools\n\n>>> x = itertools.count(0)\n\n>>> type(x).__name__\n\n'count'\n\n</code></pre>\n\n<p>If you're still using Python 2, note that the above method works with <a href="https://wiki.python.org/moin/NewClassVsClassicClass" rel="noreferrer">new-style classes</a> only (in Python 3+ all classes are "new-style" classes). Your code might use some old-style classes. The following works for both:</p>\n\n<pre><code>x.__class__.__name__\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	184
Are static class variables possible in Python?	<p>Variables declared inside the class definition, but not inside a method are class or static variables:</p>\n\n<pre><code>>>> class MyClass:\n\n... i = 3\n\n...\n\n>>> MyClass.i\n\n3 \n\n</code></pre>\n\n<p>As @<a href="https://stackoverflow.com/questions/68645/static-class-variables-in-python#answer-69067">millerdev</a> points out, this creates a class-level <code>i</code> variable, but this is distinct from any instance-level <code>i</code> variable, so you could have</p>\n\n<pre><code>>>> m = MyClass()\n\n>>> m.i = 4\n\n>>> MyClass.i, m.i\n\n>>> (3, 4)\n\n</code></pre>\n\n<p>This is different from C++ and Java, but not so different from C#, where a static member can't be accessed using a reference to an instance.</p>\n\n<p>See <a href="https://docs.python.org/3/tutorial/classes.html#class-objects" rel="noreferrer">what the Python tutorial has to say on the subject of classes and class objects</a>.</p>\n\n<p>@Steve Johnson has already answered regarding <a href="http://web.archive.org/web/20090214211613/http://pyref.infogami.com/staticmethod" rel="noreferrer">static methods</a>, also documented under <a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="noreferrer">"Built-in Functions" in the Python Library Reference</a>.</p>\n\n<pre><code>class C:\n\n @staticmethod\n\n def f(arg1, arg2, ...): ...\n\n</code></pre>\n\n<p>@beidy recommends <a href="https://docs.python.org/3/library/functions.html#classmethod" rel="noreferrer">classmethod</a>s over staticmethod, as the method then receives the class type as the first argument, but I'm still a little fuzzy on the advantages of this approach over staticmethod. If you are too, then it probably doesn't matter.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	185
Create a dictionary with list comprehension	<p>From Python 2.7 and 3 onwards, you should just use the <a href="http://www.python.org/dev/peps/pep-0274/" rel="noreferrer">dict comprehension syntax</a>:</p>\n\n<pre><code>{key: value for (key, value) in iterable}\n\n</code></pre>\n\n<p>In Python 2.6 and earlier, the <code>dict</code> built-in can receive an iterable of key/value pairs, so you can pass it a list comprehension or generator expression. For example:</p>\n\n<pre><code>dict((key, func(key)) for key in keys)\n\n</code></pre>\n\n<p>However if you already have iterable(s) of keys and/or vals, you needn't use a comprehension at all - it's simplest just call the <code>dict</code> built-in directly:</p>\n\n<pre><code># consumed from any iterable yielding pairs of keys/vals\n\ndict(pairs)\n\n# "zipped" from two separate iterables of keys/vals\n\ndict(zip(list_of_keys, list_of_values))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	186
How can I remove a trailing newline?	<p>Try the method <code>rstrip()</code> (see doc <a href="http://docs.python.org/2/library/stdtypes.html#str.rstrip" rel="noreferrer">Python 2</a> and <a href="https://docs.python.org/3/library/stdtypes.html#str.rstrip" rel="noreferrer">Python 3</a>)</p>\n\n<pre><code>>>> 'test string '.rstrip()\n\n'test string'\n\n</code></pre>\n\n<p>Python's <code>rstrip()</code> method strips <em>all</em> kinds of trailing whitespace by default, not just one newline as Perl does with <a href="http://perldoc.perl.org/functions/chomp.html" rel="noreferrer"><code>chomp</code></a>.</p>\n\n<pre><code>>>> 'test string '.rstrip()\n\n'test string'\n\n</code></pre>\n\n<p>To strip only newlines:</p>\n\n<pre><code>>>> 'test string '.rstrip(' ')\n\n'test string '\n\n</code></pre>\n\n<p>There are also the methods <code>lstrip()</code> and <code>strip()</code>:</p>\n\n<pre><code>>>> s = " abc def "\n\n>>> s.strip()\n\n'abc def'\n\n>>> s.lstrip()\n\n'abc def '\n\n>>> s.rstrip()\n\n' abc def'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	187
Renaming columns in pandas	<p>Just assign it to the <code>.columns</code> attribute:</p>\n\n<pre><code>>>> df = pd.DataFrame({'$a':[1,2], '$b': [10,20]})\n\n>>> df.columns = ['a', 'b']\n\n>>> df\n\n a b\n\n0 1 10\n\n1 2 20\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	188
How can I count the occurrences of a list item?	<p>If you only want one item's count, use the <code>count</code> method:</p>\n\n<pre><code>>>> [1, 2, 3, 4, 1, 4, 1].count(1)\n\n3\n\n</code></pre>\n\n<p><strong>Don't</strong> use this if you want to count multiple items. Calling <code>count</code> in a loop requires a separate pass over the list for every <code>count</code> call, which can be catastrophic for performance. If you want to count all items, or even just multiple items, use <code>Counter</code>, as explained in the other answers.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	189
How to print colored text in Python?	<p>This somewhat depends on what platform you are on. The most common way to do this is by printing ANSI escape sequences. For a simple example, here's some python code from the <a href="https://svn.blender.org/svnroot/bf-blender/trunk/blender/build_files/scons/tools/bcolors.py" rel="noreferrer">blender build scripts</a>:</p>\n\n<pre><code>class bcolors:\n\n HEADER = '\033[95m'\n\n OKBLUE = '\033[94m'\n\n OKGREEN = '\033[92m'\n\n WARNING = '\033[93m'\n\n FAIL = '\033[91m'\n\n ENDC = '\033[0m'\n\n BOLD = '\033[1m'\n\n UNDERLINE = '\033[4m'\n\n</code></pre>\n\n<p>To use code like this, you can do something like </p>\n\n<pre><code>print(bcolors.WARNING + "Warning: No active frommets remain. Continue?" + bcolors.ENDC)\n\n</code></pre>\n\n<p>or, with Python3.6+:</p>\n\n<pre><code>print(f"{bcolors.WARNING}Warning: No active frommets remain. Continue?{bcolors.ENDC}")\n\n</code></pre>\n\n<p>This will work on unixes including OS X, linux and windows (provided you use <a href="https://github.com/adoxa/ansicon" rel="noreferrer">ANSICON</a>, or in Windows 10 provided you enable <a href="https://msdn.microsoft.com/en-us/library/mt638032" rel="noreferrer">VT100 emulation</a>). There are ansi codes for setting the color, moving the cursor, and more.</p>\n\n<p>If you are going to get complicated with this (and it sounds like you are if you are writing a game), you should look into the "curses" module, which handles a lot of the complicated parts of this for you. The <a href="http://docs.python.org/howto/curses.html" rel="noreferrer" title="Python Curses howto">Python Curses HowTO</a> is a good introduction.</p>\n\n<p>If you are not using extended ASCII (i.e. not on a PC), you are stuck with the ascii characters below 127, and '#' or '@' is probably your best bet for a block. If you can ensure your terminal is using a IBM <a href="http://telecom.tbi.net/asc-ibm.html" rel="noreferrer">extended ascii character set</a>, you have many more options. Characters 176, 177, 178 and 219 are the "block characters".</p>\n\n<p>Some modern text-based programs, such as "Dwarf Fortress", emulate text mode in a graphical mode, and use images of the classic PC font. You can find some of these bitmaps that you can use on the <a href="http://dwarffortresswiki.org/DF2014:Tilesets" rel="noreferrer">Dwarf Fortress Wiki</a> see (<a href="http://dwarffortresswiki.org/Tileset_repository" rel="noreferrer">user-made tilesets</a>).</p>\n\n<p>The <a href="http://en.wikipedia.org/wiki/TMDC" rel="noreferrer" title="text mode demo contest">Text Mode Demo Contest</a> has more resources for doing graphics in text mode.</p>\n\n<p>Hmm.. I think got a little carried away on this answer. I am in the midst of planning an epic text-based adventure game, though. Good luck with your colored text!</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	190
Understanding Python super() with __init__() methods	<p><code>super()</code> lets you avoid referring to the base class explicitly, which can be nice. But the main advantage comes with multiple inheritance, where all sorts of <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=236275" rel="noreferrer">fun stuff</a> can happen. See the <a href="https://docs.python.org/2/library/functions.html#super" rel="noreferrer">standard docs on super</a> if you haven't already.</p>\n\n<p>Note that <a href="https://docs.python.org/3/library/functions.html#super" rel="noreferrer">the syntax changed in Python 3.0</a>: you can just say <code>super().__init__()</code> instead of <code>super(ChildB, self).__init__()</code> which IMO is quite a bit nicer. The standard docs also refer to a <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="noreferrer">guide to using <code>super()</code></a> which is quite explanatory.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	191
How to install pip on Windows?	<h2>Python 2.7.9+ and 3.4+</h2>\n\n<p>Good news! <a href="https://docs.python.org/3/whatsnew/3.4.html" rel="noreferrer">Python 3.4</a> (released March 2014) and <a href="https://docs.python.org/2/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7" rel="noreferrer">Python 2.7.9</a> (released December 2014) ship with Pip. This is the best feature of any Python release. It makes the community's wealth of libraries accessible to everyone. Newbies are no longer excluded from using community libraries by the prohibitive difficulty of setup. In shipping with a package manager, Python joins <a href="http://en.wikipedia.org/wiki/Ruby_%28programming_language%29" rel="noreferrer">Ruby</a>, <a href="http://en.wikipedia.org/wiki/Node.js" rel="noreferrer">Node.js</a>, <a href="http://en.wikipedia.org/wiki/Haskell_%28programming_language%29" rel="noreferrer">Haskell</a>, <a href="http://en.wikipedia.org/wiki/Perl" rel="noreferrer">Perl</a>, <a href="http://en.wikipedia.org/wiki/Go_%28programming_language%29" rel="noreferrer">Go</a>—almost every other contemporary language with a majority open-source community. Thank you, Python.</p>\n\n<p>If you do find that pip is not available when using Python 3.4+ or Python 2.7.9+, simply execute e.g.:</p>\n\n<pre><code>py -3 -m ensurepip\n\n</code></pre>\n\n<p>Of course, that doesn't mean Python packaging is problem solved. The experience remains frustrating. I discuss this <a href="https://stackoverflow.com/questions/2436731/does-python-have-a-package-module-management-system/13445719#13445719">in the Stack Overflow question <em>Does Python have a package/module management system?</em></a>.</p>\n\n<p>And, alas for everyone using Python 2.7.8 or earlier (a sizable portion of the community). There's no plan to ship Pip to you. Manual instructions follow.</p>\n\n<h2>Python 2 â¤ 2.7.8 and Python 3 â¤ 3.3</h2>\n\n<p>Flying in the face of its <a href="http://www.python.org/about/" rel="noreferrer">'batteries included'</a> motto, Python ships without a package manager. To make matters worse, Pip was—until recently—ironically difficult to install.</p>\n\n<h3>Official instructions</h3>\n\n<p>Per <a href="https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip" rel="noreferrer">https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip</a>:</p>\n\n<p>Download <a href="https://bootstrap.pypa.io/get-pip.py" rel="noreferrer"><code>get-pip.py</code></a>, being careful to save it as a <code>.py</code> file rather than <code>.txt</code>. Then, run it from the command prompt:</p>\n\n<pre><code>python get-pip.py\n\n</code></pre>\n\n<p>You possibly need an administrator command prompt to do this. Follow <em><a href="http://technet.microsoft.com/en-us/library/cc947813(v=ws.10).aspx" rel="noreferrer">Start a Command Prompt as an Administrator</a></em> (Microsoft TechNet).</p>\n\n<p>This installs the pip package, which (in Windows) contains ...\Scripts\pip.exe that path must be in PATH environment variable to use pip from the command line (see the second part of 'Alternative Instructions' for adding it to your PATH,</p>\n\n<h3>Alternative instructions</h3>\n\n<p>The official documentation tells users to install Pip and each of its dependencies from source. That's tedious for the experienced and prohibitively difficult for newbies.</p>\n\n<p>For our sake, Christoph Gohlke prepares Windows installers (<code>.msi</code>) for popular Python packages. He builds installers for all Python versions, both 32 and 64 bit. You need to:</p>\n\n<ol>\n\n<li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools" rel="noreferrer">Install setuptools</a></li>\n\n<li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip" rel="noreferrer">Install pip</a></li>\n\n</ol>\n\n<p>For me, this installed Pip at <code>C:\Python27\Scripts\pip.exe</code>. Find <code>pip.exe</code> on your computer, then add its folder (for example, <code>C:\Python27\Scripts</code>) to your path (Start / Edit environment variables). Now you should be able to run <code>pip</code> from the command line. Try installing a package:</p>\n\n<pre><code>pip install httpie\n\n</code></pre>\n\n<p>There you go (hopefully)! Solutions for common problems are given below:</p>\n\n<h3>Proxy problems</h3>\n\n<p>If you work in an office, you might be behind an HTTP proxy. If so, set the environment variables <a href="http://docs.python.org/2/library/urllib.html" rel="noreferrer"><code>http_proxy</code> and <code>https_proxy</code></a>. Most Python applications (and other free software) respect these. Example syntax:</p>\n\n<pre><code>http://proxy_url:port\n\nhttp://username:password@proxy_url:port\n\n</code></pre>\n\n<p>If you're really unlucky, your proxy might be a Microsoft <a href="https://en.wikipedia.org/wiki/NT_LAN_Manager" rel="noreferrer">NTLM</a> proxy. Free software can't cope. The only solution is to install a free software friendly proxy that forwards to the nasty proxy. <a href="http://cntlm.sourceforge.net/" rel="noreferrer">http://cntlm.sourceforge.net/</a></p>\n\n<h3>Unable to find vcvarsall.bat</h3>\n\n<p>Python modules can be partly written in C or C++. Pip tries to compile from source. If you don't have a C/C++ compiler installed and configured, you'll see this cryptic error message.</p>\n\n<blockquote>\n\n <p>Error: Unable to find vcvarsall.bat</p>\n\n</blockquote>\n\n<p>You can fix that by <a href="https://stackoverflow.com/questions/2817869/error-unable-to-find-vcvarsall-bat">installing a C++ compiler</a> such as <a href="http://en.wikipedia.org/wiki/MinGW" rel="noreferrer">MinGW</a> or <a href="http://en.wikipedia.org/wiki/Visual_C%2B%2B#32-bit_versions" rel="noreferrer">Visual C++</a>. Microsoft actually ships one specifically for use with Python. Or try <em><a href="http://aka.ms/vcpython27" rel="noreferrer">Microsoft Visual C++ Compiler for Python 2.7</a></em>.</p>\n\n<p>Often though it's easier to check <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noreferrer">Christoph's site</a> for your package.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	192
How to put the legend out of the plot	<p>There are a number of ways to do what you want. To add to what @inalis and @Navi already said, you can use the <code>bbox_to_anchor</code> keyword argument to place the legend partially outside the axes and/or decrease the font size. </p>\n\n<p>Before you consider decreasing the font size (which can make things awfully hard to read), try playing around with placing the legend in different places:</p>\n\n<p>So, let's start with a generic example:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\n\nax = plt.subplot(111)\n\nfor i in xrange(5):\n\n ax.plot(x, i * x, label='$y = %ix$' % i)\n\nax.legend()\n\nplt.show()\n\n</code></pre>\n\n<p><img src="https://i.stack.imgur.com/LQ8xkm.png" alt="alt text"></p>\n\n<p>If we do the same thing, but use the <code>bbox_to_anchor</code> keyword argument we can shift the legend slightly outside the axes boundaries:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\n\nax = plt.subplot(111)\n\nfor i in xrange(5):\n\n ax.plot(x, i * x, label='$y = %ix$' % i)\n\nax.legend(bbox_to_anchor=(1.1, 1.05))\n\nplt.show()\n\n</code></pre>\n\n<p><img src="https://i.stack.imgur.com/OtE5Um.png" alt="alt text"></p>\n\n<p>Similarly, you can make the legend more horizontal and/or put it at the top of the figure (I'm also turning on rounded corners and a simple drop shadow):</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\n\nax = plt.subplot(111)\n\nfor i in xrange(5):\n\n line, = ax.plot(x, i * x, label='$y = %ix$'%i)\n\nax.legend(loc='upper center', bbox_to_anchor=(0.5, 1.05),\n\n ncol=3, fancybox=True, shadow=True)\n\nplt.show()\n\n</code></pre>\n\n<p><img src="https://i.stack.imgur.com/zgtBlm.png" alt="alt text"></p>\n\n<p>Alternatively, you can shrink the current plot's width, and put the legend entirely outside the axis of the figure (note: if you use <a href="https://matplotlib.org/3.2.1/tutorials/intermediate/tight_layout_guide.html" rel="noreferrer">tight_layout()</a>, then leave out ax.set_position():</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\n\nax = plt.subplot(111)\n\nfor i in xrange(5):\n\n ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Shrink current axis by 20%\n\nbox = ax.get_position()\n\nax.set_position([box.x0, box.y0, box.width * 0.8, box.height])\n\n# Put a legend to the right of the current axis\n\nax.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\nplt.show()\n\n</code></pre>\n\n<p><img src="https://i.stack.imgur.com/v34g8m.png" alt="alt text"></p>\n\n<p>And in a similar manner, you can shrink the plot vertically, and put the a horizontal legend at the bottom:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nimport numpy as np\n\nx = np.arange(10)\n\nfig = plt.figure()\n\nax = plt.subplot(111)\n\nfor i in xrange(5):\n\n line, = ax.plot(x, i * x, label='$y = %ix$'%i)\n\n# Shrink current axis's height by 10% on the bottom\n\nbox = ax.get_position()\n\nax.set_position([box.x0, box.y0 + box.height * 0.1,\n\n box.width, box.height * 0.9])\n\n# Put a legend below current axis\n\nax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),\n\n fancybox=True, shadow=True, ncol=5)\n\nplt.show()\n\n</code></pre>\n\n<p><img src="https://i.stack.imgur.com/cXcYam.png" alt="alt text"></p>\n\n<p>Have a look at the <a href="http://matplotlib.org/users/legend_guide.html#legend-location" rel="noreferrer">matplotlib legend guide</a>. You might also take a look at <a href="http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.figlegend" rel="noreferrer"><code>plt.figlegend()</code></a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	193
What does if __name__ == "__main__": do?	<p>When your script is run by passing it as a command to the Python interpreter,</p>\n\n<pre><code>python myscript.py\n\n</code></pre>\n\n<p>all of the code that is at indentation level 0 gets executed. Functions and classes that are defined are, well, defined, but none of their code gets run. Unlike other languages, there's no <code>main()</code> function that gets run automatically - the <code>main()</code> function is implicitly all the code at the top level.</p>\n\n<p>In this case, the top-level code is an <code>if</code> block. <code>__name__</code> is a built-in variable which evaluates to the name of the current module. However, if a module is being run directly (as in <code>myscript.py</code> above), then <code>__name__</code> instead is set to the string <code>"__main__"</code>. Thus, you can test whether your script is being run directly or being imported by something else by testing</p>\n\n<pre><code>if __name__ == "__main__":\n\n ...\n\n</code></pre>\n\n<p>If your script is being imported into another module, its various function and class definitions will be imported and its top-level code will be executed, but the code in the then-body of the <code>if</code> clause above won't get run as the condition is not met. As a basic example, consider the following two scripts:</p>\n\n<pre><code># file one.py\n\ndef func():\n\n print("func() in one.py")\n\nprint("top-level in one.py")\n\nif __name__ == "__main__":\n\n print("one.py is being run directly")\n\nelse:\n\n print("one.py is being imported into another module")\n\n</code></pre>\n\n<pre><code># file two.py\n\nimport one\n\nprint("top-level in two.py")\n\none.func()\n\nif __name__ == "__main__":\n\n print("two.py is being run directly")\n\nelse:\n\n print("two.py is being imported into another module")\n\n</code></pre>\n\n<p>Now, if you invoke the interpreter as</p>\n\n<pre><code>python one.py\n\n</code></pre>\n\n<p>The output will be</p>\n\n<pre><code>top-level in one.py\n\none.py is being run directly\n\n</code></pre>\n\n<p>If you run <code>two.py</code> instead:</p>\n\n<pre><code>python two.py\n\n</code></pre>\n\n<p>You get</p>\n\n<pre><code>top-level in one.py\n\none.py is being imported into another module\n\ntop-level in two.py\n\nfunc() in one.py\n\ntwo.py is being run directly\n\n</code></pre>\n\n<p>Thus, when module <code>one</code> gets loaded, its <code>__name__</code> equals <code>"one"</code> instead of <code>"__main__"</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	194
Is there a way to create multiline comments in Python?	<p>You can use triple-quoted strings. When they're not a docstring (the first thing in a class/function/module), they are ignored.</p>\n\n<pre><code>'''\n\nThis is a multiline\n\ncomment.\n\n'''\n\n</code></pre>\n\n<p>(Make sure to indent the leading <code>'''</code> appropriately to avoid an <code>IndentationError</code>.)</p>\n\n<p><a href="https://en.wikipedia.org/wiki/Guido_van_Rossum" rel="noreferrer">Guido van Rossum</a> (creator of Python) <a href="https://twitter.com/gvanrossum/status/112670605505077248" rel="noreferrer">tweeted this</a> as a "pro tip".</p>\n\n<p>However, Python's style guide, PEP8, <a href="http://www.python.org/dev/peps/pep-0008/#block-comments" rel="noreferrer">favors using consecutive single-line comments</a>, and this is also what you'll find in many projects. Text editors usually have a shortcut to do this easily.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	195
Selecting multiple columns in a pandas dataframe	<p>The column names (which are strings) cannot be sliced in the manner you tried.</p>\n\n<p>Here you have a couple of options. If you know from context which variables you want to slice out, you can just return a view of only those columns by passing a list into the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#basics" rel="nofollow noreferrer"><code>__getitem__</code> syntax</a> (the []'s).</p>\n\n<pre><code>df1 = df[['a', 'b']]\n\n</code></pre>\n\n<p>Alternatively, if it matters to index them numerically and not by their name (say your code should automatically do this without knowing the names of the first two columns) then you can do this instead:</p>\n\n<pre><code>df1 = df.iloc[:, 0:2] # Remember that Python does not slice inclusive of the ending index.\n\n</code></pre>\n\n<p>Additionally, you should familiarize yourself with the idea of a view into a Pandas object vs. a copy of that object. The first of the above methods will return a new copy in memory of the desired sub-object (the desired slices).</p>\n\n<p>Sometimes, however, there are indexing conventions in Pandas that don't do this and instead give you a new variable that just refers to the same chunk of memory as the sub-object or slice in the original object. This will happen with the second way of indexing, so you can modify it with the <code>copy()</code> function to get a regular copy. When this happens, changing what you think is the sliced object can sometimes alter the original object. Always good to be on the look out for this.</p>\n\n<pre><code>df1 = df.iloc[0, 0:2].copy() # To avoid the case where changing df1 also changes df\n\n</code></pre>\n\n<p>To use <code>iloc</code>, you need to know the column positions (or indices). As the column positions may change, instead of hard-coding indices, you can use <code>iloc</code> along with <code>get_loc</code> function of <code>columns</code> method of dataframe object to obtain column indices.</p>\n\n<pre><code>{df.columns.get_loc(c): c for idx, c in enumerate(df.columns)}\n\n</code></pre>\n\n<p>Now you can use this dictionary to access columns through names and using <code>iloc</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	196
What is the Python 3 equivalent of "python -m SimpleHTTPServer"	<p>From <a href="https://docs.python.org/2/library/simplehttpserver.html" rel="noreferrer">the docs</a>:</p>\n\n<blockquote>\n\n <p>The <code>SimpleHTTPServer</code> module has been merged into <code>http.server</code> in Python 3.0. The 2to3 tool will automatically adapt imports when converting your sources to 3.0.</p>\n\n</blockquote>\n\n<p>So, your command is <code>python -m http.server</code>, or depending on your installation, it can be:</p>\n\n<pre><code>python3 -m http.server\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	197
How can I count the occurrences of a list item?	<p>Use <a href="https://docs.python.org/3/library/collections.html#collections.Counter" rel="noreferrer"><code>Counter</code></a> if you are using Python 2.7 or 3.x and you want the number of occurrences for each element:</p>\n\n<pre class="lang-py prettyprint-override"><code>>>> from collections import Counter\n\n>>> z = ['blue', 'red', 'blue', 'yellow', 'blue', 'red']\n\n>>> Counter(z)\n\nCounter({'blue': 3, 'red': 2, 'yellow': 1})\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	198
How do I get time of a Python program's execution?	<p>The simplest way in Python:</p>\n\n<pre><code>import time\n\nstart_time = time.time()\n\nmain()\n\nprint("--- %s seconds ---" % (time.time() - start_time))\n\n</code></pre>\n\n<p>This assumes that your program takes at least a tenth of second to run.</p>\n\n<p>Prints:</p>\n\n<pre><code>--- 0.764891862869 seconds ---\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	199
How to remove an element from a list by index	<p>Use <code>del</code> and specify the index of the element you want to delete:</p>\n\n<pre><code>>>> a = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n>>> del a[-1]\n\n>>> a\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n</code></pre>\n\n<p>Also supports slices:</p>\n\n<pre><code>>>> del a[2:4]\n\n>>> a\n\n[0, 1, 4, 5, 6, 7, 8, 9]\n\n</code></pre>\n\n<p><a href="http://docs.python.org/tutorial/datastructures.html#the-del-statement" rel="noreferrer">Here</a> is the section from the tutorial.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	200
Delete an element from a dictionary	<p>The <a href="http://docs.python.org/reference/simple_stmts.html#the-del-statement" rel="noreferrer"><code>del</code> statement</a> removes an element:</p>\n\n<pre><code>del d[key]\n\n</code></pre>\n\n<p>However, this mutates the existing dictionary so the contents of the dictionary changes for anybody else who has a reference to the same instance. To return a <em>new</em> dictionary, make a copy of the dictionary:</p>\n\n<pre><code>def removekey(d, key):\n\n r = dict(d)\n\n del r[key]\n\n return r\n\n</code></pre>\n\n<p>The <code>dict()</code> constructor makes a <em>shallow copy</em>. To make a deep copy, see the <a href="https://docs.python.org/library/copy.html" rel="noreferrer"><code>copy</code> module</a>.</p>\n\n<hr>\n\n<p>Note that making a copy for every dict <code>del</code>/assignment/etc. means you're going from constant time to linear time, and also using linear space. For small dicts, this is not a problem. But if you're planning to make lots of copies of large dicts, you probably want a different data structure, like a HAMT (as described in <a href="https://stackoverflow.com/a/50341031/908494">this answer</a>).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	201
How to print number with commas as thousands separators?	<h3>Locale unaware</h3>\n\n<pre><code>'{:,}'.format(value) # For Python â¥2.7\n\nf'{value:,}' # For Python â¥3.6\n\n</code></pre>\n\n<h3>Locale aware</h3>\n\n<pre><code>import locale\n\nlocale.setlocale(locale.LC_ALL, '') # Use '' for auto, or force e.g. to 'en_US.UTF-8'\n\n'{:n}'.format(value) # For Python â¥2.7\n\nf'{value:n}' # For Python â¥3.6\n\n</code></pre>\n\n<h3>Reference</h3>\n\n<p>Per <a href="https://docs.python.org/library/string.html#format-specification-mini-language" rel="noreferrer">Format Specification Mini-Language</a>,</p>\n\n<blockquote>\n\n <p>The <code>','</code> option signals the use of a comma for a thousands separator. For a locale aware separator, use the <code>'n'</code> integer presentation type instead.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	202
How do I trim whitespace from a string?	<p>Just one space, or all consecutive spaces? If the second, then strings already have a <code>.strip()</code> method:</p>\n\n<pre><code>>>> ' Hello '.strip()\n\n'Hello'\n\n>>> ' Hello'.strip()\n\n'Hello'\n\n>>> 'Bob has a cat'.strip()\n\n'Bob has a cat'\n\n>>> ' Hello '.strip() # ALL consecutive spaces at both ends removed\n\n'Hello'\n\n</code></pre>\n\n<p>If you need only to remove one space however, you could do it with:</p>\n\n<pre><code>def strip_one_space(s):\n\n if s.endswith(" "): s = s[:-1]\n\n if s.startswith(" "): s = s[1:]\n\n return s\n\n>>> strip_one_space(" Hello ")\n\n' Hello'\n\n</code></pre>\n\n<p>Also, note that <code>str.strip()</code> removes other whitespace characters as well (e.g. tabs and newlines). To remove only spaces, you can specify the character to remove as an argument to <code>strip</code>, i.e.:</p>\n\n<pre><code>>>> " Hello ".strip(" ")\n\n'Hello '\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	203
How to find if directory exists in Python	<p>You're looking for <a href="http://docs.python.org/dev/library/os.path.html#os.path.isdir"><code>os.path.isdir</code></a>, or <a href="http://docs.python.org/dev/library/os.path.html#os.path.exists"><code>os.path.exists</code></a> if you don't care whether it's a file or a directory.</p>\n\n<p>Example:</p>\n\n<pre><code>import os\n\nprint(os.path.isdir("/home/el"))\n\nprint(os.path.exists("/home/el/myfile.txt"))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	204
Limiting floats to two decimal points	<p>You are running into the <a href="https://en.wikipedia.org/wiki/IEEE_754" rel="noreferrer">old problem</a> with floating point numbers that not all numbers can be represented exactly. The command line is just showing you the full floating point form from memory.</p>\n\n<p>With floating point representation, your rounded version is the same number. Since computers are binary, they store floating point numbers as an integer and then divide it by a power of two so 13.95 will be represented in a similar fashion to 125650429603636838/(2**53).</p>\n\n<p>Double precision numbers have 53 bits (16 digits) of precision and regular floats have 24 bits (8 digits) of precision. The <a href="http://docs.python.org/tutorial/floatingpoint.html" rel="noreferrer">floating point type in Python uses double precision</a> to store the values.</p>\n\n<p>For example,</p>\n\n<pre><code>>>> 125650429603636838/(2**53)\n\n13.949999999999999\n\n>>> 234042163/(2**24)\n\n13.949999988079071\n\n>>> a = 13.946\n\n>>> print(a)\n\n13.946\n\n>>> print("%.2f" % a)\n\n13.95\n\n>>> round(a,2)\n\n13.949999999999999\n\n>>> print("%.2f" % round(a, 2))\n\n13.95\n\n>>> print("{:.2f}".format(a))\n\n13.95\n\n>>> print("{:.2f}".format(round(a, 2)))\n\n13.95\n\n>>> print("{:.15f}".format(round(a, 2)))\n\n13.949999999999999\n\n</code></pre>\n\n<p>If you are after only two decimal places (to display a currency value, for example), then you have a couple of better choices:</p>\n\n<ol>\n\n<li>Use integers and store values in cents, not dollars and then divide by 100 to convert to dollars.</li>\n\n<li>Or use a fixed point number like <a href="https://docs.python.org/library/decimal.html" rel="noreferrer">decimal</a>.</li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	205
How do I list all files of a directory?	<p>I prefer using the <a href="https://docs.python.org/library/glob.html" rel="noreferrer"><code>glob</code></a> module, as it does pattern matching and expansion.</p>\n\n<pre><code>import glob\n\nprint(glob.glob("/home/adam/*.txt"))\n\n</code></pre>\n\n<p>It will return a list with the queried files:</p>\n\n<pre><code>['/home/adam/file1.txt', '/home/adam/file2.txt', .... ]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	206
How to prettyprint a JSON file?	<p>The <code>json</code> module already implements some basic pretty printing with the <code>indent</code> parameter that specifies how many spaces to indent by:</p>\n\n<pre><code>>>> import json\n\n>>>\n\n>>> your_json = '["foo", {"bar":["baz", null, 1.0, 2]}]'\n\n>>> parsed = json.loads(your_json)\n\n>>> print(json.dumps(parsed, indent=4, sort_keys=True))\n\n[\n\n "foo", \n\n {\n\n "bar": [\n\n "baz", \n\n null, \n\n 1.0, \n\n 2\n\n ]\n\n }\n\n]\n\n</code></pre>\n\n<p>To parse a file, use <code>json.load()</code>:</p>\n\n<pre><code>with open('filename.txt', 'r') as handle:\n\n parsed = json.load(handle)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	207
Use of *args and **kwargs	<p><a href="http://docs.python.org/tutorial/controlflow.html#arbitrary-argument-lists" rel="noreferrer">The syntax is the <code>*</code> and <code>**</code></a>. The names <code>*args</code> and <code>**kwargs</code> are only by convention but there's no hard requirement to use them.</p>\n\n<p>You would use <code>*args</code> when you're not sure how many arguments might be passed to your function, i.e. it allows you pass an arbitrary number of arguments to your function. For example:</p>\n\n<pre><code>>>> def print_everything(*args):\n\n for count, thing in enumerate(args):\n\n... print( '{0}. {1}'.format(count, thing))\n\n...\n\n>>> print_everything('apple', 'banana', 'cabbage')\n\n0. apple\n\n1. banana\n\n2. cabbage\n\n</code></pre>\n\n<p>Similarly, <code>**kwargs</code> allows you to handle named arguments that you have not defined in advance:</p>\n\n<pre><code>>>> def table_things(**kwargs):\n\n... for name, value in kwargs.items():\n\n... print( '{0} = {1}'.format(name, value))\n\n...\n\n>>> table_things(apple = 'fruit', cabbage = 'vegetable')\n\ncabbage = vegetable\n\napple = fruit\n\n</code></pre>\n\n<p>You can use these along with named arguments too. The explicit arguments get values first and then everything else is passed to <code>*args</code> and <code>**kwargs</code>. The named arguments come first in the list. For example:</p>\n\n<pre><code>def table_things(titlestring, **kwargs)\n\n</code></pre>\n\n<p>You can also use both in the same function definition but <code>*args</code> must occur before <code>**kwargs</code>.</p>\n\n<p>You can also use the <code>*</code> and <code>**</code> syntax when calling a function. For example:</p>\n\n<pre><code>>>> def print_three_things(a, b, c):\n\n... print( 'a = {0}, b = {1}, c = {2}'.format(a,b,c))\n\n...\n\n>>> mylist = ['aardvark', 'baboon', 'cat']\n\n>>> print_three_things(*mylist)\n\na = aardvark, b = baboon, c = cat\n\n</code></pre>\n\n<p>As you can see in this case it takes the list (or tuple) of items and unpacks it. By this it matches them to the arguments in the function. Of course, you could have a <code>*</code> both in the function definition and in the function call.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	208
Remove all whitespace in a string	<p>If you want to remove leading and ending spaces, use <a href="http://docs.python.org/2/library/stdtypes.html#str.strip" rel="noreferrer"><code>str.strip()</code></a>: </p>\n\n<pre><code>sentence = ' hello apple'\n\nsentence.strip()\n\n>>> 'hello apple'\n\n</code></pre>\n\n<p>If you want to remove all space characters, use <a href="http://docs.python.org/2/library/stdtypes.html#str.replace" rel="noreferrer"><code>str.replace()</code></a>:</p>\n\n<p><em>(NB this only removes the ânormalâ ASCII space character <code>' ' U+0020</code> but not <a href="https://en.wikipedia.org/wiki/Whitespace_character#Unicode" rel="noreferrer">any other whitespace</a>)</em></p>\n\n<pre><code>sentence = ' hello apple'\n\nsentence.replace(" ", "")\n\n>>> 'helloapple'\n\n</code></pre>\n\n<p>If you want to remove duplicated spaces, use <a href="http://docs.python.org/2/library/stdtypes.html#str.split" rel="noreferrer"><code>str.split()</code></a>:</p>\n\n<pre><code>sentence = ' hello apple'\n\n" ".join(sentence.split())\n\n>>> 'hello apple'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	209
Putting a simple if-then-else statement on one line	<p>That's more specifically a <a href="https://en.wikipedia.org/wiki/%3F:#Python" rel="noreferrer">ternary operator</a> expression than an if-then, here's the python syntax</p>\n\n<pre><code>value_when_true if condition else value_when_false\n\n</code></pre>\n\n<p><strong>Better Example:</strong> (thanks <a href="https://stackoverflow.com/users/253254/joshua-burns">Mr. Burns</a>)</p>\n\n<p><code>'Yes' if fruit == 'Apple' else 'No'</code> </p>\n\n<p><strong>Now with assignment and contrast with if syntax</strong></p>\n\n<pre><code>fruit = 'Apple'\n\nisApple = True if fruit == 'Apple' else False\n\n</code></pre>\n\n<p><strong>vs</strong></p>\n\n<pre><code>fruit = 'Apple'\n\nisApple = False\n\nif fruit == 'Apple' : isApple = True\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	210
How do I get the full path of the current file's directory?	<h2>Python 3</h2>\n\n<p>For the directory of the script being run:</p>\n\n<pre><code>import pathlib\n\npathlib.Path(__file__).parent.absolute()\n\n</code></pre>\n\n<p>For the current working directory:</p>\n\n<pre><code>import pathlib\n\npathlib.Path().absolute()\n\n</code></pre>\n\n<h2>Python 2 and 3</h2>\n\n<p>For the directory of the script being run:</p>\n\n<pre><code>import os\n\nos.path.dirname(os.path.abspath(__file__))\n\n</code></pre>\n\n<p>If you mean the current working directory:</p>\n\n<pre><code>import os\n\nos.path.abspath(os.getcwd())\n\n</code></pre>\n\n<p>Note that before and after <code>file</code> is two underscores, not just one. </p>\n\n<p>Also note that if you are running interactively or have loaded code from something other than a file (eg: a database or online resource), <code>__file__</code> may not be set since there is no notion of "current file". The above answer assumes the most common scenario of running a python script that is in a file. </p>\n\n<h2>References</h2>\n\n<ol>\n\n<li><a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer">pathlib</a> in the python documentation. </li>\n\n<li><a href="https://docs.python.org/2.7/library/os.path.html" rel="noreferrer">os.path 2.7</a>, <a href="https://docs.python.org/3.8/library/os.path.html" rel="noreferrer">os.path 3.8</a></li>\n\n<li><a href="https://docs.python.org/2.7/library/os.html#os.getcwd" rel="noreferrer">os.getcwd 2.7</a>, <a href="https://docs.python.org/3/library/os.html#os.getcwd" rel="noreferrer">os.getcwd 3.8</a></li>\n\n<li><a href="https://stackoverflow.com/questions/9271464/what-does-the-file-variable-mean-do">what does the __file__ variable mean/do?</a></li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	211
Why is reading lines from stdin much slower in C++ than Python?	<h3>tl;dr: Because of different default settings in C++ requiring more system calls.</h3>\n\n<p>By default, <code>cin</code> is synchronized with stdio, which causes it to avoid any input buffering. If you add this to the top of your main, you should see much better performance:</p>\n\n<pre><code>std::ios_base::sync_with_stdio(false);\n\n</code></pre>\n\n<p>Normally, when an input stream is buffered, instead of reading one character at a time, the stream will be read in larger chunks. This reduces the number of system calls, which are typically relatively expensive. However, since the <code>FILE*</code> based <code>stdio</code> and <code>iostreams</code> often have separate implementations and therefore separate buffers, this could lead to a problem if both were used together. For example:</p>\n\n<pre><code>int myvalue1;\n\ncin >> myvalue1;\n\nint myvalue2;\n\nscanf("%d",&myvalue2);\n\n</code></pre>\n\n<p>If more input was read by <code>cin</code> than it actually needed, then the second integer value wouldn't be available for the <code>scanf</code> function, which has its own independent buffer. This would lead to unexpected results.</p>\n\n<p>To avoid this, by default, streams are synchronized with <code>stdio</code>. One common way to achieve this is to have <code>cin</code> read each character one at a time as needed using <code>stdio</code> functions. Unfortunately, this introduces a lot of overhead. For small amounts of input, this isn't a big problem, but when you are reading millions of lines, the performance penalty is significant.</p>\n\n<p>Fortunately, the library designers decided that you should also be able to disable this feature to get improved performance if you knew what you were doing, so they provided the <a href="http://en.cppreference.com/w/cpp/io/ios_base/sync_with_stdio" rel="nofollow noreferrer"><code>sync_with_stdio</code></a> method.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	212
Get list from pandas DataFrame column headers	<p>You can get the values as a list by doing:</p>\n\n<pre><code>list(my_dataframe.columns.values)\n\n</code></pre>\n\n<p>Also you can simply use: (as shown in <a href="https://stackoverflow.com/a/19483602/4909087">Ed Chum's answer</a>):</p>\n\n<pre><code>list(my_dataframe)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	213
Removing duplicates in lists	<p>The common approach to get a unique collection of items is to use a <a href="http://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset" rel="noreferrer"><code>set</code></a>. Sets are <em>unordered</em> collections of <em>distinct</em> objects. To create a set from any iterable, you can simply pass it to the built-in <a href="http://docs.python.org/3/library/functions.html#func-set" rel="noreferrer"><code>set()</code></a> function. If you later need a real list again, you can similarly pass the set to the <a href="http://docs.python.org/3/library/functions.html#func-list" rel="noreferrer"><code>list()</code></a> function.</p>\n\n<p>The following example should cover whatever you are trying to do:</p>\n\n<pre><code>>>> t = [1, 2, 3, 1, 2, 5, 6, 7, 8]\n\n>>> t\n\n[1, 2, 3, 1, 2, 5, 6, 7, 8]\n\n>>> list(set(t))\n\n[1, 2, 3, 5, 6, 7, 8]\n\n>>> s = [1, 2, 3]\n\n>>> list(set(t) - set(s))\n\n[8, 5, 6, 7]\n\n</code></pre>\n\n<p>As you can see from the example result, <em>the original order is not maintained</em>. As mentioned above, sets themselves are unordered collections, so the order is lost. When converting a set back to a list, an arbitrary order is created.</p>\n\n<h3>Maintaining order</h3>\n\n<p>If order is important to you, then you will have to use a different mechanism. A very common solution for this is to rely on <a href="https://docs.python.org/3/library/collections.html#collections.OrderedDict" rel="noreferrer"><code>OrderedDict</code></a> to keep the order of keys during insertion:</p>\n\n<pre><code>>>> from collections import OrderedDict\n\n>>> list(OrderedDict.fromkeys(t))\n\n[1, 2, 3, 5, 6, 7, 8]\n\n</code></pre>\n\n<p><a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="noreferrer">Starting with Python 3.7</a>, the built-in dictionary is guaranteed to maintain the insertion order as well, so you can also use that directly if you are on Python 3.7 or later (or CPython 3.6):</p>\n\n<pre><code>>>> list(dict.fromkeys(t))\n\n[1, 2, 3, 5, 6, 7, 8]\n\n</code></pre>\n\n<p>Note that this may have some overhead of creating a dictionary first, and then creating a list from it. If you donât actually need to preserve the order, youâre often better off using a set, especially because it gives you a lot more operations to work with. Check out <a href="https://stackoverflow.com/q/480214/216074">this question</a> for more details and alternative ways to preserve the order when removing duplicates.</p>\n\n<hr>\n\n<p>Finally note that both the <code>set</code> as well as the <code>OrderedDict</code>/<code>dict</code> solutions require your items to be <em>hashable</em>. This usually means that they have to be immutable. If you have to deal with items that are not hashable (e.g. list objects), then you will have to use a slow approach in which you will basically have to compare every item with every other item in a nested loop.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	214
How do I check if a variable exists?	<p>To check the existence of a local variable:</p>\n\n<pre><code>if 'myVar' in locals():\n\n # myVar exists.\n\n</code></pre>\n\n<p>To check the existence of a global variable:</p>\n\n<pre><code>if 'myVar' in globals():\n\n # myVar exists.\n\n</code></pre>\n\n<p>To check if an object has an attribute:</p>\n\n<pre><code>if hasattr(obj, 'attr_name'):\n\n # obj.attr_name exists.\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	215
Referring to the null object in Python	<p>In Python, the 'null' object is the singleton <code>None</code>.</p>\n\n<p>The best way to check things for "Noneness" is to use the identity operator, <code>is</code>:</p>\n\n<pre><code>if foo is None:\n\n ...\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	216
How do I merge two dictionaries in a single expression in Python?	<p>In your case, what you can do is:</p>\n\n<pre><code>z = dict(x.items() + y.items())\n\n</code></pre>\n\n<p>This will, as you want it, put the final dict in <code>z</code>, and make the value for key <code>b</code> be properly overridden by the second (<code>y</code>) dict's value:</p>\n\n<pre><code>>>> x = {'a':1, 'b': 2}\n\n>>> y = {'b':10, 'c': 11}\n\n>>> z = dict(x.items() + y.items())\n\n>>> z\n\n{'a': 1, 'c': 11, 'b': 10}\n\n</code></pre>\n\n<p>If you use Python 3, it is only a little more complicated. To create <code>z</code>:</p>\n\n<pre><code>>>> z = dict(list(x.items()) + list(y.items()))\n\n>>> z\n\n{'a': 1, 'c': 11, 'b': 10}\n\n</code></pre>\n\n<p>If you use Python version 3.9.0a4 or greater, then you can directly use:</p>\n\n<pre><code>x = {'a':1, 'b': 2}\n\ny = {'b':10, 'c': 11}\n\nz = x | y\n\nprint(z)\n\nOutput: {'a': 1, 'c': 11, 'b': 10}\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	217
"Least Astonishment" and the Mutable Default Argument	<p>Actually, this is not a design flaw, and it is not because of internals, or performance.<br>\n\nIt comes simply from the fact that functions in Python are first-class objects, and not only a piece of code.</p>\n\n<p>As soon as you get to think into this way, then it completely makes sense: a function is an object being evaluated on its definition; default parameters are kind of "member data" and therefore their state may change from one call to the other - exactly as in any other object.</p>\n\n<p>In any case, Effbot has a very nice explanation of the reasons for this behavior in <a href="http://effbot.org/zone/default-values.htm" rel="noreferrer">Default Parameter Values in Python</a>.<br>\n\nI found it very clear, and I really suggest reading it for a better knowledge of how function objects work.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	218
How do I check if a string is a number (float)?	<p>In case you are looking for parsing (positive, unsigned) integers instead of floats, you can use the <a href="https://docs.python.org/2/library/stdtypes.html#str.isdigit" rel="noreferrer" title="str.isdigit"><code>isdigit()</code></a> function for string objects.</p>\n\n<pre><code>>>> a = "03523"\n\n>>> a.isdigit()\n\nTrue\n\n>>> b = "963spam"\n\n>>> b.isdigit()\n\nFalse\n\n</code></pre>\n\n<p>String Methods - <code>isdigit()</code>: <a href="https://docs.python.org/2/library/stdtypes.html#string-methods" rel="noreferrer" title="string-methods">Python2</a>, <a href="https://docs.python.org/3/library/stdtypes.html#string-methods" rel="noreferrer">Python3</a></p>\n\n<p>There's also something on Unicode strings, which I'm not too familiar with\n\n<a href="https://docs.python.org/2/library/stdtypes.html#unicode.isnumeric" rel="noreferrer" title="unicode.isnumeric">Unicode - Is decimal/decimal</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	219
How do I trim whitespace?	<p>Whitespace on both sides:</p>\n\n<pre><code>s = " a string example "\n\ns = s.strip()\n\n</code></pre>\n\n<p>Whitespace on the right side:</p>\n\n<pre><code>s = s.rstrip()\n\n</code></pre>\n\n<p>Whitespace on the left side:</p>\n\n<pre><code>s = s.lstrip()\n\n</code></pre>\n\n<p>As <a href="https://stackoverflow.com/users/84380/thedz">thedz</a> points out, you can provide an argument to strip arbitrary characters to any of these functions like this:</p>\n\n<pre><code>s = s.strip(' ')\n\n</code></pre>\n\n<p>This will strip any space, <code> </code>, <code> </code>, or <code> </code> characters from the left-hand side, right-hand side, or both sides of the string. </p>\n\n<p>The examples above only remove strings from the left-hand and right-hand sides of strings. If you want to also remove characters from the middle of a string, try <code>re.sub</code>:</p>\n\n<pre><code>import re\n\nprint re.sub('[\s+]', '', s)\n\n</code></pre>\n\n<p>That should print out:</p>\n\n<pre><code>astringexample\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	220
Fastest way to check if a value exists in a list	<pre><code>7 in a\n\n</code></pre>\n\n<p>Clearest and fastest way to do it.</p>\n\n<p>You can also consider using a <code>set</code>, but constructing that set from your list may take more time than faster membership testing will save. The only way to be certain is to benchmark well. (this also depends on what operations you require)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	221
How to make a flat list out of list of lists?	<p>You can use <a href="https://docs.python.org/library/itertools.html#itertools.chain" rel="noreferrer"><code>itertools.chain()</code></a>:</p>\n\n<pre><code>import itertools\n\nlist2d = [[1,2,3], [4,5,6], [7], [8,9]]\n\nmerged = list(itertools.chain(*list2d))\n\n</code></pre>\n\n<p>Or you can use <a href="https://docs.python.org/library/itertools.html#itertools.chain.from_iterable" rel="noreferrer"><code>itertools.chain.from_iterable()</code></a> which doesn't require unpacking the list with the <a href="https://docs.python.org/tutorial/controlflow.html#tut-unpacking-arguments" rel="noreferrer"><code>*</code> operator</a>:</p>\n\n<pre><code>import itertools\n\nlist2d = [[1,2,3], [4,5,6], [7], [8,9]]\n\nmerged = list(itertools.chain.from_iterable(list2d))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	222
Is there a simple way to delete a list element by value?	<p>To remove an element's first occurrence in a list, simply use <code>list.remove</code>:</p>\n\n<pre><code>>>> a = ['a', 'b', 'c', 'd']\n\n>>> a.remove('b')\n\n>>> print(a)\n\n['a', 'c', 'd']\n\n</code></pre>\n\n<p>Mind that it does not remove all occurrences of your element. Use a list comprehension for that.</p>\n\n<pre><code>>>> a = [10, 20, 30, 40, 20, 30, 40, 20, 70, 20]\n\n>>> a = [x for x in a if x != 20]\n\n>>> print(a)\n\n[10, 30, 40, 30, 40, 70]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	223
Use different Python version with virtualenv	<p>Just use the <code>--python</code> (or short <code>-p</code>) option when creating your virtualenv instance to specify the Python executable you want to use, e.g.:</p>\n\n<pre><code>virtualenv --python=/usr/bin/python2.6 <path/to/new/virtualenv/>\n\n</code></pre>\n\n<p>N.B. For <strong>Python 3.3</strong> or later, refer to The Aelfinn's <a href="https://stackoverflow.com/a/39713544/1450294">answer</a> below.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	224
Check if a given key already exists in a dictionary	<p>You don't have to call keys:</p>\n\n<pre><code>if 'key1' in dict:\n\n print("blah")\n\nelse:\n\n print("boo")\n\n</code></pre>\n\n<p>That will be much <a href="https://stackoverflow.com/a/30527984/452708">faster</a> as it uses the dictionary's hashing as opposed to doing a linear search, which calling keys would do.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	225
What's the canonical way to check for type in Python?	<p>To check if <code>o</code> is an instance of <code>str</code> or any subclass of <code>str</code>, use <a href="https://docs.python.org/library/functions.html#isinstance" rel="noreferrer">isinstance</a> (this would be the "canonical" way):</p>\n\n<pre><code>if isinstance(o, str):\n\n</code></pre>\n\n<p>To check if the type of <code>o</code> is exactly <code>str</code> (exclude subclasses):</p>\n\n<pre><code>if type(o) is str:\n\n</code></pre>\n\n<p>The following also works, and can be useful in some cases:</p>\n\n<pre><code>if issubclass(type(o), str):\n\n</code></pre>\n\n<p>See <a href="http://docs.python.org/library/functions.html" rel="noreferrer">Built-in Functions</a> in the Python Library Reference for relevant information.</p>\n\n<p>One more note: in this case, if you're using Python 2, you may actually want to use:</p>\n\n<pre><code>if isinstance(o, basestring):\n\n</code></pre>\n\n<p>because this will also catch Unicode strings (<a href="https://docs.python.org/2/library/functions.html#unicode" rel="noreferrer"><code>unicode</code></a> is not a subclass of <code>str</code>; both <code>str</code> and <code>unicode</code> are subclasses of <a href="https://docs.python.org/2/library/functions.html#basestring" rel="noreferrer"><code>basestring</code></a>). Note that <code>basestring</code> no longer exists in Python 3, where there's <a href="https://docs.python.org/whatsnew/3.0.html#text-vs-data-instead-of-unicode-vs-8-bit" rel="noreferrer">a strict separation</a> of strings (<a href="https://docs.python.org/3/library/functions.html#func-str" rel="noreferrer"><code>str</code></a>) and binary data (<a href="https://docs.python.org/3/library/functions.html#func-bytes" rel="noreferrer"><code>bytes</code></a>).</p>\n\n<p>Alternatively, <code>isinstance</code> accepts a tuple of classes. This will return <code>True</code> if <code>o</code> is an instance of any subclass of any of <code>(str, unicode)</code>:</p>\n\n<pre><code>if isinstance(o, (str, unicode)):\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	226
Why does comparing strings using either '==' or 'is' sometimes produce a different result?	<p><code>is</code> is identity testing, <code>==</code> is equality testing. what happens in your code would be emulated in the interpreter like this:</p>\n\n<pre><code>>>> a = 'pub'\n\n>>> b = ''.join(['p', 'u', 'b'])\n\n>>> a == b\n\nTrue\n\n>>> a is b\n\nFalse\n\n</code></pre>\n\n<p>so, no wonder they're not the same, right?</p>\n\n<p>In other words: <code>is</code> is the <code>id(a) == id(b)</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	227
How to get the home directory in Python?	<p>You want to use <a href="http://docs.python.org/library/os.path.html?highlight=os.path#os.path.expanduser" rel="noreferrer">os.path.expanduser</a>.<br>\n\nThis will ensure it works on all platforms:</p>\n\n<pre><code>from os.path import expanduser\n\nhome = expanduser("~")\n\n</code></pre>\n\n<p>If you're on <strong>Python 3.5+</strong> you can use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.home" rel="noreferrer">pathlib.Path.home()</a>:</p>\n\n<pre><code>from pathlib import Path\n\nhome = str(Path.home())\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	228
Replacements for switch statement in Python?	<p>You could use a dictionary:</p>\n\n<pre><code>def f(x):\n\n return {\n\n 'a': 1,\n\n 'b': 2,\n\n }[x]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	229
if/else in a list comprehension	<p>You can totally do that. It's just an ordering issue:</p>\n\n<pre><code>[unicode(x.strip()) if x is not None else '' for x in row]\n\n</code></pre>\n\n<p>In general,</p>\n\n<pre><code>[f(x) if condition else g(x) for x in sequence]\n\n</code></pre>\n\n<p>And, for list comprehensions with <code>if</code> conditions only,</p>\n\n<pre><code>[f(x) for x in sequence if condition]\n\n</code></pre>\n\n<p>Note that this actually uses a different language construct, a <a href="https://docs.python.org/3/reference/expressions.html#conditional-expressions" rel="noreferrer">conditional expression</a>, which itself is not part of the <a href="https://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries" rel="noreferrer">comprehension syntax</a>, while the <code>if</code> after the <code>forâ¦in</code> is part of list comprehensions and used to <em>filter</em> elements from the source iterable.</p>\n\n<hr>\n\n<p>Conditional expressions can be used in all kinds of situations where you want to choose between two expression values based on some condition. This does the same as the <a href="https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator" rel="noreferrer">ternary operator <code>?:</code> that exists in other languages</a>. For example:</p>\n\n<pre><code>value = 123\n\nprint(value, 'is', 'even' if value % 2 == 0 else 'odd')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	230
Python's equivalent of && (logical-and) in an if-statement	<p>You would want <code>and</code> instead of <code>&&</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	231
How to measure elapsed time in Python?	<p>If you just want to measure the elapsed wall-clock time between two points, you could use <a href="http://docs.python.org/library/time.html#time.time" rel="noreferrer"><code>time.time()</code></a>:</p>\n\n<pre><code>import time\n\nstart = time.time()\n\nprint("hello")\n\nend = time.time()\n\nprint(end - start)\n\n</code></pre>\n\n<p>This gives the execution time in seconds.</p>\n\n<p>Another option since 3.3 might be to use <a href="https://docs.python.org/3/library/time.html#time.perf_counter" rel="noreferrer"><code>perf_counter</code></a> or <a href="https://docs.python.org/3/library/time.html#time.process_time" rel="noreferrer"><code>process_time</code></a>, depending on your requirements. Before 3.3 it was recommended to use <a href="http://docs.python.org/library/time.html#time.clock" rel="noreferrer"><code>time.clock</code></a> (thanks <a href="https://stackoverflow.com/users/148870/amber">Amber</a>). However, it is currently deprecated:</p>\n\n<blockquote>\n\n <p>On Unix, return the current processor time as a floating point number\n\n expressed in seconds. The precision, and in fact the very definition\n\n of the meaning of âprocessor timeâ, depends on that of the C function\n\n of the same name.</p>\n\n <p>On Windows, this function returns wall-clock seconds elapsed since the\n\n first call to this function, as a floating point number, based on the\n\n Win32 function <code>QueryPerformanceCounter()</code>. The resolution is typically\n\n better than one microsecond.</p>\n\n <p><em>Deprecated since version 3.3</em>: The behaviour of this function depends\n\n on the platform: <strong>use <code>perf_counter()</code> or <code>process_time()</code> instead</strong>,\n\n depending on your requirements, to have a well defined behaviour.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	232
Importing files from different folder	<p>By default, you can't. When importing a file, Python only searches the current directory, the directory that the entry-point script is running from, and <code>sys.path</code> which includes locations such as the package installation directory (it's actually a little more complex than this, but this covers most cases).</p>\n\n<p>However, you can add to the Python path at runtime:</p>\n\n<pre><code># some_file.py\n\nimport sys\n\n# insert at 1, 0 is the script path (or '' in REPL)\n\nsys.path.insert(1, '/path/to/application/app/folder')\n\nimport file\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	233
What is __init__.py for?	<p>It used to be a required part of a package (<a href="https://docs.python.org/3/reference/import.html#regular-packages" rel="noreferrer">old, pre-3.3 "regular package"</a>, not <a href="https://docs.python.org/3/reference/import.html#namespace-packages" rel="noreferrer">newer 3.3+ "namespace package"</a>).</p>\n\n<p><a href="https://docs.python.org/3/reference/import.html#regular-packages" rel="noreferrer">Here's the documentation.</a></p>\n\n<blockquote>\n\n <p>Python defines two types of packages, regular packages and namespace packages. Regular packages are traditional packages as they existed in Python 3.2 and earlier. A regular package is typically implemented as a directory containing an <code>__init__.py</code> file. When a regular package is imported, this <code>__init__.py</code> file is implicitly executed, and the objects it defines are bound to names in the packageâs namespace. The <code>__init__.py</code> file can contain the same Python code that any other module can contain, and Python will add some additional attributes to the module when it is imported.</p>\n\n</blockquote>\n\n<p>But just click the link, it contains an example, more information, and an explanation of namespace packages, the kind of packages without <code>__init__.py</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	234
Save plot to image file instead of displaying it using Matplotlib	<p>While the question has been answered, I'd like to add some useful tips when using <a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.savefig.html#matplotlib.pyplot.savefig" rel="noreferrer">matplotlib.pyplot.savefig</a>. The file format can be specified by the extension:</p>\n\n<pre><code>from matplotlib import pyplot as plt\n\nplt.savefig('foo.png')\n\nplt.savefig('foo.pdf')\n\n</code></pre>\n\n<p>Will give a rasterized or vectorized output respectively, both which could be useful. In addition, you'll find that <code>pylab</code> leaves a generous, often undesirable, whitespace around the image. Remove it with:</p>\n\n<pre><code>savefig('foo.png', bbox_inches='tight')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	235
How to flush output of print function?	<p>On Python 3, <a href="https://docs.python.org/library/functions.html#print" rel="noreferrer"><code>print</code></a> can take an optional <code>flush</code> argument</p>\n\n<pre><code>print("Hello world!", flush=True)\n\n</code></pre>\n\n<p>On Python 2 you'll have to do</p>\n\n<pre><code>import sys\n\nsys.stdout.flush()\n\n</code></pre>\n\n<p>after calling <code>print</code>. By default, <a href="https://docs.python.org/2/reference/simple_stmts.html#the-print-statement" rel="noreferrer"><code>print</code></a> prints to <a href="https://docs.python.org/2/library/sys.html#sys.stdout" rel="noreferrer"><code>sys.stdout</code></a> (see the documentation for more about <a href="https://docs.python.org/2/library/stdtypes.html#file-objects" rel="noreferrer">file objects</a>).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	236
How to terminate a Python script	<pre><code>import sys\n\nsys.exit()\n\n</code></pre>\n\n<p>details from the <a href="https://docs.python.org/2/library/constants.html#exit" rel="noreferrer" title="exit"><code>sys</code> module documentation</a>:</p>\n\n<blockquote>\n\n <p><code>sys.<strong>exit</strong>([<em>arg</em>])</code></p>\n\n <blockquote>\n\n <p>Exit from Python. This is implemented by raising the\n\n <a href="https://docs.python.org/2/library/exceptions.html#SystemExit" rel="noreferrer" title="SystemExit"><code>SystemExit</code></a> exception, so cleanup actions specified by finally clauses\n\n of <a href="https://docs.python.org/2/reference/compound_stmts.html#try" rel="noreferrer" title="try"><code>try</code></a> statements are honored, and it is possible to intercept the\n\n exit attempt at an outer level.</p>\n\n <p>The optional argument <em>arg</em> can be an integer giving the exit status\n\n (defaulting to zero), or another type of object. If it is an integer,\n\n zero is considered âsuccessful terminationâ and any nonzero value is\n\n considered âabnormal terminationâ by shells and the like. Most systems\n\n require it to be in the range 0-127, and produce undefined results\n\n otherwise. Some systems have a convention for assigning specific\n\n meanings to specific exit codes, but these are generally\n\n underdeveloped; Unix programs generally use 2 for command line syntax\n\n errors and 1 for all other kind of errors. If another type of object\n\n is passed, None is equivalent to passing zero, and any other object is\n\n printed to <a href="https://docs.python.org/2/library/sys.html#sys.stderr" rel="noreferrer" title="sys.stderr"><code>stderr</code></a> and results in an exit code of 1. In particular,\n\n <code>sys.exit("some error message")</code> is a quick way to exit a program when\n\n an error occurs.</p>\n\n <p>Since <a href="https://docs.python.org/2/library/constants.html#exit" rel="noreferrer" title="exit"><code>exit()</code></a> ultimately âonlyâ raises an exception, it will only exit\n\n the process when called from the main thread, and the exception is not\n\n intercepted.</p>\n\n </blockquote>\n\n</blockquote>\n\n<p>Note that this is the 'nice' way to exit. @<a href="https://stackoverflow.com/questions/73663/terminating-a-python-script#76374">glyphtwistedmatrix</a> below points out that if you want a 'hard exit', you can use <code>os._exit(*errorcode*)</code>, though it's likely os-specific to some extent (it might not take an errorcode under windows, for example), and it definitely is less friendly since it doesn't let the interpreter do any cleanup before the process dies.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	237
Python integer incrementing with ++	<p>Python doesn't support <code>++</code>, but you can do:</p>\n\n<pre><code>number += 1\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	238
How can I use threading in Python?	<p>Since this question was asked in 2010, there has been real simplification in how to do simple multithreading with Python with <strong><a href="https://docs.python.org/2/library/functions.html#map" rel="noreferrer">map</a></strong> and <strong><a href="https://docs.python.org/2/library/multiprocessing.html" rel="noreferrer">pool</a></strong>.</p>\n\n<p>The code below comes from an article/blog post that you should definitely check out (no affiliation) - <strong><a href="https://chriskiehl.com/article/parallelism-in-one-line" rel="noreferrer">Parallelism in one line: A Better Model for Day to Day Threading Tasks</a></strong>. I'll summarize below - it ends up being just a few lines of code:</p>\n\n<pre><code>from multiprocessing.dummy import Pool as ThreadPool\n\npool = ThreadPool(4)\n\nresults = pool.map(my_function, my_array)\n\n</code></pre>\n\n<p>Which is the multithreaded version of:</p>\n\n<pre><code>results = []\n\nfor item in my_array:\n\n results.append(my_function(item))\n\n</code></pre>\n\n<hr />\n\n<p><strong>Description</strong></p>\n\n<blockquote>\n\n<p>Map is a cool little function, and the key to easily injecting parallelism into your Python code. For those unfamiliar, map is something lifted from functional languages like Lisp. It is a function which maps another function over a sequence.</p>\n\n<p>Map handles the iteration over the sequence for us, applies the function, and stores all of the results in a handy list at the end.</p>\n\n</blockquote>\n\n<p><img src="https://i.stack.imgur.com/Yq37m.png" alt="Enter image description here" /></p>\n\n<hr />\n\n<p><strong>Implementation</strong></p>\n\n<blockquote>\n\n<p>Parallel versions of the map function are provided by two libraries:multiprocessing, and also its little known, but equally fantastic step child:multiprocessing.dummy.</p>\n\n</blockquote>\n\n<p><code>multiprocessing.dummy</code> is exactly the same as multiprocessing module, <a href="https://docs.python.org/2/library/multiprocessing.html#module-multiprocessing.dummy" rel="noreferrer">but uses threads instead</a> (<em><a href="https://medium.com/@bfortuner/python-multithreading-vs-multiprocessing-73072ce5600b" rel="noreferrer">an important distinction</a> - use multiple processes for CPU-intensive tasks; threads for (and during) I/O</em>):</p>\n\n<blockquote>\n\n<p>multiprocessing.dummy replicates the API of multiprocessing, but is no more than a wrapper around the threading module.</p>\n\n</blockquote>\n\n<pre><code>import urllib2\n\nfrom multiprocessing.dummy import Pool as ThreadPool\n\nurls = [\n\n 'http://www.python.org',\n\n 'http://www.python.org/about/',\n\n 'http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html',\n\n 'http://www.python.org/doc/',\n\n 'http://www.python.org/download/',\n\n 'http://www.python.org/getit/',\n\n 'http://www.python.org/community/',\n\n 'https://wiki.python.org/moin/',\n\n]\n\n# Make the Pool of workers\n\npool = ThreadPool(4)\n\n# Open the URLs in their own threads\n\n# and return the results\n\nresults = pool.map(urllib2.urlopen, urls)\n\n# Close the pool and wait for the work to finish\n\npool.close()\n\npool.join()\n\n</code></pre>\n\n<p>And the timing results:</p>\n\n<pre><code>Single thread: 14.4 seconds\n\n 4 Pool: 3.1 seconds\n\n 8 Pool: 1.4 seconds\n\n 13 Pool: 1.3 seconds\n\n</code></pre>\n\n<hr />\n\n<p><strong>Passing multiple arguments</strong> (works like this <a href="https://stackoverflow.com/a/28975239/2327328">only in Python 3.3 and later</a>):</p>\n\n<p>To pass multiple arrays:</p>\n\n<pre><code>results = pool.starmap(function, zip(list_a, list_b))\n\n</code></pre>\n\n<p>Or to pass a constant and an array:</p>\n\n<pre><code>results = pool.starmap(function, zip(itertools.repeat(constant), list_a))\n\n</code></pre>\n\n<p>If you are using an earlier version of Python, you can pass multiple arguments via <a href="https://stackoverflow.com/questions/5442910/python-multiprocessing-pool-map-for-multiple-arguments/5443941#5443941">this workaround</a>).</p>\n\n<p>(Thanks to <a href="https://stackoverflow.com/users/2441026/user136036">user136036</a> for the helpful comment.)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	239
What is the difference between venv, pyvenv, pyenv, virtualenv, virtualenvwrapper, pipenv, etc?	<h1>PyPI packages not in the standard library:</h1>\n\n<ul>\n\n<li><p><strong><a href="https://pypi.python.org/pypi/virtualenv" rel="noreferrer"><code>virtualenv</code></a></strong> is a very popular tool that creates isolated Python environments for Python libraries. If you're not familiar with this tool, I highly recommend learning it, as it is a very useful tool, and I'll be making comparisons to it for the rest of this answer.</p>\n\n<p>It works by installing a bunch of files in a directory (eg: <code>env/</code>), and then modifying the <code>PATH</code> environment variable to prefix it with a custom <code>bin</code> directory (eg: <code>env/bin/</code>). An exact copy of the <code>python</code> or <code>python3</code> binary is placed in this directory, but Python is programmed to look for libraries relative to its path first, in the environment directory. It's not part of Python's standard library, but is officially blessed by the PyPA (Python Packaging Authority). Once activated, you can install packages in the virtual environment using <code>pip</code>.</p></li>\n\n<li><p><strong><a href="https://github.com/yyuu/pyenv" rel="noreferrer"><code>pyenv</code></a></strong> is used to isolate Python versions. For example, you may want to test your code against Python 2.7, 3.6, 3.7 and 3.8, so you'll need a way to switch between them. Once activated, it prefixes the <code>PATH</code> environment variable with <code>~/.pyenv/shims</code>, where there are special files matching the Python commands (<code>python</code>, <code>pip</code>). These are not copies of the Python-shipped commands; they are special scripts that decide on the fly which version of Python to run based on the <code>PYENV_VERSION</code> environment variable, or the <code>.python-version</code> file, or the <code>~/.pyenv/version</code> file. <code>pyenv</code> also makes the process of downloading and installing multiple Python versions easier, using the command <code>pyenv install</code>.</p></li>\n\n<li><p><strong><a href="https://github.com/yyuu/pyenv-virtualenv" rel="noreferrer"><code>pyenv-virtualenv</code></a></strong> is a plugin for <code>pyenv</code> by the same author as <code>pyenv</code>, to allow you to use <code>pyenv</code> and <code>virtualenv</code> at the same time conveniently. However, if you're using Python 3.3 or later, <code>pyenv-virtualenv</code> will try to run <code>python -m venv</code> if it is available, instead of <code>virtualenv</code>. You can use <code>virtualenv</code> and <code>pyenv</code> together without <code>pyenv-virtualenv</code>, if you don't want the convenience features.</p></li>\n\n<li><p><strong><a href="https://pypi.python.org/pypi/virtualenvwrapper" rel="noreferrer"><code>virtualenvwrapper</code></a></strong> is a set of extensions to <code>virtualenv</code> (see <a href="http://virtualenvwrapper.readthedocs.io/en/latest/" rel="noreferrer">docs</a>). It gives you commands like <code>mkvirtualenv</code>, <code>lssitepackages</code>, and especially <code>workon</code> for switching between different <code>virtualenv</code> directories. This tool is especially useful if you want multiple <code>virtualenv</code> directories.</p></li>\n\n<li><p><strong><a href="https://github.com/yyuu/pyenv-virtualenvwrapper" rel="noreferrer"><code>pyenv-virtualenvwrapper</code></a></strong> is a plugin for <code>pyenv</code> by the same author as <code>pyenv</code>, to conveniently integrate <code>virtualenvwrapper</code> into <code>pyenv</code>.</p></li>\n\n<li><p><strong><a href="https://pypi.python.org/pypi/pipenv" rel="noreferrer"><code>pipenv</code></a></strong> aims to combine <code>Pipfile</code>, <code>pip</code> and <code>virtualenv</code> into one command on the command-line. The <code>virtualenv</code> directory typically gets placed in <code>~/.local/share/virtualenvs/XXX</code>, with <code>XXX</code> being a hash of the path of the project directory. This is different from <code>virtualenv</code>, where the directory is typically in the current working directory. <code>pipenv</code> is meant to be used when developing Python applications (as opposed to libraries). There are alternatives to <code>pipenv</code>, such as <code>poetry</code>, which I won't list here since this question is only about the packages that are similarly named.</p></li>\n\n</ul>\n\n<h1>Standard library:</h1>\n\n<ul>\n\n<li><p><strong><code>pyvenv</code></strong> is a script shipped with Python 3 but <a href="https://docs.python.org/dev/whatsnew/3.6.html#id8" rel="noreferrer">deprecated in Python 3.6</a> as it had problems (not to mention the confusing name). In Python 3.6+, the exact equivalent is <code>python3 -m venv</code>.</p></li>\n\n<li><p><strong><a href="https://docs.python.org/3/library/venv.html" rel="noreferrer"><code>venv</code></a></strong> is a package shipped with Python 3, which you can run using <code>python3 -m venv</code> (although for some reason some distros separate it out into a separate distro package, such as <code>python3-venv</code> on Ubuntu/Debian). It serves the same purpose as <code>virtualenv</code>, but only has a subset of its features (<a href="https://virtualenv.pypa.io/en/latest/" rel="noreferrer">see a comparison here</a>). <code>virtualenv</code> continues to be more popular than <code>venv</code>, especially since the former supports both Python 2 and 3.</p></li>\n\n</ul>\n\n<h1>Recommendation for beginners:</h1>\n\n<p>This is my personal recommendation for beginners: start by learning <a href="https://pypi.org/project/virtualenv/" rel="noreferrer"><code>virtualenv</code></a> and <a href="https://pypi.org/project/pip/" rel="noreferrer"><code>pip</code></a>, tools which work with both Python 2 and 3 and in a variety of situations, and pick up other tools once you start needing them.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	240
pip install mysql-python fails with EnvironmentError: mysql_config not found	<p>It seems mysql_config is missing on your system or the installer could not find it.\n\nBe sure mysql_config is really installed.</p>\n\n<p>For example on Debian/Ubuntu you must install the package:</p>\n\n<pre><code>sudo apt-get install libmysqlclient-dev\n\n</code></pre>\n\n<p>Maybe the mysql_config is not in your path, it will be the case when you compile by yourself\n\nthe mysql suite.</p>\n\n<p><strong>Update:</strong> For recent versions of debian/ubuntu (as of 2018) it is </p>\n\n<pre><code>sudo apt install default-libmysqlclient-dev\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	241
How to determine a Python variable's type?	<p>Use the <a href="https://docs.python.org/library/functions.html#type" rel="noreferrer"><code>type()</code></a> builtin function:</p>\n\n<pre><code>>>> i = 123\n\n>>> type(i)\n\n<type 'int'>\n\n>>> type(i) is int\n\nTrue\n\n>>> i = 123.456\n\n>>> type(i)\n\n<type 'float'>\n\n>>> type(i) is float\n\nTrue\n\n</code></pre>\n\n<p>To check if a variable is of a given type, use <a href="https://docs.python.org/library/functions.html#isinstance" rel="noreferrer"><code>isinstance</code></a>:</p>\n\n<pre><code>>>> i = 123\n\n>>> isinstance(i, int)\n\nTrue\n\n>>> isinstance(i, (float, str, set, dict))\n\nFalse\n\n</code></pre>\n\n<p>Note that Python doesn't have the same types as C/C++, which appears to be your question.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	242
How do I check what version of Python is running my script?	<p>This information is available in the <a href="http://docs.python.org/2/library/sys.html#sys.version" rel="noreferrer">sys.version</a> string in the <a href="http://docs.python.org/2/library/sys.html" rel="noreferrer">sys</a> module:</p>\n\n<pre><code>>>> import sys\n\n</code></pre>\n\n<p>Human readable:</p>\n\n<pre><code>>>> print(sys.version) # parentheses necessary in python 3. \n\n2.5.2 (r252:60911, Jul 31 2008, 17:28:52) \n\n[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)]\n\n</code></pre>\n\n<p>For further processing:</p>\n\n<pre><code>>>> sys.version_info\n\n(2, 5, 2, 'final', 0)\n\n# or\n\n>>> sys.hexversion\n\n34014192\n\n</code></pre>\n\n<p>To ensure a script runs with a minimal version requirement of the Python interpreter add this to your code:</p>\n\n<pre><code>assert sys.version_info >= (2, 5)\n\n</code></pre>\n\n<p>This compares major and minor version information. Add micro (=<code>0</code>, <code>1</code>, etc) and even releaselevel (=<code>'alpha'</code>,<code>'final'</code>, etc) to the tuple as you like. Note however, that it is almost always better to "duck" check if a certain feature is there, and if not, workaround (or bail out). Sometimes features go away in newer releases, being replaced by others.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	243
Using Python 3 in virtualenv	<p>simply run</p>\n\n<pre><code>virtualenv -p python3 envname\n\n</code></pre>\n\n<p>Update after OP's edit:</p>\n\n<p>There was a bug in the OP's version of virtualenv, as described <a href="https://github.com/pypa/virtualenv/issues/463" rel="noreferrer">here</a>. The problem was fixed by running:</p>\n\n<pre><code>pip install --upgrade virtualenv\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	244
Replacements for switch statement in Python?	<p>If you'd like defaults you could use the dictionary <a href="https://docs.python.org/2/library/stdtypes.html#dict.get" rel="noreferrer"><code>get(key[, default])</code></a> method:</p>\n\n<pre><code>def f(x):\n\n return {\n\n 'a': 1,\n\n 'b': 2\n\n }.get(x, 9) # 9 is default if x not found\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	245
How to install packages using pip according to the requirements.txt file from a local directory?	<p>I've read the above, realize this is an old question, but it's totally unresolved and still at the top of my google search results so here's an answer that works for everyone:</p>\n\n<pre><code>pip install -r /path/to/requirements.txt\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	246
How to iterate through two lists in parallel?	<h2>Python 3</h2>\n\n<pre><code>for f, b in zip(foo, bar):\n\n print(f, b)\n\n</code></pre>\n\n<p><code>zip</code> stops when the shorter of <code>foo</code> or <code>bar</code> stops.</p>\n\n<p>In <strong>Python 3</strong>, <a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip</code></a>\n\nreturns an iterator of tuples, like <code>itertools.izip</code> in Python2. To get a list\n\nof tuples, use <code>list(zip(foo, bar))</code>. And to zip until both iterators are\n\nexhausted, you would use\n\n<a href="https://docs.python.org/3.4/library/itertools.html#itertools.zip_longest" rel="noreferrer">itertools.zip_longest</a>.</p>\n\n<h2>Python 2</h2>\n\n<p>In <strong>Python 2</strong>, <a href="https://docs.python.org/2/library/functions.html#zip" rel="noreferrer"><code>zip</code></a>\n\nreturns a list of tuples. This is fine when <code>foo</code> and <code>bar</code> are not massive. If they are both massive then forming <code>zip(foo,bar)</code> is an unnecessarily massive\n\ntemporary variable, and should be replaced by <code>itertools.izip</code> or\n\n<code>itertools.izip_longest</code>, which returns an iterator instead of a list.</p>\n\n<pre><code>import itertools\n\nfor f,b in itertools.izip(foo,bar):\n\n print(f,b)\n\nfor f,b in itertools.izip_longest(foo,bar):\n\n print(f,b)\n\n</code></pre>\n\n<p><code>izip</code> stops when either <code>foo</code> or <code>bar</code> is exhausted.\n\n<code>izip_longest</code> stops when both <code>foo</code> and <code>bar</code> are exhausted.\n\nWhen the shorter iterator(s) are exhausted, <code>izip_longest</code> yields a tuple with <code>None</code> in the position corresponding to that iterator. You can also set a different <code>fillvalue</code> besides <code>None</code> if you wish. See here for the <a href="http://docs.python.org/library/itertools.html#itertools.izip_longest" rel="noreferrer">full story</a>.</p>\n\n<hr>\n\n<p>Note also that <code>zip</code> and its <code>zip</code>-like brethen can accept an arbitrary number of iterables as arguments. For example,</p>\n\n<pre><code>for num, cheese, color in zip([1,2,3], ['manchego', 'stilton', 'brie'], \n\n ['red', 'blue', 'green']):\n\n print('{} {} {}'.format(num, color, cheese))\n\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>1 red manchego\n\n2 blue stilton\n\n3 green brie\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	247
How can you profile a Python script?	<p>Python includes a profiler called <a href="https://docs.python.org/3/library/profile.html#module-cProfile" rel="noreferrer">cProfile</a>. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.</p>\n\n<p>You can call it from within your code, or from the interpreter, like this:</p>\n\n<pre><code>import cProfile\n\ncProfile.run('foo()')\n\n</code></pre>\n\n<p>Even more usefully, you can invoke the cProfile when running a script:</p>\n\n<pre><code>python -m cProfile myscript.py\n\n</code></pre>\n\n<p>To make it even easier, I made a little batch file called 'profile.bat':</p>\n\n<pre><code>python -m cProfile %1\n\n</code></pre>\n\n<p>So all I have to do is run:</p>\n\n<pre><code>profile euler048.py\n\n</code></pre>\n\n<p>And I get this:</p>\n\n<pre class="lang-none prettyprint-override"><code>1007 function calls in 0.061 CPU seconds\n\nOrdered by: standard name\n\nncalls tottime percall cumtime percall filename:lineno(function)\n\n 1 0.000 0.000 0.061 0.061 <string>:1(<module>)\n\n 1000 0.051 0.000 0.051 0.000 euler048.py:2(<lambda>)\n\n 1 0.005 0.005 0.061 0.061 euler048.py:2(<module>)\n\n 1 0.000 0.000 0.061 0.061 {execfile}\n\n 1 0.002 0.002 0.053 0.053 {map}\n\n 1 0.000 0.000 0.000 0.000 {method 'disable' of '_lsprof.Profiler objects}\n\n 1 0.000 0.000 0.000 0.000 {range}\n\n 1 0.003 0.003 0.003 0.003 {sum}\n\n</code></pre>\n\n<p>EDIT: Updated link to a good video resource from PyCon 2013 titled \n\n<a href="https://web.archive.org/web/20170318204046/http://lanyrd.com/2013/pycon/scdywg/" rel="noreferrer"><strong><em>Python Profiling</em></strong></a><br>\n\n<a href="https://www.youtube.com/watch?v=QJwVYlDzAXs" rel="noreferrer">Also via YouTube</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	248
UnicodeEncodeError: 'ascii' codec can't encode character u'\xa0' in position 20: ordinal not in range(128)	<p>You need to read the Python <a href="https://docs.python.org/2.7/howto/unicode.html" rel="noreferrer">Unicode HOWTO</a>. This error is the <a href="https://docs.python.org/2.7/howto/unicode.html#the-unicode-type" rel="noreferrer">very first example</a>.</p>\n\n<p>Basically, stop using <code>str</code> to convert from unicode to encoded text / bytes.</p>\n\n<p>Instead, properly use <a href="http://docs.python.org/library/stdtypes.html#str.encode" rel="noreferrer"><code>.encode()</code></a> to encode the string:</p>\n\n<pre><code>p.agent_info = u' '.join((agent_contact, agent_telno)).encode('utf-8').strip()\n\n</code></pre>\n\n<p>or work entirely in unicode.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	249
How to use glob() to find files recursively?	<p><strong>Python 3.5+</strong></p>\n\n<p>Since you're on a new python, you should use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob" rel="noreferrer"><code>pathlib.Path.rglob</code></a> from the the <a href="https://docs.python.org/3/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a> module.</p>\n\n<pre><code>from pathlib import Path\n\nfor path in Path('src').rglob('*.c'):\n\n print(path.name)\n\n</code></pre>\n\n<p>If you don't want to use pathlib, just use <a href="https://docs.python.org/3/library/glob.html#glob.glob" rel="noreferrer"><code>glob.glob</code></a>, but don't forget to pass in the <code>recursive</code> keyword parameter.</p>\n\n<p>For cases where matching files beginning with a dot (.); like files in the current directory or hidden files on Unix based system, use the <a href="https://docs.python.org/2/library/os.html#os.walk" rel="noreferrer"><code>os.walk</code></a> solution below.</p>\n\n<p><strong>Older Python versions</strong></p>\n\n<p>For older Python versions, use <a href="https://docs.python.org/2/library/os.html#os.walk" rel="noreferrer"><code>os.walk</code></a> to recursively walk a directory and <a href="https://docs.python.org/2/library/fnmatch.html#fnmatch.filter" rel="noreferrer"><code>fnmatch.filter</code></a> to match against a simple expression:</p>\n\n<pre><code>import fnmatch\n\nimport os\n\nmatches = []\n\nfor root, dirnames, filenames in os.walk('src'):\n\n for filename in fnmatch.filter(filenames, '*.c'):\n\n matches.append(os.path.join(root, filename))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	250
How do I remove/delete a folder that is not empty?	<pre><code>import shutil\n\nshutil.rmtree('/folder_name')\n\n</code></pre>\n\n<p><a href="http://docs.python.org/library/shutil.html#shutil.rmtree" rel="noreferrer">Standard Library Reference: shutil.rmtree</a>.</p>\n\n<p>By design, <code>rmtree</code> fails on folder trees containing read-only files. If you want the folder to be deleted regardless of whether it contains read-only files, then use</p>\n\n<pre><code>shutil.rmtree('/folder_name', ignore_errors=True)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	251
How to get the ASCII value of a character	<p>From <a href="http://mail.python.org/pipermail/python-win32/2005-April/003100.html" rel="noreferrer">here</a>:</p>\n\n<blockquote>\n\n <p>function ord() would get the int value\n\n of the char. And in case you want to\n\n convert back after playing with the\n\n number, function chr() does the trick.</p>\n\n</blockquote>\n\n<pre><code>>>> ord('a')\n\n97\n\n>>> chr(97)\n\n'a'\n\n>>> chr(ord('a') + 3)\n\n'd'\n\n>>>\n\n</code></pre>\n\n<p>In Python 2, there is also the <code>unichr</code> function, returning the <a href="http://en.wikipedia.org/wiki/Unicode" rel="noreferrer">Unicode</a> character whose ordinal is the <code>unichr</code> argument:</p>\n\n<pre><code>>>> unichr(97)\n\nu'a'\n\n>>> unichr(1234)\n\nu'\u04d2'\n\n</code></pre>\n\n<p>In Python 3 you can use <code>chr</code> instead of <code>unichr</code>.</p>\n\n<hr>\n\n<p><a href="https://docs.python.org/3/library/functions.html#ord" rel="noreferrer">ord() - Python 3.6.5rc1 documentation</a></p>\n\n<p><a href="https://docs.python.org/2/library/functions.html#ord" rel="noreferrer">ord() - Python 2.7.14 documentation</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	252
How to convert list to string	<p>By using <code>''.join</code></p>\n\n<pre><code>list1 = ['1', '2', '3']\n\nstr1 = ''.join(list1)\n\n</code></pre>\n\n<p>Or if the list is of integers, convert the elements before joining them.</p>\n\n<pre><code>list1 = [1, 2, 3]\n\nstr1 = ''.join(str(e) for e in list1)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	253
Difference between del, remove and pop on lists	<p>The effects of the three different methods to remove an element from a list:</p>\n\n<p><code>remove</code> removes the <em>first</em> matching <em>value</em>, not a specific index:</p>\n\n<pre><code>>>> a = [0, 2, 3, 2]\n\n>>> a.remove(2)\n\n>>> a\n\n[0, 3, 2]\n\n</code></pre>\n\n<p><code>del</code> removes the item at a specific index:</p>\n\n<pre><code>>>> a = [9, 8, 7, 6]\n\n>>> del a[1]\n\n>>> a\n\n[9, 7, 6]\n\n</code></pre>\n\n<p>and <code>pop</code> removes the item at a specific index and returns it.</p>\n\n<pre><code>>>> a = [4, 3, 5]\n\n>>> a.pop(1)\n\n3\n\n>>> a\n\n[4, 5]\n\n</code></pre>\n\n<p>Their error modes are different too:</p>\n\n<pre><code>>>> a = [4, 5, 6]\n\n>>> a.remove(7)\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nValueError: list.remove(x): x not in list\n\n>>> del a[7]\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nIndexError: list assignment index out of range\n\n>>> a.pop(7)\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nIndexError: pop index out of range\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	254
How to move a file?	<p><a href="http://docs.python.org/library/os.html#os.rename" rel="noreferrer"><code>os.rename()</code></a>, <a href="http://docs.python.org/library/shutil.html#shutil.move" rel="noreferrer"><code>shutil.move()</code></a>, or <a href="https://docs.python.org/library/os.html#os.replace" rel="noreferrer"><code>os.replace()</code></a></p>\n\n<p>All employ the same syntax:</p>\n\n<pre><code>import os\n\nimport shutil\n\nos.rename("path/to/current/file.foo", "path/to/new/destination/for/file.foo")\n\nshutil.move("path/to/current/file.foo", "path/to/new/destination/for/file.foo")\n\nos.replace("path/to/current/file.foo", "path/to/new/destination/for/file.foo")\n\n</code></pre>\n\n<p>Note that you must include the file name (<code>file.foo</code>) in both the source and destination arguments. If it is changed, the file will be renamed as well as moved.</p>\n\n<p>Note also that in the first two cases the directory in which the new file is being created must already exist. On Windows, a file with that name must not exist or an exception will be raised, but <code>os.replace()</code> will silently replace a file even in that occurrence.</p>\n\n<p>As has been noted in comments on other answers, <code>shutil.move</code> simply calls <code>os.rename</code> in most cases. However, if the destination is on a different disk than the source, it will instead copy and then delete the source file.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	255
Proper way to declare custom exceptions in modern Python?	<p>Maybe I missed the question, but why not:</p>\n\n<pre><code>class MyException(Exception):\n\n pass\n\n</code></pre>\n\n<p><strong>Edit:</strong> to override something (or pass extra args), do this:</p>\n\n<pre><code>class ValidationError(Exception):\n\n def __init__(self, message, errors):\n\n # Call the base class constructor with the parameters it needs\n\n super(ValidationError, self).__init__(message)\n\n # Now for your custom code...\n\n self.errors = errors\n\n</code></pre>\n\n<p>That way you could pass dict of error messages to the second param, and get to it later with <code>e.errors</code></p>\n\n<hr>\n\n<p><strong>Python 3 Update:</strong> In Python 3+, you can use this slightly more compact use of <code>super()</code>:</p>\n\n<pre><code>class ValidationError(Exception):\n\n def __init__(self, message, errors):\n\n # Call the base class constructor with the parameters it needs\n\n super().__init__(message)\n\n # Now for your custom code...\n\n self.errors = errors\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	256
Count the number occurrences of a character in a string	<blockquote>\n\n<p><a href="https://docs.python.org/2/library/stdtypes.html#str.count" rel="noreferrer">str.count(sub[, start[, end]])</a></p>\n\n<p>Return the number of non-overlapping occurrences of substring <code>sub</code> in the range <code>[start, end]</code>. Optional arguments <code>start</code> and <code>end</code> are interpreted as in slice notation.</p>\n\n</blockquote>\n\n<pre><code>>>> sentence = 'Mary had a little lamb'\n\n>>> sentence.count('a')\n\n4\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	257
How to get the filename without the extension from a path in Python?	<p>Getting the name of the file without the extension:</p>\n\n<pre><code>import os\n\nprint(os.path.splitext("/path/to/some/file.txt")[0])\n\n</code></pre>\n\n<p>Prints:</p>\n\n<pre><code>/path/to/some/file\n\n</code></pre>\n\n<p><a href="https://docs.python.org/3/library/os.path.html#os.path.splitext" rel="noreferrer">Documentation for <code>os.path.splitext</code></a>.</p>\n\n<p><em>Important Note:</em> If the filename has multiple dots, only the extension after the last one is removed. For example:</p>\n\n<pre><code>import os\n\nprint(os.path.splitext("/path/to/some/file.txt.zip.asc")[0])\n\n</code></pre>\n\n<p>Prints:</p>\n\n<pre><code>/path/to/some/file.txt.zip\n\n</code></pre>\n\n<p>See other answers below if you need to handle that case.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	258
How to sort a list of objects based on an attribute of the objects?	<pre><code># To sort the list in place...\n\nut.sort(key=lambda x: x.count, reverse=True)\n\n# To return a new list, use the sorted() built-in function...\n\nnewlist = sorted(ut, key=lambda x: x.count, reverse=True)\n\n</code></pre>\n\n<p>More on <a href="http://wiki.python.org/moin/HowTo/Sorting#Sortingbykeys" rel="noreferrer">sorting by keys</a>. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	259
How to read a text file into a string variable and strip newlines?	<p>You could use:</p>\n\n<pre><code>with open('data.txt', 'r') as file:\n\n data = file.read().replace(' ', '')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	260
How can I reverse a list in Python?	<p>You can make use of the <a href="https://www.python.org/dev/peps/pep-0322/" rel="noreferrer"><code>reversed</code></a> function for this as:</p>\n\n<pre><code>>>> array=[0,10,20,40]\n\n>>> for i in reversed(array):\n\n... print(i)\n\n</code></pre>\n\n<p>Note that <code>reversed(...)</code> does not return a list. You can get a reversed list using <code>list(reversed(array))</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	261
Installation Issue with matplotlib Python	<p><strong>Problem Cause</strong></p>\n\n<p>In mac os image rendering back end of matplotlib (what-is-a-backend to render using the API of Cocoa by default). There are Qt4Agg and GTKAgg and as a back-end is not the default. Set the back end of macosx that is differ compare with other windows or linux os. </p>\n\n<p><strong>Solution</strong></p>\n\n<ul>\n\n<li>I assume you have installed the pip matplotlib, there is a directory in your root called <code>~/.matplotlib</code>. </li>\n\n<li>Create a file <code>~/.matplotlib/matplotlibrc</code> there and add the following code: <code>backend: TkAgg</code></li>\n\n</ul>\n\n<p>From this <a href="http://matplotlib.org/examples/index.html" rel="noreferrer">link</a> you can try different diagrams. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	262
How to subtract a day from a date?	<p>You can use a <a href="http://docs.python.org/3.3/library/datetime.html?highlight=datetime#timedelta-objects" rel="noreferrer">timedelta</a> object:</p>\n\n<pre><code>from datetime import datetime, timedelta\n\nd = datetime.today() - timedelta(days=days_to_subtract)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	263
Get the data received in a Flask request	<p>The <a href="https://flask.palletsprojects.com/api/#flask.Request" rel="noreferrer">docs</a> describe the attributes available on the request. In most common cases <code>request.data</code> will be empty because it's used as a fallback:</p>\n\n<blockquote>\n\n <p><code>request.data</code> Contains the incoming request data as string in case it came with a mimetype Flask does not handle.</p>\n\n</blockquote>\n\n<ul>\n\n<li><a href="https://flask.palletsprojects.com/api/#flask.Request.args" rel="noreferrer"><code>request.args</code></a>: the key/value pairs in the URL query string</li>\n\n<li><a href="https://flask.palletsprojects.com/api/#flask.Request.form" rel="noreferrer"><code>request.form</code></a>: the key/value pairs in the body, from a HTML post form, or JavaScript request that isn't JSON encoded</li>\n\n<li><a href="https://flask.palletsprojects.com/api/#flask.Request.files" rel="noreferrer"><code>request.files</code></a>: the files in the body, which Flask keeps separate from <code>form</code>. HTML forms must use <code>enctype=multipart/form-data</code> or files will not be uploaded.</li>\n\n<li><a href="https://flask.palletsprojects.com/api/#flask.Request.values" rel="noreferrer"><code>request.values</code></a>: combined <code>args</code> and <code>form</code>, preferring <code>args</code> if keys overlap</li>\n\n<li><a href="https://flask.palletsprojects.com/api/#flask.Request.json" rel="noreferrer"><code>request.json</code></a>: parsed JSON data. The request must have the <code>application/json</code> content type, or use <a href="https://flask.palletsprojects.com/api/#flask.Request.get_json" rel="noreferrer"><code>request.get_json(force=True)</code></a> to ignore the content type.</li>\n\n</ul>\n\n<p>All of these are <a href="https://werkzeug.palletsprojects.com/datastructures/#werkzeug.datastructures.MultiDict" rel="noreferrer"><code>MultiDict</code></a> instances (except for <code>json</code>). You can access values using:</p>\n\n<ul>\n\n<li><code>request.form['name']</code>: use indexing if you know the key exists</li>\n\n<li><code>request.form.get('name')</code>: use <code>get</code> if the key might not exist</li>\n\n<li><code>request.form.getlist('name')</code>: use <code>getlist</code> if the key is sent multiple times and you want a list of values. <code>get</code> only returns the first value.</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	264
How can I check for NaN values?	<p><a href="http://docs.python.org/library/math.html#math.isnan" rel="noreferrer">math.isnan(x)</a></p>\n\n<blockquote>\n\n <p>Return <code>True</code> if x is a NaN (not a number), and <code>False</code> otherwise.</p>\n\n</blockquote>\n\n<pre><code>>>> import math\n\n>>> x = float('nan')\n\n>>> math.isnan(x)\n\nTrue\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	265
Should I use 'has_key()' or 'in' on Python dicts?	<p><code>in</code> is definitely more pythonic.</p>\n\n<p>In fact <a href="http://docs.python.org/3.1/whatsnew/3.0.html#builtins" rel="noreferrer"><code>has_key()</code> was removed in Python 3.x</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	266
How to import a module given the full path?	<p>For Python 3.5+ use:</p>\n\n<pre><code>import importlib.util\n\nspec = importlib.util.spec_from_file_location("module.name", "/path/to/file.py")\n\nfoo = importlib.util.module_from_spec(spec)\n\nspec.loader.exec_module(foo)\n\nfoo.MyClass()\n\n</code></pre>\n\n<p>For Python 3.3 and 3.4 use:</p>\n\n<pre><code>from importlib.machinery import SourceFileLoader\n\nfoo = SourceFileLoader("module.name", "/path/to/file.py").load_module()\n\nfoo.MyClass()\n\n</code></pre>\n\n<p>(Although this has been deprecated in Python 3.4.)</p>\n\n<p>For Python 2 use:</p>\n\n<pre><code>import imp\n\nfoo = imp.load_source('module.name', '/path/to/file.py')\n\nfoo.MyClass()\n\n</code></pre>\n\n<p>There are equivalent convenience functions for compiled Python files and DLLs.</p>\n\n<p>See also <a href="http://bugs.python.org/issue21436" rel="noreferrer">http://bugs.python.org/issue21436</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	267
How do I copy a file in Python?	<pre class="lang-none prettyprint-override"><code>ââââââââââââââââââââ¬âââââââââ¬ââââââââââââ¬ââââââââ¬âââââââââââââââââ\n\nâ Function â Copies â Copies âCan useâ Destination â\n\nâ âmetadataâpermissionsâbuffer âmay be directoryâ\n\nââââââââââââââââââââ¼âââââââââ¼ââââââââââââ¼ââââââââ¼âââââââââââââââââ¤\n\nâshutil.copy â No â Yes â No â Yes â\n\nâshutil.copyfile â No â No â No â No â\n\nâshutil.copy2 â Yes â Yes â No â Yes â\n\nâshutil.copyfileobjâ No â No â Yes â No â\n\nââââââââââââââââââââ´âââââââââ´ââââââââââââ´ââââââââ´âââââââââââââââââ\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	268
How do I get the row count of a pandas DataFrame?	<p>You can use the <code>.shape</code> property or just <code>len(DataFrame.index)</code>. However, there are notable performance differences ( <code>len(DataFrame.index)</code> is fastest):</p>\n\n<pre><code>In [1]: import numpy as np\n\nIn [2]: import pandas as pd\n\nIn [3]: df = pd.DataFrame(np.arange(12).reshape(4,3))\n\nIn [4]: df\n\nOut[4]: \n\n 0 1 2\n\n0 0 1 2\n\n1 3 4 5\n\n2 6 7 8\n\n3 9 10 11\n\nIn [5]: df.shape\n\nOut[5]: (4, 3)\n\nIn [6]: timeit df.shape\n\n2.77 Âµs Â± 644 ns per loop (mean Â± std. dev. of 7 runs, 100000 loops each)\n\nIn [7]: timeit df[0].count()\n\n348 Âµs Â± 1.31 Âµs per loop (mean Â± std. dev. of 7 runs, 1000 loops each)\n\nIn [8]: len(df.index)\n\nOut[8]: 4\n\nIn [9]: timeit len(df.index)\n\n990 ns Â± 4.97 ns per loop (mean Â± std. dev. of 7 runs, 100000 loops each)\n\n</code></pre>\n\n<h2><a href="https://i.stack.imgur.com/xoTgt.png" rel="noreferrer"><img src="https://i.stack.imgur.com/xoTgt.png" alt="enter image description here"></a></h2>\n\n<p>EDIT: As @Dan Allen noted in the comments <code>len(df.index)</code> and <code>df[0].count()</code> are not interchangeable as <code>count</code> excludes <code>NaN</code>s,</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	269
What IDE to use for Python?	\n\n<h2>Results</h2>\n\n<p><a href="https://docs.google.com/spreadsheets/d/1l3x94P55qoxqYbq5GosWQ7IonZ4vR-4ZyCaImiVmCSk/pubhtml" rel="noreferrer">Spreadsheet version</a></p>\n\n<p><a href="https://docs.google.com/spreadsheets/d/1l3x94P55qoxqYbq5GosWQ7IonZ4vR-4ZyCaImiVmCSk/pubhtml" rel="noreferrer"><img src="https://i.stack.imgur.com/Jrc6C.png" alt="spreadsheet screenshot"></a></p>\n\n<p>Alternatively, in plain text: (also available as a a <a href="https://i.stack.imgur.com/ItVKB.png" rel="noreferrer">screenshot</a>)</p>\n\n<pre class="lang-none prettyprint-override"><code> Bracket Matching -. .- Line Numbering\n\n Smart Indent -. | | .- UML Editing / Viewing\n\n Source Control Integration -. | | | | .- Code Folding\n\n Error Markup -. | | | | | | .- Code Templates\n\n Integrated Python Debugging -. | | | | | | | | .- Unit Testing\n\n Multi-Language Support -. | | | | | | | | | | .- GUI Designer (Qt, Eric, etc)\n\n Auto Code Completion -. | | | | | | | | | | | | .- Integrated DB Support\n\n Commercial/Free -. | | | | | | | | | | | | | | .- Refactoring\n\n Cross Platform -. | | | | | | | | | | | | | | | | \n\n +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\nAtom |Y |F |Y |Y*|Y |Y |Y |Y |Y |Y | |Y |Y | | | | |*many plugins\n\nEditra |Y |F |Y |Y | | |Y |Y |Y |Y | |Y | | | | | |\n\nEmacs |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y | | | |\n\nEric Ide |Y |F |Y | |Y |Y | |Y | |Y | |Y | |Y | | | |\n\nGeany |Y |F |Y*|Y | | | |Y |Y |Y | |Y | | | | | |*very limited\n\nGedit |Y |F |YÂ¹|Y | | | |Y |Y |Y | | |YÂ²| | | | |Â¹with plugin; Â²sort of\n\nIdle |Y |F |Y | |Y | | |Y |Y | | | | | | | | |\n\nIntelliJ |Y |CF|Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |\n\nJEdit |Y |F | |Y | | | | |Y |Y | |Y | | | | | |\n\nKDevelop |Y |F |Y*|Y | | |Y |Y |Y |Y | |Y | | | | | |*no type inference\n\nKomodo |Y |CF|Y |Y |Y |Y |Y |Y |Y |Y | |Y |Y |Y | |Y | |\n\nNetBeans* |Y |F |Y |Y |Y | |Y |Y |Y |Y |Y |Y |Y |Y | | |Y |*pre-v7.0\n\nNotepad++ |W |F |Y |Y | |Y*|Y*|Y*|Y |Y | |Y |Y*| | | | |*with plugin\n\nPfaide |W |C |Y |Y | | | |Y |Y |Y | |Y |Y | | | | |\n\nPIDA |LW|F |Y |Y | | | |Y |Y |Y | |Y | | | | | |VIM based\n\nPTVS |W |F |Y |Y |Y |Y |Y |Y |Y |Y | |Y | | |Y*| |Y |*WPF bsed\n\nPyCharm |Y |CF|Y |Y*|Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |*JavaScript\n\nPyDev (Eclipse) |Y |F |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y |Y | | | |\n\nPyScripter |W |F |Y | |Y |Y | |Y |Y |Y | |Y |Y |Y | | | |\n\nPythonWin |W |F |Y | |Y | | |Y |Y | | |Y | | | | | |\n\nSciTE |Y |FÂ¹| |Y | |Y | |Y |Y |Y | |Y |Y | | | | |Â¹Mac version is\n\nScriptDev |W |C |Y |Y |Y |Y | |Y |Y |Y | |Y |Y | | | | | commercial\n\nSpyder |Y |F |Y | |Y |Y | |Y |Y |Y | | | | | | | |\n\nSublime Text |Y |CF|Y |Y | |Y |Y |Y |Y |Y | |Y |Y |Y*| | | |extensible w/Python,\n\nTextMate |M |F | |Y | | |Y |Y |Y |Y | |Y |Y | | | | | *PythonTestRunner\n\nUliPad |Y |F |Y |Y |Y | | |Y |Y | | | |Y |Y | | | |\n\nVim |Y |F |Y |Y |Y |Y |Y |Y |Y |Y | |Y |Y |Y | | | |\n\nVisual Studio |W |CF|Y |Y |Y |Y |Y |Y |Y |Y |? |Y |? |? |Y |? |Y |\n\nVisual Studio Code|Y |F |Y |Y |Y |Y |Y |Y |Y |Y |? |Y |? |? |? |? |Y |uses plugins\n\nWingIde |Y |C |Y |Y*|Y |Y |Y |Y |Y |Y | |Y |Y |Y | | | |*support for C\n\nZeus |W |C | | | | |Y |Y |Y |Y | |Y |Y | | | | |\n\n +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\n Cross Platform -' | | | | | | | | | | | | | | | | \n\n Commercial/Free -' | | | | | | | | | | | | | | '- Refactoring\n\n Auto Code Completion -' | | | | | | | | | | | | '- Integrated DB Support\n\n Multi-Language Support -' | | | | | | | | | | '- GUI Designer (Qt, Eric, etc)\n\n Integrated Python Debugging -' | | | | | | | | '- Unit Testing\n\n Error Markup -' | | | | | | '- Code Templates\n\n Source Control Integration -' | | | | '- Code Folding\n\n Smart Indent -' | | '- UML Editing / Viewing\n\n Bracket Matching -' '- Line Numbering\n\n</code></pre>\n\n<hr>\n\n<p>Acronyms used:</p>\n\n<pre class="lang-none prettyprint-override"><code> L - Linux\n\n W - Windows\n\n M - Mac\n\n C - Commercial\n\n F - Free\n\n CF - Commercial with Free limited edition\n\n ? - To be confirmed\n\n</code></pre>\n\n<p>I don't mention basics like syntax highlighting as I expect these by default.</p>\n\n<hr>\n\n<p>This is a just dry list reflecting your feedback and comments, I am not advocating any of these tools. I will keep updating this list as you keep posting your answers.</p>\n\n<p><strong><em>PS. Can you help me to add features of the above editors to the list (like auto-complete, debugging, etc.)?</em></strong></p>\n\n<p>We have a comprehensive wiki page for this question <a href="https://wiki.python.org/moin/IntegratedDevelopmentEnvironments" rel="noreferrer">https://wiki.python.org/moin/IntegratedDevelopmentEnvironments</a></p>\n\n<p><a href="https://docs.google.com/spreadsheets/d/1l3x94P55qoxqYbq5GosWQ7IonZ4vR-4ZyCaImiVmCSk/edit#gid=0&fvid=1960281650" rel="noreferrer" title="Submit edits to the spreadsheet">Submit edits to the spreadsheet</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	270
How do I sort a dictionary by value?	<h2>As simple as: <code>sorted(dict1, key=dict1.get)</code></h2>\n\n<p>Well, it is actually possible to do a "sort by dictionary values". Recently I had to do that in a Code Golf (Stack Overflow question <em><a href="https://stackoverflow.com/questions/3169051/code-golf-word-frequency-chart#3170549">Code golf: Word frequency chart</a></em>). Abridged, the problem was of the kind: given a text, count how often each word is encountered and display a list of the top words, sorted by decreasing frequency. </p>\n\n<p>If you construct a dictionary with the words as keys and the number of occurrences of each word as value, simplified here as:</p>\n\n<pre><code>from collections import defaultdict\n\nd = defaultdict(int)\n\nfor w in text.split():\n\n d[w] += 1\n\n</code></pre>\n\n<p>then you can get a list of the words, ordered by frequency of use with <a href="https://docs.python.org/library/functions.html#sorted" rel="noreferrer"><code>sorted(d, key=d.get)</code></a> - the sort iterates over the dictionary keys, using the number of word occurrences as a sort key . </p>\n\n<pre><code>for w in sorted(d, key=d.get, reverse=True):\n\n print(w, d[w])\n\n</code></pre>\n\n<p>I am writing this detailed explanation to illustrate what people often mean by "I can easily sort a dictionary by key, but how do I sort by value" - and I think the original post was trying to address such an issue. And the solution is to do sort of list of the keys, based on the values, as shown above.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	271
Extract file name from path, no matter what the os/path format	<p>Actually, there's a <a href="https://docs.python.org/2/library/os.path.html#os.path.basename" rel="noreferrer">function</a> that returns exactly what you want</p>\n\n<pre><code>import os\n\nprint(os.path.basename(your_path))\n\n</code></pre>\n\n<p><em>WARNING: When <code>os.path.basename()</code> is used on a POSIX system to get the base name from a Windows styled path (e.g. <code>"C:\\my\\file.txt"</code>), the entire path will be returned.</em></p>\n\n<p><em>Example below from interactive python shell running on a Linux host:</em></p>\n\n<pre><code>Python 3.8.2 (default, Mar 13 2020, 10:14:16)\n\n[GCC 9.3.0] on linux\n\nType "help", "copyright", "credits" or "license" for more information.\n\n>>> import os\n\n>>> filepath = "C:\\my\\path\ o\\file.txt" # A Windows style file path.\n\n>>> os.path.basename(filepath)\n\n'C:\\my\\path\ o\\file.txt'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	272
What are the differences between type() and isinstance()?	<p>To summarize the contents of other (already good!) answers, <code>isinstance</code> caters for inheritance (an instance of a derived class <em>is an</em> instance of a base class, too), while checking for equality of <code>type</code> does not (it demands identity of types and rejects instances of subtypes, AKA subclasses).</p>\n\n<p>Normally, in Python, you want your code to support inheritance, of course (since inheritance is so handy, it would be bad to stop code using yours from using it!), so <code>isinstance</code> is less bad than checking identity of <code>type</code>s because it seamlessly supports inheritance.</p>\n\n<p>It's not that <code>isinstance</code> is <em>good</em>, mind youâit's just <em>less bad</em> than checking equality of types. The normal, Pythonic, preferred solution is almost invariably "duck typing": try using the argument <em>as if</em> it was of a certain desired type, do it in a <code>try</code>/<code>except</code> statement catching all exceptions that could arise if the argument was not in fact of that type (or any other type nicely duck-mimicking it;-), and in the <code>except</code> clause, try something else (using the argument "as if" it was of some other type).</p>\n\n<p><code>basestring</code> <strong>is</strong>, however, quite a special caseâa builtin type that exists <strong>only</strong> to let you use <code>isinstance</code> (both <code>str</code> and <code>unicode</code> subclass <code>basestring</code>). Strings are sequences (you could loop over them, index them, slice them, ...), but you generally want to treat them as "scalar" typesâit's somewhat incovenient (but a reasonably frequent use case) to treat all kinds of strings (and maybe other scalar types, i.e., ones you can't loop on) one way, all containers (lists, sets, dicts, ...) in another way, and <code>basestring</code> plus <code>isinstance</code> helps you do thatâthe overall structure of this idiom is something like:</p>\n\n<pre><code>if isinstance(x, basestring)\n\n return treatasscalar(x)\n\ntry:\n\n return treatasiter(iter(x))\n\nexcept TypeError:\n\n return treatasscalar(x)\n\n</code></pre>\n\n<p>You could say that <code>basestring</code> is an <em>Abstract Base Class</em> ("ABC")âit offers no concrete functionality to subclasses, but rather exists as a "marker", mainly for use with <code>isinstance</code>. The concept is obviously a growing one in Python, since <a href="http://www.python.org/dev/peps/pep-3119/" rel="noreferrer">PEP 3119</a>, which introduces a generalization of it, was accepted and has been implemented starting with Python 2.6 and 3.0.</p>\n\n<p>The PEP makes it clear that, while ABCs can often substitute for duck typing, there is generally no big pressure to do that (see <a href="http://www.python.org/dev/peps/pep-3119/#abcs-vs-duck-typing" rel="noreferrer">here</a>). ABCs as implemented in recent Python versions do however offer extra goodies: <code>isinstance</code> (and <code>issubclass</code>) can now mean more than just "[an instance of] a derived class" (in particular, any class can be "registered" with an ABC so that it will show as a subclass, and its instances as instances of the ABC); and ABCs can also offer extra convenience to actual subclasses in a very natural way via Template Method design pattern applications (see <a href="http://en.wikipedia.org/wiki/Template_method_pattern" rel="noreferrer">here</a> and <a href="http://www.catonmat.net/blog/learning-python-design-patterns-through-video-lectures/" rel="noreferrer">here</a> [[part II]] for more on the TM DP, in general and specifically in Python, independent of ABCs).</p>\n\n<p>For the underlying mechanics of ABC support as offered in Python 2.6, see <a href="http://docs.python.org/library/abc.html" rel="noreferrer">here</a>; for their 3.1 version, very similar, see <a href="http://docs.python.org/3.1/library/abc.html" rel="noreferrer">here</a>. In both versions, standard library module <a href="http://docs.python.org/3.1/library/collections.html#module-collections" rel="noreferrer">collections</a> (that's the 3.1 versionâfor the very similar 2.6 version, see <a href="http://docs.python.org/library/collections.html#module-collections" rel="noreferrer">here</a>) offers several useful ABCs.</p>\n\n<p>For the purpose of this answer, the key thing to retain about ABCs (beyond an arguably more natural placement for TM DP functionality, compared to the classic Python alternative of mixin classes such as <a href="http://docs.python.org/library/userdict.html?highlight=userdict#UserDict.DictMixin" rel="noreferrer">UserDict.DictMixin</a>) is that they make <code>isinstance</code> (and <code>issubclass</code>) much more attractive and pervasive (in Python 2.6 and going forward) than they used to be (in 2.5 and before), and therefore, by contrast, make checking type equality an even worse practice in recent Python versions than it already used to be.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	273
How to read a large file - line by line?	<p>The correct, fully Pythonic way to read a file is the following:</p>\n\n<pre><code>with open(...) as f:\n\n for line in f:\n\n # Do something with 'line'\n\n</code></pre>\n\n<p>The <code>with</code> statement handles opening and closing the file, including if an exception is raised in the inner block. The <code>for line in f</code> treats the file object <code>f</code> as an iterable, which automatically uses buffered I/O and memory management so you don't have to worry about large files.</p>\n\n<blockquote>\n\n <p>There should be one -- and preferably only one -- obvious way to do it.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	274
How to remove the first Item from a list?	<p><a href="http://docs.python.org/tutorial/datastructures.html" rel="noreferrer">Python List</a></p>\n\n<p><strong>list.pop(index)</strong></p>\n\n<pre><code>>>> l = ['a', 'b', 'c', 'd']\n\n>>> l.pop(0)\n\n'a'\n\n>>> l\n\n['b', 'c', 'd']\n\n>>> \n\n</code></pre>\n\n<p><strong>del list[index]</strong></p>\n\n<pre><code>>>> l = ['a', 'b', 'c', 'd']\n\n>>> del l[0]\n\n>>> l\n\n['b', 'c', 'd']\n\n>>> \n\n</code></pre>\n\n<p>These both modify your original list.</p>\n\n<p>Others have suggested using slicing:</p>\n\n<ul>\n\n<li>Copies the list</li>\n\n<li>Can return a subset</li>\n\n</ul>\n\n<p>Also, if you are performing many pop(0), you should look at <a href="http://docs.python.org/library/collections.html#collections.deque" rel="noreferrer">collections.deque</a></p>\n\n<pre><code>from collections import deque\n\n>>> l = deque(['a', 'b', 'c', 'd'])\n\n>>> l.popleft()\n\n'a'\n\n>>> l\n\ndeque(['b', 'c', 'd'])\n\n</code></pre>\n\n<ul>\n\n<li>Provides higher performance popping from left end of the list</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	275
Why is it string.join(list) instead of list.join(string)?	<p>It's because any iterable can be joined (e.g, list, tuple, dict, set), but the result and the "joiner" <em>must be</em> strings.</p>\n\n<p>For example:</p>\n\n<pre><code>'_'.join(['welcome', 'to', 'stack', 'overflow'])\n\n'_'.join(('welcome', 'to', 'stack', 'overflow'))\n\n</code></pre>\n\n<pre><code>'welcome_to_stack_overflow'\n\n</code></pre>\n\n<p>Using something else than strings will raise the following error:</p>\n\n<blockquote>\n\n <p>TypeError: sequence item 0: expected str instance, int found</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	276
How can I reverse a list in Python?	<pre><code>>>> L = [0,10,20,40]\n\n>>> L[::-1]\n\n[40, 20, 10, 0]\n\n</code></pre>\n\n<p>Extended slice syntax is explained well in the Python <a href="http://docs.python.org/release/2.3.5/whatsnew/section-slices.html" rel="noreferrer">What's new Entry for release <code>2.3.5</code></a></p>\n\n<p>By special request in a comment <a href="http://docs.python.org/library/functions.html#slice" rel="noreferrer">this is the most current slice documentation</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	277
Shuffling a list of objects	<p><a href="https://docs.python.org/library/random.html#random.shuffle" rel="noreferrer"><code>random.shuffle</code></a> should work. Here's an example, where the objects are lists:</p>\n\n<pre><code>from random import shuffle\n\nx = [[i] for i in range(10)]\n\nshuffle(x)\n\n# print(x) gives [[9], [2], [7], [0], [4], [5], [3], [1], [8], [6]]\n\n# of course your results will vary\n\n</code></pre>\n\n<p>Note that shuffle works <strong>in place</strong>, and returns None.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	278
How can I safely create a nested directory?	<h2>Python 3.5+:</h2>\n\n<pre><code>import pathlib\n\npathlib.Path('/my/directory').mkdir(parents=True, exist_ok=True) \n\n</code></pre>\n\n<p><a href="https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir" rel="noreferrer"><code>pathlib.Path.mkdir</code></a> as used above recursively creates the directory and does not raise an exception if the directory already exists. If you don't need or want the parents to be created, skip the <code>parents</code> argument.</p>\n\n<h2>Python 3.2+:</h2>\n\n<p><strong>Using <code>pathlib</code>:</strong></p>\n\n<p>If you can, install the current <code>pathlib</code> backport named <a href="https://pypi.python.org/pypi/pathlib2/" rel="noreferrer"><code>pathlib2</code></a>. Do not install the older unmaintained backport named <a href="https://pypi.python.org/pypi/pathlib/" rel="noreferrer"><code>pathlib</code></a>. Next, refer to the Python 3.5+ section above and use it the same.</p>\n\n<p>If using Python 3.4, even though it comes with <code>pathlib</code>, it is missing the useful <code>exist_ok</code> option. The backport is intended to offer a newer and superior implementation of <code>mkdir</code> which includes this missing option.</p>\n\n<p><strong>Using <code>os</code>:</strong></p>\n\n<pre><code>import os\n\nos.makedirs(path, exist_ok=True)\n\n</code></pre>\n\n<p><a href="https://docs.python.org/library/os.html#os.makedirs" rel="noreferrer"><code>os.makedirs</code></a> as used above recursively creates the directory and does not raise an exception if the directory already exists. It has the optional <code>exist_ok</code> argument only if using Python 3.2+, with a default value of <code>False</code>. This argument does not exist in Python 2.x up to 2.7. As such, there is no need for manual exception handling as with Python 2.7.</p>\n\n<h2>Python 2.7+:</h2>\n\n<p><strong>Using <code>pathlib</code>:</strong></p>\n\n<p>If you can, install the current <code>pathlib</code> backport named <a href="https://pypi.python.org/pypi/pathlib2/" rel="noreferrer"><code>pathlib2</code></a>. Do not install the older unmaintained backport named <a href="https://pypi.python.org/pypi/pathlib/" rel="noreferrer"><code>pathlib</code></a>. Next, refer to the Python 3.5+ section above and use it the same.</p>\n\n<p><strong>Using <code>os</code>:</strong></p>\n\n<pre><code>import os\n\ntry: \n\n os.makedirs(path)\n\nexcept OSError:\n\n if not os.path.isdir(path):\n\n raise\n\n</code></pre>\n\n<p>While a naive solution may first use <a href="https://docs.python.org/2/library/os.path.html#os.path.isdir" rel="noreferrer" title="os.path.isdir"><code>os.path.isdir</code></a> followed by <a href="https://docs.python.org/2/library/os.html#os.makedirs" rel="noreferrer" title="os.makedirs"><code>os.makedirs</code></a>, the solution above reverses the order of the two operations. In doing so, it prevents a common race condition having to do with a duplicated attempt at creating the directory, and also disambiguates files from directories.</p>\n\n<p>Note that capturing the exception and using <code>errno</code> is of limited usefulness because <code>OSError: [Errno 17] File exists</code>, i.e. <code>errno.EEXIST</code>, is raised for both files and directories. It is more reliable simply to check if the directory exists.</p>\n\n<h2>Alternative:</h2>\n\n<p><a href="https://docs.python.org/distutils/apiref.html#distutils.dir_util.mkpath" rel="noreferrer"><code>mkpath</code></a> creates the nested directory, and does nothing if the directory already exists. This works in both Python 2 and 3.</p>\n\n<pre><code>import distutils.dir_util\n\ndistutils.dir_util.mkpath(path)\n\n</code></pre>\n\n<p>Per <a href="http://bugs.python.org/issue10948" rel="noreferrer">Bug 10948</a>, a severe limitation of this alternative is that it works only once per python process for a given path. In other words, if you use it to create a directory, then delete the directory from inside or outside Python, then use <code>mkpath</code> again to recreate the same directory, <code>mkpath</code> will simply silently use its invalid cached info of having previously created the directory, and will not actually make the directory again. In contrast, <code>os.makedirs</code> doesn't rely on any such cache. This limitation may be okay for some applications.</p>\n\n<hr>\n\n<p>With regard to the directory's <em>mode</em>, please refer to the documentation if you care about it.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	279
How do I connect to a MySQL Database in Python?	\n\n<h2>Connecting to MYSQL with Python 2 in three steps</h2>\n\n<p><strong>1 - Setting</strong></p>\n\n<p>You must install a MySQL driver before doing anything. Unlike PHP, Only the SQLite driver is installed by default with Python. The most used package to do so is <a href="http://pypi.python.org/pypi/MySQL-python/" rel="noreferrer">MySQLdb</a> but it's hard to install it using easy_install. Please note MySQLdb only supports Python 2.</p>\n\n<p>For Windows user, you can get an <a href="http://sourceforge.net/project/showfiles.php?group_id=22307" rel="noreferrer">exe of MySQLdb</a>. </p>\n\n<p>For Linux, this is a casual package (python-mysqldb). (You can use <code>sudo apt-get install python-mysqldb</code> (for debian based distros), <code>yum install MySQL-python</code> (for rpm-based), or <code>dnf install python-mysql</code> (for modern fedora distro) in command line to download.)</p>\n\n<p>For Mac, you can <a href="https://stackoverflow.com/questions/1448429/how-to-install-mysqldb-python-data-access-library-to-mysql-on-mac-os-x#1448476">install MySQLdb using Macport</a>.</p>\n\n<p><strong>2 - Usage</strong></p>\n\n<p>After installing, Reboot. This is not mandatory, But it will prevent me from answering 3 or 4 other questions in this post if something goes wrong. So please reboot.</p>\n\n<p>Then it is just like using any other package :</p>\n\n<pre class="lang-py prettyprint-override"><code>#!/usr/bin/python\n\nimport MySQLdb\n\ndb = MySQLdb.connect(host="localhost", # your host, usually localhost\n\n user="john", # your username\n\n passwd="megajonhy", # your password\n\n db="jonhydb") # name of the data base\n\n# you must create a Cursor object. It will let\n\n# you execute all the queries you need\n\ncur = db.cursor()\n\n# Use all the SQL you like\n\ncur.execute("SELECT * FROM YOUR_TABLE_NAME")\n\n# print all the first cell of all the rows\n\nfor row in cur.fetchall():\n\n print row[0]\n\ndb.close()\n\n</code></pre>\n\n<p>Of course, there are thousand of possibilities and options; this is a very basic example. You will have to look at the documentation. <a href="http://www.mikusa.com/python-mysql-docs/" rel="noreferrer">A good starting point</a>.</p>\n\n<p><strong>3 - More advanced usage</strong></p>\n\n<p>Once you know how it works, You may want to use an <a href="https://en.wikipedia.org/wiki/Object-Relational_Mapping" rel="noreferrer">ORM</a> to avoid writing SQL manually and manipulate your tables as they were Python objects. The most famous ORM in the Python community is <a href="http://www.sqlalchemy.org/" rel="noreferrer">SQLAlchemy</a>. </p>\n\n<p>I strongly advise you to use it: your life is going to be much easier.</p>\n\n<p>I recently discovered another jewel in the Python world: <a href="http://peewee.readthedocs.org/en/latest/index.html" rel="noreferrer">peewee</a>. It's a very lite ORM, really easy and fast to setup then use. It makes my day for small projects or stand alone apps, Where using big tools like SQLAlchemy or Django is overkill :</p>\n\n<pre class="lang-py prettyprint-override"><code>import peewee\n\nfrom peewee import * db = MySQLDatabase('jonhydb', user='john', passwd='megajonhy')\n\nclass Book(peewee.Model):\n\n author = peewee.CharField()\n\n title = peewee.TextField()\n\n class Meta:\n\n database = db\n\nBook.create_table()\n\nbook = Book(author="me", title='Peewee is cool')\n\nbook.save()\n\nfor book in Book.filter(author="me"):\n\n print book.title\n\n</code></pre>\n\n<p>This example works out of the box. Nothing other than having peewee (<code>pip install peewee</code>) is required.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	280
How to change a string into uppercase	<pre><code>>>> s = 'sdsd'\n\n>>> s.upper()\n\n'SDSD'\n\n</code></pre>\n\n<p>See <a href="https://docs.python.org/2/library/stdtypes.html#string-methods" rel="noreferrer">String Methods</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	281
Change data type of columns in Pandas	<p>You have three main options for converting types in pandas:</p>\n\n<ol>\n\n<li><p><a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_numeric.html" rel="noreferrer"><code>to_numeric()</code></a> - provides functionality to safely convert non-numeric types (e.g. strings) to a suitable numeric type. (See also <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_datetime.html#pandas.to_datetime" rel="noreferrer"><code>to_datetime()</code></a> and <a href="http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.to_timedelta.html#pandas.to_timedelta" rel="noreferrer"><code>to_timedelta()</code></a>.)</p></li>\n\n<li><p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.astype.html" rel="noreferrer"><code>astype()</code></a> - convert (almost) any type to (almost) any other type (even if it's not necessarily sensible to do so). Also allows you to convert to <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html" rel="noreferrer">categorial</a> types (very useful).</p></li>\n\n<li><p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.infer_objects.html" rel="noreferrer"><code>infer_objects()</code></a> - a utility method to convert object columns holding Python objects to a pandas type if possible.</p></li>\n\n</ol>\n\n<p>Read on for more detailed explanations and usage of each of these methods.</p>\n\n<hr>\n\n<h1>1. <code>to_numeric()</code></h1>\n\n<p>The best way to convert one or more columns of a DataFrame to numeric values is to use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_numeric.html" rel="noreferrer"><code>pandas.to_numeric()</code></a>.</p>\n\n<p>This function will try to change non-numeric objects (such as strings) into integers or floating point numbers as appropriate.</p>\n\n<h2>Basic usage</h2>\n\n<p>The input to <code>to_numeric()</code> is a Series or a single column of a DataFrame. </p>\n\n<pre><code>>>> s = pd.Series(["8", 6, "7.5", 3, "0.9"]) # mixed string and numeric values\n\n>>> s\n\n0 8\n\n1 6\n\n2 7.5\n\n3 3\n\n4 0.9\n\ndtype: object\n\n>>> pd.to_numeric(s) # convert everything to float values\n\n0 8.0\n\n1 6.0\n\n2 7.5\n\n3 3.0\n\n4 0.9\n\ndtype: float64\n\n</code></pre>\n\n<p>As you can see, a new Series is returned. Remember to assign this output to a variable or column name to continue using it:</p>\n\n<pre><code># convert Series\n\nmy_series = pd.to_numeric(my_series)\n\n# convert column "a" of a DataFrame\n\ndf["a"] = pd.to_numeric(df["a"])\n\n</code></pre>\n\n<p>You can also use it to convert multiple columns of a DataFrame via the <code>apply()</code> method:</p>\n\n<pre><code># convert all columns of DataFrame\n\ndf = df.apply(pd.to_numeric) # convert all columns of DataFrame\n\n# convert just columns "a" and "b"\n\ndf[["a", "b"]] = df[["a", "b"]].apply(pd.to_numeric)\n\n</code></pre>\n\n<p>As long as your values can all be converted, that's probably all you need.</p>\n\n<h2>Error handling</h2>\n\n<p>But what if some values can't be converted to a numeric type?</p>\n\n<p><code>to_numeric()</code> also takes an <code>errors</code> keyword argument that allows you to force non-numeric values to be <code>NaN</code>, or simply ignore columns containing these values.</p>\n\n<p>Here's an example using a Series of strings <code>s</code> which has the object dtype:</p>\n\n<pre><code>>>> s = pd.Series(['1', '2', '4.7', 'pandas', '10'])\n\n>>> s\n\n0 1\n\n1 2\n\n2 4.7\n\n3 pandas\n\n4 10\n\ndtype: object\n\n</code></pre>\n\n<p>The default behaviour is to raise if it can't convert a value. In this case, it can't cope with the string 'pandas':</p>\n\n<pre><code>>>> pd.to_numeric(s) # or pd.to_numeric(s, errors='raise')\n\nValueError: Unable to parse string\n\n</code></pre>\n\n<p>Rather than fail, we might want 'pandas' to be considered a missing/bad numeric value. We can coerce invalid values to <code>NaN</code> as follows using the <code>errors</code> keyword argument:</p>\n\n<pre><code>>>> pd.to_numeric(s, errors='coerce')\n\n0 1.0\n\n1 2.0\n\n2 4.7\n\n3 NaN\n\n4 10.0\n\ndtype: float64\n\n</code></pre>\n\n<p>The third option for <code>errors</code> is just to ignore the operation if an invalid value is encountered:</p>\n\n<pre><code>>>> pd.to_numeric(s, errors='ignore')\n\n# the original Series is returned untouched\n\n</code></pre>\n\n<p>This last option is particularly useful when you want to convert your entire DataFrame, but don't not know which of our columns can be converted reliably to a numeric type. In that case just write:</p>\n\n<pre><code>df.apply(pd.to_numeric, errors='ignore')\n\n</code></pre>\n\n<p>The function will be applied to each column of the DataFrame. Columns that can be converted to a numeric type will be converted, while columns that cannot (e.g. they contain non-digit strings or dates) will be left alone.</p>\n\n<h2>Downcasting</h2>\n\n<p>By default, conversion with <code>to_numeric()</code> will give you either a <code>int64</code> or <code>float64</code> dtype (or whatever integer width is native to your platform).</p>\n\n<p>That's usually what you want, but what if you wanted to save some memory and use a more compact dtype, like <code>float32</code>, or <code>int8</code>?</p>\n\n<p><code>to_numeric()</code> gives you the option to downcast to either 'integer', 'signed', 'unsigned', 'float'. Here's an example for a simple series <code>s</code> of integer type:</p>\n\n<pre><code>>>> s = pd.Series([1, 2, -7])\n\n>>> s\n\n0 1\n\n1 2\n\n2 -7\n\ndtype: int64\n\n</code></pre>\n\n<p>Downcasting to 'integer' uses the smallest possible integer that can hold the values:</p>\n\n<pre><code>>>> pd.to_numeric(s, downcast='integer')\n\n0 1\n\n1 2\n\n2 -7\n\ndtype: int8\n\n</code></pre>\n\n<p>Downcasting to 'float' similarly picks a smaller than normal floating type:</p>\n\n<pre><code>>>> pd.to_numeric(s, downcast='float')\n\n0 1.0\n\n1 2.0\n\n2 -7.0\n\ndtype: float32\n\n</code></pre>\n\n<hr>\n\n<h1>2. <code>astype()</code></h1>\n\n<p>The <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.astype.html" rel="noreferrer"><code>astype()</code></a> method enables you to be explicit about the dtype you want your DataFrame or Series to have. It's very versatile in that you can try and go from one type to the any other.</p>\n\n<h2>Basic usage</h2>\n\n<p>Just pick a type: you can use a NumPy dtype (e.g. <code>np.int16</code>), some Python types (e.g. bool), or pandas-specific types (like the categorical dtype).</p>\n\n<p>Call the method on the object you want to convert and <code>astype()</code> will try and convert it for you:</p>\n\n<pre><code># convert all DataFrame columns to the int64 dtype\n\ndf = df.astype(int)\n\n# convert column "a" to int64 dtype and "b" to complex type\n\ndf = df.astype({"a": int, "b": complex})\n\n# convert Series to float16 type\n\ns = s.astype(np.float16)\n\n# convert Series to Python strings\n\ns = s.astype(str)\n\n# convert Series to categorical type - see docs for more details\n\ns = s.astype('category')\n\n</code></pre>\n\n<p>Notice I said "try" - if <code>astype()</code> does not know how to convert a value in the Series or DataFrame, it will raise an error. For example if you have a <code>NaN</code> or <code>inf</code> value you'll get an error trying to convert it to an integer.</p>\n\n<p>As of pandas 0.20.0, this error can be suppressed by passing <code>errors='ignore'</code>. Your original object will be return untouched.</p>\n\n<h2>Be careful</h2>\n\n<p><code>astype()</code> is powerful, but it will sometimes convert values "incorrectly". For example:</p>\n\n<pre><code>>>> s = pd.Series([1, 2, -7])\n\n>>> s\n\n0 1\n\n1 2\n\n2 -7\n\ndtype: int64\n\n</code></pre>\n\n<p>These are small integers, so how about converting to an unsigned 8-bit type to save memory?</p>\n\n<pre><code>>>> s.astype(np.uint8)\n\n0 1\n\n1 2\n\n2 249\n\ndtype: uint8\n\n</code></pre>\n\n<p>The conversion worked, but the -7 was wrapped round to become 249 (i.e. 2<sup>8</sup> - 7)! </p>\n\n<p>Trying to downcast using <code>pd.to_numeric(s, downcast='unsigned')</code> instead could help prevent this error.</p>\n\n<hr>\n\n<h1>3. <code>infer_objects()</code></h1>\n\n<p>Version 0.21.0 of pandas introduced the method <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.infer_objects.html" rel="noreferrer"><code>infer_objects()</code></a> for converting columns of a DataFrame that have an object datatype to a more specific type (soft conversions).</p>\n\n<p>For example, here's a DataFrame with two columns of object type. One holds actual integers and the other holds strings representing integers:</p>\n\n<pre><code>>>> df = pd.DataFrame({'a': [7, 1, 5], 'b': ['3','2','1']}, dtype='object')\n\n>>> df.dtypes\n\na object\n\nb object\n\ndtype: object\n\n</code></pre>\n\n<p>Using <code>infer_objects()</code>, you can change the type of column 'a' to int64:</p>\n\n<pre><code>>>> df = df.infer_objects()\n\n>>> df.dtypes\n\na int64\n\nb object\n\ndtype: object\n\n</code></pre>\n\n<p>Column 'b' has been left alone since its values were strings, not integers. If you wanted to try and force the conversion of both columns to an integer type, you could use <code>df.astype(int)</code> instead.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	282
Is arr.__len__() the preferred way to get the length of an array in Python?	<pre><code>my_list = [1,2,3,4,5]\n\nlen(my_list)\n\n# 5\n\n</code></pre>\n\n<p>The same works for tuples:</p>\n\n<pre><code>my_tuple = (1,2,3,4,5)\n\nlen(my_tuple)\n\n# 5\n\n</code></pre>\n\n<p>And strings, which are really just arrays of characters:</p>\n\n<pre><code>my_string = 'hello world'\n\nlen(my_string)\n\n# 11\n\n</code></pre>\n\n<p>It was <a href="http://effbot.org/pyfaq/why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list.htm" rel="noreferrer">intentionally done this way</a> so that lists, tuples and other container types or iterables didn't all need to explicitly implement a public <code>.length()</code> method, instead you can just check the <code>len()</code> of anything that implements the 'magic' <code>__len__()</code> method.</p>\n\n<p>Sure, this may seem redundant, but length checking implementations can vary considerably, even within the same language. It's not uncommon to see one collection type use a <code>.length()</code> method while another type uses a <code>.length</code> property, while yet another uses <code>.count()</code>. Having a language-level keyword unifies the entry point for all these types. So even objects you may not consider to be lists of elements could still be length-checked. This includes strings, queues, trees, etc.</p>\n\n<p>The functional nature of <code>len()</code> also lends itself well to functional styles of programming.</p>\n\n<pre><code>lengths = map(len, list_of_containers)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	283
Get difference between two lists	<pre><code>In [5]: list(set(temp1) - set(temp2))\n\nOut[5]: ['Four', 'Three']\n\n</code></pre>\n\n<p>Beware that </p>\n\n<pre><code>In [5]: set([1, 2]) - set([2, 3])\n\nOut[5]: set([1]) \n\n</code></pre>\n\n<p>where you might expect/want it to equal <code>set([1, 3])</code>. If you do want <code>set([1, 3])</code> as your answer, you'll need to use <code>set([1, 2]).symmetric_difference(set([2, 3]))</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	284
Print string to text file	<pre><code>text_file = open("Output.txt", "w")\n\ntext_file.write("Purchase Amount: %s" % TotalAmount)\n\ntext_file.close()\n\n</code></pre>\n\n<p>If you use a context manager, the file is closed automatically for you</p>\n\n<pre><code>with open("Output.txt", "w") as text_file:\n\n text_file.write("Purchase Amount: %s" % TotalAmount)\n\n</code></pre>\n\n<p>If you're using Python2.6 or higher, it's preferred to use <code>str.format()</code></p>\n\n<pre><code>with open("Output.txt", "w") as text_file:\n\n text_file.write("Purchase Amount: {0}".format(TotalAmount))\n\n</code></pre>\n\n<p>For python2.7 and higher you can use <code>{}</code> instead of <code>{0}</code></p>\n\n<p>In Python3, there is an optional <code>file</code> parameter to the <code>print</code> function</p>\n\n<pre><code>with open("Output.txt", "w") as text_file:\n\n print("Purchase Amount: {}".format(TotalAmount), file=text_file)\n\n</code></pre>\n\n<p>Python3.6 introduced <a href="https://docs.python.org/3/whatsnew/3.6.html#pep-498-formatted-string-literals" rel="noreferrer">f-strings</a> for another alternative</p>\n\n<pre><code>with open("Output.txt", "w") as text_file:\n\n print(f"Purchase Amount: {TotalAmount}", file=text_file)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	285
How can I do a line break (line continuation) in Python?	<p>What is the line? You can just have arguments on the next line without any problems:</p>\n\n<pre><code>a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, \n\n blahblah6, blahblah7)\n\n</code></pre>\n\n<p>Otherwise you can do something like this:</p>\n\n<pre><code>if a == True and \\n\n b == False\n\n</code></pre>\n\n<p>Check the <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">style guide</a> for more information.</p>\n\n<p>From your example line:</p>\n\n<pre><code>a = '1' + '2' + '3' + \\n\n '4' + '5'\n\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>a = ('1' + '2' + '3' +\n\n '4' + '5')\n\n</code></pre>\n\n<p>Note that the style guide says that using the implicit continuation with parentheses is preferred, but in this particular case just adding parentheses around your expression is probably the wrong way to go.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	286
Add a new item to a dictionary in Python	<pre><code>default_data['item3'] = 3\n\n</code></pre>\n\n<p>Easy as py.</p>\n\n<p>Another possible solution:</p>\n\n<pre><code>default_data.update({'item3': 3})\n\n</code></pre>\n\n<p>which is nice if you want to insert multiple items at once.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	287
Converting unix timestamp string to readable date	<p>Use <code>datetime</code> module:</p>\n\n<pre><code>from datetime import datetime\n\nts = int("1284101485")\n\n# if you encounter a "year is out of range" error the timestamp\n\n# may be in milliseconds, try `ts /= 1000` in that case\n\nprint(datetime.utcfromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S'))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	288
Getting key with maximum value in dictionary?	<pre><code>max(stats, key=stats.get)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	289
Traverse a list in reverse order in Python	<p>Use the built-in <a href="https://docs.python.org/library/functions.html#reversed" rel="noreferrer"><code>reversed()</code></a> function:</p>\n\n<pre><code>>>> a = ["foo", "bar", "baz"]\n\n>>> for i in reversed(a):\n\n... print(i)\n\n... \n\nbaz\n\nbar\n\nfoo\n\n</code></pre>\n\n<p>To also access the original index, use <a href="https://docs.python.org/library/functions.html#enumerate" rel="noreferrer"><code>enumerate()</code></a> on your list before passing it to <code>reversed()</code>:</p>\n\n<pre><code>>>> for i, e in reversed(list(enumerate(a))):\n\n... print(i, e)\n\n... \n\n2 baz\n\n1 bar\n\n0 foo\n\n</code></pre>\n\n<p>Since <code>enumerate()</code> returns a generator and generators can't be reversed, you need to convert it to a <code>list</code> first.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	290
How do you get the logical xor of two variables in Python?	<p>If you're already normalizing the inputs to booleans, then != is xor.</p>\n\n<pre><code>bool(a) != bool(b)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	291
What are "named tuples" in Python?	<p>Named tuples are basically easy-to-create, lightweight object types. Named tuple instances can be referenced using object-like variable dereferencing or the standard tuple syntax. They can be used similarly to <code>struct</code> or other common record types, except that they are immutable. They were added in Python 2.6 and Python 3.0, although there is a <a href="http://code.activestate.com/recipes/500261/" rel="noreferrer">recipe for implementation in Python 2.4</a>.</p>\n\n<p>For example, it is common to represent a point as a tuple <code>(x, y)</code>. This leads to code like the following:</p>\n\n<pre><code>pt1 = (1.0, 5.0)\n\npt2 = (2.5, 1.5)\n\nfrom math import sqrt\n\nline_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)\n\n</code></pre>\n\n<p>Using a named tuple it becomes more readable:</p>\n\n<pre><code>from collections import namedtuple\n\nPoint = namedtuple('Point', 'x y')\n\npt1 = Point(1.0, 5.0)\n\npt2 = Point(2.5, 1.5)\n\nfrom math import sqrt\n\nline_length = sqrt((pt1.x-pt2.x)**2 + (pt1.y-pt2.y)**2)\n\n</code></pre>\n\n<p>However, named tuples are still backwards compatible with normal tuples, so the following will still work:</p>\n\n<pre><code>Point = namedtuple('Point', 'x y')\n\npt1 = Point(1.0, 5.0)\n\npt2 = Point(2.5, 1.5)\n\nfrom math import sqrt\n\n# use index referencing\n\nline_length = sqrt((pt1[0]-pt2[0])**2 + (pt1[1]-pt2[1])**2)\n\n # use tuple unpacking\n\nx1, y1 = pt1\n\n</code></pre>\n\n<p>Thus, <strong>you should use named tuples instead of tuples anywhere you think object notation will make your code more pythonic and more easily readable</strong>. I personally have started using them to represent very simple value types, particularly when passing them as parameters to functions. It makes the functions more readable, without seeing the context of the tuple packing.</p>\n\n<p>Furthermore, <strong>you can also replace ordinary <em>immutable</em> classes that have no functions</strong>, only fields with them. You can even use your named tuple types as base classes:</p>\n\n<pre><code>class Point(namedtuple('Point', 'x y')):\n\n [...]\n\n</code></pre>\n\n<p>However, as with tuples, attributes in named tuples are immutable:</p>\n\n<pre><code>>>> Point = namedtuple('Point', 'x y')\n\n>>> pt1 = Point(1.0, 5.0)\n\n>>> pt1.x = 2.0\n\nAttributeError: can't set attribute\n\n</code></pre>\n\n<p>If you want to be able change the values, you need another type. There is a handy recipe for <a href="http://code.activestate.com/recipes/576555/" rel="noreferrer">mutable recordtypes</a> which allow you to set new values to attributes.</p>\n\n<pre><code>>>> from rcdtype import * >>> Point = recordtype('Point', 'x y')\n\n>>> pt1 = Point(1.0, 5.0)\n\n>>> pt1 = Point(1.0, 5.0)\n\n>>> pt1.x = 2.0\n\n>>> print(pt1[0])\n\n 2.0\n\n</code></pre>\n\n<p>I am not aware of any form of "named list" that lets you add new fields, however. You may just want to use a dictionary in this situation. Named tuples can be converted to dictionaries using <code>pt1._asdict()</code> which returns <code>{'x': 1.0, 'y': 5.0}</code> and can be operated upon with all the usual dictionary functions. </p>\n\n<p>As already noted, you should <a href="http://docs.python.org/py3k/library/collections.html?highlight=namedtuple#collections.namedtuple" rel="noreferrer">check the documentation</a> for more information from which these examples were constructed.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	292
Use a list of values to select rows from a pandas dataframe	<p>You can use <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.isin.html" rel="noreferrer"><code>isin</code></a> method:</p>\n\n<pre><code>In [1]: df = pd.DataFrame({'A': [5,6,3,4], 'B': [1,2,3,5]})\n\nIn [2]: df\n\nOut[2]:\n\n A B\n\n0 5 1\n\n1 6 2\n\n2 3 3\n\n3 4 5\n\nIn [3]: df[df['A'].isin([3, 6])]\n\nOut[3]:\n\n A B\n\n1 6 2\n\n2 3 3\n\n</code></pre>\n\n<p>And to get the opposite use <code>~</code>:</p>\n\n<pre><code>In [4]: df[~df['A'].isin([3, 6])]\n\nOut[4]:\n\n A B\n\n0 5 1\n\n3 4 5\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	293
Python: Find in list	<p>As for your first question: that code is perfectly fine and should work if <code>item</code> equals one of the elements inside <code>myList</code>. Maybe you try to find a string that does not <em>exactly</em> match one of the items or maybe you are using a float value which suffers from inaccuracy.</p>\n\n<p>As for your second question: There's actually several possible ways if "finding" things in lists.</p>\n\n<h3>Checking if something is inside</h3>\n\n<p>This is the use case you describe: Checking whether something is inside a list or not. As you know, you can use the <code>in</code> operator for that:</p>\n\n<pre><code>3 in [1, 2, 3] # => True\n\n</code></pre>\n\n<h3>Filtering a collection</h3>\n\n<p>That is, finding all elements in a sequence that meet a certain condition. You can use list comprehension or generator expressions for that:</p>\n\n<pre><code>matches = [x for x in lst if fulfills_some_condition(x)]\n\nmatches = (x for x in lst if x > 6)\n\n</code></pre>\n\n<p>The latter will return a <em>generator</em> which you can imagine as a sort of lazy list that will only be built as soon as you iterate through it. By the way, the first one is exactly equivalent to</p>\n\n<pre><code>matches = filter(fulfills_some_condition, lst)\n\n</code></pre>\n\n<p>in Python 2. Here you can see higher-order functions at work. In Python 3, <code>filter</code> doesn't return a list, but a generator-like object.</p>\n\n<h3>Finding the first occurrence</h3>\n\n<p>If you only want the first thing that matches a condition (but you don't know what it is yet), it's fine to use a for loop (possibly using the <code>else</code> clause as well, which is not really well-known). You can also use</p>\n\n<pre><code>next(x for x in lst if ...)\n\n</code></pre>\n\n<p>which will return the first match or raise a <code>StopIteration</code> if none is found. Alternatively, you can use</p>\n\n<pre><code>next((x for x in lst if ...), [default value])\n\n</code></pre>\n\n<h3>Finding the location of an item</h3>\n\n<p>For lists, there's also the <code>index</code> method that can sometimes be useful if you want to know <em>where</em> a certain element is in the list:</p>\n\n<pre><code>[1,2,3].index(2) # => 1\n\n[1,2,3].index(4) # => ValueError\n\n</code></pre>\n\n<p>However, note that if you have duplicates, <code>.index</code> always returns the lowest index:......</p>\n\n<pre><code>[1,2,3,2].index(2) # => 1\n\n</code></pre>\n\n<p>If there are duplicates and you want all the indexes then you can use <code>enumerate()</code> instead:</p>\n\n<pre><code>[i for i,x in enumerate([1,2,3,2]) if x==2] # => [1, 3]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	294
How to print to stderr in Python?	<p>I found this to be the only one short + flexible + portable + readable:</p>\n\n<pre><code>from __future__ import print_function\n\nimport sys\n\ndef eprint(*args, **kwargs):\n\n print(*args, file=sys.stderr, **kwargs)\n\n</code></pre>\n\n<p>The function <code>eprint</code> can be used in the same way as the standard <code>print</code> function:</p>\n\n<pre><code>>>> print("Test")\n\nTest\n\n>>> eprint("Test")\n\nTest\n\n>>> eprint("foo", "bar", "baz", sep="---")\n\nfoo---bar---baz\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	295
Convert all strings in a list to int	<p>Use the <a href="https://docs.python.org/2/library/functions.html#map" rel="noreferrer"><code>map</code></a> function (in Python 2.x):</p>\n\n<pre><code>results = map(int, results)\n\n</code></pre>\n\n<p>In Python 3, you will need to convert the result from <a href="https://docs.python.org/3/library/functions.html#map" rel="noreferrer"><code>map</code></a> to a list:</p>\n\n<pre><code>results = list(map(int, results))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	296
How do I check if a list is empty?	<p>The pythonic way to do it is from the <a href="https://www.python.org/dev/peps/pep-0008" rel="noreferrer">PEP 8 style guide</a> (where <strong>Yes</strong> means ârecommendedâ and <strong>No</strong> means ânot recommendedâ):</p>\n\n<blockquote>\n\n <p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.\n\n </p>\n\n<pre><code><b>Yes:</b> if not seq:\n\n if seq:\n\n<b>No:</b> if len(seq):\n\n if not len(seq):\n\n</code></pre>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	297
Convert a String representation of a Dictionary to a dictionary?	<p>Starting in Python 2.6 you can use the built-in <a href="https://docs.python.org/library/ast.html#ast.literal_eval" rel="noreferrer"><code>ast.literal_eval</code></a>:</p>\n\n<pre><code>>>> import ast\n\n>>> ast.literal_eval("{'muffin' : 'lolz', 'foo' : 'kitty'}")\n\n{'muffin': 'lolz', 'foo': 'kitty'}\n\n</code></pre>\n\n<p>This is safer than using <code>eval</code>. As its own docs say:</p>\n\n<pre>\n\n>>> help(ast.literal_eval)\n\nHelp on function literal_eval in module ast:\n\nliteral_eval(node_or_string)\n\n Safely evaluate an expression node or a string containing a Python\n\n expression. The string or node provided may only consist of the following\n\n Python literal structures: strings, numbers, tuples, lists, dicts, booleans,\n\n and None.\n\n</pre>\n\n<p>For example:</p>\n\n<pre><code>>>> eval("shutil.rmtree('mongo')")\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "<string>", line 1, in <module>\n\n File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 208, in rmtree\n\n onerror(os.listdir, path, sys.exc_info())\n\n File "/opt/Python-2.6.1/lib/python2.6/shutil.py", line 206, in rmtree\n\n names = os.listdir(path)\n\nOSError: [Errno 2] No such file or directory: 'mongo'\n\n>>> ast.literal_eval("shutil.rmtree('mongo')")\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 68, in literal_eval\n\n return _convert(node_or_string)\n\n File "/opt/Python-2.6.1/lib/python2.6/ast.py", line 67, in _convert\n\n raise ValueError('malformed string')\n\nValueError: malformed string\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	298
Correct way to write line to file?	<p>This should be as simple as:</p>\n\n<pre><code>with open('somefile.txt', 'a') as the_file:\n\n the_file.write('Hello ')\n\n</code></pre>\n\n<p>From The Documentation:</p>\n\n<blockquote>\n\n <p>Do not use <code>os.linesep</code> as a line terminator when writing files opened in text mode (the default); use a single ' ' instead, on all platforms.</p>\n\n</blockquote>\n\n<p>Some useful reading:</p>\n\n<ul>\n\n<li><a href="http://docs.python.org/reference/compound_stmts.html#the-with-statement" rel="noreferrer">The <code>with</code> statement</a></li>\n\n<li><a href="http://docs.python.org/library/functions.html?highlight=open#open" rel="noreferrer"><code>open()</code></a>\n\n<ul>\n\n<li>'a' is for append, or use</li>\n\n<li>'w' to write with truncation</li>\n\n</ul></li>\n\n<li><a href="http://docs.python.org/library/os.html" rel="noreferrer"><code>os</code></a> (particularly <a href="http://docs.python.org/library/os.html?highlight=os.linesep#os.linesep" rel="noreferrer"><code>os.linesep</code></a>)</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	299
What is the meaning of single and double underscore before an object name?	<h2>Single Underscore</h2>\n\n<p>Names, in a class, with a leading underscore are simply to indicate to other programmers that the attribute or method is intended to be private. However, nothing special is done with the name itself.</p>\n\n<p>To quote <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP-8</a>:</p>\n\n<blockquote>\n\n <p>_single_leading_underscore: weak "internal use" indicator. E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p>\n\n</blockquote>\n\n<h2>Double Underscore (Name Mangling)</h2>\n\n<p>From <a href="https://docs.python.org/3/tutorial/classes.html#private-variables" rel="noreferrer">the Python docs</a>:</p>\n\n<blockquote>\n\n <p>Any identifier of the form <code>__spam</code> (at least two leading underscores, at most one trailing underscore) is textually replaced with <code>_classname__spam</code>, where <code>classname</code> is the current class name with leading underscore(s) stripped. This mangling is done without regard to the syntactic position of the identifier, so it can be used to define class-private instance and class variables, methods, variables stored in globals, and even variables stored in instances. private to this class on instances of other classes. </p>\n\n</blockquote>\n\n<p>And a warning from the same page:</p>\n\n<blockquote>\n\n <p>Name mangling is intended to give classes an easy way to define âprivateâ instance variables and methods, without having to worry about instance variables defined by derived classes, or mucking with instance variables by code outside the class. Note that the mangling rules are designed mostly to avoid accidents; it still is possible for a determined soul to access or modify a variable that is considered private.</p>\n\n</blockquote>\n\n<h2>Example</h2>\n\n<pre><code>>>> class MyClass():\n\n... def __init__(self):\n\n... self.__superprivate = "Hello"\n\n... self._semiprivate = ", world!"\n\n...\n\n>>> mc = MyClass()\n\n>>> print mc.__superprivate\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nAttributeError: myClass instance has no attribute '__superprivate'\n\n>>> print mc._semiprivate\n\n, world!\n\n>>> print mc.__dict__\n\n{'_MyClass__superprivate': 'Hello', '_semiprivate': ', world!'}\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	300
Remove empty strings from a list of strings	<p>I would use <a href="http://docs.python.org/library/functions.html#filter" rel="noreferrer"><code>filter</code></a>:</p>\n\n<pre><code>str_list = filter(None, str_list)\n\nstr_list = filter(bool, str_list)\n\nstr_list = filter(len, str_list)\n\nstr_list = filter(lambda item: item, str_list)\n\n</code></pre>\n\n<p>Python 3 returns an iterator from <code>filter</code>, so should be wrapped in a call to <code>list()</code></p>\n\n<pre><code>str_list = list(filter(None, str_list))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	301
Running shell command and capturing the output	<p>The answer to this question depends on the version of Python you're using. The simplest approach is to use the <a href="https://docs.python.org/3/library/subprocess.html#subprocess.check_output" rel="noreferrer"><code>subprocess.check_output</code></a> function:</p>\n\n<pre><code>>>> subprocess.check_output(['ls', '-l'])\n\nb'total 0 -rw-r--r-- 1 memyself staff 0 Mar 14 11:04 files '\n\n</code></pre>\n\n<p><code>check_output</code> runs a single program that takes only arguments as input.<sup>1</sup> It returns the result exactly as printed to <code>stdout</code>. If you need to write input to <code>stdin</code>, skip ahead to the <code>run</code> or <code>Popen</code> sections. If you want to execute complex shell commands, see the note on <code>shell=True</code> at the end of this answer.</p>\n\n<p>The <code>check_output</code> function works on almost all versions of Python still in wide use (2.7+).<sup>2</sup> But for more recent versions, it is no longer the recommended approach.</p>\n\n<h3>Modern versions of Python (3.5 or higher): <code>run</code></h3>\n\n<p>If you're using <strong>Python 3.5</strong> or higher, and <strong>do not need backwards compatibility</strong>, the <a href="https://docs.python.org/3/library/subprocess.html#using-the-subprocess-module" rel="noreferrer">new <code>run</code> function</a> is recommended. It provides a very general, high-level API for the <code>subprocess</code> module. To capture the output of a program, pass the <code>subprocess.PIPE</code> flag to the <code>stdout</code> keyword argument. Then access the <code>stdout</code> attribute of the returned <a href="https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess" rel="noreferrer"><code>CompletedProcess</code></a> object:</p>\n\n<pre><code>>>> import subprocess\n\n>>> result = subprocess.run(['ls', '-l'], stdout=subprocess.PIPE)\n\n>>> result.stdout\n\nb'total 0 -rw-r--r-- 1 memyself staff 0 Mar 14 11:04 files '\n\n</code></pre>\n\n<p>The return value is a <code>bytes</code> object, so if you want a proper string, you'll need to <code>decode</code> it. Assuming the called process returns a UTF-8-encoded string:</p>\n\n<pre><code>>>> result.stdout.decode('utf-8')\n\n'total 0 -rw-r--r-- 1 memyself staff 0 Mar 14 11:04 files '\n\n</code></pre>\n\n<p>This can all be compressed to a one-liner:</p>\n\n<pre><code>>>> subprocess.run(['ls', '-l'], stdout=subprocess.PIPE).stdout.decode('utf-8')\n\n'total 0 -rw-r--r-- 1 memyself staff 0 Mar 14 11:04 files '\n\n</code></pre>\n\n<p>If you want to pass input to the process's <code>stdin</code>, pass a <code>bytes</code> object to the <code>input</code> keyword argument:</p>\n\n<pre><code>>>> cmd = ['awk', 'length($0) > 5']\n\n>>> input = 'foo foofoo '.encode('utf-8')\n\n>>> result = subprocess.run(cmd, stdout=subprocess.PIPE, input=input)\n\n>>> result.stdout.decode('utf-8')\n\n'foofoo '\n\n</code></pre>\n\n<p>You can capture errors by passing <code>stderr=subprocess.PIPE</code> (capture to <code>result.stderr</code>) or <code>stderr=subprocess.STDOUT</code> (capture to <code>result.stdout</code> along with regular output). When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>\n\n<p>This adds just a bit of complexity, compared to the old way of doing things. But I think it's worth the payoff: now you can do almost anything you need to do with the <code>run</code> function alone.</p>\n\n<h3>Older versions of Python (2.7-3.4): <code>check_output</code></h3>\n\n<p>If you are using an older version of Python, or need modest backwards compatibility, you can probably use the <code>check_output</code> function as briefly described above. It has been available since Python 2.7.</p>\n\n<pre><code>subprocess.check_output(*popenargs, **kwargs) \n\n</code></pre>\n\n<p>It takes takes the same arguments as <code>Popen</code> (see below), and returns a string containing the program's output. The beginning of this answer has a more detailed usage example. In Python 3.5 and greater, <code>check_output</code> is equivalent to executing <code>run</code> with <code>check=True</code> and <code>stdout=PIPE</code>, and returning just the <code>stdout</code> attribute. </p>\n\n<p>You can pass <code>stderr=subprocess.STDOUT</code> to ensure that error messages are included in the returned output -- but in some versions of Python passing <code>stderr=subprocess.PIPE</code> to <code>check_output</code> can cause <a href="https://docs.python.org/2/library/subprocess.html#subprocess.check_output" rel="noreferrer">deadlocks</a>. When security is not a concern, you can also run more complex shell commands by passing <code>shell=True</code> as described in the notes below.</p>\n\n<p>If you need to pipe from <code>stderr</code> or pass input to the process, <code>check_output</code> won't be up to the task. See the <code>Popen</code> examples below in that case. </p>\n\n<h3>Complex applications & legacy versions of Python (2.6 and below): <code>Popen</code></h3>\n\n<p>If you need deep backwards compatibility, or if you need more sophisticated functionality than <code>check_output</code> provides, you'll have to work directly with <code>Popen</code> objects, which encapsulate the low-level API for subprocesses. </p>\n\n<p>The <code>Popen</code> constructor accepts either <strong>a single command</strong> without arguments, or <strong>a list</strong> containing a command as its first item, followed by any number of arguments, each as a separate item in the list. <a href="https://docs.python.org/3/library/shlex.html" rel="noreferrer"><code>shlex.split</code></a> can help parse strings into appropriately formatted lists. <code>Popen</code> objects also accept a <a href="https://docs.python.org/3/library/subprocess.html#subprocess.Popen" rel="noreferrer">host of different arguments</a> for process IO management and low-level configuration. </p>\n\n<p>To send input and capture output, <code>communicate</code> is almost always the preferred method. As in:</p>\n\n<pre><code>output = subprocess.Popen(["mycmd", "myarg"], \n\n stdout=subprocess.PIPE).communicate()[0]\n\n</code></pre>\n\n<p>Or </p>\n\n<pre><code>>>> import subprocess\n\n>>> p = subprocess.Popen(['ls', '-a'], stdout=subprocess.PIPE, \n\n... stderr=subprocess.PIPE)\n\n>>> out, err = p.communicate()\n\n>>> print out\n\n.\n\n..\n\nfoo\n\n</code></pre>\n\n<p>If you set <code>stdin=PIPE</code>, <code>communicate</code> also allows you to pass data to the process via <code>stdin</code>:</p>\n\n<pre><code>>>> cmd = ['awk', 'length($0) > 5']\n\n>>> p = subprocess.Popen(cmd, stdout=subprocess.PIPE,\n\n... stderr=subprocess.PIPE,\n\n... stdin=subprocess.PIPE)\n\n>>> out, err = p.communicate('foo foofoo ')\n\n>>> print out\n\nfoofoo\n\n</code></pre>\n\n<p>Note <a href="https://stackoverflow.com/a/21867841/577088">Aaron Hall's answer</a>, which indicates that on some systems, you may need to set <code>stdout</code>, <code>stderr</code>, and <code>stdin</code> all to <code>PIPE</code> (or <code>DEVNULL</code>) to get <code>communicate</code> to work at all.</p>\n\n<p>In some rare cases, you may need complex, real-time output capturing. <a href="https://stackoverflow.com/a/4760274/577088">Vartec</a>'s answer suggests a way forward, but methods other than <code>communicate</code> are prone to deadlocks if not used carefully.</p>\n\n<p>As with all the above functions, when security is not a concern, you can run more complex shell commands by passing <code>shell=True</code>.</p>\n\n<h3>Notes</h3>\n\n<p><strong>1. Running shell commands: the <code>shell=True</code> argument</strong></p>\n\n<p>Normally, each call to <code>run</code>, <code>check_output</code>, or the <code>Popen</code> constructor executes a <em>single program</em>. That means no fancy bash-style pipes. If you want to run complex shell commands, you can pass <code>shell=True</code>, which all three functions support.</p>\n\n<p>However, doing so raises <a href="https://docs.python.org/3/library/subprocess.html#security-considerations" rel="noreferrer">security concerns</a>. If you're doing anything more than light scripting, you might be better off calling each process separately, and passing the output from each as an input to the next, via</p>\n\n<pre><code>run(cmd, [stdout=etc...], input=other_output)\n\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>Popen(cmd, [stdout=etc...]).communicate(other_output)\n\n</code></pre>\n\n<p>The temptation to directly connect pipes is strong; resist it. Otherwise, you'll likely see deadlocks or have to do hacky things like <a href="https://stackoverflow.com/questions/6341451/piping-together-several-subprocesses">this</a>.</p>\n\n<p><strong>2. Unicode considerations</strong></p>\n\n<p><code>check_output</code> returns a string in Python 2, but a <code>bytes</code> object in Python 3. It's worth taking a moment to <a href="https://docs.python.org/3/howto/unicode.html" rel="noreferrer">learn about unicode</a> if you haven't already.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	302
How to check if type of a variable is string?	<p>In Python 2.x, you would do</p>\n\n<pre><code>isinstance(s, basestring)\n\n</code></pre>\n\n<p><code>basestring</code> is the <a href="https://docs.python.org/2/library/functions.html#basestring" rel="noreferrer">abstract superclass</a> of <code>str</code> and <code>unicode</code>. It can be used to test whether an object is an instance of <code>str</code> or <code>unicode</code>.</p>\n\n<hr>\n\n<p>In Python 3.x, the correct test is</p>\n\n<pre><code>isinstance(s, str)\n\n</code></pre>\n\n<p>The <code>bytes</code> class isn't considered a string type in Python 3.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	303
Should I put #! (shebang) in Python scripts, and what form should it take?	<p>The shebang line in any script determines the script's ability to be executed like a standalone executable without typing <code>python</code> beforehand in the terminal or when double clicking it in a file manager (when configured properly). It isn't necessary but generally put there so when someone sees the file opened in an editor, they immediately know what they're looking at. However, which shebang line you use <strong>IS</strong> important.</p>\n\n<p><strong>Correct</strong> usage for Python 3 scripts is:</p>\n\n<pre class="lang-none prettyprint-override"><code>#!/usr/bin/env python3\n\n</code></pre>\n\n<p>This defaults to version 3.latest. For Python 2.7.latest use <code>python2</code> in place of <code>python3</code>.</p>\n\n<p>The following <strong>should NOT be used</strong> (except for the rare case that you are writing code which is compatible with both Python 2.x and 3.x):</p>\n\n<pre class="lang-none prettyprint-override"><code>#!/usr/bin/env python\n\n</code></pre>\n\n<p>The reason for these recommendations, given in <a href="https://www.python.org/dev/peps/pep-0394/#recommendation" rel="noreferrer" title="PEP 394">PEP 394</a>, is that <code>python</code> can refer either to <code>python2</code> or <code>python3</code> on different systems. It currently refers to <code>python2</code> on most distributions, but that is likely to change at some point.</p>\n\n<p><strong>Also, DO NOT Use:</strong></p>\n\n<pre class="lang-none prettyprint-override"><code>#!/usr/local/bin/python\n\n</code></pre>\n\n<blockquote>\n\n <p>"python may be installed at /usr/bin/python or /bin/python in those\n\n cases, the above #! will fail."</p>\n\n</blockquote>\n\n<p>--<a href="https://mail.python.org/pipermail/tutor/2007-June/054816.html" rel="noreferrer">"#!/usr/bin/env python" vs "#!/usr/local/bin/python"</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	304
How to make IPython notebook matplotlib plot inline	<p>I used <code>%matplotlib inline</code> in the first cell of the notebook and it works. I think you should try:</p>\n\n<pre><code>%matplotlib inline\n\nimport matplotlib\n\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n\n</code></pre>\n\n<p>You can also always start all your IPython kernels in inline mode by default by setting the following config options in your config files:</p>\n\n<pre><code>c.IPKernelApp.matplotlib=<CaselessStrEnum>\n\n Default: None\n\n Choices: ['auto', 'gtk', 'gtk3', 'inline', 'nbagg', 'notebook', 'osx', 'qt', 'qt4', 'qt5', 'tk', 'wx']\n\n Configure matplotlib for interactive use with the default matplotlib backend.\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	305
How can I get the concatenation of two lists in Python without modifying either one?	<p>Yes: <code>list1 + list2</code>. This gives a new list that is the concatenation of <code>list1</code> and <code>list2</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	306
How to sort a list/tuple of lists/tuples by the element at a given index?	<pre><code>sorted_by_second = sorted(data, key=lambda tup: tup[1])\n\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>data.sort(key=lambda tup: tup[1]) # sorts in place\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	307
Checking whether a variable is an integer or not	<p>If you need to do this, do</p>\n\n<pre><code>isinstance(<var>, int)\n\n</code></pre>\n\n<p>unless you are in Python 2.x in which case you want</p>\n\n<pre><code>isinstance(<var>, (int, long))\n\n</code></pre>\n\n<p>Do not use <code>type</code>. It is almost never the right answer in Python, since it blocks all the flexibility of polymorphism. For instance, if you subclass <code>int</code>, your new class should register as an <code>int</code>, which <code>type</code> will not do:</p>\n\n<pre><code>class Spam(int): pass\n\nx = Spam(0)\n\ntype(x) == int # False\n\nisinstance(x, int) # True\n\n</code></pre>\n\n<p>This adheres to Python's strong polymorphism: you should allow any object that behaves like an <code>int</code>, instead of mandating that it be one.</p>\n\n<h1>BUT</h1>\n\n<p>The classical Python mentality, though, is that it's <em>easier to ask forgiveness than permission</em>. In other words, don't check whether <code>x</code> is an integer; assume that it is and catch the exception results if it isn't:</p>\n\n<pre><code>try:\n\n x += 1\n\nexcept TypeError:\n\n ...\n\n</code></pre>\n\n<p>This mentality is slowly being overtaken by the use of <a href="http://docs.python.org/library/abc.html" rel="noreferrer">abstract base classes</a>, which let you register exactly what properties your object should have (adding? multiplying? doubling?) by making it inherit from a specially-constructed class. That would be the best solution, since it will permit <em>exactly</em> those objects with the necessary and sufficient attributes, but you will have to read the docs on how to use it.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	308
How do you change the size of figures drawn with matplotlib?	<p><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.figure.html#matplotlib.pyplot.figure" rel="noreferrer">figure</a> tells you the call signature:</p>\n\n<pre><code>from matplotlib.pyplot import figure\n\nfigure(num=None, figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\n\n</code></pre>\n\n<p><code>figure(figsize=(1,1))</code> would create an inch-by-inch image, which would be 80-by-80 pixels unless you also give a different dpi argument.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	309
mkdir -p functionality in Python	<p>For Python â¥ 3.5, use <a href="https://docs.python.org/library/pathlib.html#pathlib.Path.mkdir" rel="noreferrer"><code>pathlib.Path.mkdir</code></a>:</p>\n\n<pre><code>import pathlib\n\npathlib.Path("/tmp/path/to/desired/directory").mkdir(parents=True, exist_ok=True)\n\n</code></pre>\n\n<p>The <code>exist_ok</code> parameter was added in Python 3.5.</p>\n\n<p>For Python â¥ 3.2, <a href="https://docs.python.org/library/os.html#os.makedirs" rel="noreferrer"><code>os.makedirs</code></a> has an <a href="https://docs.python.org/3/library/os.html?highlight=exist_ok#os.makedirs" rel="noreferrer">optional third argument <code>exist_ok</code></a> that, when <code>True</code>, enables the <code>mkdir -p</code> functionalityâ<em>unless</em> <code>mode</code> is provided and the existing directory has different permissions than the intended ones; in that case, <code>OSError</code> is raised as previously:</p>\n\n<pre><code>import os\n\nos.makedirs("/tmp/path/to/desired/directory", exist_ok=True)\n\n</code></pre>\n\n<p>For even older versions of Python you can use <code>os.makedirs</code> and ignore the error:</p>\n\n<pre><code>import errno \n\nimport os\n\ndef mkdir_p(path):\n\n try:\n\n os.makedirs(path)\n\n except OSError as exc: # Python â¥ 2.5\n\n if exc.errno == errno.EEXIST and os.path.isdir(path):\n\n pass\n\n else:\n\n raise\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	310
How do I download a file over HTTP using Python?	<p>One more, using <a href="http://docs.python.org/2/library/urllib.html#urllib.urlretrieve" rel="noreferrer"><code>urlretrieve</code></a>:</p>\n\n<pre><code>import urllib\n\nurllib.urlretrieve ("http://www.example.com/songs/mp3.mp3", "mp3.mp3")\n\n</code></pre>\n\n<p>(for Python 3+ use <code>import urllib.request</code> and <code>urllib.request.urlretrieve</code>)</p>\n\n<p>Yet another one, with a "progressbar"</p>\n\n<pre><code>import urllib2\n\nurl = "http://download.thinkbroadband.com/10MB.zip"\n\nfile_name = url.split('/')[-1]\n\nu = urllib2.urlopen(url)\n\nf = open(file_name, 'wb')\n\nmeta = u.info()\n\nfile_size = int(meta.getheaders("Content-Length")[0])\n\nprint "Downloading: %s Bytes: %s" % (file_name, file_size)\n\nfile_size_dl = 0\n\nblock_sz = 8192\n\nwhile True:\n\n buffer = u.read(block_sz)\n\n if not buffer:\n\n break\n\n file_size_dl += len(buffer)\n\n f.write(buffer)\n\n status = r"%10d [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)\n\n status = status + chr(8)*(len(status)+1)\n\n print status,\n\nf.close()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	311
How can I check file size in Python?	<p>Using <a href="https://docs.python.org/library/os.path.html#os.path.getsize" rel="noreferrer"><code>os.path.getsize</code></a>:</p>\n\n<pre><code>>>> import os\n\n>>> b = os.path.getsize("/path/isa_005.mp3")\n\n>>> b\n\n2071611\n\n</code></pre>\n\n<p>The output is in bytes.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	312
What is the use of "assert" in Python?	<p>The <code>assert</code> statement exists in almost every programming language. It helps detect problems early in your program, where the cause is clear, rather than later as a side-effect of some other operation.</p>\n\n<p>When you do...</p>\n\n<pre><code>assert condition\n\n</code></pre>\n\n<p>... you're telling the program to test that condition, and immediately trigger an error if the condition is false.</p>\n\n<p>In Python, it's roughly equivalent to this:</p>\n\n<pre><code>if not condition:\n\n raise AssertionError()\n\n</code></pre>\n\n<p>Try it in the Python shell:</p>\n\n<pre><code>>>> assert True # nothing happens\n\n>>> assert False\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nAssertionError\n\n</code></pre>\n\n<p>Assertions can include an optional message, and you can disable them when running the interpreter.</p>\n\n<p>To print a message if the assertion fails:</p>\n\n<pre><code>assert False, "Oh no! This assertion failed!"\n\n</code></pre>\n\n<p>Do <strong>not</strong> use parenthesis to call <code>assert</code> like a function. It is a statement. If you do <code>assert(condition, message)</code> you'll be running the <code>assert</code> with a <code>(condition, message)</code> tuple as first parameter.</p>\n\n<p>As for disabling them, when running <code>python</code> in optimized mode, where <code>__debug__</code> is <code>False</code>, assert statements will be ignored. Just pass the <code>-O</code> flag:</p>\n\n<pre><code>python -O script.py\n\n</code></pre>\n\n<p>See <a href="http://docs.python.org/reference/simple_stmts.html#assert" rel="noreferrer">here</a> for the relevant documentation.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	313
Convert hex string to int in Python	<p><strong>Without</strong> the 0x prefix, you need to specify the base explicitly, otherwise there's no way to tell:</p>\n\n<pre><code>x = int("deadbeef", 16)\n\n</code></pre>\n\n<p><strong>With</strong> the 0x prefix, Python can distinguish hex and decimal automatically.</p>\n\n<pre><code>>>> print int("0xdeadbeef", 0)\n\n3735928559\n\n>>> print int("10", 0)\n\n10\n\n</code></pre>\n\n<p>(You <em>must</em> specify <code>0</code> as the base in order to invoke this prefix-guessing behavior; omitting the second parameter means to assume base-10.)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	314
differentiate null=True, blank=True in django	<p><code>null=True</code> sets <code>NULL</code> (versus <code>NOT NULL</code>) on the column in your DB. Blank values for Django field types such as <code>DateTimeField</code> or <code>ForeignKey</code> will be stored as <code>NULL</code> in the DB.</p>\n\n<p><code>blank</code> determines whether the field will be required in forms. This includes the admin and your custom forms. If <code>blank=True</code> then the field will not be required, whereas if it's <code>False</code> the field cannot be blank.</p>\n\n<p>The combo of the two is so frequent because typically if you're going to allow a field to be blank in your form, you're going to also need your database to allow <code>NULL</code> values for that field. The exception is <code>CharField</code>s and <code>TextField</code>s, which in Django are <em>never</em> saved as <code>NULL</code>. Blank values are stored in the DB as an empty string (<code>''</code>).</p>\n\n<p>A few examples:</p>\n\n<pre><code>models.DateTimeField(blank=True) # raises IntegrityError if blank\n\nmodels.DateTimeField(null=True) # NULL allowed, but must be filled out in a form\n\n</code></pre>\n\n<p>Obviously, Those two options don't make logical sense to use (though there might be a use case for <code>null=True, blank=False</code> if you want a field to always be required in forms, optional when dealing with an object through something like the shell.)</p>\n\n<pre><code>models.CharField(blank=True) # No problem, blank is stored as ''\n\nmodels.CharField(null=True) # NULL allowed, but will never be set as NULL\n\n</code></pre>\n\n<p><code>CHAR</code> and <code>TEXT</code> types are never saved as <code>NULL</code> by Django, so <code>null=True</code> is unnecessary. However, you can manually set one of these fields to <code>None</code> to force set it as <code>NULL</code>. If you have a scenario where that might be necessary, you should still include <code>null=True</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	315
How to create a zip archive of a directory in Python?	<p>The easiest way is to use <a href="https://docs.python.org/3/library/shutil.html#shutil.make_archive" rel="noreferrer"><code>shutil.make_archive</code></a>. It supports both zip and tar formats.</p>\n\n<pre><code>import shutil\n\nshutil.make_archive(output_filename, 'zip', dir_name)\n\n</code></pre>\n\n<p>If you need to do something more complicated than zipping the whole directory (such as skipping certain files), then you'll need to dig into the <a href="https://docs.python.org/3/library/zipfile.html" rel="noreferrer"><code>zipfile</code></a> module as others have suggested.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	316
How to get the last day of the month?	<p>I didn't notice this earlier when I was looking at the <a href="https://docs.python.org/3/library/calendar.html" rel="noreferrer">documentation for the <code>calendar</code> module</a>, but a method called <a href="http://docs.python.org/library/calendar.html#calendar.monthrange" rel="noreferrer"><code>monthrange</code></a> provides this information:</p>\n\n<blockquote>\n\n <p><b>monthrange(year, month)</b><br>\n\n     Returns weekday of first day of the month and number of days in month, for the specified year and month. </p>\n\n</blockquote>\n\n<pre><code>>>> import calendar\n\n>>> calendar.monthrange(2002,1)\n\n(1, 31)\n\n>>> calendar.monthrange(2008,2)\n\n(4, 29)\n\n>>> calendar.monthrange(2100,2)\n\n(0, 28)\n\n</code></pre>\n\n<p>so:</p>\n\n<pre><code>calendar.monthrange(year, month)[1]\n\n</code></pre>\n\n<p>seems like the simplest way to go.</p>\n\n<p>Just to be clear, <code>monthrange</code> supports leap years as well:</p>\n\n<pre><code>>>> from calendar import monthrange\n\n>>> monthrange(2012, 2)\n\n(2, 29)\n\n</code></pre>\n\n<p><a href="https://stackoverflow.com/questions/42950/get-last-day-of-the-month-in-python#43088">My previous answer</a> still works, but is clearly suboptimal.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	317
Why do people write the #!/usr/bin/env python shebang on the first line of a Python script?	<p>If you have several versions of Python installed, <code>/usr/bin/env</code> will ensure the interpreter used is the first one on your environment's <code>$PATH</code>. The alternative would be to hardcode something like <code>#!/usr/bin/python</code>; that's ok, but less flexible.</p>\n\n<p>In Unix, an <em>executable</em> file that's meant to be interpreted can indicate what interpreter to use by having a <code>#!</code> at the start of the first line, followed by the interpreter (and any flags it may need).</p>\n\n<p>If you're talking about other platforms, of course, this rule does not apply (but that "shebang line" does no harm, and will help if you ever copy that script to a platform <em>with</em> a Unix base, such as Linux, Mac, etc).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	318
Display number with leading zeros	<p>In Python 2 (and Python 3) you can do:</p>\n\n<pre><code>print "%02d" % (1,)\n\n</code></pre>\n\n<p>Basically <strong>%</strong> is like <code>printf</code> or <code>sprintf</code> (see <a href="https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting" rel="noreferrer">docs</a>).</p>\n\n<hr>\n\n<p>For Python 3.+, the same behavior can also be achieved with <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="noreferrer"><code>format</code></a>:</p>\n\n<pre><code>print("{:02d}".format(1))\n\n</code></pre>\n\n<hr>\n\n<p>For Python 3.6+ the same behavior can be achieved with <a href="https://docs.python.org/3/reference/lexical_analysis.html#f-strings" rel="noreferrer">f-strings</a>:</p>\n\n<pre><code>print(f"{1:02d}")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	319
How to print an exception in Python?	<p>For Python 2.6 and later and Python 3.x:</p>\n\n<pre><code>except Exception as e: print(e)\n\n</code></pre>\n\n<p>For Python 2.5 and earlier, use:</p>\n\n<pre><code>except Exception,e: print str(e)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	320
What does functools.wraps do?	<p>When you use a decorator, you're replacing one function with another. In other words, if you have a decorator</p>\n\n<pre><code>def logged(func):\n\n def with_logging(*args, **kwargs):\n\n print(func.__name__ + " was called")\n\n return func(*args, **kwargs)\n\n return with_logging\n\n</code></pre>\n\n<p>then when you say</p>\n\n<pre><code>@logged\n\ndef f(x):\n\n """does some math"""\n\n return x + x * x\n\n</code></pre>\n\n<p>it's exactly the same as saying</p>\n\n<pre><code>def f(x):\n\n """does some math"""\n\n return x + x * x\n\nf = logged(f)\n\n</code></pre>\n\n<p>and your function <code>f</code> is replaced with the function <code>with_logging</code>. Unfortunately, this means that if you then say</p>\n\n<pre><code>print(f.__name__)\n\n</code></pre>\n\n<p>it will print <code>with_logging</code> because that's the name of your new function. In fact, if you look at the docstring for <code>f</code>, it will be blank because <code>with_logging</code> has no docstring, and so the docstring you wrote won't be there anymore. Also, if you look at the pydoc result for that function, it won't be listed as taking one argument <code>x</code>; instead it'll be listed as taking <code>*args</code> and <code>**kwargs</code> because that's what with_logging takes.</p>\n\n<p>If using a decorator always meant losing this information about a function, it would be a serious problem. That's why we have <code>functools.wraps</code>. This takes a function used in a decorator and adds the functionality of copying over the function name, docstring, arguments list, etc. And since <code>wraps</code> is itself a decorator, the following code does the correct thing:</p>\n\n<pre><code>from functools import wraps\n\ndef logged(func):\n\n @wraps(func)\n\n def with_logging(*args, **kwargs):\n\n print(func.__name__ + " was called")\n\n return func(*args, **kwargs)\n\n return with_logging\n\n@logged\n\ndef f(x):\n\n """does some math"""\n\n return x + x * x\n\nprint(f.__name__) # prints 'f'\n\nprint(f.__doc__) # prints 'does some math'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	321
Concatenate item in list to strings	<p>Use <a href="http://docs.python.org/library/stdtypes.html#str.join"><code>join</code></a>:</p>\n\n<pre><code>>>> sentence = ['this','is','a','sentence']\n\n>>> '-'.join(sentence)\n\n'this-is-a-sentence'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	322
Relative imports in Python 2.7	<p><strong>Script vs. Module</strong></p>\n\n<p>Here's an explanation. The short version is that there is a big difference between directly running a Python file, and importing that file from somewhere else. <strong>Just knowing what directory a file is in does not determine what package Python thinks it is in.</strong> That depends, additionally, on how you load the file into Python (by running or by importing).</p>\n\n<p>There are two ways to load a Python file: as the top-level script, or as a \n\nmodule. A file is loaded as the top-level script if you execute it directly, for instance by typing <code>python myfile.py</code> on the command line. It is loaded as a module if you do <code>python -m myfile</code>, or if it is loaded when an <code>import</code> statement is encountered inside some other file. There can only be one top-level script at a time; the top-level script is the Python file you ran to start things off.</p>\n\n<p><strong>Naming</strong></p>\n\n<p>When a file is loaded, it is given a name (which is stored in its <code>__name__</code> attribute). If it was loaded as the top-level script, its name is <code>__main__</code>. If it was loaded as a module, its name is the filename, preceded by the names of any packages/subpackages of which it is a part, separated by dots.</p>\n\n<p>So for instance in your example:</p>\n\n<pre><code>package/\n\n __init__.py\n\n subpackage1/\n\n __init__.py\n\n moduleX.py\n\n moduleA.py\n\n</code></pre>\n\n<p>if you imported <code>moduleX</code> (note: <em>imported</em>, not directly executed), its name would be <code>package.subpackage1.moduleX</code>. If you imported <code>moduleA</code>, its name would be <code>package.moduleA</code>. However, if you <em>directly run</em> <code>moduleX</code> from the command line, its name will instead be <code>__main__</code>, and if you directly run <code>moduleA</code> from the command line, its name will be <code>__main__</code>. When a module is run as the top-level script, it loses its normal name and its name is instead <code>__main__</code>.</p>\n\n<p><strong>Accessing a module NOT through its containing package</strong></p>\n\n<p>There is an additional wrinkle: the module's name depends on whether it was imported "directly" from the directory it is in, or imported via a package. This only makes a difference if you run Python in a directory, and try to import a file in that same directory (or a subdirectory of it). For instance, if you start the Python interpreter in the directory <code>package/subpackage1</code> and then do <code>import moduleX</code>, the name of <code>moduleX</code> will just be <code>moduleX</code>, and not <code>package.subpackage1.moduleX</code>. This is because Python adds the current directory to its search path on startup; if it finds the to-be-imported module in the current directory, it will not know that that directory is part of a package, and the package information will not become part of the module's name.</p>\n\n<p>A special case is if you run the interpreter interactively (e.g., just type <code>python</code> and start entering Python code on the fly). In this case the name of that interactive session is <code>__main__</code>.</p>\n\n<p>Now here is the crucial thing for your error message: <strong>if a module's name has no dots, it is not considered to be part of a package</strong>. It doesn't matter where the file actually is on disk. All that matters is what its name is, and its name depends on how you loaded it.</p>\n\n<p>Now look at the quote you included in your question:</p>\n\n<blockquote>\n\n <p>Relative imports use a module's name attribute to determine that module's position in the package hierarchy. If the module's name does not contain any package information (e.g. it is set to 'main') then relative imports are resolved as if the module were a top level module, regardless of where the module is actually located on the file system.</p>\n\n</blockquote>\n\n<p><strong>Relative imports...</strong></p>\n\n<p>Relative imports use the module's <em>name</em> to determine where it is in a package. When you use a relative import like <code>from .. import foo</code>, the dots indicate to step up some number of levels in the package hierarchy. For instance, if your current module's name is <code>package.subpackage1.moduleX</code>, then <code>..moduleA</code> would mean <code>package.moduleA</code>. For a <code>from .. import</code> to work, the module's name must have at least as many dots as there are in the <code>import</code> statement.</p>\n\n<p><strong>... are only relative in a package</strong></p>\n\n<p>However, if your module's name is <code>__main__</code>, it is not considered to be in a package. Its name has no dots, and therefore you cannot use <code>from .. import</code> statements inside it. If you try to do so, you will get the "relative-import in non-package" error.</p>\n\n<p><strong>Scripts can't import relative</strong></p>\n\n<p>What you probably did is you tried to run <code>moduleX</code> or the like from the command line. When you did this, its name was set to <code>__main__</code>, which means that relative imports within it will fail, because its name does not reveal that it is in a package. Note that this will also happen if you run Python from the same directory where a module is, and then try to import that module, because, as described above, Python will find the module in the current directory "too early" without realizing it is part of a package.</p>\n\n<p>Also remember that when you run the interactive interpreter, the "name" of that interactive session is always <code>__main__</code>. Thus <strong>you cannot do relative imports directly from an interactive session</strong>. Relative imports are only for use within module files.</p>\n\n<p><strong>Two solutions:</strong></p>\n\n<ol>\n\n<li><p>If you really do want to run <code>moduleX</code> directly, but you still want it to be considered part of a package, you can do <code>python -m package.subpackage1.moduleX</code>. The <code>-m</code> tells Python to load it as a module, not as the top-level script.</p></li>\n\n<li><p>Or perhaps you don't actually want to <em>run</em> <code>moduleX</code>, you just want to run some other script, say <code>myfile.py</code>, that <em>uses</em> functions inside <code>moduleX</code>. If that is the case, put <code>myfile.py</code> <em>somewhere else</em> – <em>not</em> inside the <code>package</code> directory – and run it. If inside <code>myfile.py</code> you do things like <code>from package.moduleA import spam</code>, it will work fine.</p></li>\n\n</ol>\n\n<p><strong>Notes</strong></p>\n\n<ul>\n\n<li><p>For either of these solutions, the package directory (<code>package</code> in your example) must be accessible from the Python module search path (<code>sys.path</code>). If it is not, you will not be able to use anything in the package reliably at all.</p></li>\n\n<li><p>Since Python 2.6, the module's "name" for package-resolution purposes is determined not just by its <code>__name__</code> attributes but also by the <code>__package__</code> attribute. That's why I'm avoiding using the explicit symbol <code>__name__</code> to refer to the module's "name". Since Python 2.6 a module's "name" is effectively <code>__package__ + '.' + __name__</code>, or just <code>__name__</code> if <code>__package__</code> is <code>None</code>.)</p></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	323
Is there a way to run Python on Android?	<p>One way is to use <a href="http://kivy.org/" rel="noreferrer">Kivy</a>:</p>\n\n<blockquote>\n\n <p>Open source Python library for rapid development of applications\n\n that make use of innovative user interfaces, such as multi-touch apps.</p>\n\n</blockquote>\n\n<p></p>\n\n<blockquote>\n\n <p>Kivy runs on Linux, Windows, OS X, Android and iOS. You can run the same [python] code on all supported platforms.</p>\n\n</blockquote>\n\n<p><a href="https://play.google.com/store/apps/details?id=org.kivy.showcase" rel="noreferrer">Kivy Showcase app</a> </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	324
How to get an absolute file path in Python	<pre><code>>>> import os\n\n>>> os.path.abspath("mydir/myfile.txt")\n\n'C:/example/cwd/mydir/myfile.txt'\n\n</code></pre>\n\n<p>Also works if it is already an absolute path:</p>\n\n<pre><code>>>> import os\n\n>>> os.path.abspath("C:/example/cwd/mydir/myfile.txt")\n\n'C:/example/cwd/mydir/myfile.txt'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	325
Post JSON using Python Requests	<p>As of Requests version 2.4.2 and onwards, you can alternatively use 'json' parameter in the call which makes it simpler.</p>\n\n<pre><code>>>> import requests\n\n>>> r = requests.post('http://httpbin.org/post', json={"key": "value"})\n\n>>> r.status_code\n\n200\n\n>>> r.json()\n\n{'args': {},\n\n 'data': '{"key": "value"}',\n\n 'files': {},\n\n 'form': {},\n\n 'headers': {'Accept': '*/*',\n\n 'Accept-Encoding': 'gzip, deflate',\n\n 'Connection': 'close',\n\n 'Content-Length': '16',\n\n 'Content-Type': 'application/json',\n\n 'Host': 'httpbin.org',\n\n 'User-Agent': 'python-requests/2.4.3 CPython/3.4.0',\n\n 'X-Request-Id': 'xx-xx-xx'},\n\n 'json': {'key': 'value'},\n\n 'origin': 'x.x.x.x',\n\n 'url': 'http://httpbin.org/post'}\n\n</code></pre>\n\n<p>EDIT: This feature has been added to the official documentation. You can view it here: <a href="https://requests.kennethreitz.org/en/master/user/quickstart/#more-complicated-post-requests" rel="noreferrer">Requests documentation</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	326
Determine Whether Integer Is Between Two Other Integers?	<pre><code>if 10000 <= number <= 30000:\n\n pass\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	327
Behaviour of increment and decrement operators in Python	<p><code>++</code> is not an operator. It is two <code>+</code> operators. The <code>+</code> operator is the <strong>identity</strong> operator, which does nothing. (Clarification: the <code>+</code> and <code>-</code> unary operators only work on numbers, but I presume that you wouldn't expect a hypothetical <code>++</code> operator to work on strings.)</p>\n\n<pre><code>++count\n\n</code></pre>\n\n<p>Parses as</p>\n\n<pre><code>+(+count)\n\n</code></pre>\n\n<p>Which translates to</p>\n\n<pre><code>count\n\n</code></pre>\n\n<p>You have to use the slightly longer <code>+=</code> operator to do what you want to do:</p>\n\n<pre><code>count += 1\n\n</code></pre>\n\n<p>I suspect the <code>++</code> and <code>--</code> operators were left out for consistency and simplicity. I don't know the exact argument Guido van Rossum gave for the decision, but I can imagine a few arguments:</p>\n\n<ul>\n\n<li>Simpler parsing. Technically, parsing <code>++count</code> is ambiguous, as it could be <code>+</code>, <code>+</code>, <code>count</code> (two unary <code>+</code> operators) just as easily as it could be <code>++</code>, <code>count</code> (one unary <code>++</code> operator). It's not a significant syntactic ambiguity, but it does exist.</li>\n\n<li>Simpler language. <code>++</code> is nothing more than a synonym for <code>+= 1</code>. It was a shorthand invented because C compilers were stupid and didn't know how to optimize <code>a += 1</code> into the <code>inc</code> instruction most computers have. In this day of optimizing compilers and bytecode interpreted languages, adding operators to a language to allow programmers to optimize their code is usually frowned upon, especially in a language like Python that is designed to be consistent and readable.</li>\n\n<li>Confusing side-effects. One common newbie error in languages with <code>++</code> operators is mixing up the differences (both in precedence and in return value) between the pre- and post-increment/decrement operators, and Python likes to eliminate language "gotcha"-s. The <a href="https://en.cppreference.com/w/c/language/operator_precedence" rel="noreferrer">precedence issues</a> of <a href="https://stackoverflow.com/a/17819123/1449799">pre-/post-increment in C</a> are pretty hairy, and incredibly easy to mess up.</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	328
Writing a pandas DataFrame to CSV file	<p>To delimit by a tab you can use the <code>sep</code> argument of <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html"><code>to_csv</code></a>:</p>\n\n<pre><code>df.to_csv(file_name, sep=' ')\n\n</code></pre>\n\n<p>To use a specific encoding (e.g. 'utf-8') use the <code>encoding</code> argument:</p>\n\n<pre><code>df.to_csv(file_name, sep=' ', encoding='utf-8')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	329
Adding new column to existing DataFrame in Python pandas	<p>Use the original df1 indexes to create the series:</p>\n\n<pre><code>df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)\n\n</code></pre>\n\n<hr>\n\n<p><strong>Edit 2015</strong><br>\n\nSome reported getting the <code>SettingWithCopyWarning</code> with this code.<br>\n\nHowever, the code still runs perfectly with the current pandas version 0.16.1.</p>\n\n<pre><code>>>> sLength = len(df1['a'])\n\n>>> df1\n\n a b c d\n\n6 -0.269221 -0.026476 0.997517 1.294385\n\n8 0.917438 0.847941 0.034235 -0.448948\n\n>>> df1['e'] = pd.Series(np.random.randn(sLength), index=df1.index)\n\n>>> df1\n\n a b c d e\n\n6 -0.269221 -0.026476 0.997517 1.294385 1.757167\n\n8 0.917438 0.847941 0.034235 -0.448948 2.228131\n\n>>> p.version.short_version\n\n'0.16.1'\n\n</code></pre>\n\n<p>The <code>SettingWithCopyWarning</code> aims to inform of a possibly invalid assignment on a copy of the Dataframe. It doesn't necessarily say you did it wrong (it can trigger false positives) but from 0.13.0 it let you know there are more adequate methods for the same purpose. Then, if you get the warning, just follow its advise: <em>Try using .loc[row_index,col_indexer] = value instead</em></p>\n\n<pre><code>>>> df1.loc[:,'f'] = pd.Series(np.random.randn(sLength), index=df1.index)\n\n>>> df1\n\n a b c d e f\n\n6 -0.269221 -0.026476 0.997517 1.294385 1.757167 -0.050927\n\n8 0.917438 0.847941 0.034235 -0.448948 2.228131 0.006109\n\n>>> \n\n</code></pre>\n\n<p>In fact, this is currently the more efficient method as <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy" rel="noreferrer">described in pandas docs</a></p>\n\n<hr>\n\n<p><strong>Edit 2017</strong></p>\n\n<p>As indicated in the comments and by @Alexander, currently the best method to add the values of a Series as a new column of a DataFrame could be using <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.assign.html" rel="noreferrer"><strong><code>assign</code></strong></a>:</p>\n\n<pre><code>df1 = df1.assign(e=pd.Series(np.random.randn(sLength)).values)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	330
How can I use Python to get the system hostname?	<p>Use <a href="http://docs.python.org/library/socket.html" rel="noreferrer"><code>socket</code></a> and its <a href="http://docs.python.org/library/socket.html#socket.gethostname" rel="noreferrer"><code>gethostname()</code></a> functionality. This will get the <code>hostname</code> of the computer where the Python interpreter is running:</p>\n\n<pre><code>import socket\n\nprint(socket.gethostname())\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	331
How can I open multiple files using "with open" in Python?	<p>As of Python 2.7 (or 3.1 respectively) you can write</p>\n\n<pre><code>with open('a', 'w') as a, open('b', 'w') as b:\n\n do_something()\n\n</code></pre>\n\n<p>In earlier versions of Python, you can sometimes use \n\n<a href="http://docs.python.org/library/contextlib.html#contextlib.nested" rel="noreferrer"><code>contextlib.nested()</code></a> to nest context managers. This won't work as expected for opening multiples files, though -- see the linked documentation for details.</p>\n\n<hr>\n\n<p>In the rare case that you want to open a variable number of files all at the same time, you can use <a href="https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack" rel="noreferrer"><code>contextlib.ExitStack</code></a>, starting from Python version 3.3:</p>\n\n<pre><code>with ExitStack() as stack:\n\n files = [stack.enter_context(open(fname)) for fname in filenames]\n\n # Do something with "files"\n\n</code></pre>\n\n<p>Most of the time you have a variable set of files, you likely want to open them one after the other, though.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	332
How do I calculate the date six months from the current date using the datetime Python module?	<p>I found this solution to be good. (This uses the <a href="https://dateutil.readthedocs.org/en/latest/" rel="noreferrer">python-dateutil extension</a>)</p>\n\n<pre><code>from datetime import date\n\nfrom dateutil.relativedelta import relativedelta\n\nsix_months = date.today() + relativedelta(months=+6)\n\n</code></pre>\n\n<p>The advantage of this approach is that it takes care of issues with 28, 30, 31 days etc. This becomes very useful in handling business rules and scenarios (say invoice generation etc.)</p>\n\n<pre><code>$ date(2010,12,31)+relativedelta(months=+1)\n\n datetime.date(2011, 1, 31)\n\n$ date(2010,12,31)+relativedelta(months=+2)\n\n datetime.date(2011, 2, 28)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	333
How can I add new keys to a dictionary?	<p>To add multiple keys simultaneously, use <a href="https://docs.python.org/library/stdtypes.html#dict.update" rel="noreferrer"><code>dict.update()</code></a>:</p>\n\n<pre><code>>>> x = {1:2}\n\n>>> print(x)\n\n{1: 2}\n\n>>> d = {3:4, 5:6, 7:8}\n\n>>> x.update(d)\n\n>>> print(x)\n\n{1: 2, 3: 4, 5: 6, 7: 8}\n\n</code></pre>\n\n<p>For adding a single key, the accepted answer has less computational overhead.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	334
How do I install a Python package with a .whl file?	<p>I just used the following which was quite simple. First open a console then cd to where you've downloaded your file like some-package.whl and use</p>\n\n<pre><code>pip install some-package.whl\n\n</code></pre>\n\n<p>Note: if pip.exe is not recognized, you may find it in the "Scripts" directory from where python has been installed. If pip is not installed, this page can help:\n\n<a href="https://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows">How do I install pip on Windows?</a></p>\n\n<p><em>Note: for clarification</em><br>\n\nIf you copy the <code>*.whl</code> file to your local drive (ex. <strong>C:\some-dir\some-file.whl</strong>) use the following command line parameters -- </p>\n\n<pre><code>pip install C:/some-dir/some-file.whl\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	335
How to properly ignore exceptions	<pre><code>try:\n\n doSomething()\n\nexcept: \n\n pass\n\n</code></pre>\n\n<p>or</p>\n\n<pre><code>try:\n\n doSomething()\n\nexcept Exception: \n\n pass\n\n</code></pre>\n\n<p>The difference is that the first one will also catch <code>KeyboardInterrupt</code>, <code>SystemExit</code> and stuff like that, which are derived directly from <code>exceptions.BaseException</code>, not <code>exceptions.Exception</code>.</p>\n\n<p>See documentation for details:</p>\n\n<ul>\n\n<li><a href="http://docs.python.org/reference/compound_stmts.html#try" rel="noreferrer"><code>try</code> statement</a></li>\n\n<li><a href="http://docs.python.org/library/exceptions" rel="noreferrer">exceptions</a></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	336
How can I get a list of locally installed Python modules?	<pre><code>help('modules')\n\n</code></pre>\n\n<p>in a Python shell/prompt.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	337
How to import other Python files?	<h2>There are many ways to import a python file, all with their pros and cons.</h2>\n\n<p>Don't just hastily pick the first import strategy that works for you or else you'll have to rewrite the codebase later on when you find it doesn't meet your needs. </p>\n\n<p>I'll start out explaining the easiest example #1, then I'll move toward the most professional and robust example #7</p>\n\n<p><strong>Example 1, Import a python module with python interpreter:</strong></p>\n\n<ol>\n\n<li><p>Put this in /home/el/foo/fox.py:</p>\n\n<pre><code>def what_does_the_fox_say():\n\n print("vixens cry")\n\n</code></pre></li>\n\n<li><p>Get into the python interpreter: </p>\n\n<pre><code>el@apollo:/home/el/foo$ python\n\nPython 2.7.3 (default, Sep 26 2013, 20:03:06) \n\n>>> import fox\n\n>>> fox.what_does_the_fox_say()\n\nvixens cry\n\n>>> \n\n</code></pre>\n\n<p>You imported fox through the python interpreter, invoked the python function <code>what_does_the_fox_say()</code> from within fox.py. </p></li>\n\n</ol>\n\n<p><strong>Example 2, Use <code>execfile</code> or (<a href="https://stackoverflow.com/q/6357361/55075"><code>exec</code> in Python 3</a>) in a script to execute the other python file in place:</strong></p>\n\n<ol>\n\n<li><p>Put this in /home/el/foo2/mylib.py:</p>\n\n<pre><code>def moobar():\n\n print("hi")\n\n</code></pre></li>\n\n<li><p>Put this in /home/el/foo2/main.py:</p>\n\n<pre><code>execfile("/home/el/foo2/mylib.py")\n\nmoobar()\n\n</code></pre></li>\n\n<li><p>run the file:</p>\n\n<pre><code>el@apollo:/home/el/foo$ python main.py\n\nhi\n\n</code></pre>\n\n<p>The function moobar was imported from mylib.py and made available in main.py</p></li>\n\n</ol>\n\n<p><strong>Example 3, Use from ... import ... functionality:</strong></p>\n\n<ol>\n\n<li><p>Put this in /home/el/foo3/chekov.py:</p>\n\n<pre><code>def question():\n\n print "where are the nuclear wessels?"\n\n</code></pre></li>\n\n<li><p>Put this in /home/el/foo3/main.py:</p>\n\n<pre><code>from chekov import question\n\nquestion()\n\n</code></pre></li>\n\n<li><p>Run it like this:</p>\n\n<pre><code>el@apollo:/home/el/foo3$ python main.py \n\nwhere are the nuclear wessels?\n\n</code></pre>\n\n<p>If you defined other functions in chekov.py, they would not be available unless you <code>import *</code></p></li>\n\n</ol>\n\n<p><strong>Example 4, Import riaa.py if it's in a different file location from where it is imported</strong></p>\n\n<ol>\n\n<li><p>Put this in /home/el/foo4/stuff/riaa.py:</p>\n\n<pre><code>def watchout():\n\n print "computers are transforming into a noose and a yoke for humans"\n\n</code></pre></li>\n\n<li><p>Put this in /home/el/foo4/main.py:</p>\n\n<pre><code>import sys \n\nimport os\n\nsys.path.append(os.path.abspath("/home/el/foo4/stuff"))\n\nfrom riaa import * watchout()\n\n</code></pre></li>\n\n<li><p>Run it:</p>\n\n<pre><code>el@apollo:/home/el/foo4$ python main.py \n\ncomputers are transforming into a noose and a yoke for humans\n\n</code></pre>\n\n<p>That imports everything in the foreign file from a different directory.</p></li>\n\n</ol>\n\n<p><strong>Example 5, use <code>os.system("python yourfile.py")</code></strong></p>\n\n<pre><code>import os\n\nos.system("python yourfile.py")\n\n</code></pre>\n\n<p><strong>Example 6, import your file via piggybacking the python startuphook:</strong></p>\n\n<p><strong>Update:</strong> This example used to work for both python2 and 3, but now only works for python2. python3 got rid of this user startuphook feature set because it was abused by low-skill python library writers, using it to impolitely inject their code into the global namespace, before all user-defined programs. If you want this to work for python3, you'll have to get more creative. If I tell you how to do it, python developers will disable that feature set as well, so you're on your own. </p>\n\n<p>See: <a href="https://docs.python.org/2/library/user.html" rel="noreferrer">https://docs.python.org/2/library/user.html</a></p>\n\n<p>Put this code into your home directory in <code>~/.pythonrc.py</code></p>\n\n<pre><code>class secretclass:\n\n def secretmessage(cls, myarg):\n\n return myarg + " is if.. up in the sky, the sky"\n\n secretmessage = classmethod( secretmessage )\n\n def skycake(cls):\n\n return "cookie and sky pie people can't go up and "\n\n skycake = classmethod( skycake )\n\n</code></pre>\n\n<p>Put this code into your main.py (can be anywhere):</p>\n\n<pre><code>import user\n\nmsg = "The only way skycake tates good" \n\nmsg = user.secretclass.secretmessage(msg)\n\nmsg += user.secretclass.skycake()\n\nprint(msg + " have the sky pie! SKYCAKE!")\n\n</code></pre>\n\n<p>Run it, you should get this:</p>\n\n<pre><code>$ python main.py\n\nThe only way skycake tates good is if.. up in the sky, \n\nthe skycookie and sky pie people can't go up and have the sky pie! \n\nSKYCAKE!\n\n</code></pre>\n\n<p>If you get an error here: <code>ModuleNotFoundError: No module named 'user'</code> then it means you're using python3, startuphooks are disabled there by default.</p>\n\n<p>Credit for this jist goes to: <a href="https://github.com/docwhat/homedir-examples/blob/master/python-commandline/.pythonrc.py" rel="noreferrer">https://github.com/docwhat/homedir-examples/blob/master/python-commandline/.pythonrc.py</a> Send along your up-boats.</p>\n\n<p><strong>Example 7, Most Robust: Import files in python with the bare import command:</strong></p>\n\n<ol>\n\n<li>Make a new directory <code>/home/el/foo5/</code></li>\n\n<li>Make a new directory <code>/home/el/foo5/herp</code></li>\n\n<li><p>Make an empty file named <code>__init__.py</code> under herp:</p>\n\n<pre><code>el@apollo:/home/el/foo5/herp$ touch __init__.py\n\nel@apollo:/home/el/foo5/herp$ ls\n\n__init__.py\n\n</code></pre></li>\n\n<li><p>Make a new directory /home/el/foo5/herp/derp</p></li>\n\n<li><p>Under derp, make another <code>__init__.py</code> file:</p>\n\n<pre><code>el@apollo:/home/el/foo5/herp/derp$ touch __init__.py\n\nel@apollo:/home/el/foo5/herp/derp$ ls\n\n__init__.py\n\n</code></pre></li>\n\n<li><p>Under /home/el/foo5/herp/derp make a new file called <code>yolo.py</code> Put this in there:</p>\n\n<pre><code>def skycake():\n\n print "SkyCake evolves to stay just beyond the cognitive reach of " +\n\n "the bulk of men. SKYCAKE!!"\n\n</code></pre></li>\n\n<li><p>The moment of truth, Make the new file <code>/home/el/foo5/main.py</code>, put this in there;</p>\n\n<pre><code>from herp.derp.yolo import skycake\n\nskycake()\n\n</code></pre></li>\n\n<li><p>Run it:</p>\n\n<pre><code>el@apollo:/home/el/foo5$ python main.py\n\nSkyCake evolves to stay just beyond the cognitive reach of the bulk \n\nof men. SKYCAKE!!\n\n</code></pre>\n\n<p>The empty <code>__init__.py</code> file communicates to the python interpreter that the developer intends this directory to be an importable package.</p></li>\n\n</ol>\n\n<p>If you want to see my post on how to include ALL .py files under a directory see here: <a href="https://stackoverflow.com/a/20753073/445131">https://stackoverflow.com/a/20753073/445131</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	338
What is the standard Python docstring format?	<h1>Formats</h1>\n\n<p>Python docstrings can be written following several formats as the other posts showed. However the default Sphinx docstring format was not mentioned and is based on <strong>reStructuredText (reST)</strong>. You can get some information about the main formats in <a href="http://daouzli.com/blog/docstring.html" rel="noreferrer">this blog post</a>.</p>\n\n<p>Note that the reST is recommended by the <a href="https://www.python.org/dev/peps/pep-0287" rel="noreferrer">PEP 287</a></p>\n\n<p>There follows the main used formats for docstrings.</p>\n\n<h2>- Epytext</h2>\n\n<p>Historically a <strong>javadoc</strong> like style was prevalent, so it was taken as a base for <a href="http://epydoc.sourceforge.net" rel="noreferrer">Epydoc</a> (with the called <code>Epytext</code> format) to generate documentation.</p>\n\n<p>Example:</p>\n\n<pre><code>"""\n\nThis is a javadoc style.\n\n@param param1: this is a first param\n\n@param param2: this is a second param\n\n@return: this is a description of what is returned\n\n@raise keyError: raises an exception\n\n"""\n\n</code></pre>\n\n<h2>- reST</h2>\n\n<p>Nowadays, the probably more prevalent format is the <strong>reStructuredText</strong> (reST) format that is used by <a href="http://sphinx-doc.org" rel="noreferrer">Sphinx</a> to generate documentation.\n\nNote: it is used by default in JetBrains PyCharm (type triple quotes after defining a method and hit enter). It is also used by default as output format in Pyment.</p>\n\n<p>Example:</p>\n\n<pre><code>"""\n\nThis is a reST style.\n\n:param param1: this is a first param\n\n:param param2: this is a second param\n\n:returns: this is a description of what is returned\n\n:raises keyError: raises an exception\n\n"""\n\n</code></pre>\n\n<h2>- Google</h2>\n\n<p>Google has their own <a href="https://github.com/google/styleguide/blob/gh-pages/pyguide.md#38-comments-and-docstrings" rel="noreferrer">format</a> that is often used. It also can be interpreted by Sphinx (ie. using <a href="https://sphinxcontrib-napoleon.readthedocs.io/en/latest/" rel="noreferrer">Napoleon plugin</a>). </p>\n\n<p>Example:</p>\n\n<pre><code>"""\n\nThis is an example of Google style.\n\nArgs:\n\n param1: This is the first param.\n\n param2: This is a second param.\n\nReturns:\n\n This is a description of what is returned.\n\nRaises:\n\n KeyError: Raises an exception.\n\n"""\n\n</code></pre>\n\n<p>Even <a href="https://www.sphinx-doc.org/en/master/usage/extensions/example_google.html#example-google" rel="noreferrer">more examples</a></p>\n\n<h2>- Numpydoc</h2>\n\n<p>Note that Numpy recommend to follow their own <a href="https://numpydoc.readthedocs.io/en/latest/" rel="noreferrer">numpydoc</a> based on Google format and usable by Sphinx.</p>\n\n<pre><code>"""\n\nMy numpydoc description of a kind\n\nof very exhautive numpydoc format docstring.\n\nParameters\n\n----------\n\nfirst : array_like\n\n the 1st param name `first`\n\nsecond :\n\n the 2nd param\n\nthird : {'value', 'other'}, optional\n\n the 3rd param, by default 'value'\n\nReturns\n\n-------\n\nstring\n\n a value in a string\n\nRaises\n\n------\n\nKeyError\n\n when a key error\n\nOtherError\n\n when an other error\n\n"""\n\n</code></pre>\n\n<h1>Converting/Generating</h1>\n\n<p>It is possible to use a tool like <a href="https://github.com/dadadel/pyment" rel="noreferrer">Pyment</a> to automatically generate docstrings to a Python project not yet documented, or to convert existing docstrings (can be mixing several formats) from a format to an other one.</p>\n\n<p>Note: The examples are taken from the <a href="https://github.com/dadadel/pyment/blob/master/README.rst" rel="noreferrer">Pyment documentation</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	339
Usage of __slots__?	<blockquote>\n\n<h1>In Python, what is the purpose of <code>__slots__</code> and what are the cases one should avoid this?</h1>\n\n</blockquote>\n\n<h2>TLDR:</h2>\n\n<p>The special attribute <code>__slots__</code> allows you to explicitly state which instance attributes you expect your object instances to have, with the expected results:</p>\n\n<ol>\n\n<li><strong>faster</strong> attribute access.</li>\n\n<li><strong>space savings</strong> in memory.</li>\n\n</ol>\n\n<p>The space savings is from</p>\n\n<ol>\n\n<li>Storing value references in slots instead of <code>__dict__</code>.</li>\n\n<li>Denying <code>__dict__</code> and <code>__weakref__</code> creation if parent classes deny them and you declare <code>__slots__</code>.</li>\n\n</ol>\n\n<h3>Quick Caveats</h3>\n\n<p>Small caveat, you should only declare a particular slot one time in an inheritance tree. For example:</p>\n\n<pre><code>class Base:\n\n __slots__ = 'foo', 'bar'\n\nclass Right(Base):\n\n __slots__ = 'baz', \n\nclass Wrong(Base):\n\n __slots__ = 'foo', 'bar', 'baz' # redundant foo and bar\n\n</code></pre>\n\n<p>Python doesn't object when you get this wrong (it probably should), problems might not otherwise manifest, but your objects will take up more space than they otherwise should. Python 3.8:</p>\n\n<pre class="lang-py prettyprint-override"><code>>>> from sys import getsizeof\n\n>>> getsizeof(Right()), getsizeof(Wrong())\n\n(56, 72)\n\n</code></pre>\n\n<p>This is because the Base's slot descriptor has a slot separate from the Wrong's. This shouldn't usually come up, but it could:</p>\n\n<pre class="lang-py prettyprint-override"><code>>>> w = Wrong()\n\n>>> w.foo = 'foo'\n\n>>> Base.foo.__get__(w)\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nAttributeError: foo\n\n>>> Wrong.foo.__get__(w)\n\n'foo'\n\n</code></pre>\n\n<p>The biggest caveat is for multiple inheritance - multiple "parent classes with nonempty slots" cannot be combined.</p>\n\n<p>To accommodate this restriction, follow best practices: Factor out all but one or all parents' abstraction which their concrete class respectively and your new concrete class collectively will inherit from - giving the abstraction(s) empty slots (just like abstract base classes in the standard library).</p>\n\n<p>See section on multiple inheritance below for an example.</p>\n\n<h3>Requirements:</h3>\n\n<ul>\n\n<li><p>To have attributes named in <code>__slots__</code> to actually be stored in slots instead of a <code>__dict__</code>, a class must inherit from <code>object</code>.</p>\n\n</li>\n\n<li><p>To prevent the creation of a <code>__dict__</code>, you must inherit from <code>object</code> and all classes in the inheritance must declare <code>__slots__</code> and none of them can have a <code>'__dict__'</code> entry.</p>\n\n</li>\n\n</ul>\n\n<p>There are a lot of details if you wish to keep reading.</p>\n\n<h2>Why use <code>__slots__</code>: Faster attribute access.</h2>\n\n<p>The creator of Python, Guido van Rossum, <a href="http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html" rel="noreferrer">states</a> that he actually created <code>__slots__</code> for faster attribute access.</p>\n\n<p>It is trivial to demonstrate measurably significant faster access:</p>\n\n<pre><code>import timeit\n\nclass Foo(object): __slots__ = 'foo',\n\nclass Bar(object): pass\n\nslotted = Foo()\n\nnot_slotted = Bar()\n\ndef get_set_delete_fn(obj):\n\n def get_set_delete():\n\n obj.foo = 'foo'\n\n obj.foo\n\n del obj.foo\n\n return get_set_delete\n\n</code></pre>\n\n<p>and</p>\n\n<pre><code>>>> min(timeit.repeat(get_set_delete_fn(slotted)))\n\n0.2846834529991611\n\n>>> min(timeit.repeat(get_set_delete_fn(not_slotted)))\n\n0.3664822799983085\n\n</code></pre>\n\n<p>The slotted access is almost 30% faster in Python 3.5 on Ubuntu.</p>\n\n<pre><code>>>> 0.3664822799983085 / 0.2846834529991611\n\n1.2873325658284342\n\n</code></pre>\n\n<p>In Python 2 on Windows I have measured it about 15% faster.</p>\n\n<h2>Why use <code>__slots__</code>: Memory Savings</h2>\n\n<p>Another purpose of <code>__slots__</code> is to reduce the space in memory that each object instance takes up.</p>\n\n<p><a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="noreferrer">My own contribution to the documentation clearly states the reasons behind this</a>:</p>\n\n<blockquote>\n\n<p>The space saved over using <code>__dict__</code> can be significant.</p>\n\n</blockquote>\n\n<p><a href="http://docs.sqlalchemy.org/en/rel_1_0/changelog/migration_10.html#significant-improvements-in-structural-memory-use" rel="noreferrer">SQLAlchemy attributes</a> a lot of memory savings to <code>__slots__</code>.</p>\n\n<p>To verify this, using the Anaconda distribution of Python 2.7 on Ubuntu Linux, with <code>guppy.hpy</code> (aka heapy) and <code>sys.getsizeof</code>, the size of a class instance without <code>__slots__</code> declared, and nothing else, is 64 bytes. That does <em>not</em> include the <code>__dict__</code>. Thank you Python for lazy evaluation again, the <code>__dict__</code> is apparently not called into existence until it is referenced, but classes without data are usually useless. When called into existence, the <code>__dict__</code> attribute is a minimum of 280 bytes additionally.</p>\n\n<p>In contrast, a class instance with <code>__slots__</code> declared to be <code>()</code> (no data) is only 16 bytes, and 56 total bytes with one item in slots, 64 with two.</p>\n\n<p>For 64 bit Python, I illustrate the memory consumption in bytes in Python 2.7 and 3.6, for <code>__slots__</code> and <code>__dict__</code> (no slots defined) for each point where the dict grows in 3.6 (except for 0, 1, and 2 attributes):</p>\n\n<pre><code> Python 2.7 Python 3.6\n\nattrs __slots__ __dict__* __slots__ __dict__* | *(no slots defined)\n\nnone 16 56 + 272â 16 56 + 112â | â if __dict__ referenced\n\none 48 56 + 272 48 56 + 112\n\ntwo 56 56 + 272 56 56 + 112\n\nsix 88 56 + 1040 88 56 + 152\n\n11 128 56 + 1040 128 56 + 240\n\n22 216 56 + 3344 216 56 + 408 \n\n43 384 56 + 3344 384 56 + 752\n\n</code></pre>\n\n<p>So, in spite of smaller dicts in Python 3, we see how nicely <code>__slots__</code> scale for instances to save us memory, and that is a major reason you would want to use <code>__slots__</code>.</p>\n\n<p>Just for completeness of my notes, note that there is a one-time cost per slot in the class's namespace of 64 bytes in Python 2, and 72 bytes in Python 3, because slots use data descriptors like properties, called "members".</p>\n\n<pre><code>>>> Foo.foo\n\n<member 'foo' of 'Foo' objects>\n\n>>> type(Foo.foo)\n\n<class 'member_descriptor'>\n\n>>> getsizeof(Foo.foo)\n\n72\n\n</code></pre>\n\n<h2>Demonstration of <code>__slots__</code>:</h2>\n\n<p>To deny the creation of a <code>__dict__</code>, you must subclass <code>object</code>:</p>\n\n<pre><code>class Base(object): \n\n __slots__ = ()\n\n</code></pre>\n\n<p>now:</p>\n\n<pre><code>>>> b = Base()\n\n>>> b.a = 'a'\n\nTraceback (most recent call last):\n\n File "<pyshell#38>", line 1, in <module>\n\n b.a = 'a'\n\nAttributeError: 'Base' object has no attribute 'a'\n\n</code></pre>\n\n<p>Or subclass another class that defines <code>__slots__</code></p>\n\n<pre><code>class Child(Base):\n\n __slots__ = ('a',)\n\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code>c = Child()\n\nc.a = 'a'\n\n</code></pre>\n\n<p>but:</p>\n\n<pre><code>>>> c.b = 'b'\n\nTraceback (most recent call last):\n\n File "<pyshell#42>", line 1, in <module>\n\n c.b = 'b'\n\nAttributeError: 'Child' object has no attribute 'b'\n\n</code></pre>\n\n<p>To allow <code>__dict__</code> creation while subclassing slotted objects, just add <code>'__dict__'</code> to the <code>__slots__</code> (note that slots are ordered, and you shouldn't repeat slots that are already in parent classes):</p>\n\n<pre><code>class SlottedWithDict(Child): \n\n __slots__ = ('__dict__', 'b')\n\nswd = SlottedWithDict()\n\nswd.a = 'a'\n\nswd.b = 'b'\n\nswd.c = 'c'\n\n</code></pre>\n\n<p>and</p>\n\n<pre><code>>>> swd.__dict__\n\n{'c': 'c'}\n\n</code></pre>\n\n<p>Or you don't even need to declare <code>__slots__</code> in your subclass, and you will still use slots from the parents, but not restrict the creation of a <code>__dict__</code>:</p>\n\n<pre><code>class NoSlots(Child): pass\n\nns = NoSlots()\n\nns.a = 'a'\n\nns.b = 'b'\n\n</code></pre>\n\n<p>And:</p>\n\n<pre><code>>>> ns.__dict__\n\n{'b': 'b'}\n\n</code></pre>\n\n<p>However, <code>__slots__</code> may cause problems for multiple inheritance:</p>\n\n<pre><code>class BaseA(object): \n\n __slots__ = ('a',)\n\nclass BaseB(object): \n\n __slots__ = ('b',)\n\n</code></pre>\n\n<p>Because creating a child class from parents with both non-empty slots fails:</p>\n\n<pre><code>>>> class Child(BaseA, BaseB): __slots__ = ()\n\nTraceback (most recent call last):\n\n File "<pyshell#68>", line 1, in <module>\n\n class Child(BaseA, BaseB): __slots__ = ()\n\nTypeError: Error when calling the metaclass bases\n\n multiple bases have instance lay-out conflict\n\n</code></pre>\n\n<p>If you run into this problem, You <em>could</em> just remove <code>__slots__</code> from the parents, or if you have control of the parents, give them empty slots, or refactor to abstractions:</p>\n\n<pre><code>from abc import ABC\n\nclass AbstractA(ABC):\n\n __slots__ = ()\n\nclass BaseA(AbstractA): \n\n __slots__ = ('a',)\n\nclass AbstractB(ABC):\n\n __slots__ = ()\n\nclass BaseB(AbstractB): \n\n __slots__ = ('b',)\n\nclass Child(AbstractA, AbstractB): \n\n __slots__ = ('a', 'b')\n\nc = Child() # no problem!\n\n</code></pre>\n\n<h3>Add <code>'__dict__'</code> to <code>__slots__</code> to get dynamic assignment:</h3>\n\n<pre><code>class Foo(object):\n\n __slots__ = 'bar', 'baz', '__dict__'\n\n</code></pre>\n\n<p>and now:</p>\n\n<pre><code>>>> foo = Foo()\n\n>>> foo.boink = 'boink'\n\n</code></pre>\n\n<p>So with <code>'__dict__'</code> in slots we lose some of the size benefits with the upside of having dynamic assignment and still having slots for the names we do expect.</p>\n\n<p>When you inherit from an object that isn't slotted, you get the same sort of semantics when you use <code>__slots__</code> - names that are in <code>__slots__</code> point to slotted values, while any other values are put in the instance's <code>__dict__</code>.</p>\n\n<p>Avoiding <code>__slots__</code> because you want to be able to add attributes on the fly is actually not a good reason - just add <code>"__dict__"</code> to your <code>__slots__</code> if this is required.</p>\n\n<p>You can similarly add <code>__weakref__</code> to <code>__slots__</code> explicitly if you need that feature.</p>\n\n<h3>Set to empty tuple when subclassing a namedtuple:</h3>\n\n<p>The namedtuple builtin make immutable instances that are very lightweight (essentially, the size of tuples) but to get the benefits, you need to do it yourself if you subclass them:</p>\n\n<pre><code>from collections import namedtuple\n\nclass MyNT(namedtuple('MyNT', 'bar baz')):\n\n """MyNT is an immutable and lightweight object"""\n\n __slots__ = ()\n\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>>>> nt = MyNT('bar', 'baz')\n\n>>> nt.bar\n\n'bar'\n\n>>> nt.baz\n\n'baz'\n\n</code></pre>\n\n<p>And trying to assign an unexpected attribute raises an <code>AttributeError</code> because we have prevented the creation of <code>__dict__</code>:</p>\n\n<pre><code>>>> nt.quux = 'quux'\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nAttributeError: 'MyNT' object has no attribute 'quux'\n\n</code></pre>\n\n<p>You <em>can</em> allow <code>__dict__</code> creation by leaving off <code>__slots__ = ()</code>, but you can't use non-empty <code>__slots__</code> with subtypes of tuple.</p>\n\n<h2>Biggest Caveat: Multiple inheritance</h2>\n\n<p>Even when non-empty slots are the same for multiple parents, they cannot be used together:</p>\n\n<pre><code>class Foo(object): \n\n __slots__ = 'foo', 'bar'\n\nclass Bar(object):\n\n __slots__ = 'foo', 'bar' # alas, would work if empty, i.e. ()\n\n>>> class Baz(Foo, Bar): pass\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: Error when calling the metaclass bases\n\n multiple bases have instance lay-out conflict\n\n</code></pre>\n\n<p>Using an empty <code>__slots__</code> in the parent seems to provide the most flexibility, <strong>allowing the child to choose to prevent or allow</strong> (by adding <code>'__dict__'</code> to get dynamic assignment, see section above) <strong>the creation of a <code>__dict__</code></strong>:</p>\n\n<pre><code>class Foo(object): __slots__ = ()\n\nclass Bar(object): __slots__ = ()\n\nclass Baz(Foo, Bar): __slots__ = ('foo', 'bar')\n\nb = Baz()\n\nb.foo, b.bar = 'foo', 'bar'\n\n</code></pre>\n\n<p>You don't <em>have</em> to have slots - so if you add them, and remove them later, it shouldn't cause any problems.</p>\n\n<p><strong>Going out on a limb here</strong>: If you're composing <a href="https://stackoverflow.com/questions/860245/mixin-vs-inheritance/27907511#27907511">mixins</a> or using <a href="https://stackoverflow.com/questions/372042/difference-between-abstract-class-and-interface-in-python/31439126#31439126">abstract base classes</a>, which aren't intended to be instantiated, an empty <code>__slots__</code> in those parents seems to be the best way to go in terms of flexibility for subclassers.</p>\n\n<p>To demonstrate, first, let's create a class with code we'd like to use under multiple inheritance</p>\n\n<pre><code>class AbstractBase:\n\n __slots__ = ()\n\n def __init__(self, a, b):\n\n self.a = a\n\n self.b = b\n\n def __repr__(self):\n\n return f'{type(self).__name__}({repr(self.a)}, {repr(self.b)})'\n\n</code></pre>\n\n<p>We could use the above directly by inheriting and declaring the expected slots:</p>\n\n<pre><code>class Foo(AbstractBase):\n\n __slots__ = 'a', 'b'\n\n</code></pre>\n\n<p>But we don't care about that, that's trivial single inheritance, we need another class we might also inherit from, maybe with a noisy attribute:</p>\n\n<pre><code>class AbstractBaseC:\n\n __slots__ = ()\n\n @property\n\n def c(self):\n\n print('getting c!')\n\n return self._c\n\n @c.setter\n\n def c(self, arg):\n\n print('setting c!')\n\n self._c = arg\n\n</code></pre>\n\n<p>Now if both bases had nonempty slots, we couldn't do the below. (In fact, if we wanted, we could have given <code>AbstractBase</code> nonempty slots a and b, and left them out of the below declaration - leaving them in would be wrong):</p>\n\n<pre><code>class Concretion(AbstractBase, AbstractBaseC):\n\n __slots__ = 'a b _c'.split()\n\n</code></pre>\n\n<p>And now we have functionality from both via multiple inheritance, and can still deny <code>__dict__</code> and <code>__weakref__</code> instantiation:</p>\n\n<pre><code>>>> c = Concretion('a', 'b')\n\n>>> c.c = c\n\nsetting c!\n\n>>> c.c\n\ngetting c!\n\nConcretion('a', 'b')\n\n>>> c.d = 'd'\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nAttributeError: 'Concretion' object has no attribute 'd'\n\n</code></pre>\n\n<h2>Other cases to avoid slots:</h2>\n\n<ul>\n\n<li>Avoid them when you want to perform <code>__class__</code> assignment with another class that doesn't have them (and you can't add them) unless the slot layouts are identical. (I am very interested in learning who is doing this and why.)</li>\n\n<li>Avoid them if you want to subclass variable length builtins like long, tuple, or str, and you want to add attributes to them.</li>\n\n<li>Avoid them if you insist on providing default values via class attributes for instance variables.</li>\n\n</ul>\n\n<p>You may be able to tease out further caveats from the rest of the <code>__slots__</code> <a href="https://docs.python.org/3.7/reference/datamodel.html#slots" rel="noreferrer">documentation (the 3.7 dev docs are the most current)</a>, which I have made significant recent contributions to.</p>\n\n<h2>Critiques of other answers</h2>\n\n<p>The current top answers cite outdated information and are quite hand-wavy and miss the mark in some important ways.</p>\n\n<h3>Do not "only use <code>__slots__</code> when instantiating lots of objects"</h3>\n\n<p>I quote:</p>\n\n<blockquote>\n\n<p>"You would want to use <code>__slots__</code> if you are going to instantiate a lot (hundreds, thousands) of objects of the same class."</p>\n\n</blockquote>\n\n<p>Abstract Base Classes, for example, from the <code>collections</code> module, are not instantiated, yet <code>__slots__</code> are declared for them.</p>\n\n<p>Why?</p>\n\n<p>If a user wishes to deny <code>__dict__</code> or <code>__weakref__</code> creation, those things must not be available in the parent classes.</p>\n\n<p><code>__slots__</code> contributes to reusability when creating interfaces or mixins.</p>\n\n<p>It is true that many Python users aren't writing for reusability, but when you are, having the option to deny unnecessary space usage is valuable.</p>\n\n<h3><code>__slots__</code> doesn't break pickling</h3>\n\n<p>When pickling a slotted object, you may find it complains with a misleading <code>TypeError</code>:</p>\n\n<pre><code>>>> pickle.loads(pickle.dumps(f))\n\nTypeError: a class that defines __slots__ without defining __getstate__ cannot be pickled\n\n</code></pre>\n\n<p>This is actually incorrect. This message comes from the oldest protocol, which is the default. You can select the latest protocol with the <code>-1</code> argument. In Python 2.7 this would be <code>2</code> (which was introduced in 2.3), and in 3.6 it is <code>4</code>.</p>\n\n<pre><code>>>> pickle.loads(pickle.dumps(f, -1))\n\n<__main__.Foo object at 0x1129C770>\n\n</code></pre>\n\n<p>in Python 2.7:</p>\n\n<pre><code>>>> pickle.loads(pickle.dumps(f, 2))\n\n<__main__.Foo object at 0x1129C770>\n\n</code></pre>\n\n<p>in Python 3.6</p>\n\n<pre><code>>>> pickle.loads(pickle.dumps(f, 4))\n\n<__main__.Foo object at 0x1129C770>\n\n</code></pre>\n\n<p>So I would keep this in mind, as it is a solved problem.</p>\n\n<h2>Critique of the (until Oct 2, 2016) accepted answer</h2>\n\n<p>The first paragraph is half short explanation, half predictive. Here's the only part that actually answers the question</p>\n\n<blockquote>\n\n<p>The proper use of <code>__slots__</code> is to save space in objects. Instead of having a dynamic dict that allows adding attributes to objects at anytime, there is a static structure which does not allow additions after creation. This saves the overhead of one dict for every object that uses slots</p>\n\n</blockquote>\n\n<p>The second half is wishful thinking, and off the mark:</p>\n\n<blockquote>\n\n<p>While this is sometimes a useful optimization, it would be completely unnecessary if the Python interpreter was dynamic enough so that it would only require the dict when there actually were additions to the object.</p>\n\n</blockquote>\n\n<p>Python actually does something similar to this, only creating the <code>__dict__</code> when it is accessed, but creating lots of objects with no data is fairly ridiculous.</p>\n\n<p>The second paragraph oversimplifies and misses actual reasons to avoid <code>__slots__</code>. The below is <em>not</em> a real reason to avoid slots (for <em>actual</em> reasons, see the rest of my answer above.):</p>\n\n<blockquote>\n\n<p>They change the behavior of the objects that have slots in a way that can be abused by control freaks and static typing weenies.</p>\n\n</blockquote>\n\n<p>It then goes on to discuss other ways of accomplishing that perverse goal with Python, not discussing anything to do with <code>__slots__</code>.</p>\n\n<p>The third paragraph is more wishful thinking. Together it is mostly off-the-mark content that the answerer didn't even author and contributes to ammunition for critics of the site.</p>\n\n<h1>Memory usage evidence</h1>\n\n<p>Create some normal objects and slotted objects:</p>\n\n<pre><code>>>> class Foo(object): pass\n\n>>> class Bar(object): __slots__ = ()\n\n</code></pre>\n\n<p>Instantiate a million of them:</p>\n\n<pre><code>>>> foos = [Foo() for f in xrange(1000000)]\n\n>>> bars = [Bar() for b in xrange(1000000)]\n\n</code></pre>\n\n<p>Inspect with <code>guppy.hpy().heap()</code>:</p>\n\n<pre><code>>>> guppy.hpy().heap()\n\nPartition of a set of 2028259 objects. Total size = 99763360 bytes.\n\n Index Count % Size % Cumulative % Kind (class / dict of class)\n\n 0 1000000 49 64000000 64 64000000 64 __main__.Foo\n\n 1 169 0 16281480 16 80281480 80 list\n\n 2 1000000 49 16000000 16 96281480 97 __main__.Bar\n\n 3 12284 1 987472 1 97268952 97 str\n\n...\n\n</code></pre>\n\n<p>Access the regular objects and their <code>__dict__</code> and inspect again:</p>\n\n<pre><code>>>> for f in foos:\n\n... f.__dict__\n\n>>> guppy.hpy().heap()\n\nPartition of a set of 3028258 objects. Total size = 379763480 bytes.\n\n Index Count % Size % Cumulative % Kind (class / dict of class)\n\n 0 1000000 33 280000000 74 280000000 74 dict of __main__.Foo\n\n 1 1000000 33 64000000 17 344000000 91 __main__.Foo\n\n 2 169 0 16281480 4 360281480 95 list\n\n 3 1000000 33 16000000 4 376281480 99 __main__.Bar\n\n 4 12284 0 987472 0 377268952 99 str\n\n...\n\n</code></pre>\n\n<p>This is consistent with the history of Python, from <a href="https://www.python.org/download/releases/2.2.2/descrintro/" rel="noreferrer">Unifying types and classes in Python 2.2</a></p>\n\n<blockquote>\n\n<p>If you subclass a built-in type, extra space is automatically added to the instances to accomodate <code>__dict__</code> and <code>__weakrefs__</code>. (The <code>__dict__</code> is not initialized until you use it though, so you shouldn't worry about the space occupied by an empty dictionary for each instance you create.) If you don't need this extra space, you can add the phrase "<code>__slots__ = []</code>" to your class.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	340
Find which version of package is installed with pip	<p>As of <a href="https://github.com/pypa/pip/blob/1.3/CHANGES.txt#L54" rel="noreferrer">pip 1.3</a>, there is a <code>pip show</code> command.</p>\n\n<pre><code>$ pip show Jinja2\n\n---\n\nName: Jinja2\n\nVersion: 2.7.3\n\nLocation: /path/to/virtualenv/lib/python2.7/site-packages\n\nRequires: markupsafe\n\n</code></pre>\n\n<p>In older versions, <code>pip freeze</code> and <code>grep</code> should do the job nicely.</p>\n\n<pre><code>$ pip freeze | grep Jinja2\n\nJinja2==2.7.3\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	341
Get unique values from a list in python	<p>First declare your list properly, separated by commas. You can get the unique values by converting the list to a set.</p>\n\n<pre><code>mylist = ['nowplaying', 'PBS', 'PBS', 'nowplaying', 'job', 'debate', 'thenandnow']\n\nmyset = set(mylist)\n\nprint(myset)\n\n</code></pre>\n\n<p>If you use it further as a list, you should convert it back to a list by doing:</p>\n\n<pre><code>mynewlist = list(myset)\n\n</code></pre>\n\n<p>Another possibility, probably faster would be to use a set from the beginning, instead of a list. Then your code should be:</p>\n\n<pre><code>output = set()\n\nfor x in trends:\n\n output.add(x)\n\nprint(output)\n\n</code></pre>\n\n<p>As it has been pointed out, sets do not maintain the original order. If you need that, you should look for an <a href="http://code.activestate.com/recipes/576694/" rel="noreferrer">ordered set</a> implementation (see <a href="https://stackoverflow.com/questions/1653970/does-python-have-an-ordered-set">this question</a> for more).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	342
not None test in Python	<pre><code>if val is not None:\n\n # ...\n\n</code></pre>\n\n<p>is the Pythonic idiom for testing that a variable is not set to <code>None</code>. This idiom has particular uses in the case of <a href="http://effbot.org/zone/default-values.htm" rel="noreferrer">declaring keyword functions with default parameters</a>. <code>is</code> tests identity in Python. Because there is one and only one instance of <code>None</code> present in a running Python script/program, <code>is</code> is the optimal test for this. As <a href="https://stackoverflow.com/questions/3965104/not-none-test-in-python/3965165#3965165">Johnsyweb points out</a>, this is discussed in <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8</a> under "Programming Recommendations".</p>\n\n<p>As for why this is preferred to </p>\n\n<pre><code>if not (val is None):\n\n # ...\n\n</code></pre>\n\n<p>this is simply part of the <a href="http://www.python.org/dev/peps/pep-0020/" rel="noreferrer">Zen of Python</a>: "Readability counts." Good Python is often close to good <a href="http://en.wikipedia.org/wiki/Pseudocode" rel="noreferrer">pseudocode</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	343
How to urlencode a querystring in Python?	<h1>Python 2</h1>\n\n<p>What you're looking for is <a href="https://docs.python.org/2/library/urllib.html#urllib.quote_plus" rel="noreferrer" title="urllib.quote_plus"><code>urllib.quote_plus</code></a>:</p>\n\n<pre><code>>>> urllib.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')\n\n'string_of_characters_like_these%3A%24%23%40%3D%3F%25%5EQ%5E%24'\n\n</code></pre>\n\n<h1>Python 3</h1>\n\n<p>In Python 3, the <code>urllib</code> package has been broken into smaller components. You'll use <a href="https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus" rel="noreferrer"><code>urllib.parse.quote_plus</code></a> (note the <code>parse</code> child module)</p>\n\n<pre><code>import urllib.parse\n\nurllib.parse.quote_plus(...)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	344
What's the difference between lists and tuples?	<p>Apart from tuples being immutable there is also a semantic distinction that should guide their usage. Tuples are heterogeneous data structures (i.e., their entries have different meanings), while lists are homogeneous sequences. <strong>Tuples have structure, lists have order.</strong> </p>\n\n<p>Using this distinction makes code more explicit and understandable.</p>\n\n<p>One example would be pairs of page and line number to reference locations in a book, e.g.:</p>\n\n<pre><code>my_location = (42, 11) # page number, line number\n\n</code></pre>\n\n<p>You can then use this as a key in a dictionary to store notes on locations. A list on the other hand could be used to store multiple locations. Naturally one might want to add or remove locations from the list, so it makes sense that lists are mutable. On the other hand it doesn't make sense to add or remove items from an existing location - hence tuples are immutable.</p>\n\n<p>There might be situations where you want to change items within an existing location tuple, for example when iterating through the lines of a page. But tuple immutability forces you to create a new location tuple for each new value. This seems inconvenient on the face of it, but using immutable data like this is a cornerstone of value types and functional programming techniques, which can have substantial advantages.</p>\n\n<p>There are some interesting articles on this issue, e.g. <a href="http://jtauber.com/blog/2006/04/15/python_tuples_are_not_just_constant_lists/" rel="noreferrer">"Python Tuples are Not Just Constant Lists"</a> or <a href="http://news.e-scribe.com/397" rel="noreferrer">"Understanding tuples vs. lists in Python"</a>. The official Python documentation <a href="http://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences" rel="noreferrer">also mentions this</a></p>\n\n<blockquote>\n\n <p>"Tuples are immutable, and usually contain an heterogeneous sequence ...".</p>\n\n</blockquote>\n\n<p>In a statically typed language like <em>Haskell</em> the values in a tuple generally have different types and the length of the tuple must be fixed. In a list the values all have the same type and the length is not fixed. So the difference is very obvious.</p>\n\n<p>Finally there is the <a href="http://docs.python.org/dev/library/collections.html#collections.namedtuple" rel="noreferrer">namedtuple</a> in Python, which makes sense because a tuple is already supposed to have structure. This underlines the idea that tuples are a light-weight alternative to classes and instances.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	345
How does the @property decorator work?	<p>The <code>property()</code> function returns a special <a href="https://docs.python.org/howto/descriptor.html" rel="noreferrer">descriptor object</a>:</p>\n\n<pre class="lang-python prettyprint-override"><code>>>> property()\n\n<property object at 0x10ff07940>\n\n</code></pre>\n\n<p>It is this object that has <em>extra</em> methods:</p>\n\n<pre><code>>>> property().getter\n\n<built-in method getter of property object at 0x10ff07998>\n\n>>> property().setter\n\n<built-in method setter of property object at 0x10ff07940>\n\n>>> property().deleter\n\n<built-in method deleter of property object at 0x10ff07998>\n\n</code></pre>\n\n<p>These act as decorators <em>too</em>. They return a new property object:</p>\n\n<pre><code>>>> property().getter(None)\n\n<property object at 0x10ff079f0>\n\n</code></pre>\n\n<p>that is a copy of the old object, but with one of the functions replaced.</p>\n\n<p>Remember, that the <code>@decorator</code> syntax is just syntactic sugar; the syntax:</p>\n\n<pre><code>@property\n\ndef foo(self): return self._foo\n\n</code></pre>\n\n<p>really means the same thing as</p>\n\n<pre><code>def foo(self): return self._foo\n\nfoo = property(foo)\n\n</code></pre>\n\n<p>so <code>foo</code> the function is replaced by <code>property(foo)</code>, which we saw above is a special object. Then when you use <code>@foo.setter()</code>, what you are doing is call that <code>property().setter</code> method I showed you above, which returns a new copy of the property, but this time with the setter function replaced with the decorated method.</p>\n\n<p>The following sequence also creates a full-on property, by using those decorator methods.</p>\n\n<p>First we create some functions and a <code>property</code> object with just a getter:</p>\n\n<pre><code>>>> def getter(self): print('Get!')\n\n... \n\n>>> def setter(self, value): print('Set to {!r}!'.format(value))\n\n... \n\n>>> def deleter(self): print('Delete!')\n\n... \n\n>>> prop = property(getter)\n\n>>> prop.fget is getter\n\nTrue\n\n>>> prop.fset is None\n\nTrue\n\n>>> prop.fdel is None\n\nTrue\n\n</code></pre>\n\n<p>Next we use the <code>.setter()</code> method to add a setter:</p>\n\n<pre><code>>>> prop = prop.setter(setter)\n\n>>> prop.fget is getter\n\nTrue\n\n>>> prop.fset is setter\n\nTrue\n\n>>> prop.fdel is None\n\nTrue\n\n</code></pre>\n\n<p>Last we add a deleter with the <code>.deleter()</code> method:</p>\n\n<pre><code>>>> prop = prop.deleter(deleter)\n\n>>> prop.fget is getter\n\nTrue\n\n>>> prop.fset is setter\n\nTrue\n\n>>> prop.fdel is deleter\n\nTrue\n\n</code></pre>\n\n<p>Last but not least, the <code>property</code> object acts as a <a href="https://docs.python.org/reference/datamodel.html#implementing-descriptors" rel="noreferrer">descriptor object</a>, so it has <a href="https://docs.python.org/reference/datamodel.html#object.__get__" rel="noreferrer"><code>.__get__()</code></a>, <a href="http://docs.python.org/reference/datamodel.html#object.__set__" rel="noreferrer"><code>.__set__()</code></a> and <a href="http://docs.python.org/reference/datamodel.html#object.__delete__" rel="noreferrer"><code>.__delete__()</code></a> methods to hook into instance attribute getting, setting and deleting:</p>\n\n<pre><code>>>> class Foo: pass\n\n... \n\n>>> prop.__get__(Foo(), Foo)\n\nGet!\n\n>>> prop.__set__(Foo(), 'bar')\n\nSet to 'bar'!\n\n>>> prop.__delete__(Foo())\n\nDelete!\n\n</code></pre>\n\n<p>The Descriptor Howto includes a <a href="http://docs.python.org/howto/descriptor.html#properties" rel="noreferrer">pure Python sample implementation</a> of the <code>property()</code> type:</p>\n\n<blockquote>\n\n<pre><code>class Property:\n\n "Emulate PyProperty_Type() in Objects/descrobject.c"\n\n def __init__(self, fget=None, fset=None, fdel=None, doc=None):\n\n self.fget = fget\n\n self.fset = fset\n\n self.fdel = fdel\n\n if doc is None and fget is not None:\n\n doc = fget.__doc__\n\n self.__doc__ = doc\n\n def __get__(self, obj, objtype=None):\n\n if obj is None:\n\n return self\n\n if self.fget is None:\n\n raise AttributeError("unreadable attribute")\n\n return self.fget(obj)\n\n def __set__(self, obj, value):\n\n if self.fset is None:\n\n raise AttributeError("can't set attribute")\n\n self.fset(obj, value)\n\n def __delete__(self, obj):\n\n if self.fdel is None:\n\n raise AttributeError("can't delete attribute")\n\n self.fdel(obj)\n\n def getter(self, fget):\n\n return type(self)(fget, self.fset, self.fdel, self.__doc__)\n\n def setter(self, fset):\n\n return type(self)(self.fget, fset, self.fdel, self.__doc__)\n\n def deleter(self, fdel):\n\n return type(self)(self.fget, self.fset, fdel, self.__doc__)\n\n</code></pre>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	346
How to define a two-dimensional array in Python	<p>You're technically trying to index an uninitialized array. You have to first initialize the outer list with lists before adding items; Python calls this\n\n"list comprehension".</p>\n\n<pre><code># Creates a list containing 5 lists, each of 8 items, all set to 0\n\nw, h = 8, 5;\n\nMatrix = [[0 for x in range(w)] for y in range(h)] \n\n</code></pre>\n\n<h1>You can now add items to the list:</h1>\n\n<pre><code>Matrix[0][0] = 1\n\nMatrix[6][0] = 3 # error! range... \n\nMatrix[0][6] = 3 # valid\n\n</code></pre>\n\n<p>Note that the matrix is "y" address major, in other words, the "y index" comes before the "x index".</p>\n\n<pre><code>print Matrix[0][0] # prints 1\n\nx, y = 0, 6 \n\nprint Matrix[x][y] # prints 3; be careful with indexing! \n\n</code></pre>\n\n<p>Although you can name them as you wish, I look at it this way to avoid some confusion that could arise with the indexing, if you use "x" for both the inner and outer lists, and want a non-square Matrix.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	347
How do I use raw_input in Python 3	<p>Starting with Python 3, <code>raw_input()</code> was renamed to <code>input()</code>.</p>\n\n<p>From <a href="https://docs.python.org/3/whatsnew/3.0.html#builtins" rel="noreferrer">Whatâs New In Python 3.0, Builtins section</a> second item.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	348
How to read a file line-by-line into a list?	<p>See <a href="http://docs.python.org/tutorial/inputoutput.html#reading-and-writing-files" rel="noreferrer">Input and Ouput</a>:</p>\n\n<pre class="lang-py prettyprint-override"><code>with open('filename') as f:\n\n lines = f.readlines()\n\n</code></pre>\n\n<p>or with stripping the newline character:</p>\n\n<pre class="lang-py prettyprint-override"><code>with open('filename') as f:\n\n lines = [line.rstrip() for line in f]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	349
Why are Python lambdas useful?	<p>Are you talking about <a href="https://docs.python.org/3.5/tutorial/controlflow.html#lambda-expressions" rel="noreferrer">lambda functions</a>? Like</p>\n\n<pre><code>lambda x: x**2 + 2*x - 5\n\n</code></pre>\n\n<p>Those things are actually quite useful. Python supports a style of programming called <em>functional programming</em> where you can pass functions to other functions to do stuff. Example:</p>\n\n<pre><code>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n</code></pre>\n\n<p>sets <code>mult3</code> to <code>[3, 6, 9]</code>, those elements of the original list that are multiples of 3. This is shorter (and, one could argue, clearer) than</p>\n\n<pre><code>def filterfunc(x):\n\n return x % 3 == 0\n\nmult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n</code></pre>\n\n<p>Of course, in this particular case, you could do the same thing as a list comprehension:</p>\n\n<pre><code>mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]\n\n</code></pre>\n\n<p>(or even as <code>range(3,10,3)</code>), but there are many other, more sophisticated use cases where you can't use a list comprehension and a lambda function may be the shortest way to write something out.</p>\n\n<ul>\n\n<li><p>Returning a function from another function</p>\n\n<pre><code>>>> def transform(n):\n\n... return lambda x: x + n\n\n...\n\n>>> f = transform(3)\n\n>>> f(4)\n\n7\n\n</code></pre>\n\n<p>This is often used to create function wrappers, such as Python's decorators.</p></li>\n\n<li><p>Combining elements of an iterable sequence with <code>reduce()</code></p>\n\n<pre><code>>>> reduce(lambda a, b: '{}, {}'.format(a, b), [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n'1, 2, 3, 4, 5, 6, 7, 8, 9'\n\n</code></pre></li>\n\n<li><p>Sorting by an alternate key</p>\n\n<pre><code>>>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9], key=lambda x: abs(5-x))\n\n[5, 4, 6, 3, 7, 2, 8, 1, 9]\n\n</code></pre></li>\n\n</ul>\n\n<p>I use lambda functions on a regular basis. It took me a while to get used to them, but eventually I came to understand that they're a very valuable part of the language.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	350
How to return dictionary keys as a list in Python?	<p>Try <code>list(newdict.keys())</code>.</p>\n\n<p>This will convert the <code>dict_keys</code> object to a list.</p>\n\n<p>On the other hand, you should ask yourself whether or not it matters. The Pythonic way to code is to assume duck typing (<em>if it looks like a duck and it quacks like a duck, it's a duck</em>). The <code>dict_keys</code> object will act like a list for most purposes. For instance:</p>\n\n<pre><code>for key in newdict.keys():\n\n print(key)\n\n</code></pre>\n\n<p>Obviously, insertion operators may not work, but that doesn't make much sense for a list of dictionary keys anyway.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	351
Why dict.get(key) instead of dict[key]?	<p>It allows you to provide a default value if the key is missing:</p>\n\n<pre><code>dictionary.get("bogus", default_value)\n\n</code></pre>\n\n<p>returns <code>default_value</code> (whatever you choose it to be), whereas</p>\n\n<pre><code>dictionary["bogus"]\n\n</code></pre>\n\n<p>would raise a <code>KeyError</code>. </p>\n\n<p>If omitted, <code>default_value</code> is <code>None</code>, such that</p>\n\n<pre><code>dictionary.get("bogus") # <-- No default specified -- defaults to None\n\n</code></pre>\n\n<p>returns <code>None</code> just like </p>\n\n<pre><code>dictionary.get("bogus", None)\n\n</code></pre>\n\n<p>would. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	352
Python `if x is not None` or `if not x is None`?	<p>There's no performance difference, as they compile to the same bytecode:</p>\n\n<pre><code>Python 2.6.2 (r262:71600, Apr 15 2009, 07:20:39)\n\n>>> import dis\n\n>>> def f(x):\n\n... return x is not None\n\n...\n\n>>> dis.dis(f)\n\n 2 0 LOAD_FAST 0 (x)\n\n 3 LOAD_CONST 0 (None)\n\n 6 COMPARE_OP 9 (is not)\n\n 9 RETURN_VALUE\n\n>>> def g(x):\n\n... return not x is None\n\n...\n\n>>> dis.dis(g)\n\n 2 0 LOAD_FAST 0 (x)\n\n 3 LOAD_CONST 0 (None)\n\n 6 COMPARE_OP 9 (is not)\n\n 9 RETURN_VALUE\n\n</code></pre>\n\n<p>Stylistically, I try to avoid <code>not x is y</code>. Although the compiler will always treat it as <code>not (x is y)</code>, a human reader might misunderstand the construct as <code>(not x) is y</code>. If I write <code>x is not y</code> then there is no ambiguity.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	353
If Python is interpreted, what are .pyc files?	<blockquote>\n\n <p>I've been given to understand that\n\n Python is an interpreted language...</p>\n\n</blockquote>\n\n<p>This popular meme is incorrect, or, rather, constructed upon a misunderstanding of (natural) language levels: a similar mistake would be to say "the Bible is a hardcover book". Let me explain that simile...</p>\n\n<p>"The Bible" is "a book" in the sense of being a <strong>class</strong> of (actual, physical objects identified as) books; the books identified as "copies of the Bible" are supposed to have something fundamental in common (the contents, although even those can be in different languages, with different acceptable translations, levels of footnotes and other annotations) -- however, those books are perfectly well allowed to differ in a myriad of aspects that are <em>not</em> considered fundamental -- kind of binding, color of binding, font(s) used in the printing, illustrations if any, wide writable margins or not, numbers and kinds of builtin bookmarks, and so on, and so forth.</p>\n\n<p>It's quite possible that a <em>typical</em> printing of the Bible would indeed be in hardcover binding -- after all, it's a book that's typically meant to be read over and over, bookmarked at several places, thumbed through looking for given chapter-and-verse pointers, etc, etc, and a good hardcover binding can make a given copy last longer under such use. However, these are mundane (practical) issues that cannot be used to determine whether a given actual book object is a copy of the Bible or not: paperback printings are perfectly possible!</p>\n\n<p>Similarly, Python is "a language" in the sense of defining a class of <em>language <strong>implementations</strong></em> which must all be similar in some fundamental respects (syntax, most semantics except those parts of those where they're explicitly allowed to differ) but are fully allowed to differ in just about every "implementation" detail -- including how they deal with the source files they're given, whether they compile the sources to some lower level forms (and, if so, which form -- and whether they save such compiled forms, to disk or elsewhere), how they execute said forms, and so forth.</p>\n\n<p>The classical implementation, CPython, is often called just "Python" for short -- but it's just one of several production-quality implementations, side by side with Microsoft's IronPython (which compiles to CLR codes, i.e., ".NET"), Jython (which compiles to JVM codes), PyPy (which is written in Python itself and can compile to a huge variety of "back-end" forms including "just-in-time" generated machine language). They're all Python (=="implementations of the Python language") just like many superficially different book objects can all be Bibles (=="copies of The Bible").</p>\n\n<p>If you're interested in CPython specifically: it compiles the source files into a Python-specific lower-level form (known as "bytecode"), does so automatically when needed (when there is no bytecode file corresponding to a source file, or the bytecode file is older than the source or compiled by a different Python version), usually saves the bytecode files to disk (to avoid recompiling them in the future). OTOH IronPython will typically compile to CLR codes (saving them to disk or not, depending) and Jython to JVM codes (saving them to disk or not -- it will use the <code>.class</code> extension if it does save them).</p>\n\n<p>These lower level forms are then executed by appropriate "virtual machines" also known as "interpreters" -- the CPython VM, the .Net runtime, the Java VM (aka JVM), as appropriate.</p>\n\n<p>So, in this sense (what do typical implementations do), Python is an "interpreted language" if and only if C# and Java are: all of them have a typical implementation strategy of producing bytecode first, then executing it via a VM/interpreter.</p>\n\n<p>More likely the focus is on how "heavy", slow, and high-ceremony the compilation process is. CPython is designed to compile as fast as possible, as lightweight as possible, with as little ceremony as feasible -- the compiler does very little error checking and optimization, so it can run fast and in small amounts of memory, which in turns lets it be run automatically and transparently whenever needed, without the user even needing to be aware that there is a compilation going on, most of the time. Java and C# typically accept more work during compilation (and therefore don't perform automatic compilation) in order to check errors more thoroughly and perform more optimizations. It's a continuum of gray scales, not a black or white situation, and it would be utterly arbitrary to put a threshold at some given level and say that only above that level you call it "compilation"!-)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	354
How to capitalize the first letter of each word in a string?	<p>The <a href="http://docs.python.org/library/stdtypes.html#str.title" rel="noreferrer"><code>.title()</code></a> method of a string (either ASCII or Unicode is fine) does this:</p>\n\n<pre><code>>>> "hello world".title()\n\n'Hello World'\n\n>>> u"hello world".title()\n\nu'Hello World'\n\n</code></pre>\n\n<p>However, look out for strings with embedded apostrophes, as noted in the docs.</p>\n\n<blockquote>\n\n<p>The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:</p>\n\n<pre><code>>>> "they're bill's friends from the UK".title()\n\n"They'Re Bill'S Friends From The Uk"\n\n</code></pre>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	355
Emulate a do-while loop in Python?	<p>I am not sure what you are trying to do. You can implement a do-while loop like this:</p>\n\n<pre><code>while True:\n\n stuff()\n\n if fail_condition:\n\n break\n\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>stuff()\n\nwhile not fail_condition:\n\n stuff()\n\n</code></pre>\n\n<p>What are you doing trying to use a do while loop to print the stuff in the list? Why not just use:</p>\n\n<pre><code>for i in l:\n\n print i\n\nprint "done"\n\n</code></pre>\n\n<p>Update:</p>\n\n<p>So do you have a list of lines? And you want to keep iterating through it? How about: </p>\n\n<pre><code>for s in l: \n\n while True: \n\n stuff() \n\n # use a "break" instead of s = i.next()\n\n</code></pre>\n\n<p>Does that seem like something close to what you would want? With your code example, it would be:</p>\n\n<pre><code>for s in some_list:\n\n while True:\n\n if state is STATE_CODE:\n\n if "//" in s:\n\n tokens.add( TOKEN_COMMENT, s.split( "//" )[1] )\n\n state = STATE_COMMENT\n\n else :\n\n tokens.add( TOKEN_CODE, s )\n\n if state is STATE_COMMENT:\n\n if "//" in s:\n\n tokens.append( TOKEN_COMMENT, s.split( "//" )[1] )\n\n break # get next s\n\n else:\n\n state = STATE_CODE\n\n # re-evaluate same line\n\n # continues automatically\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	356
How do I convert datetime to date (in Python)?	<p>Use the <code>date()</code> method:</p>\n\n<pre><code>datetime.datetime.now().date()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	357
Understanding dict.copy() - shallow or deep?	<p>By "shallow copying" it means the <em>content</em> of the dictionary is not copied by value, but just creating a new reference.</p>\n\n<pre><code>>>> a = {1: [1,2,3]}\n\n>>> b = a.copy()\n\n>>> a, b\n\n({1: [1, 2, 3]}, {1: [1, 2, 3]})\n\n>>> a[1].append(4)\n\n>>> a, b\n\n({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})\n\n</code></pre>\n\n<p>In contrast, a deep copy will copy all contents by value.</p>\n\n<pre><code>>>> import copy\n\n>>> c = copy.deepcopy(a)\n\n>>> a, c\n\n({1: [1, 2, 3, 4]}, {1: [1, 2, 3, 4]})\n\n>>> a[1].append(5)\n\n>>> a, c\n\n({1: [1, 2, 3, 4, 5]}, {1: [1, 2, 3, 4]})\n\n</code></pre>\n\n<p>So:</p>\n\n<ol>\n\n<li><p><code>b = a</code>: Reference assignment, Make <code>a</code> and <code>b</code> points to the same object.</p>\n\n<p><img src="https://i.stack.imgur.com/4AQC6.png" alt="Illustration of 'a = b': 'a' and 'b' both point to '{1: L}', 'L' points to '[1, 2, 3]'."></p></li>\n\n<li><p><code>b = a.copy()</code>: Shallow copying, <code>a</code> and <code>b</code> will become two isolated objects, but their contents still share the same reference</p>\n\n<p><img src="https://i.stack.imgur.com/Vtk4m.png" alt="Illustration of 'b = a.copy()': 'a' points to '{1: L}', 'b' points to '{1: M}', 'L' and 'M' both point to '[1, 2, 3]'."></p></li>\n\n<li><p><code>b = copy.deepcopy(a)</code>: Deep copying, <code>a</code> and <code>b</code>'s structure and content become completely isolated.</p>\n\n<p><img src="https://i.stack.imgur.com/BO4qO.png" alt="Illustration of 'b = copy.deepcopy(a)': 'a' points to '{1: L}', 'L' points to '[1, 2, 3]'; 'b' points to '{1: M}', 'M' points to a different instance of '[1, 2, 3]'."></p></li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	358
How do I create a constant in Python?	<p>No there is not. You cannot declare a variable or value as constant in Python. Just don't change it.</p>\n\n<p>If you are in a class, the equivalent would be:</p>\n\n<pre><code>class Foo(object):\n\n CONST_NAME = "Name"\n\n</code></pre>\n\n<p>if not, it is just</p>\n\n<pre><code>CONST_NAME = "Name"\n\n</code></pre>\n\n<p>But you might want to have a look at the code snippet <a href="http://code.activestate.com/recipes/65207-constants-in-python/?in=user-97991" rel="noreferrer">Constants in Python</a> by Alex Martelli.</p>\n\n<hr>\n\n<p>As of Python 3.8, there's a <a href="https://docs.python.org/3/library/typing.html#typing.Final" rel="noreferrer"><code>typing.Final</code></a> variable annotation that will tell static type checkers (like mypy) that your variable shouldn't be reassigned. This is the closest equivalent to Java's <code>final</code>. However, it <strong>does not actually prevent reassignment</strong>:</p>\n\n<pre><code>from typing import Final\n\na: Final = 1\n\n# Executes fine, but mypy will report an error if you run mypy on this:\n\na = 2\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	359
How do I check whether a file exists without exceptions?	<p>Unlike <a href="https://docs.python.org/library/os.path.html#os.path.isfile" rel="noreferrer"><code>isfile()</code></a>, <a href="https://docs.python.org/library/os.path.html#os.path.exists" rel="noreferrer"><code>exists()</code></a> will return <code>True</code> for directories. So depending on if you want only plain files or also directories, you'll use <code>isfile()</code> or <code>exists()</code>. Here is some simple REPL output:</p>\n\n<pre><code>>>> os.path.isfile("/etc/password.txt")\n\nTrue\n\n>>> os.path.isfile("/etc")\n\nFalse\n\n>>> os.path.isfile("/does/not/exist")\n\nFalse\n\n>>> os.path.exists("/etc/password.txt")\n\nTrue\n\n>>> os.path.exists("/etc")\n\nTrue\n\n>>> os.path.exists("/does/not/exist")\n\nFalse\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	360
python setup.py uninstall	<p>Note: Avoid using <code>python setup.py install</code> use <code>pip install .</code></p>\n\n<p>You need to remove all files manually, and also undo any other stuff that installation did manually.</p>\n\n<p>If you don't know the list of all files, you can reinstall it with the <code>--record</code> option, and take a look at the list this produces.</p>\n\n<p>To record a list of installed files, you can use:</p>\n\n<pre><code>python setup.py install --record files.txt\n\n</code></pre>\n\n<p>Once you want to uninstall you can use xargs to do the removal:</p>\n\n<pre><code>xargs rm -rf < files.txt\n\n</code></pre>\n\n<p>Or if you're running Windows, use Powershell: </p>\n\n<pre><code>Get-Content files.txt | ForEach-Object {Remove-Item $_ -Recurse -Force}\n\n</code></pre>\n\n<p>Then delete also the containing directory, e.g. <code>/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/my_module-0.1.egg/</code> on <code>macOS</code>. It has no files, but Python will still import an empty module:</p>\n\n<pre><code>>>> import my_module\n\n>>> my_module.__file__\n\nNone\n\n</code></pre>\n\n<p>Once deleted, Python shows:</p>\n\n<pre><code>>>> import my_module\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nModuleNotFoundError: No module named 'my_module'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	361
Is there a built-in function to print all the current properties and values of an object?	<p>You want <code>vars()</code> mixed with <code>pprint()</code>:</p>\n\n<pre><code>from pprint import pprint\n\npprint(vars(your_object))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	362
Convert list of dictionaries to a pandas DataFrame	<p>Supposing <code>d</code> is your list of dicts, simply:</p>\n\n<pre><code>pd.DataFrame(d)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	363
How are iloc and loc different?	<p><em>Note: in pandas version 0.20.0 and above, <code>ix</code> is <a href="http://pandas-docs.github.io/pandas-docs-travis/indexing.html#ix-indexer-is-deprecated" rel="noreferrer">deprecated</a> and the use of <code>loc</code> and <code>iloc</code> is encouraged instead. I have left the parts of this answer that describe <code>ix</code> intact as a reference for users of earlier versions of pandas. Examples have been added below showing alternatives to <code>ix</code></em>.</p>\n\n<hr>\n\n<p>First, here's a recap of the three methods:</p>\n\n<ul>\n\n<li><code>loc</code> gets rows (or columns) with particular <em>labels</em> from the index. </li>\n\n<li><code>iloc</code> gets rows (or columns) at particular <em>positions</em> in the index (so it only takes integers).</li>\n\n<li><code>ix</code> usually tries to behave like <code>loc</code> but falls back to behaving like <code>iloc</code> if a label is not present in the index.</li>\n\n</ul>\n\n<p>It's important to note some subtleties that can make <code>ix</code> slightly tricky to use:</p>\n\n<ul>\n\n<li><p>if the index is of integer type, <code>ix</code> will only use label-based indexing and not fall back to position-based indexing. If the label is not in the index, an error is raised.</p></li>\n\n<li><p>if the index does not contain <em>only</em> integers, then given an integer, <code>ix</code> will immediately use position-based indexing rather than label-based indexing. If however <code>ix</code> is given another type (e.g. a string), it can use label-based indexing.</p></li>\n\n</ul>\n\n<hr>\n\n<p>To illustrate the differences between the three methods, consider the following Series:</p>\n\n<pre><code>>>> s = pd.Series(np.nan, index=[49,48,47,46,45, 1, 2, 3, 4, 5])\n\n>>> s\n\n49 NaN\n\n48 NaN\n\n47 NaN\n\n46 NaN\n\n45 NaN\n\n1 NaN\n\n2 NaN\n\n3 NaN\n\n4 NaN\n\n5 NaN\n\n</code></pre>\n\n<p>We'll look at slicing with the integer value <code>3</code>.</p>\n\n<p>In this case, <code>s.iloc[:3]</code> returns us the first 3 rows (since it treats 3 as a position) and <code>s.loc[:3]</code> returns us the first 8 rows (since it treats 3 as a label):</p>\n\n<pre><code>>>> s.iloc[:3] # slice the first three rows\n\n49 NaN\n\n48 NaN\n\n47 NaN\n\n>>> s.loc[:3] # slice up to and including label 3\n\n49 NaN\n\n48 NaN\n\n47 NaN\n\n46 NaN\n\n45 NaN\n\n1 NaN\n\n2 NaN\n\n3 NaN\n\n>>> s.ix[:3] # the integer is in the index so s.ix[:3] works like loc\n\n49 NaN\n\n48 NaN\n\n47 NaN\n\n46 NaN\n\n45 NaN\n\n1 NaN\n\n2 NaN\n\n3 NaN\n\n</code></pre>\n\n<p>Notice <code>s.ix[:3]</code> returns the same Series as <code>s.loc[:3]</code> since it looks for the label first rather than working on the position (and the index for <code>s</code> is of integer type).</p>\n\n<p>What if we try with an integer label that isn't in the index (say <code>6</code>)?</p>\n\n<p>Here <code>s.iloc[:6]</code> returns the first 6 rows of the Series as expected. However, <code>s.loc[:6]</code> raises a KeyError since <code>6</code> is not in the index. </p>\n\n<pre><code>>>> s.iloc[:6]\n\n49 NaN\n\n48 NaN\n\n47 NaN\n\n46 NaN\n\n45 NaN\n\n1 NaN\n\n>>> s.loc[:6]\n\nKeyError: 6\n\n>>> s.ix[:6]\n\nKeyError: 6\n\n</code></pre>\n\n<p>As per the subtleties noted above, <code>s.ix[:6]</code> now raises a KeyError because it tries to work like <code>loc</code> but can't find a <code>6</code> in the index. Because our index is of integer type <code>ix</code> doesn't fall back to behaving like <code>iloc</code>.</p>\n\n<p>If, however, our index was of mixed type, given an integer <code>ix</code> would behave like <code>iloc</code> immediately instead of raising a KeyError:</p>\n\n<pre><code>>>> s2 = pd.Series(np.nan, index=['a','b','c','d','e', 1, 2, 3, 4, 5])\n\n>>> s2.index.is_mixed() # index is mix of different types\n\nTrue\n\n>>> s2.ix[:6] # now behaves like iloc given integer\n\na NaN\n\nb NaN\n\nc NaN\n\nd NaN\n\ne NaN\n\n1 NaN\n\n</code></pre>\n\n<p>Keep in mind that <code>ix</code> can still accept non-integers and behave like <code>loc</code>:</p>\n\n<pre><code>>>> s2.ix[:'c'] # behaves like loc given non-integer\n\na NaN\n\nb NaN\n\nc NaN\n\n</code></pre>\n\n<p>As general advice, if you're only indexing using labels, or only indexing using integer positions, stick with <code>loc</code> or <code>iloc</code> to avoid unexpected results - try not use <code>ix</code>.</p>\n\n<hr>\n\n<h3>Combining position-based and label-based indexing</h3>\n\n<p>Sometimes given a DataFrame, you will want to mix label and positional indexing methods for the rows and columns.</p>\n\n<p>For example, consider the following DataFrame. How best to slice the rows up to and including 'c' <em>and</em> take the first four columns?</p>\n\n<pre><code>>>> df = pd.DataFrame(np.nan, \n\n index=list('abcde'),\n\n columns=['x','y','z', 8, 9])\n\n>>> df\n\n x y z 8 9\n\na NaN NaN NaN NaN NaN\n\nb NaN NaN NaN NaN NaN\n\nc NaN NaN NaN NaN NaN\n\nd NaN NaN NaN NaN NaN\n\ne NaN NaN NaN NaN NaN\n\n</code></pre>\n\n<p>In earlier versions of pandas (before 0.20.0) <code>ix</code> lets you do this quite neatly - we can slice the rows by label and the columns by position (note that for the columns, <code>ix</code> will default to position-based slicing since <code>4</code> is not a column name):</p>\n\n<pre><code>>>> df.ix[:'c', :4]\n\n x y z 8\n\na NaN NaN NaN NaN\n\nb NaN NaN NaN NaN\n\nc NaN NaN NaN NaN\n\n</code></pre>\n\n<p>In later versions of pandas, we can achieve this result using <code>iloc</code> and the help of another method:</p>\n\n<pre><code>>>> df.iloc[:df.index.get_loc('c') + 1, :4]\n\n x y z 8\n\na NaN NaN NaN NaN\n\nb NaN NaN NaN NaN\n\nc NaN NaN NaN NaN\n\n</code></pre>\n\n<p><a href="http://pandas.pydata.org/pandas-docs/version/0.19.1/generated/pandas.Index.get_loc.html" rel="noreferrer"><code>get_loc()</code></a> is an index method meaning "get the position of the label in this index". Note that since slicing with <code>iloc</code> is exclusive of its endpoint, we must add 1 to this value if we want row 'c' as well.</p>\n\n<p>There are further examples in pandas' documentation <a href="http://pandas-docs.github.io/pandas-docs-travis/indexing.html#ix-indexer-is-deprecated" rel="noreferrer">here</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	364
How would you make a comma-separated string from a list of strings?	<pre><code>my_list = ['a', 'b', 'c', 'd']\n\nmy_string = ','.join(my_list)\n\n</code></pre>\n\n<pre><code>'a,b,c,d'\n\n</code></pre>\n\n<p>This won't work if the list contains integers</p>\n\n<hr>\n\n<p>And if the list contains non-string types (such as integers, floats, bools, None) then do:</p>\n\n<pre><code>my_string = ','.join(map(str, my_list)) \n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	365
Does Python have âprivateâ variables in classes?	<p>It's cultural. In Python, you don't write to other classes' instance or class variables. In Java, nothing prevents you from doing the same if you <em>really</em> want to - after all, you can always edit the source of the class itself to achieve the same effect. Python drops that pretence of security and encourages programmers to be responsible. In practice, this works very nicely.</p>\n\n<p>If you want to emulate private variables for some reason, you can always use the <code>__</code> prefix from <a href="https://www.python.org/dev/peps/pep-0008/#method-names-and-instance-variables" rel="noreferrer">PEP 8</a>. Python mangles the names of variables like <code>__foo</code> so that they're not easily visible to code outside the class that contains them (although you <em>can</em> get around it if you're determined enough, just like you <em>can</em> get around Java's protections if you work at it).</p>\n\n<p>By the same convention, the <code>_</code> prefix means <strong>stay away even if you're not technically prevented from doing so</strong>. You don't play around with another class's variables that look like <code>__foo</code> or <code>_bar</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	366
How to get a function name as a string?	<pre><code>my_function.__name__\n\n</code></pre>\n\n<p>Using <code>__name__</code> is the preferred method as it applies uniformly. Unlike <code>func_name</code>, it works on built-in functions as well:</p>\n\n<pre><code>>>> import time\n\n>>> time.time.func_name\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in ?\n\nAttributeError: 'builtin_function_or_method' object has no attribute 'func_name'\n\n>>> time.time.__name__ \n\n'time'\n\n</code></pre>\n\n<p>Also the double underscores indicate to the reader this is a special attribute. As a bonus, classes and modules have a <code>__name__</code> attribute too, so you only have remember one special name.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	367
How to get the current time in Python	<p>You can use <a href="http://docs.python.org/3.3/library/time.html?highlight=time.strftime#time.strftime" rel="noreferrer"><code>time.strftime()</code></a>: </p>\n\n<pre><code>>>> from time import gmtime, strftime\n\n>>> strftime("%Y-%m-%d %H:%M:%S", gmtime())\n\n'2009-01-05 22:14:39'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	368
Correct way to write line to file?	<p>You should use the <code>print()</code> function which is available since Python 2.6+</p>\n\n<pre><code>from __future__ import print_function # Only needed for Python 2\n\nprint("hi there", file=f)\n\n</code></pre>\n\n<p>For Python 3 you don't need the <code>import</code>, since the <code>print()</code> function is the default.</p>\n\n<p>The alternative would be to use:</p>\n\n<pre><code>f = open('myfile', 'w')\n\nf.write('hi there ') # python will convert to os.linesep\n\nf.close() # you can omit in most cases as the destructor will call it\n\n</code></pre>\n\n<p>Quoting from <a href="https://docs.python.org/2/tutorial/inputoutput.html#reading-and-writing-files">Python documentation</a> regarding newlines:</p>\n\n<blockquote>\n\n <p>On output, if newline is None, any <code>' '</code> characters written are translated to the system default line separator, <code>os.linesep</code>. If newline is <code>''</code>, no translation takes place. If newline is any of the other legal values, any <code>' '</code> characters written are translated to the given string.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	369
Can someone explain __all__ in Python?	<p>Linked to, but not explicitly mentioned here, is exactly when <code>__all__</code> is used. It is a list of strings defining what symbols in a module will be exported when <code>from <module> import *</code> is used on the module.</p>\n\n<p>For example, the following code in a <code>foo.py</code> explicitly exports the symbols <code>bar</code> and <code>baz</code>:</p>\n\n<pre><code>__all__ = ['bar', 'baz']\n\nwaz = 5\n\nbar = 10\n\ndef baz(): return 'baz'\n\n</code></pre>\n\n<p>These symbols can then be imported like so:</p>\n\n<pre><code>from foo import * print(bar)\n\nprint(baz)\n\n# The following will trigger an exception, as "waz" is not exported by the module\n\nprint(waz)\n\n</code></pre>\n\n<p>If the <code>__all__</code> above is commented out, this code will then execute to completion, as the default behaviour of <code>import *</code> is to import all symbols that do not begin with an underscore, from the given namespace.</p>\n\n<p>Reference: <a href="https://docs.python.org/tutorial/modules.html#importing-from-a-package" rel="noreferrer">https://docs.python.org/tutorial/modules.html#importing-from-a-package</a></p>\n\n<p><strong>NOTE:</strong> <code>__all__</code> affects the <code>from <module> import *</code> behavior only. Members that are not mentioned in <code>__all__</code> are still accessible from outside the module and can be imported with <code>from <module> import <member></code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	370
How do you read from stdin?	<p>You could use the <a href="http://docs.python.org/library/fileinput.html" rel="noreferrer"><code>fileinput</code></a> module:</p>\n\n<pre><code>import fileinput\n\nfor line in fileinput.input():\n\n pass\n\n</code></pre>\n\n<p><a href="http://docs.python.org/library/fileinput.html" rel="noreferrer"><code>fileinput</code></a> will loop through all the lines in the input specified as file names given in command-line arguments, or the standard input if no arguments are provided.</p>\n\n<p>Note: <code>line</code> will contain a trailing newline; to remove it use <code>line.rstrip()</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	371
String formatting: % vs. .format	<p>To answer your first question... <code>.format</code> just seems more sophisticated in many ways. An annoying thing about <code>%</code> is also how it can either take a variable or a tuple. You'd think the following would always work:</p>\n\n<pre><code>"hi there %s" % name\n\n</code></pre>\n\n<p>yet, if <code>name</code> happens to be <code>(1, 2, 3)</code>, it will throw a <code>TypeError</code>. To guarantee that it always prints, you'd need to do</p>\n\n<pre><code>"hi there %s" % (name,) # supply the single argument as a single-item tuple\n\n</code></pre>\n\n<p>which is just ugly. <code>.format</code> doesn't have those issues. Also in the second example you gave, the <code>.format</code> example is much cleaner looking.</p>\n\n<p>Why would you not use it? </p>\n\n<ul>\n\n<li>not knowing about it (me before reading this)</li>\n\n<li>having to be compatible with Python 2.5</li>\n\n</ul>\n\n<hr>\n\n<p>To answer your second question, string formatting happens at the same time as any other operation - when the string formatting expression is evaluated. And Python, not being a lazy language, evaluates expressions before calling functions, so in your <code>log.debug</code> example, the expression <code>"some debug info: %s"%some_info</code>will first evaluate to, e.g. <code>"some debug info: roflcopters are active"</code>, then that string will be passed to <code>log.debug()</code>. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	372
Display number with leading zeros	<p>You can use <a href="https://docs.python.org/2/library/stdtypes.html#str.zfill" rel="noreferrer"><code>str.zfill</code></a>:</p>\n\n<pre><code>print(str(1).zfill(2))\n\nprint(str(10).zfill(2))\n\nprint(str(100).zfill(2))\n\n</code></pre>\n\n<p>prints:</p>\n\n<pre><code>01\n\n10\n\n100\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	373
How to print a date in a regular format?	<h2>The WHY: dates are objects</h2>\n\n<p>In Python, dates are objects. Therefore, when you manipulate them, you manipulate objects, not strings, not timestamps nor anything.</p>\n\n<p>Any object in Python have TWO string representations:</p>\n\n<ul>\n\n<li><p>The regular representation that is used by "print", can be get using the <code>str()</code> function. It is most of the time the most common human readable format and is used to ease display. So <code>str(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'2008-11-22 19:53:42'</code>. </p></li>\n\n<li><p>The alternative representation that is used to represent the object nature (as a data). It can be get using the <code>repr()</code> function and is handy to know what kind of data your manipulating while you are developing or debugging. <code>repr(datetime.datetime(2008, 11, 22, 19, 53, 42))</code> gives you <code>'datetime.datetime(2008, 11, 22, 19, 53, 42)'</code>.</p></li>\n\n</ul>\n\n<p>What happened is that when you have printed the date using "print", it used <code>str()</code> so you could see a nice date string. But when you have printed <code>mylist</code>, you have printed a list of objects and Python tried to represent the set of data, using <code>repr()</code>.</p>\n\n<h2>The How: what do you want to do with that?</h2>\n\n<p>Well, when you manipulate dates, keep using the date objects all long the way. They got thousand of useful methods and most of the Python API expect dates to be objects.</p>\n\n<p>When you want to display them, just use <code>str()</code>. In Python, the good practice is to explicitly cast everything. So just when it's time to print, get a string representation of your date using <code>str(date)</code>.</p>\n\n<p>One last thing. When you tried to print the dates, you printed <code>mylist</code>. If you want to print a date, you must print the date objects, not their container (the list).</p>\n\n<p>E.G, you want to print all the date in a list :</p>\n\n<pre><code>for date in mylist :\n\n print str(date)\n\n</code></pre>\n\n<p>Note that <strong><em>in that specific case</em></strong>, you can even omit <code>str()</code> because print will use it for you. But it should not become a habit :-)</p>\n\n<h2>Practical case, using your code</h2>\n\n<pre><code>import datetime\n\nmylist = []\n\ntoday = datetime.date.today()\n\nmylist.append(today)\n\nprint mylist[0] # print the date object, not the container ;-)\n\n2008-11-22\n\n# It's better to always use str() because :\n\nprint "This is a new day : ", mylist[0] # will work\n\n>>> This is a new day : 2008-11-22\n\nprint "This is a new day : " + mylist[0] # will crash\n\n>>> cannot concatenate 'str' and 'datetime.date' objects\n\nprint "This is a new day : " + str(mylist[0]) \n\n>>> This is a new day : 2008-11-22\n\n</code></pre>\n\n<h2>Advanced date formatting</h2>\n\n<p>Dates have a default representation, but you may want to print them in a specific format. In that case, you can get a custom string representation using the <code>strftime()</code> method.</p>\n\n<p><code>strftime()</code> expects a string pattern explaining how you want to format your date.</p>\n\n<p>E.G : </p>\n\n<pre><code>print today.strftime('We are the %d, %b %Y')\n\n>>> 'We are the 22, Nov 2008'\n\n</code></pre>\n\n<p>All the letter after a <code>"%"</code> represent a format for something :</p>\n\n<ul>\n\n<li><code>%d</code> is the day number</li>\n\n<li><code>%m</code> is the month number</li>\n\n<li><code>%b</code> is the month abbreviation</li>\n\n<li><code>%y</code> is the year last two digits</li>\n\n<li><code>%Y</code> is the all year</li>\n\n</ul>\n\n<p>etc</p>\n\n<p><a href="http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer">Have a look at the official documentation</a>, or <a href="http://strftime.org" rel="noreferrer">McCutchen's quick reference</a> you can't know them all.</p>\n\n<p>Since <a href="http://www.python.org/dev/peps/pep-3101/" rel="noreferrer">PEP3101</a>, every object can have its own format used automatically by the method format of any string. In the case of the datetime, the format is the same used in\n\nstrftime. So you can do the same as above like this:</p>\n\n<pre><code>print "We are the {:%d, %b %Y}".format(today)\n\n>>> 'We are the 22, Nov 2008'\n\n</code></pre>\n\n<p>The advantage of this form is that you can also convert other objects at the same time.<br>\n\nWith the introduction of <a href="https://docs.python.org/3/reference/lexical_analysis.html#formatted-string-literals" rel="noreferrer">Formatted string literals</a> (since Python 3.6, 2016-12-23) this can be written as</p>\n\n<pre><code>import datetime\n\nf"{datetime.datetime.now():%Y-%m-%d}"\n\n>>> '2017-06-15'\n\n</code></pre>\n\n<h2>Localization</h2>\n\n<p>Dates can automatically adapt to the local language and culture if you use them the right way, but it's a bit complicated. Maybe for another question on SO(Stack Overflow) ;-)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	374
How can I add new keys to a dictionary?	<p>I feel like consolidating info about Python dictionaries:</p>\n\n<h3>Creating an empty dictionary</h3>\n\n<pre><code>data = {}\n\n# OR\n\ndata = dict()\n\n</code></pre>\n\n<h3>Creating a dictionary with initial values</h3>\n\n<pre><code>data = {'a': 1, 'b': 2, 'c': 3}\n\n# OR\n\ndata = dict(a=1, b=2, c=3)\n\n# OR\n\ndata = {k: v for k, v in (('a', 1), ('b',2), ('c',3))}\n\n</code></pre>\n\n<h3>Inserting/Updating a single value</h3>\n\n<pre><code>data['a'] = 1 # Updates if 'a' exists, else adds 'a'\n\n# OR\n\ndata.update({'a': 1})\n\n# OR\n\ndata.update(dict(a=1))\n\n# OR\n\ndata.update(a=1)\n\n</code></pre>\n\n<h3>Inserting/Updating multiple values</h3>\n\n<pre><code>data.update({'c':3,'d':4}) # Updates 'c' and adds 'd'\n\n</code></pre>\n\n<h3>Creating a merged dictionary without modifying originals</h3>\n\n<pre><code>data3 = {}\n\ndata3.update(data) # Modifies data3, not data\n\ndata3.update(data2) # Modifies data3, not data2\n\n</code></pre>\n\n<h3>Deleting items in dictionary</h3>\n\n<pre><code>del data[key] # Removes specific element in a dictionary\n\ndata.pop(key) # Removes the key & returns the value\n\ndata.clear() # Clears entire dictionary\n\n</code></pre>\n\n<h3>Check if a key is already in dictionary</h3>\n\n<pre><code>key in data\n\n</code></pre>\n\n<h3>Iterate through pairs in a dictionary</h3>\n\n<pre><code>for key in data: # Iterates just through the keys, ignoring the values\n\nfor key, value in d.items(): # Iterates through the pairs\n\nfor key in d.keys(): # Iterates just through key, ignoring the values\n\nfor value in d.values(): # Iterates just through value, ignoring the keys\n\n</code></pre>\n\n<h3>Create a dictionary from two lists</h3>\n\n<pre><code>data = dict(zip(list_with_keys, list_with_values))\n\n</code></pre>\n\n<hr>\n\n<h1>New to Python 3.5</h1>\n\n<h3>Creating a merged dictionary without modifying originals:</h3>\n\n<p>This uses a new featrue called <em>dictionary unpacking</em>.</p>\n\n<pre><code>data = {**data1, **data2, **data3}\n\n</code></pre>\n\n<hr>\n\n<h1>New to Python 3.9</h1>\n\n<h3>Update or add values for an existing dictionary</h3>\n\n<p>The <em>update operator</em> <code>|=</code> now works for dictionaries:</p>\n\n<pre><code>data |= {'c':3,'d':4}\n\n</code></pre>\n\n<h3>Creating a merged dictionary without modifying originals</h3>\n\n<p>The <em>merge operator</em> <code>|</code> now works for dictionaries:</p>\n\n<pre><code>data = data1 | {'c':3,'d':4}\n\n</code></pre>\n\n<hr>\n\n<p>Feel free to add more!</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	375
How to install lxml on Ubuntu	<p>Since you're on Ubuntu, don't bother with those source packages. Just install those development packages using apt-get.</p>\n\n<pre><code>apt-get install libxml2-dev libxslt1-dev python-dev\n\n</code></pre>\n\n<p>If you're happy with a possibly older version of lxml altogether though, you could try</p>\n\n<pre><code>apt-get install python-lxml\n\n</code></pre>\n\n<p>and be done with it. :)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	376
How can I sort a dictionary by key?	<p>Standard Python dictionaries are unordered. Even if you sorted the (key,value) pairs, you wouldn't be able to store them in a <code>dict</code> in a way that would preserve the ordering.</p>\n\n<p>The easiest way is to use <a href="http://docs.python.org/library/collections.html#collections.OrderedDict"><code>OrderedDict</code></a>, which remembers the order in which the elements have been inserted:</p>\n\n<pre><code>In [1]: import collections\n\nIn [2]: d = {2:3, 1:89, 4:5, 3:0}\n\nIn [3]: od = collections.OrderedDict(sorted(d.items()))\n\nIn [4]: od\n\nOut[4]: OrderedDict([(1, 89), (2, 3), (3, 0), (4, 5)])\n\n</code></pre>\n\n<p>Never mind the way <code>od</code> is printed out; it'll work as expected:</p>\n\n<pre><code>In [11]: od[1]\n\nOut[11]: 89\n\nIn [12]: od[3]\n\nOut[12]: 0\n\nIn [13]: for k, v in od.iteritems(): print k, v\n\n ....: \n\n1 89\n\n2 3\n\n3 0\n\n4 5\n\n</code></pre>\n\n<h2>Python 3</h2>\n\n<p>For Python 3 users, one needs to use the <code>.items()</code> instead of <code>.iteritems()</code>:</p>\n\n<pre><code>In [13]: for k, v in od.items(): print(k, v)\n\n ....: \n\n1 89\n\n2 3\n\n3 0\n\n4 5\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	377
How to import the class within the same directory or sub directory?	<h1>Python 2</h1>\n\n<p>Make an empty file called <code>__init__.py</code> in the same directory as the files. That will signify to Python that it's "ok to import from this directory".</p>\n\n<p>Then just do...</p>\n\n<pre><code>from user import User\n\nfrom dir import Dir\n\n</code></pre>\n\n<p>The same holds true if the files are in a subdirectory - put an <code>__init__.py</code> in the subdirectory as well, and then use regular import statements, with dot notation. For each level of directory, you need to add to the import path. </p>\n\n<pre><code>bin/\n\n main.py\n\n classes/\n\n user.py\n\n dir.py\n\n</code></pre>\n\n<p>So if the directory was named "classes", then you'd do this:</p>\n\n<pre><code>from classes.user import User\n\nfrom classes.dir import Dir\n\n</code></pre>\n\n<h1>Python 3</h1>\n\n<p>Same as previous, but prefix the module name with a <code>.</code> if not using a subdirectory:</p>\n\n<pre><code>from .user import User\n\nfrom .dir import Dir\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	378
How do I get the day of week given a date?	<p>Use <code>weekday()</code> (<a href="http://docs.python.org/library/datetime.html#datetime.date.weekday">docs</a>):</p>\n\n<pre><code>>>> import datetime\n\n>>> datetime.datetime.today()\n\ndatetime.datetime(2012, 3, 23, 23, 24, 55, 173504)\n\n>>> datetime.datetime.today().weekday()\n\n4\n\n</code></pre>\n\n<p>From the documentation:</p>\n\n<blockquote>\n\n <p>Return the day of the week as an integer, where Monday is 0 and Sunday is 6.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	379
Check if a Python list item contains a string inside another string	<p>If you only want to check for the presence of <code>abc</code> in any string in the list, you could try</p>\n\n<pre><code>some_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']\n\nif any("abc" in s for s in some_list):\n\n # whatever\n\n</code></pre>\n\n<p>If you really want to get all the items containing <code>abc</code>, use</p>\n\n<pre><code>matching = [s for s in some_list if "abc" in s]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	380
What is the easiest way to remove all packages installed by pip?	<p>I've found this snippet as an alternative solution. It's a more graceful removal of libraries than remaking the virtualenv:</p>\n\n<pre><code>pip freeze | xargs pip uninstall -y\n\n</code></pre>\n\n<hr>\n\n<p>In case you have packages installed via VCS, you need to exclude those lines and remove the packages manually (elevated from the comments below):</p>\n\n<pre><code>pip freeze | grep -v "^-e" | xargs pip uninstall -y\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	381
pip install from git repo branch	<p>Prepend the url prefix <code>git+</code> (See <a href="https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support">VCS Support</a>):</p>\n\n<pre><code>pip install git+https://github.com/tangentlabs/django-oscar-paypal.git@issue/34/oscar-0.6\n\n</code></pre>\n\n<p>And specify the branch name without the leading <code>/</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	382
How do I update pip itself from inside my virtual environment?	<p><code>pip</code> is just a <a href="https://pypi.python.org/pypi/pip">PyPI package</a> like any other; you could use it to upgrade itself the same way you would upgrade any package:</p>\n\n<pre><code>pip install --upgrade pip\n\n</code></pre>\n\n<p>On Windows the <a href="https://pip.pypa.io/en/stable/installing/#upgrading-pip">recommended command</a> is:</p>\n\n<pre><code>python -m pip install --upgrade pip\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	383
Best way to strip punctuation from a string	<p>From an efficiency perspective, you're not going to beat </p>\n\n<pre><code>s.translate(None, string.punctuation)\n\n</code></pre>\n\n<p>For higher versions of Python use the following code:</p>\n\n<pre><code>s.translate(str.maketrans('', '', string.punctuation))\n\n</code></pre>\n\n<p>It's performing raw string operations in C with a lookup table - there's not much that will beat that but writing your own C code.</p>\n\n<p>If speed isn't a worry, another option though is:</p>\n\n<pre><code>exclude = set(string.punctuation)\n\ns = ''.join(ch for ch in s if ch not in exclude)\n\n</code></pre>\n\n<p>This is faster than s.replace with each char, but won't perform as well as non-pure python approaches such as regexes or string.translate, as you can see from the below timings. For this type of problem, doing it at as low a level as possible pays off.</p>\n\n<p>Timing code:</p>\n\n<pre><code>import re, string, timeit\n\ns = "string. With. Punctuation"\n\nexclude = set(string.punctuation)\n\ntable = string.maketrans("","")\n\nregex = re.compile('[%s]' % re.escape(string.punctuation))\n\ndef test_set(s):\n\n return ''.join(ch for ch in s if ch not in exclude)\n\ndef test_re(s): # From Vinko's solution, with fix.\n\n return regex.sub('', s)\n\ndef test_trans(s):\n\n return s.translate(table, string.punctuation)\n\ndef test_repl(s): # From S.Lott's solution\n\n for c in string.punctuation:\n\n s=s.replace(c,"")\n\n return s\n\nprint "sets :",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)\n\nprint "regex :",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)\n\nprint "translate :",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)\n\nprint "replace :",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)\n\n</code></pre>\n\n<p>This gives the following results:</p>\n\n<pre><code>sets : 19.8566138744\n\nregex : 6.86155414581\n\ntranslate : 2.12455511093\n\nreplace : 28.4436721802\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	384
Does Django scale?	<ol>\n\n<li><p><strong>"What are the largest sites built on Django today?"</strong></p>\n\n<p>There isn't any single place that collects information about traffic on Django built sites, so I'll have to take a stab at it using data from various locations. First, we have a list of Django sites on the front page of <a href="http://www.djangoproject.com/" rel="noreferrer">the main Django project page</a> and then a list of Django built sites at <a href="http://www.djangosites.org/" rel="noreferrer">djangosites.org</a>. Going through the lists and picking some that I know have decent traffic we see:</p>\n\n<ul>\n\n<li><p><strong><a href="http://instagram.com" rel="noreferrer">Instagram</a></strong>: <a href="http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances" rel="noreferrer">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a>.</p></li>\n\n<li><p><strong><a href="http://pinterest.com/" rel="noreferrer">Pinterest</a></strong>: <a href="http://www.alexa.com/siteinfo/Pinterest.com" rel="noreferrer">Alexa rank 37 (21.4.2015)</a> and 70 Million users in 2013</p></li>\n\n<li><p><strong><a href="http://bitbucket.org/" rel="noreferrer">Bitbucket</a></strong>: <a href="https://blog.bitbucket.org/2015/02/05/bitbucket-2014-in-review/" rel="noreferrer">200TB of Code and 2.500.000 Users</a></p></li>\n\n<li><p><strong><a href="http://disqus.com" rel="noreferrer">Disqus</a></strong>: <a href="http://pyvideo.org/video/418/pycon-2011--disqus--serving-400-million-people-wi" rel="noreferrer">Serving 400 million people with Python</a>.</p></li>\n\n<li><p><strong><a href="http://curse.com/" rel="noreferrer">curse.com</a></strong>: <a href="http://www.quantcast.com/curse.com" rel="noreferrer">600k daily visits</a>.</p></li>\n\n<li><p><strong><a href="http://tabblo.com/" rel="noreferrer">tabblo.com</a></strong>: <a href="http://www.quantcast.com/tabblo.com" rel="noreferrer">44k daily visits</a>, see Ned Batchelder's posts <a href="http://nedbatchelder.com/blog/200902/infrastructure_for_modern_web_sites.html" rel="noreferrer">Infrastructure for modern web sites</a>.</p></li>\n\n<li><p><strong><a href="http://chesspark.com/" rel="noreferrer">chesspark.com</a></strong>: <a href="http://www.alexa.com/siteinfo/chesspark.com" rel="noreferrer">Alexa</a> rank about 179k.</p></li>\n\n<li><p><strong><a href="http://pownce.com/" rel="noreferrer">pownce.com</a></strong> (no longer active): <a href="http://www.alexa.com/siteinfo/pownce.com" rel="noreferrer">alexa</a> rank about 65k.\n\nMike Malone of Pownce, in his EuroDjangoCon presentation on <strong><a href="http://www.slideshare.net/road76/scaling-django" rel="noreferrer">Scaling Django Web Apps</a></strong> says "hundreds of hits per second". This is a very good presentation on how to scale Django, and makes some good points including (current) shortcomings in Django scalability.</p></li>\n\n<li><p>HP had a site built with Django 1.5: <a href="http://www.eprintcenter.com" rel="noreferrer">ePrint center</a>. However, as for novemer/2015 the entire website was migrated and this link is just a redirect. This website was a world-wide service attending subscription to Instant Ink and related services HP offered (*).</p></li>\n\n</ul></li>\n\n<li><p><strong>"Can Django deal with 100,000 users daily, each visiting the site for a couple of hours?"</strong></p>\n\n<p>Yes, see above.</p></li>\n\n<li><p><strong>"Could a site like Stack Overflow run on Django?"</strong></p>\n\n<p>My gut feeling is yes but, as others answered and Mike Malone mentions in his presentation, database design is critical. Strong proof might also be found at www.cnprog.com if we can find any reliable traffic stats. Anyway, it's not just something that will happen by throwing together a bunch of Django models :)</p></li>\n\n</ol>\n\n<p>There are, of course, many more sites and bloggers of interest, but I have got to stop somewhere!</p>\n\n<hr>\n\n<p>Blog post about <a href="http://web.archive.org/web/20130307032621/http://concentricsky.com/blog/2009/oct/michaelmoorecom" rel="noreferrer">Using Django to build high-traffic site michaelmoore.com</a> described as a <a href="http://www.alexa.com/siteinfo/http%3A%2F%2Fmichaelmoore.com" rel="noreferrer">top 10,000 website</a>. <a href="http://www.quantcast.com/michaelmoore.com" rel="noreferrer">Quantcast stats</a> and <a href="http://siteanalytics.compete.com/michaelmoore.com/" rel="noreferrer">compete.com stats</a>.</p>\n\n<hr>\n\n<p><sub>(*) The author of the edit, including such reference, used to work as outsourced developer in that project.</sub></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	385
Is there a difference between "==" and "is"?	<p><code>is</code> will return <code>True</code> if two variables point to the same object, <code>==</code> if the objects referred to by the variables are equal.</p>\n\n<pre><code>>>> a = [1, 2, 3]\n\n>>> b = a\n\n>>> b is a \n\nTrue\n\n>>> b == a\n\nTrue\n\n# Make a new copy of list `a` via the slice operator, \n\n# and assign it to variable `b`\n\n>>> b = a[:] \n\n>>> b is a\n\nFalse\n\n>>> b == a\n\nTrue\n\n</code></pre>\n\n<p>In your case, the second test only works because Python caches small integer objects, which is an implementation detail. For larger integers, this does not work:</p>\n\n<pre><code>>>> 1000 is 10**3\n\nFalse\n\n>>> 1000 == 10**3\n\nTrue\n\n</code></pre>\n\n<p>The same holds true for string literals:</p>\n\n<pre><code>>>> "a" is "a"\n\nTrue\n\n>>> "aa" is "a" * 2\n\nTrue\n\n>>> x = "a"\n\n>>> "aa" is x * 2\n\nFalse\n\n>>> "aa" is intern(x*2)\n\nTrue\n\n</code></pre>\n\n<p>Please see <a href="https://stackoverflow.com/questions/26595/is-there-any-difference-between-foo-is-none-and-foo-none">this question</a> as well.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	386
Reverse / invert a dictionary mapping	<p>For Python 2.7.x</p>\n\n<pre><code>inv_map = {v: k for k, v in my_map.iteritems()}\n\n</code></pre>\n\n<p>For Python 3+:</p>\n\n<pre><code>inv_map = {v: k for k, v in my_map.items()}\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	387
Writing a list to a file with Python	<p>You can use a loop:</p>\n\n<pre><code>with open('your_file.txt', 'w') as f:\n\n for item in my_list:\n\n f.write("%s " % item)\n\n</code></pre>\n\n<p>In Python 2, you can also use</p>\n\n<pre><code>with open('your_file.txt', 'w') as f:\n\n for item in my_list:\n\n print >> f, item\n\n</code></pre>\n\n<p>If you're keen on a single function call, at least remove the square brackets <code>[]</code>, so that the strings to be printed get made one at a time (a genexp rather than a listcomp) -- no reason to take up all the memory required to materialize the whole list of strings.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	388
Adding a Method to an Existing Object Instance	<p>In Python, there is a difference between functions and bound methods.</p>\n\n<pre><code>>>> def foo():\n\n... print "foo"\n\n...\n\n>>> class A:\n\n... def bar( self ):\n\n... print "bar"\n\n...\n\n>>> a = A()\n\n>>> foo\n\n<function foo at 0x00A98D70>\n\n>>> a.bar\n\n<bound method A.bar of <__main__.A instance at 0x00A9BC88>>\n\n>>>\n\n</code></pre>\n\n<p>Bound methods have been "bound" (how descriptive) to an instance, and that instance will be passed as the first argument whenever the method is called.</p>\n\n<p>Callables that are attributes of a class (as opposed to an instance) are still unbound, though, so you can modify the class definition whenever you want:</p>\n\n<pre><code>>>> def fooFighters( self ):\n\n... print "fooFighters"\n\n...\n\n>>> A.fooFighters = fooFighters\n\n>>> a2 = A()\n\n>>> a2.fooFighters\n\n<bound method A.fooFighters of <__main__.A instance at 0x00A9BEB8>>\n\n>>> a2.fooFighters()\n\nfooFighters\n\n</code></pre>\n\n<p>Previously defined instances are updated as well (as long as they haven't overridden the attribute themselves):</p>\n\n<pre><code>>>> a.fooFighters()\n\nfooFighters\n\n</code></pre>\n\n<p>The problem comes when you want to attach a method to a single instance:</p>\n\n<pre><code>>>> def barFighters( self ):\n\n... print "barFighters"\n\n...\n\n>>> a.barFighters = barFighters\n\n>>> a.barFighters()\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: barFighters() takes exactly 1 argument (0 given)\n\n</code></pre>\n\n<p>The function is not automatically bound when it's attached directly to an instance:</p>\n\n<pre><code>>>> a.barFighters\n\n<function barFighters at 0x00A98EF0>\n\n</code></pre>\n\n<p>To bind it, we can use the <a href="http://docs.python.org/library/types.html?highlight=methodtype#module-types" rel="noreferrer">MethodType function in the types module</a>:</p>\n\n<pre><code>>>> import types\n\n>>> a.barFighters = types.MethodType( barFighters, a )\n\n>>> a.barFighters\n\n<bound method ?.barFighters of <__main__.A instance at 0x00A9BC88>>\n\n>>> a.barFighters()\n\nbarFighters\n\n</code></pre>\n\n<p>This time other instances of the class have not been affected:</p>\n\n<pre><code>>>> a2.barFighters()\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nAttributeError: A instance has no attribute 'barFighters'\n\n</code></pre>\n\n<p>More information can be found by reading about <a href="http://users.rcn.com/python/download/Descriptor.htm" rel="noreferrer">descriptors</a> and <a href="http://www.onlamp.com/pub/a/python/2003/04/17/metaclasses.html" rel="noreferrer">metaclass</a> <a href="http://www.gnosis.cx/publish/programming/metaclass_2.html" rel="noreferrer">programming</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	389
Get statistics for each group (such as count, mean, etc) using pandas GroupBy?	<h2>Quick Answer:</h2>\n\n<p>The simplest way to get row counts per group is by calling <code>.size()</code>, which returns a <code>Series</code>:</p>\n\n<pre><code>df.groupby(['col1','col2']).size()\n\n</code></pre>\n\n<p><br> \n\nUsually you want this result as a <code>DataFrame</code> (instead of a <code>Series</code>) so you can do:</p>\n\n<pre><code>df.groupby(['col1', 'col2']).size().reset_index(name='counts')\n\n</code></pre>\n\n<p><br> \n\nIf you want to find out how to calculate the row counts and other statistics for each group continue reading below.\n\n<br></p>\n\n<hr>\n\n<h2>Detailed example:</h2>\n\n<p>Consider the following example dataframe:</p>\n\n<pre><code>In [2]: df\n\nOut[2]: \n\n col1 col2 col3 col4 col5 col6\n\n0 A B 0.20 -0.61 -0.49 1.49\n\n1 A B -1.53 -1.01 -0.39 1.82\n\n2 A B -0.44 0.27 0.72 0.11\n\n3 A B 0.28 -1.32 0.38 0.18\n\n4 C D 0.12 0.59 0.81 0.66\n\n5 C D -0.13 -1.65 -1.64 0.50\n\n6 C D -1.42 -0.11 -0.18 -0.44\n\n7 E F -0.00 1.42 -0.26 1.17\n\n8 E F 0.91 -0.47 1.35 -0.34\n\n9 G H 1.48 -0.63 -1.14 0.17\n\n</code></pre>\n\n<p>First let's use <code>.size()</code> to get the row counts:</p>\n\n<pre><code>In [3]: df.groupby(['col1', 'col2']).size()\n\nOut[3]: \n\ncol1 col2\n\nA B 4\n\nC D 3\n\nE F 2\n\nG H 1\n\ndtype: int64\n\n</code></pre>\n\n<p>Then let's use <code>.size().reset_index(name='counts')</code> to get the row counts:</p>\n\n<pre><code>In [4]: df.groupby(['col1', 'col2']).size().reset_index(name='counts')\n\nOut[4]: \n\n col1 col2 counts\n\n0 A B 4\n\n1 C D 3\n\n2 E F 2\n\n3 G H 1\n\n</code></pre>\n\n<p><br></p>\n\n<h3>Including results for more statistics</h3>\n\n<p>When you want to calculate statistics on grouped data, it usually looks like this:</p>\n\n<pre><code>In [5]: (df\n\n ...: .groupby(['col1', 'col2'])\n\n ...: .agg({\n\n ...: 'col3': ['mean', 'count'], \n\n ...: 'col4': ['median', 'min', 'count']\n\n ...: }))\n\nOut[5]: \n\n col4 col3 \n\n median min count mean count\n\ncol1 col2 \n\nA B -0.810 -1.32 4 -0.372500 4\n\nC D -0.110 -1.65 3 -0.476667 3\n\nE F 0.475 -0.47 2 0.455000 2\n\nG H -0.630 -0.63 1 1.480000 1\n\n</code></pre>\n\n<p>The result above is a little annoying to deal with because of the nested column labels, and also because row counts are on a per column basis. </p>\n\n<p>To gain more control over the output I usually split the statistics into individual aggregations that I then combine using <code>join</code>. It looks like this:</p>\n\n<pre><code>In [6]: gb = df.groupby(['col1', 'col2'])\n\n ...: counts = gb.size().to_frame(name='counts')\n\n ...: (counts\n\n ...: .join(gb.agg({'col3': 'mean'}).rename(columns={'col3': 'col3_mean'}))\n\n ...: .join(gb.agg({'col4': 'median'}).rename(columns={'col4': 'col4_median'}))\n\n ...: .join(gb.agg({'col4': 'min'}).rename(columns={'col4': 'col4_min'}))\n\n ...: .reset_index()\n\n ...: )\n\n ...: \n\nOut[6]: \n\n col1 col2 counts col3_mean col4_median col4_min\n\n0 A B 4 -0.372500 -0.810 -1.32\n\n1 C D 3 -0.476667 -0.110 -1.65\n\n2 E F 2 0.455000 0.475 -0.47\n\n3 G H 1 1.480000 -0.630 -0.63\n\n</code></pre>\n\n<p><br></p>\n\n<hr>\n\n<h3>Footnotes</h3>\n\n<p>The code used to generate the test data is shown below:</p>\n\n<pre><code>In [1]: import numpy as np\n\n ...: import pandas as pd \n\n ...: \n\n ...: keys = np.array([\n\n ...: ['A', 'B'],\n\n ...: ['A', 'B'],\n\n ...: ['A', 'B'],\n\n ...: ['A', 'B'],\n\n ...: ['C', 'D'],\n\n ...: ['C', 'D'],\n\n ...: ['C', 'D'],\n\n ...: ['E', 'F'],\n\n ...: ['E', 'F'],\n\n ...: ['G', 'H'] \n\n ...: ])\n\n ...: \n\n ...: df = pd.DataFrame(\n\n ...: np.hstack([keys,np.random.randn(10,4).round(2)]), \n\n ...: columns = ['col1', 'col2', 'col3', 'col4', 'col5', 'col6']\n\n ...: )\n\n ...: \n\n ...: df[['col3', 'col4', 'col5', 'col6']] = \\n\n ...: df[['col3', 'col4', 'col5', 'col6']].astype(float)\n\n ...: \n\n</code></pre>\n\n<p><br>\n\n<strong>Disclaimer:</strong></p>\n\n<p>If some of the columns that you are aggregating have null values, then you really want to be looking at the group row counts as an independent aggregation for each column. Otherwise you may be misled as to how many records are actually being used to calculate things like the mean because pandas will drop <code>NaN</code> entries in the mean calculation without telling you about it. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	390
How to retrieve a module's path?	<pre><code>import a_module\n\nprint(a_module.__file__)\n\n</code></pre>\n\n<p>Will actually give you the path to the .pyc file that was loaded, at least on Mac OS X. So I guess you can do:</p>\n\n<pre><code>import os\n\npath = os.path.abspath(a_module.__file__)\n\n</code></pre>\n\n<p>You can also try:</p>\n\n<pre><code>path = os.path.dirname(a_module.__file__)\n\n</code></pre>\n\n<p>To get the module's directory.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	391
Creating a JSON response using Django and Python	<p>I usually use a dictionary, not a list to return JSON content. </p>\n\n<pre><code>import json\n\nfrom django.http import HttpResponse\n\nresponse_data = {}\n\nresponse_data['result'] = 'error'\n\nresponse_data['message'] = 'Some error message'\n\n</code></pre>\n\n<p>Pre-Django 1.7 you'd return it like this:</p>\n\n<pre><code>return HttpResponse(json.dumps(response_data), content_type="application/json")\n\n</code></pre>\n\n<p>For Django 1.7+, use <a href="https://docs.djangoproject.com/en/dev/ref/request-response/#jsonresponse-objects" rel="noreferrer"><code>JsonResponse</code></a> as shown in <a href="https://stackoverflow.com/a/24411716/7376">this SO answer</a> like so : </p>\n\n<pre><code>from django.http import JsonResponse\n\nreturn JsonResponse({'foo':'bar'})\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	392
How to make a flat list out of list of lists?	<p><strong>Note from the author</strong>: This is inefficient. But fun, because <a href="https://en.wikipedia.org/wiki/Monoid#Monoids_in_computer_science" rel="noreferrer">monoids</a> are awesome. It's not appropriate for production Python code.</p>\n\n<pre><code>>>> sum(l, [])\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n</code></pre>\n\n<p>This just sums the elements of iterable passed in the first argument, treating second argument as the initial value of the sum (if not given, <code>0</code> is used instead and this case will give you an error).</p>\n\n<p>Because you are summing nested lists, you actually get <code>[1,3]+[2,4]</code> as a result of <code>sum([[1,3],[2,4]],[])</code>, which is equal to <code>[1,3,2,4]</code>.</p>\n\n<p>Note that only works on lists of lists. For lists of lists of lists, you'll need another solution.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	393
How to use a decimal range() step value?	<p>Rather than using a decimal step directly, it's much safer to express this in terms of how many points you want. Otherwise, floating-point rounding error is likely to give you a wrong result.</p>\n\n<p>You can use the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html" rel="noreferrer">linspace</a> function from the <a href="http://en.wikipedia.org/wiki/NumPy" rel="noreferrer">NumPy</a> library (which isn't part of the standard library but is relatively easy to obtain). <code>linspace</code> takes a number of points to return, and also lets you specify whether or not to include the right endpoint:</p>\n\n<pre><code>>>> np.linspace(0,1,11)\n\narray([ 0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])\n\n>>> np.linspace(0,1,10,endpoint=False)\n\narray([ 0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n\n</code></pre>\n\n<p>If you really want to use a floating-point step value, you can, with <code>numpy.arange</code>.</p>\n\n<pre><code>>>> import numpy as np\n\n>>> np.arange(0.0, 1.0, 0.1)\n\narray([ 0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])\n\n</code></pre>\n\n<p>Floating-point rounding error <em>will</em> cause problems, though. Here's a simple case where rounding error causes <code>arange</code> to produce a length-4 array when it should only produce 3 numbers:</p>\n\n<pre><code>>>> numpy.arange(1, 1.3, 0.1)\n\narray([1. , 1.1, 1.2, 1.3])\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	394
What does the star operator mean, in a function call?	<p>The single star <code>*</code> unpacks the sequence/collection into positional arguments, so you can do this:</p>\n\n<pre><code>def sum(a, b):\n\n return a + b\n\nvalues = (1, 2)\n\ns = sum(*values)\n\n</code></pre>\n\n<p>This will unpack the tuple so that it actually executes as:</p>\n\n<pre><code>s = sum(1, 2)\n\n</code></pre>\n\n<p>The double star <code>**</code> does the same, only using a dictionary and thus named arguments:</p>\n\n<pre><code>values = { 'a': 1, 'b': 2 }\n\ns = sum(**values)\n\n</code></pre>\n\n<p>You can also combine:</p>\n\n<pre><code>def sum(a, b, c, d):\n\n return a + b + c + d\n\nvalues1 = (1, 2)\n\nvalues2 = { 'c': 10, 'd': 15 }\n\ns = sum(*values1, **values2)\n\n</code></pre>\n\n<p>will execute as: </p>\n\n<pre><code>s = sum(1, 2, c=10, d=15)\n\n</code></pre>\n\n<p>Also see section <a href="http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists" rel="noreferrer">4.7.4 - Unpacking Argument Lists</a> of the Python documentation.</p>\n\n<hr>\n\n<p>Additionally you can define functions to take <code>*x</code> and <code>**y</code> arguments, this allows a function to accept any number of positional and/or named arguments that aren't specifically named in the declaration.</p>\n\n<p>Example:</p>\n\n<pre><code>def sum(*values):\n\n s = 0\n\n for v in values:\n\n s = s + v\n\n return s\n\ns = sum(1, 2, 3, 4, 5)\n\n</code></pre>\n\n<p>or with <code>**</code>:</p>\n\n<pre><code>def get_a(**values):\n\n return values['a']\n\ns = get_a(a=1, b=2) # returns 1\n\n</code></pre>\n\n<p>this can allow you to specify a large number of optional parameters without having to declare them.</p>\n\n<p>And again, you can combine:</p>\n\n<pre><code>def sum(*values, **options):\n\n s = 0\n\n for i in values:\n\n s = s + i\n\n if "neg" in options:\n\n if options["neg"]:\n\n s = -s\n\n return s\n\ns = sum(1, 2, 3, 4, 5) # returns 15\n\ns = sum(1, 2, 3, 4, 5, neg=True) # returns -15\n\ns = sum(1, 2, 3, 4, 5, neg=False) # returns 15\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	395
How to drop rows of Pandas DataFrame whose value in a certain column is NaN	<p>This question is already resolved, but... </p>\n\n<p>...also consider the solution suggested by Wouter in <a href="https://stackoverflow.com/questions/13413590/how-to-drop-rows-of-pandas-dataframe-whose-value-of-certain-column-is-nan/13434501#comment18328797_13413590">his original comment</a>. The ability to handle missing data, including <code>dropna()</code>, is built into pandas explicitly. Aside from potentially improved performance over doing it manually, these functions also come with a variety of options which may be useful. </p>\n\n<pre><code>In [24]: df = pd.DataFrame(np.random.randn(10,3))\n\nIn [25]: df.iloc[::2,0] = np.nan; df.iloc[::4,1] = np.nan; df.iloc[::3,2] = np.nan;\n\nIn [26]: df\n\nOut[26]:\n\n 0 1 2\n\n0 NaN NaN NaN\n\n1 2.677677 -1.466923 -0.750366\n\n2 NaN 0.798002 -0.906038\n\n3 0.672201 0.964789 NaN\n\n4 NaN NaN 0.050742\n\n5 -1.250970 0.030561 -2.678622\n\n6 NaN 1.036043 NaN\n\n7 0.049896 -0.308003 0.823295\n\n8 NaN NaN 0.637482\n\n9 -0.310130 0.078891 NaN\n\n</code></pre>\n\n<hr>\n\n<pre><code>In [27]: df.dropna() #drop all rows that have any NaN values\n\nOut[27]:\n\n 0 1 2\n\n1 2.677677 -1.466923 -0.750366\n\n5 -1.250970 0.030561 -2.678622\n\n7 0.049896 -0.308003 0.823295\n\n</code></pre>\n\n<hr>\n\n<pre><code>In [28]: df.dropna(how='all') #drop only if ALL columns are NaN\n\nOut[28]:\n\n 0 1 2\n\n1 2.677677 -1.466923 -0.750366\n\n2 NaN 0.798002 -0.906038\n\n3 0.672201 0.964789 NaN\n\n4 NaN NaN 0.050742\n\n5 -1.250970 0.030561 -2.678622\n\n6 NaN 1.036043 NaN\n\n7 0.049896 -0.308003 0.823295\n\n8 NaN NaN 0.637482\n\n9 -0.310130 0.078891 NaN\n\n</code></pre>\n\n<hr>\n\n<pre><code>In [29]: df.dropna(thresh=2) #Drop row if it does not have at least two values that are **not** NaN\n\nOut[29]:\n\n 0 1 2\n\n1 2.677677 -1.466923 -0.750366\n\n2 NaN 0.798002 -0.906038\n\n3 0.672201 0.964789 NaN\n\n5 -1.250970 0.030561 -2.678622\n\n7 0.049896 -0.308003 0.823295\n\n9 -0.310130 0.078891 NaN\n\n</code></pre>\n\n<hr>\n\n<pre><code>In [30]: df.dropna(subset=[1]) #Drop only if NaN in specific column (as asked in the question)\n\nOut[30]:\n\n 0 1 2\n\n1 2.677677 -1.466923 -0.750366\n\n2 NaN 0.798002 -0.906038\n\n3 0.672201 0.964789 NaN\n\n5 -1.250970 0.030561 -2.678622\n\n6 NaN 1.036043 NaN\n\n7 0.049896 -0.308003 0.823295\n\n9 -0.310130 0.078891 NaN\n\n</code></pre>\n\n<p>There are also other options (See docs at <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html" rel="noreferrer">http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html</a>), including dropping columns instead of rows. </p>\n\n<p>Pretty handy! </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	396
Installing specific package versions with pip	<p>TL;DR:</p>\n\n<ul>\n\n<li><code>pip install -Iv</code> (i.e. <code>pip install -Iv MySQL_python==1.2.2</code>)</li>\n\n</ul>\n\n<p>First, I see two issues with what you're trying to do. Since you already have an installed version, you should either uninstall the current existing driver or use <code>pip install -I MySQL_python==1.2.2</code></p>\n\n<p>However, you'll soon find out that this doesn't work. If you look at pip's installation log, or if you do a <code>pip install -Iv MySQL_python==1.2.2</code> you'll find that the PyPI URL link does not work for MySQL_python v1.2.2. You can verify this here: <a href="http://pypi.python.org/pypi/MySQL-python/1.2.2" rel="noreferrer">http://pypi.python.org/pypi/MySQL-python/1.2.2</a></p>\n\n<p>The download link 404s and the fallback URL links are re-directing infinitely due to sourceforge.net's recent upgrade and PyPI's stale URL.</p>\n\n<p>So to properly install the driver, you can follow these steps:</p>\n\n<pre><code>pip uninstall MySQL_python\n\npip install -Iv http://sourceforge.net/projects/mysql-python/files/mysql-python/1.2.2/MySQL-python-1.2.2.tar.gz/download\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	397
Delete column from pandas DataFrame	<p>As you've guessed, the right syntax is </p>\n\n<pre><code>del df['column_name']\n\n</code></pre>\n\n<p>It's difficult to make <code>del df.column_name</code> work simply as the result of syntactic limitations in Python. <code>del df[name]</code> gets translated to <code>df.__delitem__(name)</code> under the covers by Python.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	398
Finding the index of an item in a list	<p>One thing that is really helpful in learning Python is to use the interactive help function:</p>\n\n<pre><code>>>> help(["foo", "bar", "baz"])\n\nHelp on list object:\n\nclass list(object)\n\n ...\n\n |\n\n | index(...)\n\n | L.index(value, [start, [stop]]) -> integer -- return first index of value\n\n |\n\n</code></pre>\n\n<p>which will often lead you to the method you are looking for.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	399
How do I expand the output display to see more columns of a pandas DataFrame?	<p><strong>Update: Pandas 0.23.4 onwards</strong></p>\n\n<p>This is not necessary, pandas autodetects the size of your terminal window if you set <code>pd.options.display.width = 0</code>. (For older versions see at bottom.)</p>\n\n<p><code>pandas.set_printoptions(...)</code> is deprecated. Instead, use <code>pandas.set_option(optname, val)</code>, or equivalently <code>pd.options.<opt.hierarchical.name> = val</code>. Like:</p>\n\n<pre><code>import pandas as pd\n\npd.set_option('display.max_rows', 500)\n\npd.set_option('display.max_columns', 500)\n\npd.set_option('display.width', 1000)\n\n</code></pre>\n\n<p>Here is the <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.set_option.html" rel="noreferrer">help for <code>set_option</code></a>:</p>\n\n<pre>\n\nset_option(pat,value) - Sets the value of the specified option\n\nAvailable options:\n\ndisplay.[chop_threshold, colheader_justify, column_space, date_dayfirst,\n\n date_yearfirst, encoding, expand_frame_repr, float_format, height,\n\n line_width, max_columns, max_colwidth, max_info_columns, max_info_rows,\n\n max_rows, max_seq_items, mpl_style, multi_sparse, notebook_repr_html,\n\n pprint_nest_depth, precision, width]\n\nmode.[sim_interactive, use_inf_as_null]\n\nParameters\n\n----------\n\npat - str/regexp which should match a single option.\n\nNote: partial matches are supported for convenience, but unless you use the\n\nfull option name (e.g. x.y.z.option_name), your code may break in future\n\nversions if new options with similar names are introduced.\n\nvalue - new value of option.\n\nReturns\n\n-------\n\nNone\n\nRaises\n\n------\n\nKeyError if no such option exists\n\ndisplay.chop_threshold: [default: None] [currently: None]\n\n: float or None\n\n if set to a float value, all float values smaller then the given threshold\n\n will be displayed as exactly 0 by repr and friends.\n\ndisplay.colheader_justify: [default: right] [currently: right]\n\n: 'left'/'right'\n\n Controls the justification of column headers. used by DataFrameFormatter.\n\ndisplay.column_space: [default: 12] [currently: 12]No description available.\n\ndisplay.date_dayfirst: [default: False] [currently: False]\n\n: boolean\n\n When True, prints and parses dates with the day first, eg 20/01/2005\n\ndisplay.date_yearfirst: [default: False] [currently: False]\n\n: boolean\n\n When True, prints and parses dates with the year first, eg 2005/01/20\n\ndisplay.encoding: [default: UTF-8] [currently: UTF-8]\n\n: str/unicode\n\n Defaults to the detected encoding of the console.\n\n Specifies the encoding to be used for strings returned by to_string,\n\n these are generally strings meant to be displayed on the console.\n\ndisplay.expand_frame_repr: [default: True] [currently: True]\n\n: boolean\n\n Whether to print out the full DataFrame repr for wide DataFrames\n\n across multiple lines, `max_columns` is still respected, but the output will\n\n wrap-around across multiple "pages" if it's width exceeds `display.width`.\n\ndisplay.float_format: [default: None] [currently: None]\n\n: callable\n\n The callable should accept a floating point number and return\n\n a string with the desired format of the number. This is used\n\n in some places like SeriesFormatter.\n\n See core.format.EngFormatter for an example.\n\ndisplay.height: [default: 60] [currently: 1000]\n\n: int\n\n Deprecated.\n\n (Deprecated, use `display.height` instead.)\n\ndisplay.line_width: [default: 80] [currently: 1000]\n\n: int\n\n Deprecated.\n\n (Deprecated, use `display.width` instead.)\n\ndisplay.max_columns: [default: 20] [currently: 500]\n\n: int\n\n max_rows and max_columns are used in __repr__() methods to decide if\n\n to_string() or info() is used to render an object to a string. In case\n\n python/IPython is running in a terminal this can be set to 0 and pandas\n\n will correctly auto-detect the width the terminal and swap to a smaller\n\n format in case all columns would not fit vertically. The IPython notebook,\n\n IPython qtconsole, or IDLE do not run in a terminal and hence it is not\n\n possible to do correct auto-detection.\n\n 'None' value means unlimited.\n\ndisplay.max_colwidth: [default: 50] [currently: 50]\n\n: int\n\n The maximum width in characters of a column in the repr of\n\n a pandas data structure. When the column overflows, a "..."\n\n placeholder is embedded in the output.\n\ndisplay.max_info_columns: [default: 100] [currently: 100]\n\n: int\n\n max_info_columns is used in DataFrame.info method to decide if\n\n per column information will be printed.\n\ndisplay.max_info_rows: [default: 1690785] [currently: 1690785]\n\n: int or None\n\n max_info_rows is the maximum number of rows for which a frame will\n\n perform a null check on its columns when repr'ing To a console.\n\n The default is 1,000,000 rows. So, if a DataFrame has more\n\n 1,000,000 rows there will be no null check performed on the\n\n columns and thus the representation will take much less time to\n\n display in an interactive session. A value of None means always\n\n perform a null check when repr'ing.\n\ndisplay.max_rows: [default: 60] [currently: 500]\n\n: int\n\n This sets the maximum number of rows pandas should output when printing\n\n out various output. For example, this value determines whether the repr()\n\n for a dataframe prints out fully or just a summary repr.\n\n 'None' value means unlimited.\n\ndisplay.max_seq_items: [default: None] [currently: None]\n\n: int or None\n\n when pretty-printing a long sequence, no more then `max_seq_items`\n\n will be printed. If items are ommitted, they will be denoted by the addition\n\n of "..." to the resulting string.\n\n If set to None, the number of items to be printed is unlimited.\n\ndisplay.mpl_style: [default: None] [currently: None]\n\n: bool\n\n Setting this to 'default' will modify the rcParams used by matplotlib\n\n to give plots a more pleasing visual style by default.\n\n Setting this to None/False restores the values to their initial value.\n\ndisplay.multi_sparse: [default: True] [currently: True]\n\n: boolean\n\n "sparsify" MultiIndex display (don't display repeated\n\n elements in outer levels within groups)\n\ndisplay.notebook_repr_html: [default: True] [currently: True]\n\n: boolean\n\n When True, IPython notebook will use html representation for\n\n pandas objects (if it is available).\n\ndisplay.pprint_nest_depth: [default: 3] [currently: 3]\n\n: int\n\n Controls the number of nested levels to process when pretty-printing\n\ndisplay.precision: [default: 7] [currently: 7]\n\n: int\n\n Floating point output precision (number of significant digits). This is\n\n only a suggestion\n\ndisplay.width: [default: 80] [currently: 1000]\n\n: int\n\n Width of the display in characters. In case python/IPython is running in\n\n a terminal this can be set to None and pandas will correctly auto-detect the\n\n width.\n\n Note that the IPython notebook, IPython qtconsole, or IDLE do not run in a\n\n terminal and hence it is not possible to correctly detect the width.\n\nmode.sim_interactive: [default: False] [currently: False]\n\n: boolean\n\n Whether to simulate interactive mode for purposes of testing\n\nmode.use_inf_as_null: [default: False] [currently: False]\n\n: boolean\n\n True means treat None, NaN, INF, -INF as null (old way),\n\n False means None and NaN are null, but INF, -INF are not null\n\n (new way).\n\nCall def: pd.set_option(self, *args, **kwds)\n\n</pre>\n\n<hr>\n\n<p>EDIT: older version information, much of this has been deprecated.</p>\n\n<p>As @bmu <a href="https://stackoverflow.com/a/11708664/623735">mentioned</a>, pandas auto detects (by default) the size of the display area, a summary view will be used when an object repr does not fit on the display. You mentioned resizing the IDLE window, to no effect. If you do <code>print df.describe().to_string()</code> does it fit on the IDLE window?</p>\n\n<p>The terminal size is determined by <code>pandas.util.terminal.get_terminal_size()</code> (deprecated and removed), this returns a tuple containing the <code>(width, height)</code> of the display. Does the output match the size of your IDLE window? There might be an issue (there was one before when running a terminal in emacs).</p>\n\n<p>Note that it is possible to bypass the autodetect, <code>pandas.set_printoptions(max_rows=200, max_columns=10)</code> will never switch to summary view if number of rows, columns does not exceed the given limits.</p>\n\n<hr>\n\n<p>The 'max_colwidth' option helps in seeing untruncated form of each column.</p>\n\n<p><a href="https://i.stack.imgur.com/J412l.png" rel="noreferrer"><img src="https://i.stack.imgur.com/J412l.png" alt="TruncatedColumnDisplay"></a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	400
How do I detect whether a Python variable is a function?	<p>If this is for Python 2.x or for Python 3.2+, you can also use <code>callable()</code>. It used to be deprecated, but is now undeprecated, so you can use it again. You can read the discussion here: <a href="http://bugs.python.org/issue10518" rel="noreferrer">http://bugs.python.org/issue10518</a>. You can do this with:</p>\n\n<pre><code>callable(obj)\n\n</code></pre>\n\n<p>If this is for Python 3.x but before 3.2, check if the object has a <code>__call__</code> attribute. You can do this with:</p>\n\n<pre><code>hasattr(obj, '__call__')\n\n</code></pre>\n\n<p>The oft-suggested <code>types.FunctionTypes</code> approach is not correct because it fails to cover many cases that you would presumably want it to pass, like with builtins:</p>\n\n<pre><code>>>> isinstance(open, types.FunctionType)\n\nFalse\n\n>>> callable(open)\n\nTrue\n\n</code></pre>\n\n<p>The proper way to check properties of duck-typed objects is to ask them if they quack, not to see if they fit in a duck-sized container. Don't use <code>types.FunctionType</code> unless you have a very specific idea of what a function is.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	401
Parsing boolean values with argparse	<p>I think a more canonical way to do this is via:</p>\n\n<pre><code>command --feature\n\n</code></pre>\n\n<p>and</p>\n\n<pre><code>command --no-feature\n\n</code></pre>\n\n<p><code>argparse</code> supports this version nicely:</p>\n\n<pre><code>parser.add_argument('--feature', dest='feature', action='store_true')\n\nparser.add_argument('--no-feature', dest='feature', action='store_false')\n\nparser.set_defaults(feature=True)\n\n</code></pre>\n\n<hr>\n\n<p>Of course, if you really want the <code>--arg <True|False></code> version, you could pass <code>ast.literal_eval</code> as the "type", or a user defined function ...</p>\n\n<pre><code>def t_or_f(arg):\n\n ua = str(arg).upper()\n\n if 'TRUE'.startswith(ua):\n\n return True\n\n elif 'FALSE'.startswith(ua):\n\n return False\n\n else:\n\n pass #error condition maybe?\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	402
How can I pass a list as a command-line argument with argparse?	<p><strong>TL;DR</strong></p>\n\n<p>Use the <code>nargs</code> option or the <code>'append'</code> setting of the <code>action</code> option (depending on how you want the user interface to behave).</p>\n\n<p><strong>nargs</strong></p>\n\n<pre><code>parser.add_argument('-l','--list', nargs='+', help='<Required> Set flag', required=True)\n\n# Use like:\n\n# python arg.py -l 1234 2345 3456 4567\n\n</code></pre>\n\n<p><code>nargs='+'</code> takes 1 or more arguments, <code>nargs='*'</code> takes zero or more.</p>\n\n<p><strong>append</strong></p>\n\n<pre><code>parser.add_argument('-l','--list', action='append', help='<Required> Set flag', required=True)\n\n# Use like:\n\n# python arg.py -l 1234 -l 2345 -l 3456 -l 4567\n\n</code></pre>\n\n<p>With <code>append</code> you provide the option multiple times to build up the list.</p>\n\n<p><strong>Don't use <code>type=list</code>!!!</strong> - There is probably no situation where you would want to use <code>type=list</code> with <code>argparse</code>. Ever.</p>\n\n<hr>\n\n<p>Let's take a look in more detail at some of the different ways one might try to do this, and the end result.</p>\n\n<pre><code>import argparse\n\nparser = argparse.ArgumentParser()\n\n# By default it will fail with multiple arguments.\n\nparser.add_argument('--default')\n\n# Telling the type to be a list will also fail for multiple arguments,\n\n# but give incorrect results for a single argument.\n\nparser.add_argument('--list-type', type=list)\n\n# This will allow you to provide multiple arguments, but you will get\n\n# a list of lists which is not desired.\n\nparser.add_argument('--list-type-nargs', type=list, nargs='+')\n\n# This is the correct way to handle accepting multiple arguments.\n\n# '+' == 1 or more.\n\n# '*' == 0 or more.\n\n# '?' == 0 or 1.\n\n# An int is an explicit number of arguments to accept.\n\nparser.add_argument('--nargs', nargs='+')\n\n# To make the input integers\n\nparser.add_argument('--nargs-int-type', nargs='+', type=int)\n\n# An alternate way to accept multiple inputs, but you must\n\n# provide the flag once per input. Of course, you can use\n\n# type=int here if you want.\n\nparser.add_argument('--append-action', action='append')\n\n# To show the results of the given option to screen.\n\nfor _, value in parser.parse_args()._get_kwargs():\n\n if value is not None:\n\n print(value)\n\n</code></pre>\n\n<p>Here is the output you can expect:</p>\n\n<pre><code>$ python arg.py --default 1234 2345 3456 4567\n\n...\n\narg.py: error: unrecognized arguments: 2345 3456 4567\n\n$ python arg.py --list-type 1234 2345 3456 4567\n\n...\n\narg.py: error: unrecognized arguments: 2345 3456 4567\n\n$ # Quotes won't help here... \n\n$ python arg.py --list-type "1234 2345 3456 4567"\n\n['1', '2', '3', '4', ' ', '2', '3', '4', '5', ' ', '3', '4', '5', '6', ' ', '4', '5', '6', '7']\n\n$ python arg.py --list-type-nargs 1234 2345 3456 4567\n\n[['1', '2', '3', '4'], ['2', '3', '4', '5'], ['3', '4', '5', '6'], ['4', '5', '6', '7']]\n\n$ python arg.py --nargs 1234 2345 3456 4567\n\n['1234', '2345', '3456', '4567']\n\n$ python arg.py --nargs-int-type 1234 2345 3456 4567\n\n[1234, 2345, 3456, 4567]\n\n$ # Negative numbers are handled perfectly fine out of the box.\n\n$ python arg.py --nargs-int-type -1234 2345 -3456 4567\n\n[-1234, 2345, -3456, 4567]\n\n$ python arg.py --append-action 1234 --append-action 2345 --append-action 3456 --append-action 4567\n\n['1234', '2345', '3456', '4567']\n\n</code></pre>\n\n<p><em>Takeaways</em>:</p>\n\n<ul>\n\n<li>Use <code>nargs</code> or <code>action='append'</code>\n\n<ul>\n\n<li><code>nargs</code> can be more straightforward from a user perspective, but it can be unintuitive if there are positional arguments because <code>argparse</code> can't tell what should be a positional argument and what belongs to the <code>nargs</code>; if you have positional arguments then <code>action='append'</code> may end up being a better choice.</li>\n\n<li>The above is only true if <code>nargs</code> is given <code>'*'</code>, <code>'+'</code>, or <code>'?'</code>. If you provide an integer number (such as <code>4</code>) then there will be no problem mixing options with <code>nargs</code> and positional arguments because <code>argparse</code> will know exactly how many values to expect for the option.</li>\n\n</ul></li>\n\n<li>Don't use quotes on the command line<sup>1</sup></li>\n\n<li>Don't use <code>type=list</code>, as it will return a list of lists\n\n<ul>\n\n<li>This happens because under the hood <code>argparse</code> uses the value of <code>type</code> to coerce <em>each individual given argument</em> you your chosen <code>type</code>, not the aggregate of all arguments.</li>\n\n<li>You can use <code>type=int</code> (or whatever) to get a list of ints (or whatever)</li>\n\n</ul></li>\n\n</ul>\n\n<hr>\n\n<p><sup>1</sup>: I don't mean in general.. I mean using quotes to <em>pass a list to <code>argparse</code></em> is not what you want. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	403
How can the Euclidean distance be calculated with NumPy?	<p>Use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.norm.html" rel="noreferrer"><code>numpy.linalg.norm</code></a>:</p>\n\n<pre><code>dist = numpy.linalg.norm(a-b)\n\n</code></pre>\n\n<p>You can find the theory behind this in <a href="https://rads.stackoverflow.com/amzn/click/com/0321321367" rel="noreferrer" rel="nofollow noreferrer">Introduction to Data Mining</a></p>\n\n<p>This works because <strong>Euclidean distance</strong> is <strong>l2 norm</strong> and the default value of <strong>ord</strong> parameter in numpy.linalg.norm is 2.</p>\n\n<p><a href="https://i.stack.imgur.com/iWe4J.png" rel="noreferrer"><img src="https://i.stack.imgur.com/iWe4J.png" alt="enter image description here"></a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	404
CSV file written with Python has blank lines between each row	<p>In Python 2, open <code>outfile</code> with mode <code>'wb'</code> instead of <code>'w'</code>. The <code>csv.writer</code> writes <code> </code> into the file directly. If you don't open the file in <em>binary</em> mode, it will write <code> </code> because on Windows <em>text</em> mode will translate each <code> </code> into <code> </code>.</p>\n\n<p>In Python 3 the required syntax changed (see documentation links below), so open <code>outfile</code> with the additional parameter <code>newline=''</code> (empty string) instead.</p>\n\n<h3>Examples:</h3>\n\n<pre><code># Python 2\n\nwith open('/pythonwork/thefile_subset11.csv', 'wb') as outfile:\n\n writer = csv.writer(outfile)\n\n# Python 3\n\nwith open('/pythonwork/thefile_subset11.csv', 'w', newline='') as outfile:\n\n writer = csv.writer(outfile)\n\n</code></pre>\n\n<h3>Documentation Links</h3>\n\n<ul>\n\n<li><a href="https://docs.python.org/2/library/csv.html#csv.writer" rel="noreferrer">https://docs.python.org/2/library/csv.html#csv.writer</a></li>\n\n<li><a href="https://docs.python.org/3/library/csv.html#csv.writer" rel="noreferrer">https://docs.python.org/3/library/csv.html#csv.writer</a></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	405
How to copy a dictionary and only edit the copy	<p>Python <em>never</em> implicitly copies objects. When you set <code>dict2 = dict1</code>, you are making them refer to the same exact dict object, so when you mutate it, all references to it keep referring to the object in its current state.</p>\n\n<p>If you want to copy the dict (which is rare), you have to do so explicitly with</p>\n\n<pre><code>dict2 = dict(dict1)\n\n</code></pre>\n\n<p>or</p>\n\n<pre><code>dict2 = dict1.copy()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	406
Deleting DataFrame row in Pandas based on column value	<p>If I'm understanding correctly, it should be as simple as:</p>\n\n<pre><code>df = df[df.line_race != 0]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	407
Find intersection of two nested lists?	<p>You don't need to define intersection. It's already a first-class part of set.</p>\n\n<pre><code>>>> b1 = [1,2,3,4,5,9,11,15]\n\n>>> b2 = [4,5,6,7,8]\n\n>>> set(b1).intersection(b2)\n\nset([4, 5])\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	408
Pretty-print an entire Pandas Series / DataFrame	<p>You can also use the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.option_context.html" rel="noreferrer"><code>option_context</code></a>, with one or more options:</p>\n\n<pre><code>with pd.option_context('display.max_rows', None, 'display.max_columns', None): # more options can be specified also\n\n print(df)\n\n</code></pre>\n\n<p>This will automatically return the options to their previous values.</p>\n\n<p>If you are working on jupyter-notebook, using <code>display(df)</code> instead of <code>print(df)</code> will use jupyter rich display logic <a href="https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html#IPython.display.display" rel="noreferrer">(like so)</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	409
How do I list all files of a directory?	<blockquote>\n\n <h1>Get a list of files with Python 2 and 3</h1>\n\n</blockquote>\n\n<hr/>\n\n<blockquote>\n\n <h1><code>os.listdir()</code></h1>\n\n</blockquote>\n\n<p>How to get all the files (and directories) in the current directory (Python 3)</p>\n\n<p>Following, are simple methods to retrieve only files in the current directory, using <code>os</code> and the <code>listdir()</code> function, in Python 3. Further exploration, will demonstrate how to return folders in the directory, but you will not have the file in the subdirectory, for that you can use walk - discussed later).</p>\n\n<pre><code> import os\n\n arr = os.listdir()\n\n print(arr)\n\n >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']\n\n</code></pre>\n\n<blockquote>\n\n <h1><code>glob</code></h1>\n\n</blockquote>\n\n<p><em>I found glob easier to select the file of the same type or with something in common. Look at the following example:</em></p>\n\n<pre><code>import glob\n\ntxtfiles = []\n\nfor file in glob.glob("*.txt"):\n\n txtfiles.append(file)\n\n</code></pre>\n\n<blockquote>\n\n <h2><code>glob</code> with list comprehension</h2>\n\n</blockquote>\n\n<pre><code>import glob\n\nmylist = [f for f in glob.glob("*.txt")]\n\n</code></pre>\n\n<blockquote>\n\n <h2><code>glob</code> with a function</h2>\n\n</blockquote>\n\n<p><i>The function returns a list of the given extension (.txt, .docx ecc.) in the argument</i></p>\n\n<pre><code>import glob\n\ndef filebrowser(ext=""):\n\n "Returns files with an extension"\n\n return [f for f in glob.glob(f"*{ext}")]\n\nx = filebrowser(".txt")\n\nprint(x)\n\n>>> ['example.txt', 'fb.txt', 'intro.txt', 'help.txt']\n\n</code></pre>\n\n<blockquote>\n\n <h2><code>glob</code> extending the previous code</h2>\n\n</blockquote>\n\n<p>The function now returns a list of file that matched with the string you pass as argument</p>\n\n<pre><code>import glob\n\ndef filesearch(word=""):\n\n """Returns a list with all files with the word/extension in it"""\n\n file = []\n\n for f in glob.glob("*"):\n\n if word[0] == ".":\n\n if f.endswith(word):\n\n file.append(f)\n\n return file\n\n elif word in f:\n\n file.append(f)\n\n return file\n\n return file\n\nlookfor = "example", ".py"\n\nfor w in lookfor:\n\n print(f"{w:10} found => {filesearch(w)}")\n\n</code></pre>\n\n<p>output</p>\n\n<pre><code>example found => []\n\n.py found => ['search.py']\n\n</code></pre>\n\n<blockquote>\n\n <h2>Getting the full path name with <code>os.path.abspath</code></h2>\n\n</blockquote>\n\n<p>As you noticed, you don't have the full path of the file in the code above. If you need to have the absolute path, you can use another function of the <code>os.path</code> module called <code>_getfullpathname</code>, putting the file that you get from <code>os.listdir()</code> as an argument. There are other ways to have the full path, as we will check later (I replaced, as suggested by mexmex, _getfullpathname with <code>abspath</code>).</p>\n\n<pre><code> import os\n\n files_path = [os.path.abspath(x) for x in os.listdir()]\n\n print(files_path)\n\n >>> ['F:\\documenti\applications.txt', 'F:\\documenti\collections.txt']\n\n</code></pre>\n\n<blockquote>\n\n <h2>Get the full path name of a type of file into all subdirectories with <code>walk</code></h2>\n\n</blockquote>\n\n<p>I find this very useful to find stuff in many directories, and it helped me find a file about which I didn't remember the name:</p>\n\n<pre><code>import os\n\n# Getting the current work directory (cwd)\n\nthisdir = os.getcwd()\n\n# r=root, d=directories, f = files\n\nfor r, d, f in os.walk(thisdir):\n\n for file in f:\n\n if file.endswith(".docx"):\n\n print(os.path.join(r, file))\n\n</code></pre>\n\n<blockquote>\n\n <h3><code>os.listdir()</code>: get files in the current directory (Python 2)</h3>\n\n</blockquote>\n\n<p>In Python 2, if you want the list of the files in the current directory, you have to give the argument as '.' or os.getcwd() in the os.listdir method.</p>\n\n<pre><code> import os\n\n arr = os.listdir('.')\n\n print(arr)\n\n >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']\n\n</code></pre>\n\n<blockquote>\n\n <h3>To go up in the directory tree</h3>\n\n</blockquote>\n\n<pre><code># Method 1\n\nx = os.listdir('..')\n\n# Method 2\n\nx= os.listdir('/')\n\n</code></pre>\n\n<blockquote>\n\n <h3>Get files: <code>os.listdir()</code> in a particular directory (Python 2 and 3)</h3>\n\n</blockquote>\n\n<pre><code> import os\n\n arr = os.listdir('F:\\python')\n\n print(arr)\n\n >>> ['$RECYCLE.BIN', 'work.txt', '3ebooks.txt', 'documents']\n\n</code></pre>\n\n<blockquote>\n\n <h3>Get files of a particular subdirectory with <code>os.listdir()</code></h3>\n\n</blockquote>\n\n<pre><code>import os\n\nx = os.listdir("./content")\n\n</code></pre>\n\n<blockquote>\n\n <h3><code>os.walk('.')</code> - current directory</h3>\n\n</blockquote>\n\n<pre><code> import os\n\n arr = next(os.walk('.'))[2]\n\n print(arr)\n\n >>> ['5bs_Turismo1.pdf', '5bs_Turismo1.pptx', 'esperienza.txt']\n\n</code></pre>\n\n<blockquote>\n\n <h3><code>next(os.walk('.'))</code> and <code>os.path.join('dir', 'file')</code></h3>\n\n</blockquote>\n\n<pre><code> import os\n\n arr = []\n\n for d,r,f in next(os.walk("F:\\_python")):\n\n for file in f:\n\n arr.append(os.path.join(r,file))\n\n for f in arr:\n\n print(files)\n\n>>> F:\\_python\\dict_class.py\n\n>>> F:\\_python\\programmi.txt\n\n</code></pre>\n\n<blockquote>\n\n <h3><code>next(os.walk('F:\\')</code> - get the full path - list comprehension</h3>\n\n</blockquote>\n\n<pre><code> [os.path.join(r,file) for r,d,f in next(os.walk("F:\\_python")) for file in f]\n\n >>> ['F:\\_python\\dict_class.py', 'F:\\_python\\programmi.txt']\n\n</code></pre>\n\n<blockquote>\n\n <h3><code>os.walk</code> - get full path - all files in sub dirs**</h3>\n\n</blockquote>\n\n<pre><code>x = [os.path.join(r,file) for r,d,f in os.walk("F:\\_python") for file in f]\n\nprint(x)\n\n>>> ['F:\\_python\\dict.py', 'F:\\_python\\progr.txt', 'F:\\_python\ eadl.py']\n\n</code></pre>\n\n<blockquote>\n\n <h3><code>os.listdir()</code> - get only txt files</h3>\n\n</blockquote>\n\n<pre><code> arr_txt = [x for x in os.listdir() if x.endswith(".txt")]\n\n print(arr_txt)\n\n >>> ['work.txt', '3ebooks.txt']\n\n</code></pre>\n\n<blockquote>\n\n <h2>Using <code>glob</code> to get the full path of the files</h2>\n\n</blockquote>\n\n<p>If I should need the absolute path of the files:</p>\n\n<pre><code>from path import path\n\nfrom glob import glob\n\nx = [path(f).abspath() for f in glob("F:\\*.txt")]\n\nfor f in x:\n\n print(f)\n\n>>> F:\acquistionline.txt\n\n>>> F:\acquisti_2018.txt\n\n>>> F:\bootstrap_jquery_ecc.txt\n\n</code></pre>\n\n<blockquote>\n\n <h2>Using <code>os.path.isfile</code> to avoid directories in the list</h2>\n\n</blockquote>\n\n<pre><code>import os.path\n\nlistOfFiles = [f for f in os.listdir() if os.path.isfile(f)]\n\nprint(listOfFiles)\n\n>>> ['a simple game.py', 'data.txt', 'decorator.py']\n\n</code></pre>\n\n<blockquote>\n\n <h2>Using <code>pathlib</code> from Python 3.4</h2>\n\n</blockquote>\n\n<pre><code>import pathlib\n\nflist = []\n\nfor p in pathlib.Path('.').iterdir():\n\n if p.is_file():\n\n print(p)\n\n flist.append(p)\n\n >>> error.PNG\n\n >>> exemaker.bat\n\n >>> guiprova.mp3\n\n >>> setup.py\n\n >>> speak_gui2.py\n\n >>> thumb.PNG\n\n</code></pre>\n\n<p>With <code>list comprehension</code>:</p>\n\n<pre><code>flist = [p for p in pathlib.Path('.').iterdir() if p.is_file()]\n\n</code></pre>\n\n<p><em>Alternatively, use <code>pathlib.Path()</code> instead of <code>pathlib.Path(".")</code></em></p>\n\n<blockquote>\n\n <h2>Use glob method in pathlib.Path()</h2>\n\n</blockquote>\n\n<pre><code>import pathlib\n\npy = pathlib.Path().glob("*.py")\n\nfor file in py:\n\n print(file)\n\n>>> stack_overflow_list.py\n\n>>> stack_overflow_list_tkinter.py\n\n</code></pre>\n\n<blockquote>\n\n <h2>Get all and only files with os.walk</h2>\n\n</blockquote>\n\n<pre><code>import os\n\nx = [i[2] for i in os.walk('.')]\n\ny=[]\n\nfor t in x:\n\n for f in t:\n\n y.append(f)\n\nprint(y)\n\n>>> ['append_to_list.py', 'data.txt', 'data1.txt', 'data2.txt', 'data_180617', 'os_walk.py', 'READ2.py', 'read_data.py', 'somma_defaltdic.py', 'substitute_words.py', 'sum_data.py', 'data.txt', 'data1.txt', 'data_180617']\n\n</code></pre>\n\n<blockquote>\n\n <h2>Get only files with next and walk in a directory</h2>\n\n</blockquote>\n\n<pre><code> import os\n\n x = next(os.walk('F://python'))[2]\n\n print(x)\n\n >>> ['calculator.bat','calculator.py']\n\n</code></pre>\n\n<blockquote>\n\n <h2>Get only directories with next and walk in a directory</h2>\n\n</blockquote>\n\n<pre><code> import os\n\n next(os.walk('F://python'))[1] # for the current dir use ('.')\n\n >>> ['python3','others']\n\n</code></pre>\n\n<blockquote>\n\n <h2>Get all the subdir names with <code>walk</code></h2>\n\n</blockquote>\n\n<pre><code>for r,d,f in os.walk("F:\\_python"):\n\n for dirs in d:\n\n print(dirs)\n\n>>> .vscode\n\n>>> pyexcel\n\n>>> pyschool.py\n\n>>> subtitles\n\n>>> _metaprogramming\n\n>>> .ipynb_checkpoints\n\n</code></pre>\n\n<blockquote>\n\n <h2><code>os.scandir()</code> from Python 3.5 and greater</h2>\n\n</blockquote>\n\n<pre><code>import os\n\nx = [f.name for f in os.scandir() if f.is_file()]\n\nprint(x)\n\n>>> ['calculator.bat','calculator.py']\n\n# Another example with scandir (a little variation from docs.python.org)\n\n# This one is more efficient than os.listdir.\n\n# In this case, it shows the files only in the current directory\n\n# where the script is executed.\n\nimport os\n\nwith os.scandir() as i:\n\n for entry in i:\n\n if entry.is_file():\n\n print(entry.name)\n\n>>> ebookmaker.py\n\n>>> error.PNG\n\n>>> exemaker.bat\n\n>>> guiprova.mp3\n\n>>> setup.py\n\n>>> speakgui4.py\n\n>>> speak_gui2.py\n\n>>> speak_gui3.py\n\n>>> thumb.PNG\n\n</code></pre>\n\n<blockquote>\n\n <h1>Examples:</h1>\n\n <h2>Ex. 1: How many files are there in the subdirectories?</h2>\n\n</blockquote>\n\n<p>In this example, we look for the number of files that are included in all the directory and its subdirectories.</p>\n\n<pre><code>import os\n\ndef count(dir, counter=0):\n\n "returns number of files in dir and subdirs"\n\n for pack in os.walk(dir):\n\n for f in pack[2]:\n\n counter += 1\n\n return dir + " : " + str(counter) + "files"\n\nprint(count("F:\\python"))\n\n>>> 'F:\\\python' : 12057 files'\n\n</code></pre>\n\n<blockquote>\n\n <h2>Ex.2: How to copy all files from a directory to another?</h2>\n\n</blockquote>\n\n<p>A script to make order in your computer finding all files of a type (default: pptx) and copying them in a new folder.</p>\n\n<pre><code>import os\n\nimport shutil\n\nfrom path import path\n\ndestination = "F:\\file_copied"\n\n# os.makedirs(destination)\n\ndef copyfile(dir, filetype='pptx', counter=0):\n\n "Searches for pptx (or other - pptx is the default) files and copies them"\n\n for pack in os.walk(dir):\n\n for f in pack[2]:\n\n if f.endswith(filetype):\n\n fullpath = pack[0] + "\\" + f\n\n print(fullpath)\n\n shutil.copy(fullpath, destination)\n\n counter += 1\n\n if counter > 0:\n\n print('-' * 30)\n\n print(" ==> Found in: `" + dir + "` : " + str(counter) + " files ")\n\nfor dir in os.listdir():\n\n "searches for folders that starts with `_`"\n\n if dir[0] == '_':\n\n # copyfile(dir, filetype='pdf')\n\n copyfile(dir, filetype='txt')\n\n>>> _compiti18\Compito ContabilitÃ 1\conti.txt\n\n>>> _compiti18\Compito ContabilitÃ 1\modula4.txt\n\n>>> _compiti18\Compito ContabilitÃ 1\moduloa4.txt\n\n>>> ------------------------\n\n>>> ==> Found in: `_compiti18` : 3 files\n\n</code></pre>\n\n<blockquote>\n\n <h2>Ex. 3: How to get all the files in a txt file</h2>\n\n</blockquote>\n\n<p>In case you want to create a txt file with all the file names:</p>\n\n<pre><code>import os\n\nmylist = ""\n\nwith open("filelist.txt", "w", encoding="utf-8") as file:\n\n for eachfile in os.listdir():\n\n mylist += eachfile + " "\n\n file.write(mylist)\n\n</code></pre>\n\n<blockquote>\n\n <h2>Example: txt with all the files of an hard drive</h2>\n\n</blockquote>\n\n<pre><code>"""\n\nWe are going to save a txt file with all the files in your directory.\n\nWe will use the function walk()\n\n"""\n\nimport os\n\n# see all the methods of os\n\n# print(*dir(os), sep=", ")\n\nlistafile = []\n\npercorso = []\n\nwith open("lista_file.txt", "w", encoding='utf-8') as testo:\n\n for root, dirs, files in os.walk("D:\\"):\n\n for file in files:\n\n listafile.append(file)\n\n percorso.append(root + "\\" + file)\n\n testo.write(file + " ")\n\nlistafile.sort()\n\nprint("N. of files", len(listafile))\n\nwith open("lista_file_ordinata.txt", "w", encoding="utf-8") as testo_ordinato:\n\n for file in listafile:\n\n testo_ordinato.write(file + " ")\n\nwith open("percorso.txt", "w", encoding="utf-8") as file_percorso:\n\n for file in percorso:\n\n file_percorso.write(file + " ")\n\nos.system("lista_file.txt")\n\nos.system("lista_file_ordinata.txt")\n\nos.system("percorso.txt")\n\n</code></pre>\n\n<blockquote>\n\n <h2>All the file of C:\ in one text file</h2>\n\n <p>This is a shorter version of the previous code. Change the folder where to start finding the files if you need to start from another position. This code generate a 50 mb on text file on my computer with something less then 500.000 lines with files with the complete path.</p>\n\n</blockquote>\n\n<pre><code>import os\n\nwith open("file.txt", "w", encoding="utf-8") as filewrite:\n\n for r, d, f in os.walk("C:\\"):\n\n for file in f:\n\n filewrite.write(f"{r + file} ")\n\n</code></pre>\n\n<blockquote>\n\n <h2>How to write a file with all paths in a folder of a type</h2>\n\n</blockquote>\n\n<p>With this function you can create a txt file that will have the name of a type of file that you look for (ex. pngfile.txt) with all the full path of all the files of that type. It can be useful sometimes, I think.</p>\n\n<pre><code>import os\n\ndef searchfiles(extension='.ttf', folder='H:\\'):\n\n "Create a txt file with all the file of a type"\n\n with open(extension[1:] + "file.txt", "w", encoding="utf-8") as filewrite:\n\n for r, d, f in os.walk(folder):\n\n for file in f:\n\n if file.endswith(extension):\n\n filewrite.write(f"{r + file} ")\n\n# looking for png file (fonts) in the hard disk H:\\n\nsearchfiles('.png', 'H:\\')\n\n>>> H:\4bs_18\Dolphins5.png\n\n>>> H:\4bs_18\Dolphins6.png\n\n>>> H:\4bs_18\Dolphins7.png\n\n>>> H:\5_18\marketing html\assets\imageslogo2.png\n\n>>> H:\7z001.png\n\n>>> H:\7z002.png\n\n</code></pre>\n\n<blockquote>\n\n <h2>(New) Find all files and open them with tkinter GUI</h2>\n\n <p>I just wanted to add in this 2019 a little app to search for all files in a dir and be able to open them by doubleclicking on the name of the file in the list.\n\n <a href="https://i.stack.imgur.com/7WT22.png" rel="noreferrer"><img src="https://i.stack.imgur.com/7WT22.png" alt="enter image description here"></a></p>\n\n</blockquote>\n\n<pre><code>import tkinter as tk\n\nimport os\n\ndef searchfiles(extension='.txt', folder='H:\\'):\n\n "insert all files in the listbox"\n\n for r, d, f in os.walk(folder):\n\n for file in f:\n\n if file.endswith(extension):\n\n lb.insert(0, r + "\\" + file)\n\ndef open_file():\n\n os.startfile(lb.get(lb.curselection()[0]))\n\nroot = tk.Tk()\n\nroot.geometry("400x400")\n\nbt = tk.Button(root, text="Search", command=lambda:searchfiles('.png', 'H:\\'))\n\nbt.pack()\n\nlb = tk.Listbox(root)\n\nlb.pack(fill="both", expand=1)\n\nlb.bind("<Double-Button>", lambda x: open_file())\n\nroot.mainloop()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	410
Error: " 'dict' object has no attribute 'iteritems' "	<p>As you are in python3 , use <code>dict.items()</code> instead of <code>dict.iteritems()</code></p>\n\n<p><code>iteritems()</code> was removed in python3, so you can't use this method anymore.</p>\n\n<p>Take a look at Python 3.0 Wiki <a href="https://wiki.python.org/moin/Python3.0#Built-In_Changes" rel="noreferrer">Built-in Changes</a> section, where it is stated:</p>\n\n<blockquote>\n\n <p>Removed <code>dict.iteritems()</code>, <code>dict.iterkeys()</code>, and <code>dict.itervalues()</code>.</p>\n\n <p>Instead: use <code>dict.items()</code>, <code>dict.keys()</code>, and <code>dict.values()</code>\n\n respectively.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	411
Is there a short contains function for lists?	<p>You can use this syntax:</p>\n\n<pre><code>if myItem in list:\n\n # do something\n\n</code></pre>\n\n<p>Also, inverse operator:</p>\n\n<pre><code>if myItem not in list:\n\n # do something\n\n</code></pre>\n\n<p>It's work fine for lists, tuples, sets and dicts (check keys).</p>\n\n<p><strong>Note</strong> that this is an O(n) operation in lists and tuples, but an O(1) operation in sets and dicts.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	412
Dump a NumPy array into a csv file	<p><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.savetxt.html" rel="noreferrer"><code>numpy.savetxt</code></a> saves an array to a text file.</p>\n\n<pre><code>import numpy\n\na = numpy.asarray([ [1,2,3], [4,5,6], [7,8,9] ])\n\nnumpy.savetxt("foo.csv", a, delimiter=",")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	413
What is the quickest way to HTTP GET in Python?	<p>Python 3:</p>\n\n<pre><code>import urllib.request\n\ncontents = urllib.request.urlopen("http://example.com/foo/bar").read()\n\n</code></pre>\n\n<p>Python 2:</p>\n\n<pre><code>import urllib2\n\ncontents = urllib2.urlopen("http://example.com/foo/bar").read()\n\n</code></pre>\n\n<p>Documentation for <a href="https://docs.python.org/library/urllib.request.html" rel="noreferrer"><code>urllib.request</code></a> and <a href="https://docs.python.org/tutorial/inputoutput.html#methods-of-file-objects" rel="noreferrer"><code>read</code></a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	414
What is the naming convention in Python for variable and function names?	<p>See Python <a href="https://www.python.org/dev/peps/pep-0008/#function-and-variable-names" rel="noreferrer">PEP 8: Function and Variable Names</a>:</p>\n\n<blockquote>\n\n<p>Function names should be <a href="https://en.wikipedia.org/wiki/Snake_case" rel="noreferrer">lowercase, with words separated by underscores</a> as necessary to improve readability.</p>\n\n<p>Variable names follow the same convention as function names.</p>\n\n<p><a href="https://en.wikipedia.org/wiki/MixedCase" rel="noreferrer">mixedCase</a> is allowed only in contexts where that's already the prevailing style (e.g. <a href="https://docs.python.org/library/threading.html" rel="noreferrer">threading.py</a>), to retain backwards compatibility.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	415
How do I sort a dictionary by value?	<p>You could use:</p>\n\n<pre><code>sorted(d.items(), key=lambda x: x[1])\n\n</code></pre>\n\n<p>This will sort the dictionary by the values of each entry within the dictionary from smallest to largest.</p>\n\n<p>To sort it in descending order just add <code>reverse=True</code>:</p>\n\n<pre><code>sorted(d.items(), key=lambda x: x[1], reverse=True)\n\n</code></pre>\n\n<p><strong>Input:</strong></p>\n\n<pre><code>d = {'one':1,'three':3,'five':5,'two':2,'four':4}\n\na = sorted(d.items(), key=lambda x: x[1]) \n\nprint(a)\n\n</code></pre>\n\n<p><strong>Output:</strong></p>\n\n<pre><code>[('one', 1), ('two', 2), ('three', 3), ('four', 4), ('five', 5)]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	416
What is the purpose and use of **kwargs?	<p>You can use <code>**kwargs</code> to let your functions take an arbitrary number of keyword arguments ("kwargs" means "keyword arguments"):</p>\n\n<pre><code>>>> def print_keyword_args(**kwargs):\n\n... # kwargs is a dict of the keyword args passed to the function\n\n... for key, value in kwargs.iteritems():\n\n... print "%s = %s" % (key, value)\n\n... \n\n>>> print_keyword_args(first_name="John", last_name="Doe")\n\nfirst_name = John\n\nlast_name = Doe\n\n</code></pre>\n\n<p>You can also use the <code>**kwargs</code> syntax when calling functions by constructing a dictionary of keyword arguments and passing it to your function:</p>\n\n<pre><code>>>> kwargs = {'first_name': 'Bobby', 'last_name': 'Smith'}\n\n>>> print_keyword_args(**kwargs)\n\nfirst_name = Bobby\n\nlast_name = Smith\n\n</code></pre>\n\n<p>The <a href="http://docs.python.org/tutorial/controlflow.html#keyword-arguments" rel="noreferrer">Python Tutorial</a> contains a good explanation of how it works, along with some nice examples.</p>\n\n<p><--Update--></p>\n\n<p>For people using Python 3, instead of iteritems(), use items()</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	417
Maximum and Minimum values for ints	<h3>Python 3</h3>\n\n<p>In Python 3, this question doesn't apply. The plain <code>int</code> type is unbounded.</p>\n\n<p>However, you might actually be looking for information about the current interpreter's <em><a href="http://en.wikipedia.org/wiki/Word_(computer_architecture)#Table_of_word_sizes" rel="noreferrer">word size</a></em>, which will be the same as the machine's word size in most cases. That information is still available in Python 3 as <code>sys.maxsize</code>, which is the maximum value representable by a signed word. Equivalently, it's the size of the largest possible list or in-memory <a href="https://docs.python.org/3.9/library/sys.html#sys.maxsize" rel="noreferrer">sequence</a>.</p>\n\n<p>Generally, the maximum value representable by an unsigned word will be <code>sys.maxsize * 2 + 1</code>, and the number of bits in a word will be <code>math.log2(sys.maxsize * 2 + 2)</code>. See <a href="https://stackoverflow.com/a/6918334/577088">this answer</a> for more information.</p>\n\n<h3>Python 2</h3>\n\n<p>In Python 2, the maximum value for plain <code>int</code> values is available as <code>sys.maxint</code>:</p>\n\n<pre><code>>>> sys.maxint\n\n9223372036854775807\n\n</code></pre>\n\n<p>You can calculate the minimum value with <code>-sys.maxint - 1</code> as shown <a href="https://docs.python.org/2/library/sys.html#sys.maxint" rel="noreferrer">here</a>. </p>\n\n<p>Python seamlessly switches from plain to long integers once you exceed this value. So most of the time, you won't need to know it.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	418
How to change the order of DataFrame columns?	<p>One easy way would be to reassign the dataframe with a list of the columns, rearranged as needed. </p>\n\n<p>This is what you have now: </p>\n\n<pre><code>In [6]: df\n\nOut[6]:\n\n 0 1 2 3 4 mean\n\n0 0.445598 0.173835 0.343415 0.682252 0.582616 0.445543\n\n1 0.881592 0.696942 0.702232 0.696724 0.373551 0.670208\n\n2 0.662527 0.955193 0.131016 0.609548 0.804694 0.632596\n\n3 0.260919 0.783467 0.593433 0.033426 0.512019 0.436653\n\n4 0.131842 0.799367 0.182828 0.683330 0.019485 0.363371\n\n5 0.498784 0.873495 0.383811 0.699289 0.480447 0.587165\n\n6 0.388771 0.395757 0.745237 0.628406 0.784473 0.588529\n\n7 0.147986 0.459451 0.310961 0.706435 0.100914 0.345149\n\n8 0.394947 0.863494 0.585030 0.565944 0.356561 0.553195\n\n9 0.689260 0.865243 0.136481 0.386582 0.730399 0.561593\n\nIn [7]: cols = df.columns.tolist()\n\nIn [8]: cols\n\nOut[8]: [0L, 1L, 2L, 3L, 4L, 'mean']\n\n</code></pre>\n\n<p>Rearrange <code>cols</code> in any way you want. This is how I moved the last element to the first position: </p>\n\n<pre><code>In [12]: cols = cols[-1:] + cols[:-1]\n\nIn [13]: cols\n\nOut[13]: ['mean', 0L, 1L, 2L, 3L, 4L]\n\n</code></pre>\n\n<p>Then reorder the dataframe like this: </p>\n\n<pre><code>In [16]: df = df[cols] # OR df = df.ix[:, cols]\n\nIn [17]: df\n\nOut[17]:\n\n mean 0 1 2 3 4\n\n0 0.445543 0.445598 0.173835 0.343415 0.682252 0.582616\n\n1 0.670208 0.881592 0.696942 0.702232 0.696724 0.373551\n\n2 0.632596 0.662527 0.955193 0.131016 0.609548 0.804694\n\n3 0.436653 0.260919 0.783467 0.593433 0.033426 0.512019\n\n4 0.363371 0.131842 0.799367 0.182828 0.683330 0.019485\n\n5 0.587165 0.498784 0.873495 0.383811 0.699289 0.480447\n\n6 0.588529 0.388771 0.395757 0.745237 0.628406 0.784473\n\n7 0.345149 0.147986 0.459451 0.310961 0.706435 0.100914\n\n8 0.553195 0.394947 0.863494 0.585030 0.565944 0.356561\n\n9 0.561593 0.689260 0.865243 0.136481 0.386582 0.730399\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	419
What is the difference between dict.items() and dict.iteritems() in Python2?	<p>It's part of an evolution. </p>\n\n<p>Originally, Python <code>items()</code> built a real list of tuples and returned that. That could potentially take a lot of extra memory. </p>\n\n<p>Then, generators were introduced to the language in general, and that method was reimplemented as an iterator-generator method named <code>iteritems()</code>. The original remains for backwards compatibility. </p>\n\n<p>One of Python 3âs changes is that <code>items()</code> now return iterators, and a list is never fully built. The <code>iteritems()</code> method is also gone, since <code>items()</code> in Python 3 works like <code>viewitems()</code> in Python 2.7. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	420
How to split a string into array of characters?	<pre><code>>>> s = "foobar"\n\n>>> list(s)\n\n['f', 'o', 'o', 'b', 'a', 'r']\n\n</code></pre>\n\n<p>You need <a href="http://docs.python.org/library/functions.html#list" rel="noreferrer">list</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	421
Split string on whitespace in Python	<p>The <code>str.split()</code> method without an argument splits on whitespace:</p>\n\n<pre><code>>>> "many fancy word hello hi".split()\n\n['many', 'fancy', 'word', 'hello', 'hi']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	422
Meaning of @classmethod and @staticmethod for beginner?	<p>Rostyslav Dzinko's answer is very appropriate. I thought I could highlight one other reason you should choose <code>@classmethod</code> over <code>@staticmethod</code> when you are creating an additional constructor.</p>\n\n<p>In the example above, Rostyslav used the <code>@classmethod</code> <code>from_string</code> as a Factory to create <code>Date</code> objects from otherwise unacceptable parameters. The same can be done with <code>@staticmethod</code> as is shown in the code below:</p>\n\n<pre class="lang-py prettyprint-override"><code>class Date:\n\n def __init__(self, month, day, year):\n\n self.month = month\n\n self.day = day\n\n self.year = year\n\n def display(self):\n\n return "{0}-{1}-{2}".format(self.month, self.day, self.year)\n\n @staticmethod\n\n def millenium(month, day):\n\n return Date(month, day, 2000)\n\nnew_year = Date(1, 1, 2013) # Creates a new Date object\n\nmillenium_new_year = Date.millenium(1, 1) # also creates a Date object. \n\n# Proof:\n\nnew_year.display() # "1-1-2013"\n\nmillenium_new_year.display() # "1-1-2000"\n\nisinstance(new_year, Date) # True\n\nisinstance(millenium_new_year, Date) # True\n\n</code></pre>\n\n<p>Thus both <code>new_year</code> and <code>millenium_new_year</code> are instances of the <code>Date</code> class.</p>\n\n<p>But, if you observe closely, the Factory process is hard-coded to create <code>Date</code> objects no matter what. What this means is that even if the <code>Date</code> class is subclassed, the subclasses will still create plain <code>Date</code> objects (without any properties of the subclass). See that in the example below:</p>\n\n<pre class="lang-py prettyprint-override"><code>class DateTime(Date):\n\n def display(self):\n\n return "{0}-{1}-{2} - 00:00:00PM".format(self.month, self.day, self.year)\n\ndatetime1 = DateTime(10, 10, 1990)\n\ndatetime2 = DateTime.millenium(10, 10)\n\nisinstance(datetime1, DateTime) # True\n\nisinstance(datetime2, DateTime) # False\n\ndatetime1.display() # returns "10-10-1990 - 00:00:00PM"\n\ndatetime2.display() # returns "10-10-2000" because it's not a DateTime object but a Date object. Check the implementation of the millenium method on the Date class for more details.\n\n</code></pre>\n\n<p><code>datetime2</code> is not an instance of <code>DateTime</code>? WTF? Well, that's because of the <code>@staticmethod</code> decorator used.</p>\n\n<p>In most cases, this is undesired. If what you want is a Factory method that is aware of the class that called it, then <code>@classmethod</code> is what you need.</p>\n\n<p>Rewriting <code>Date.millenium</code> as (that's the only part of the above code that changes):</p>\n\n<pre class="lang-py prettyprint-override"><code>@classmethod\n\ndef millenium(cls, month, day):\n\n return cls(month, day, 2000)\n\n</code></pre>\n\n<p>ensures that the <code>class</code> is not hard-coded but rather learnt. <code>cls</code> can be any subclass. The resulting <code>object</code> will rightly be an instance of <code>cls</code>.<br>\n\nLet's test that out:</p>\n\n<pre class="lang-py prettyprint-override"><code>datetime1 = DateTime(10, 10, 1990)\n\ndatetime2 = DateTime.millenium(10, 10)\n\nisinstance(datetime1, DateTime) # True\n\nisinstance(datetime2, DateTime) # True\n\ndatetime1.display() # "10-10-1990 - 00:00:00PM"\n\ndatetime2.display() # "10-10-2000 - 00:00:00PM"\n\n</code></pre>\n\n<p>The reason is, as you know by now, that <code>@classmethod</code> was used instead of <code>@staticmethod</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	423
How to find out the number of CPUs using python	<p>If you have python with a version >= 2.6 you can simply use</p>\n\n<pre><code>import multiprocessing\n\nmultiprocessing.cpu_count()\n\n</code></pre>\n\n<p><a href="http://docs.python.org/library/multiprocessing.html#multiprocessing.cpu_count" rel="noreferrer">http://docs.python.org/library/multiprocessing.html#multiprocessing.cpu_count</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	424
Python try-else	<p>The statements in the <code>else</code> block are executed if execution falls off the bottom of the <code>try</code> - if there was no exception. Honestly, I've never found a need.</p>\n\n<p>However, <a href="http://docs.python.org/tutorial/errors.html#handling-exceptions" rel="noreferrer">Handling Exceptions</a> notes:</p>\n\n<blockquote>\n\n <p>The use of the else clause is better\n\n than adding additional code to the try\n\n clause because it avoids accidentally\n\n catching an exception that wasnât\n\n raised by the code being protected by\n\n the try ... except statement.</p>\n\n</blockquote>\n\n<p>So, if you have a method that could, for example, throw an <code>IOError</code>, and you want to catch exceptions it raises, but there's something else you want to do if the first operation succeeds, and you <em>don't</em> want to catch an IOError from that operation, you might write something like this:</p>\n\n<pre class="lang-py prettyprint-override"><code>try:\n\n operation_that_can_throw_ioerror()\n\nexcept IOError:\n\n handle_the_exception_somehow()\n\nelse:\n\n # we don't want to catch the IOError if it's raised\n\n another_operation_that_can_throw_ioerror()\n\nfinally:\n\n something_we_always_need_to_do()\n\n</code></pre>\n\n<p>If you just put <code>another_operation_that_can_throw_ioerror()</code> after <code>operation_that_can_throw_ioerror</code>, the <code>except</code> would catch the second call's errors. And if you put it after the whole <code>try</code> block, it'll always be run, and not until after the <code>finally</code>. The <code>else</code> lets you make sure</p>\n\n<ol>\n\n<li>the second operation's only run if there's no exception,</li>\n\n<li>it's run before the <code>finally</code> block, and</li>\n\n<li>any <code>IOError</code>s it raises aren't caught here</li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	425
How to test multiple variables against a value?	<p>You misunderstand how boolean expressions work; they don't work like an English sentence and guess that you are talking about the same comparison for all names here. You are looking for:</p>\n\n<pre><code>if x == 1 or y == 1 or z == 1:\n\n</code></pre>\n\n<p><code>x</code> and <code>y</code> are otherwise evaluated on their own (<code>False</code> if <code>0</code>, <code>True</code> otherwise).</p>\n\n<p>You can shorten that using a containment test against <a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="noreferrer">a tuple</a>:</p>\n\n<pre><code>if 1 in (x, y, z):\n\n</code></pre>\n\n<p>or better still:</p>\n\n<pre><code>if 1 in {x, y, z}:\n\n</code></pre>\n\n<p>using <a href="https://docs.python.org/3/tutorial/datastructures.html#sets" rel="noreferrer">a <code>set</code></a> to take advantage of the constant-cost membership test (<code>in</code> takes a fixed amount of time whatever the left-hand operand is).</p>\n\n<p>When you use <code>or</code>, python sees each side of the operator as <em>separate</em> expressions. The expression <code>x or y == 1</code> is treated as first a boolean test for <code>x</code>, then if that is False, the expression <code>y == 1</code> is tested.</p>\n\n<p>This is due to <a href="http://docs.python.org/2/reference/expressions.html#operator-precedence" rel="noreferrer">operator precedence</a>. The <code>or</code> operator has a lower precedence than the <code>==</code> test, so the latter is evaluated <em>first</em>.</p>\n\n<p>However, even if this were <em>not</em> the case, and the expression <code>x or y or z == 1</code> was actually interpreted as <code>(x or y or z) == 1</code> instead, this would still not do what you expect it to do. </p>\n\n<p><code>x or y or z</code> would evaluate to the first argument that is 'truthy', e.g. not <code>False</code>, numeric 0 or empty (see <a href="http://docs.python.org/2/reference/expressions.html#boolean-operations" rel="noreferrer">boolean expressions</a> for details on what Python considers false in a boolean context).</p>\n\n<p>So for the values <code>x = 2; y = 1; z = 0</code>, <code>x or y or z</code> would resolve to <code>2</code>, because that is the first true-like value in the arguments. Then <code>2 == 1</code> would be <code>False</code>, even though <code>y == 1</code> would be <code>True</code>.</p>\n\n<p>The same would apply to the inverse; testing multiple values against a single variable; <code>x == 1 or 2 or 3</code> would fail for the same reasons. Use <code>x == 1 or x == 2 or x == 3</code> or <code>x in {1, 2, 3}</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	426
Why is "1000000000000000 in range(1000000000000001)" so fast in Python 3?	<p>The fundamental misunderstanding here is in thinking that <code>range</code> is a generator. It's not. In fact, it's not any kind of iterator.</p>\n\n<p>You can tell this pretty easily:</p>\n\n<pre><code>>>> a = range(5)\n\n>>> print(list(a))\n\n[0, 1, 2, 3, 4]\n\n>>> print(list(a))\n\n[0, 1, 2, 3, 4]\n\n</code></pre>\n\n<p>If it were a generator, iterating it once would exhaust it:</p>\n\n<pre><code>>>> b = my_crappy_range(5)\n\n>>> print(list(b))\n\n[0, 1, 2, 3, 4]\n\n>>> print(list(b))\n\n[]\n\n</code></pre>\n\n<p>What <code>range</code> actually is, is a sequence, just like a list. You can even test this:</p>\n\n<pre><code>>>> import collections.abc\n\n>>> isinstance(a, collections.abc.Sequence)\n\nTrue\n\n</code></pre>\n\n<p>This means it has to follow all the rules of being a sequence:</p>\n\n<pre><code>>>> a[3] # indexable\n\n3\n\n>>> len(a) # sized\n\n5\n\n>>> 3 in a # membership\n\nTrue\n\n>>> reversed(a) # reversible\n\n<range_iterator at 0x101cd2360>\n\n>>> a.index(3) # implements 'index'\n\n3\n\n>>> a.count(3) # implements 'count'\n\n1\n\n</code></pre>\n\n<hr>\n\n<p>The difference between a <code>range</code> and a <code>list</code> is that a <code>range</code> is a <em>lazy</em> or <em>dynamic</em> sequence; it doesn't remember all of its values, it just remembers its <code>start</code>, <code>stop</code>, and <code>step</code>, and creates the values on demand on <code>__getitem__</code>.</p>\n\n<p>(As a side note, if you <code>print(iter(a))</code>, you'll notice that <code>range</code> uses the same <code>listiterator</code> type as <code>list</code>. How does that work? A <code>listiterator</code> doesn't use anything special about <code>list</code> except for the fact that it provides a C implementation of <code>__getitem__</code>, so it works fine for <code>range</code> too.)</p>\n\n<hr>\n\n<p>Now, there's nothing that says that <code>Sequence.__contains__</code> has to be constant timeâin fact, for obvious examples of sequences like <code>list</code>, it isn't. But there's nothing that says it <em>can't</em> be. And it's easier to implement <code>range.__contains__</code> to just check it mathematically (<code>(val - start) % step</code>, but with some extra complexity to deal with negative steps) than to actually generate and test all the values, so why <em>shouldn't</em> it do it the better way?</p>\n\n<p>But there doesn't seem to be anything in the language that <em>guarantees</em> this will happen. As Ashwini Chaudhari points out, if you give it a non-integral value, instead of converting to integer and doing the mathematical test, it will fall back to iterating all the values and comparing them one by one. And just because CPython 3.2+ and PyPy 3.x versions happen to contain this optimization, and it's an obvious good idea and easy to do, there's no reason that IronPython or NewKickAssPython 3.x couldn't leave it out. (And in fact CPython 3.0-3.1 <em>didn't</em> include it.)</p>\n\n<hr>\n\n<p>If <code>range</code> actually were a generator, like <code>my_crappy_range</code>, then it wouldn't make sense to test <code>__contains__</code> this way, or at least the way it makes sense wouldn't be obvious. If you'd already iterated the first 3 values, is <code>1</code> still <code>in</code> the generator? Should testing for <code>1</code> cause it to iterate and consume all the values up to <code>1</code> (or up to the first value <code>>= 1</code>)?</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	427
How do you round UP a number in Python?	<p>The <a href="https://docs.python.org/2/library/math.html#math.ceil" rel="noreferrer">ceil</a> (ceiling) function:</p>\n\n<pre><code>import math\n\nprint(math.ceil(4.2))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	428
Create an empty list in python with certain size	<p>You cannot assign to a list like <code>lst[i] = something</code>, unless the list already is initialized with at least <code>i+1</code> elements. You need to use append to add elements to the end of the list. <code>lst.append(something)</code>.</p>\n\n<p>(You could use the assignment notation if you were using a dictionary).</p>\n\n<p>Creating an empty list:</p>\n\n<pre><code>>>> l = [None] * 10\n\n>>> l\n\n[None, None, None, None, None, None, None, None, None, None]\n\n</code></pre>\n\n<p>Assigning a value to an existing element of the above list:</p>\n\n<pre><code>>>> l[1] = 5\n\n>>> l\n\n[None, 5, None, None, None, None, None, None, None, None]\n\n</code></pre>\n\n<p>Keep in mind that something like <code>l[15] = 5</code> would still fail, as our list has only 10 elements.</p>\n\n<p>range(x) creates a list from [0, 1, 2, ... x-1]</p>\n\n<pre><code># 2.X only. Use list(range(10)) in 3.X.\n\n>>> l = range(10)\n\n>>> l\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n</code></pre>\n\n<p>Using a function to create a list:</p>\n\n<pre><code>>>> def display():\n\n... s1 = []\n\n... for i in range(9): # This is just to tell you how to create a list.\n\n... s1.append(i)\n\n... return s1\n\n... \n\n>>> print display()\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8]\n\n</code></pre>\n\n<p>List comprehension (Using the squares because for range you don't need to do all this, you can just return <code>range(0,9)</code> ):</p>\n\n<pre><code>>>> def display():\n\n... return [x**2 for x in range(9)]\n\n... \n\n>>> print display()\n\n[0, 1, 4, 9, 16, 25, 36, 49, 64]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	429
Shuffle DataFrame rows	<p>The idiomatic way to do this with Pandas is to use the <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sample.html" rel="noreferrer"><code>.sample</code></a> method of your dataframe to sample all rows without replacement:</p>\n\n<pre class="lang-py prettyprint-override"><code>df.sample(frac=1)\n\n</code></pre>\n\n<p>The <code>frac</code> keyword argument specifies the fraction of rows to return in the random sample, so <code>frac=1</code> means return all rows (in random order).</p>\n\n<hr>\n\n<p><strong>Note:</strong>\n\nIf you wish to shuffle your dataframe in-place and reset the index, you could do e.g.</p>\n\n<pre class="lang-py prettyprint-override"><code>df = df.sample(frac=1).reset_index(drop=True)\n\n</code></pre>\n\n<p>Here, specifying <code>drop=True</code> prevents <code>.reset_index</code> from creating a column containing the old index entries.</p>\n\n<p><strong>Follow-up note:</strong> Although it may not look like the above operation is <em>in-place</em>, python/pandas is smart enough not to do another malloc for the shuffled object. That is, even though the <em>reference</em> object has changed (by which I mean <code>id(df_old)</code> is not the same as <code>id(df_new)</code>), the underlying C object is still the same. To show that this is indeed the case, you could run a simple memory profiler:</p>\n\n<pre><code>$ python3 -m memory_profiler . est.py\n\nFilename: . est.py\n\nLine # Mem usage Increment Line Contents\n\n================================================\n\n 5 68.5 MiB 68.5 MiB @profile\n\n 6 def shuffle():\n\n 7 847.8 MiB 779.3 MiB df = pd.DataFrame(np.random.randn(100, 1000000))\n\n 8 847.9 MiB 0.1 MiB df = df.sample(frac=1).reset_index(drop=True)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	430
Converting from a string to boolean in Python?	<p>Really, you just compare the string to whatever you expect to accept as representing true, so you can do this:</p>\n\n<pre><code>s == 'True'\n\n</code></pre>\n\n<p>Or to checks against a whole bunch of values:</p>\n\n<pre><code>s.lower() in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']\n\n</code></pre>\n\n<p>Be cautious when using the following:</p>\n\n<pre><code>>>> bool("foo")\n\nTrue\n\n>>> bool("")\n\nFalse\n\n</code></pre>\n\n<p>Empty strings evaluate to <code>False</code>, but everything else evaluates to <code>True</code>. So this should not be used for any kind of parsing purposes.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	431
Python and pip, list all versions of a package that's available?	<p>For <strong>pip >= 9.0</strong> use</p>\n\n<pre class="lang-none prettyprint-override"><code>$ pip install pylibmc==\n\nCollecting pylibmc==\n\n Could not find a version that satisfies the requirement pylibmc== (from \n\n versions: 0.2, 0.3, 0.4, 0.5.1, 0.5.2, 0.5.3, 0.5.4, 0.5.5, 0.5, 0.6.1, 0.6, \n\n 0.7.1, 0.7.2, 0.7.3, 0.7.4, 0.7, 0.8.1, 0.8.2, 0.8, 0.9.1, 0.9.2, 0.9, \n\n 1.0-alpha, 1.0-beta, 1.0, 1.1.1, 1.1, 1.2.0, 1.2.1, 1.2.2, 1.2.3, 1.3.0)\n\nNo matching distribution found for pylibmc==\n\n</code></pre>\n\n<p>â all the available versions will be printed without actually downloading or installing any additional packages.</p>\n\n<p>For <strong>pip < 9.0</strong> use</p>\n\n<pre><code>pip install pylibmc==blork\n\n</code></pre>\n\n<p>where <code>blork</code> can be any string that is <a href="https://www.python.org/dev/peps/pep-0440/#public-version-identifiers" rel="noreferrer">not a valid version number</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	432
What is __init__.py for?	<p>Files named <code>__init__.py</code> are used to mark directories on disk as Python package directories.\n\nIf you have the files</p>\n\n<pre><code>mydir/spam/__init__.py\n\nmydir/spam/module.py\n\n</code></pre>\n\n<p>and <code>mydir</code> is on your path, you can import the code in <code>module.py</code> as</p>\n\n<pre><code>import spam.module\n\n</code></pre>\n\n<p>or </p>\n\n<pre><code>from spam import module\n\n</code></pre>\n\n<p>If you remove the <code>__init__.py</code> file, Python will no longer look for submodules inside that directory, so attempts to import the module will fail.</p>\n\n<p>The <code>__init__.py</code> file is usually empty, but can be used to export selected portions of the package under more convenient name, hold convenience functions, etc.\n\nGiven the example above, the contents of the init module can be accessed as </p>\n\n<pre><code>import spam\n\n</code></pre>\n\n<p>based on <a href="http://effbot.org/pyfaq/what-is-init-py-used-for.htm" rel="noreferrer">this</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	433
About catching ANY exception	<p>Apart from a bare <code>except:</code> clause (which as others have said you shouldn't use), you can simply catch <a href="https://docs.python.org/2/library/exceptions.html#exceptions.Exception" rel="noreferrer"><code>Exception</code></a>:</p>\n\n<pre><code>import traceback\n\nimport logging\n\ntry:\n\n whatever()\n\nexcept Exception as e:\n\n logging.error(traceback.format_exc())\n\n # Logs the error appropriately. \n\n</code></pre>\n\n<p>You would normally only ever consider doing this at the outermost level of your code if for example you wanted to handle any otherwise uncaught exceptions before terminating.</p>\n\n<p>The advantage of <code>except Exception</code> over the bare <code>except</code> is that there are a few exceptions that it wont catch, most obviously <code>KeyboardInterrupt</code> and <code>SystemExit</code>: if you caught and swallowed those then you could make it hard for anyone to exit your script.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	434
Error after upgrading pip: cannot import name 'main'	<p>You must have inadvertently upgraded your system pip (probably through something like <code>sudo pip install pip --upgrade</code>)</p>\n\n<p>pip 10.x adjusts where its internals are situated. The <code>pip3</code> command you're seeing is one provided by your package maintainer (presumably debian based here?) and is not a file managed by pip.</p>\n\n<p>You can read more about this on <a href="https://github.com/pypa/pip/issues/5221" rel="noreferrer">pip's issue tracker</a></p>\n\n<p>You'll probably want to <em>not</em> upgrade your system pip and instead use a virtualenv.</p>\n\n<p>To recover the <code>pip3</code> binary you'll need to <code>sudo python3 -m pip uninstall pip && sudo apt install python3-pip --reinstall</code>.</p>\n\n<p>If you want to continue in "unsupported territory" (upgrading a system package outside of the system package manager), you can probably get away with <code>python3 -m pip ...</code> instead of <code>pip3</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	435
Python datetime to string without microsecond component	<p>If you want to format a <code>datetime</code> object in a specific format that is different from the standard format, it's best to explicitly specify that format:</p>\n\n<pre><code>>>> datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")\n\n'2011-11-03 18:21:26'\n\n</code></pre>\n\n<p>See <a href="https://docs.python.org/3/library/datetime.html?highlight=strftime#strftime-and-strptime-behavior" rel="noreferrer">the documentation of <code>datetime.strftime()</code></a> for an explanation of the <code>%</code> directives.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	436
Remove final character from string	<p>Simple:</p>\n\n<pre><code>st = "abcdefghij"\n\nst = st[:-1]\n\n</code></pre>\n\n<p>There is also another way that shows how it is done with steps:</p>\n\n<pre><code>list1 = "abcdefghij"\n\nlist2 = list(list1)\n\nprint(list2)\n\nlist3 = list2[:-1]\n\nprint(list3)\n\n</code></pre>\n\n<p>This is also a way with user input:</p>\n\n<pre><code>list1 = input ("Enter :")\n\nlist2 = list(list1)\n\nprint(list2)\n\nlist3 = list2[:-1]\n\nprint(list3)\n\n</code></pre>\n\n<p>To make it take away the last word in a list:</p>\n\n<pre><code>list1 = input("Enter :")\n\nlist2 = list1.split()\n\nprint(list2)\n\nlist3 = list2[:-1]\n\nprint(list3)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	437
In Python, how do I determine if an object is iterable?	<ol>\n\n<li><p>Checking for <code>__iter__</code> works on sequence types, but it would fail on e.g. strings <strong>in Python 2</strong>. I would like to know the right answer too, until then, here is one possibility (which would work on strings, too):</p>\n\n<pre><code>from __future__ import print_function\n\ntry:\n\n some_object_iterator = iter(some_object)\n\nexcept TypeError as te:\n\n print(some_object, 'is not iterable')\n\n</code></pre>\n\n<p>The <code>iter</code> built-in checks for the <code>__iter__</code> method or in the case of strings the <code>__getitem__</code> method.</p></li>\n\n<li><p>Another general pythonic approach is to assume an iterable, then fail gracefully if it does not work on the given object. The Python glossary:</p>\n\n<blockquote>\n\n <p>Pythonic programming style that determines an object's type by inspection of its method or attribute signature rather than by explicit relationship to some type object ("If it looks like a <strong>duck</strong> and quacks like a <strong>duck</strong>, it must be a <strong>duck</strong>.") By emphasizing interfaces rather than specific types, well-designed code improves its flexibility by allowing polymorphic substitution. Duck-typing avoids tests using type() or isinstance(). <strong>Instead, it typically employs the EAFP (Easier to Ask Forgiveness than Permission) style of programming.</strong></p>\n\n <p>...</p>\n\n<pre><code>try:\n\n _ = (e for e in my_object)\n\nexcept TypeError:\n\n print my_object, 'is not iterable'\n\n</code></pre>\n\n</blockquote></li>\n\n<li><p>The <a href="https://docs.python.org/3/library/collections.abc.html" rel="noreferrer"><code>collections</code></a> module provides some abstract base classes, which allow to ask classes or instances if they provide particular functionality, for example:</p>\n\n<pre><code>from collections.abc import Iterable\n\nif isinstance(e, Iterable):\n\n # e is iterable\n\n</code></pre>\n\n<p>However, this does not check for classes that are iterable through <code>__getitem__</code>.</p></li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	438
Is there a portable way to get the current username in Python?	<p>Look at <a href="http://docs.python.org/library/getpass.html" rel="noreferrer">getpass</a> module</p>\n\n<pre><code>import getpass\n\ngetpass.getuser()\n\n'kostya'\n\n</code></pre>\n\n<p>Availability: Unix, Windows</p>\n\n<hr>\n\n<p>p.s. Per comment below "<em>this function looks at the values of various environment variables to determine the user name. Therefore, this function should not be relied on for access control purposes (or possibly any other purpose, since it allows any user to impersonate any other).</em>"</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	439
Multiprocessing vs Threading Python	<p>Here are some pros/cons I came up with.</p>\n\n<h1>Multiprocessing</h1>\n\n<h2>Pros</h2>\n\n<ul>\n\n<li>Separate memory space</li>\n\n<li>Code is usually straightforward</li>\n\n<li>Takes advantage of multiple CPUs & cores</li>\n\n<li>Avoids GIL limitations for cPython</li>\n\n<li>Eliminates most needs for synchronization primitives unless if you use shared memory (instead, it's more of a communication model for IPC)</li>\n\n<li>Child processes are interruptible/killable</li>\n\n<li>Python <code>multiprocessing</code> module includes useful abstractions with an interface much like <code>threading.Thread</code></li>\n\n<li>A must with cPython for CPU-bound processing</li>\n\n</ul>\n\n<h2>Cons</h2>\n\n<ul>\n\n<li>IPC a little more complicated with more overhead (communication model vs. shared memory/objects)</li>\n\n<li>Larger memory footprint</li>\n\n</ul>\n\n<h1>Threading</h1>\n\n<h2>Pros</h2>\n\n<ul>\n\n<li>Lightweight - low memory footprint</li>\n\n<li>Shared memory - makes access to state from another context easier</li>\n\n<li>Allows you to easily make responsive UIs</li>\n\n<li>cPython C extension modules that properly release the GIL will run in parallel</li>\n\n<li>Great option for I/O-bound applications</li>\n\n</ul>\n\n<h2>Cons</h2>\n\n<ul>\n\n<li>cPython - subject to the GIL</li>\n\n<li>Not interruptible/killable</li>\n\n<li>If not following a command queue/message pump model (using the <code>Queue</code> module), then manual use of synchronization primitives become a necessity (decisions are needed for the granularity of locking)</li>\n\n<li>Code is usually harder to understand and to get right - the potential for race conditions increases dramatically </li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	440
What is a clean, pythonic way to have multiple constructors in Python?	<p>Actually <code>None</code> is much better for "magic" values:</p>\n\n<pre><code>class Cheese():\n\n def __init__(self, num_holes = None):\n\n if num_holes is None:\n\n ...\n\n</code></pre>\n\n<p>Now if you want complete freedom of adding more parameters:</p>\n\n<pre><code>class Cheese():\n\n def __init__(self, *args, **kwargs):\n\n #args -- tuple of anonymous arguments\n\n #kwargs -- dictionary of named arguments\n\n self.num_holes = kwargs.get('num_holes',random_holes())\n\n</code></pre>\n\n<p>To better explain the concept of <code>*args</code> and <code>**kwargs</code> (you can actually change these names):</p>\n\n<pre><code>def f(*args, **kwargs):\n\n print 'args: ', args, ' kwargs: ', kwargs\n\n>>> f('a')\n\nargs: ('a',) kwargs: {}\n\n>>> f(ar='a')\n\nargs: () kwargs: {'ar': 'a'}\n\n>>> f(1,2,param=3)\n\nargs: (1, 2) kwargs: {'param': 3}\n\n</code></pre>\n\n<p><a href="http://docs.python.org/reference/expressions.html#calls" rel="noreferrer">http://docs.python.org/reference/expressions.html#calls</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	441
How to remove items from a list while iterating?	<p>You can use a list comprehension to create a new list containing only the elements you don't want to remove:</p>\n\n<pre><code>somelist = [x for x in somelist if not determine(x)]\n\n</code></pre>\n\n<p>Or, by assigning to the slice <code>somelist[:]</code>, you can mutate the existing list to contain only the items you want:</p>\n\n<pre><code>somelist[:] = [x for x in somelist if not determine(x)]\n\n</code></pre>\n\n<p>This approach could be useful if there are other references to <code>somelist</code> that need to reflect the changes.</p>\n\n<p>Instead of a comprehension, you could also use <code>itertools</code>. In Python 2:</p>\n\n<pre><code>from itertools import ifilterfalse\n\nsomelist[:] = ifilterfalse(determine, somelist)\n\n</code></pre>\n\n<p>Or in Python 3:</p>\n\n<pre><code>from itertools import filterfalse\n\nsomelist[:] = filterfalse(determine, somelist)\n\n</code></pre>\n\n<p>For the sake of clarity and for those who find the use of the <code>[:]</code> notation hackish or fuzzy, here's a more explicit alternative. Theoretically, it should perform the same with regards to space and time than the one-liners above.</p>\n\n<pre><code>temp = []\n\nwhile somelist:\n\n x = somelist.pop()\n\n if not determine(x):\n\n temp.append(x)\n\nwhile temp:\n\n somelist.append(templist.pop())\n\n</code></pre>\n\n<p>It also works in other languages that may not have the <em>replace items</em> ability of Python lists, with minimal modifications. For instance, not all languages cast empty lists to a <code>False</code> as Python does. You can substitute <code>while somelist:</code> for something more explicit like <code>while len(somelist) > 0:</code>. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	442
Differences between distribute, distutils, setuptools and distutils2?	<p>As of March 2020, most of the other answers to this question are several years out-of-date. When you come across advice on Python packaging issues, remember to look at the date of publication, and don't trust out-of-date information.</p>\n\n<p>The <a href="https://packaging.python.org/" rel="noreferrer">Python Packaging User Guide</a> is worth a read. Every page has a "last updated" date displayed, so you can check the recency of the manual, and it's quite comprehensive. The fact that it's hosted on a subdomain of python.org of the Python Software Foundation just adds credence to it. The <a href="https://packaging.python.org/key_projects/" rel="noreferrer">Project Summaries</a> page is especially relevant here.</p>\n\n<h2>Summary of tools:</h2>\n\n<p>Here's a summary of the Python packaging landscape:</p>\n\n<h3>Supported tools:</h3>\n\n<ul>\n\n<li><p><strong><code>distutils</code></strong> is still the standard tool for packaging in Python. It is included in the standard library (Python 2 and Python 3). It is useful for simple Python distributions, but lacks features. It introduces the <code>distutils</code> Python package that can be imported in your <code>setup.py</code> script.</p>\n\n<ul>\n\n<li><sub><a href="https://docs.python.org/3/library/distutils.html" rel="noreferrer">Official docs</a> | <a href="https://packaging.python.org/key_projects/#distutils" rel="noreferrer"><code>distutils</code> section of Python Package User Guide</a></sub></li>\n\n</ul></li>\n\n<li><p><strong><code>setuptools</code></strong> was developed to overcome Distutils' limitations, and is not included in the standard library. It introduced a command-line utility called <code>easy_install</code>. It also introduced the <code>setuptools</code> Python package that can be imported in your <code>setup.py</code> script, and the <code>pkg_resources</code> Python package that can be imported in your code to locate data files installed with a distribution. One of its gotchas is that it monkey-patches the <code>distutils</code> Python package. It should work well with <code>pip</code>. <a href="https://github.com/pypa/setuptools/releases" rel="noreferrer">It sees regular releases.</a></p>\n\n<ul>\n\n<li><sub><a href="https://setuptools.readthedocs.io/en/latest/" rel="noreferrer">Official docs</a> | <a href="https://pypi.python.org/pypi/setuptools" rel="noreferrer">Pypi page</a> | <a href="https://github.com/pypa/setuptools" rel="noreferrer">GitHub repo</a> | <a href="https://packaging.python.org/key_projects/#setuptools" rel="noreferrer"><code>setuptools</code> section of Python Package User Guide</a></sub></li>\n\n</ul></li>\n\n<li><p><strong><code>scikit-build</code></strong> is an improved build system generator that internally uses CMake to build compiled Python extensions. Because scikit-build isn't based on distutils, it doesn't really have any of its limitations. When ninja-build is present, scikit-build can compile large projects over three times faster than the alternatives. It should work well with <code>pip</code>.</p>\n\n<ul>\n\n<li><sub><a href="http://scikit-build.readthedocs.io/en/latest/" rel="noreferrer">Official docs</a> | <a href="https://pypi.org/project/scikit-build/" rel="noreferrer">Pypi page</a> | <a href="https://github.com/scikit-build/scikit-build" rel="noreferrer">GitHub repo</a> | <a href="https://packaging.python.org/key_projects/#scikit-build" rel="noreferrer"><code>scikit-build</code> section of Python Package User Guide</a></sub></li>\n\n</ul></li>\n\n<li><p><strong><code>distlib</code></strong> is a library that provides functionality that is used by higher level tools like <code>pip</code>.</p>\n\n<ul>\n\n<li><sub><a href="http://pythonhosted.org/distlib/" rel="noreferrer">Official Docs</a> | <a href="https://pypi.org/project/distlib" rel="noreferrer">Pypi page</a> | <a href="https://bitbucket.org/pypa/distlib" rel="noreferrer">Bitbucket repo</a> | <a href="https://packaging.python.org/key_projects/#distlib" rel="noreferrer"><code>distlib</code> section of Python Package User Guide</a></sub></li>\n\n</ul></li>\n\n<li><p><strong><code>packaging</code></strong> is also a library that provides functionality used by higher level tools like <code>pip</code> and <code>setuptools</code></p>\n\n<ul>\n\n<li><sub><a href="https://packaging.pypa.io/" rel="noreferrer">Official Docs</a> | <a href="https://pypi.org/project/packaging" rel="noreferrer">Pypi page</a> | <a href="https://github.com/pypa/packaging" rel="noreferrer">GitHub repo</a> | <a href="https://packaging.python.org/key_projects/#packaging" rel="noreferrer"><code>packaging</code> section of Python Package User Guide</a></sub></li>\n\n</ul></li>\n\n</ul>\n\n<h3>Deprecated/abandoned tools:</h3>\n\n<ul>\n\n<li><p><strong><code>distribute</code></strong> was a fork of <code>setuptools</code>. It shared the same namespace, so if you had Distribute installed, <code>import setuptools</code> would actually import the package distributed with Distribute. <strong><em>Distribute was merged back into Setuptools 0.7</em></strong>, so you don't need to use Distribute any more. In fact, the version on Pypi is just a compatibility layer that installs Setuptools.</p></li>\n\n<li><p><strong><code>distutils2</code></strong> was an attempt to take the best of <code>distutils</code>, <code>setuptools</code> and <code>distribute</code> and become the standard tool included in Python's standard library. The idea was that <code>distutils2</code> would be distributed for old Python versions, and that <code>distutils2</code> would be renamed to <code>packaging</code> for Python 3.3, which would include it in its standard library. These plans did not go as intended, however, and currently, <strong><em><code>distutils2</code> is an abandoned project</em></strong>. The latest release was in March 2012, and its Pypi home page has finally been updated to reflect its death.</p></li>\n\n</ul>\n\n<h2>Others:</h2>\n\n<p>There are other tools, if you are interested, read <a href="https://packaging.python.org/key_projects/" rel="noreferrer">Project Summaries</a> in the Python Packaging User Guide. I won't list them all, to not repeat that page, and to keep the answer matching the question, which was only about <code>distribute</code>, <code>distutils</code>, <code>setuptools</code> and <code>distutils2</code>.</p>\n\n<h2>Recommendation:</h2>\n\n<p>If all of this is new to you, and you don't know where to start, <strong>I would recommend learning <code>setuptools</code></strong>, along with <code>pip</code> and <code>virtualenv</code>, which all work very well together.</p>\n\n<p>If you're looking into <code>virtualenv</code>, you might be interested in this question: <a href="https://stackoverflow.com/q/41573587/247696">What is the difference between <code>venv</code>, <code>pyvenv</code>, <code>pyenv</code>, <code>virtualenv</code>, <code>virtualenvwrapper</code>, etc?</a>. (Yes, I know, I groan with you.)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	443
What OS am I running on?	<pre><code>>>> import os\n\n>>> os.name\n\n'posix'\n\n>>> import platform\n\n>>> platform.system()\n\n'Linux'\n\n>>> platform.release()\n\n'2.6.22-15-generic'\n\n</code></pre>\n\n<p>The output of <a href="https://docs.python.org/library/platform.html#platform.system" rel="noreferrer"><code>platform.system()</code></a> is as follows:</p>\n\n<ul>\n\n<li>Linux: <code>Linux</code></li>\n\n<li>Mac: <code>Darwin</code></li>\n\n<li>Windows: <code>Windows</code></li>\n\n</ul>\n\n<p>See: <a href="https://docs.python.org/library/platform.html" rel="noreferrer"><code>platform</code> â Access to underlying platformâs identifying data</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	444
Converting string into datetime	<p>Use the third party <a href="https://dateutil.readthedocs.io" rel="noreferrer">dateutil</a> library:</p>\n\n<pre><code>from dateutil import parser\n\nparser.parse("Aug 28 1999 12:00AM") # datetime.datetime(1999, 8, 28, 0, 0)\n\n</code></pre>\n\n<p>It can handle most date formats, including the one you need to parse. It's more convenient than <code>strptime</code> as it can guess the correct format most of the time.</p>\n\n<p>It's very useful for writing tests, where readability is more important than performance.</p>\n\n<p>You can install it with:</p>\n\n<pre><code>pip install python-dateutil\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	445
Argparse optional positional arguments?	<p>Use <a href="http://docs.python.org/2/library/argparse.html#nargs" rel="noreferrer"><code>nargs='?'</code></a> (or <code>nargs='*'</code> if you will need more than one dir)</p>\n\n<pre><code>parser.add_argument('dir', nargs='?', default=os.getcwd())\n\n</code></pre>\n\n<p>extended example:</p>\n\n<pre><code>>>> import os, argparse\n\n>>> parser = argparse.ArgumentParser()\n\n>>> parser.add_argument('-v', action='store_true')\n\n_StoreTrueAction(option_strings=['-v'], dest='v', nargs=0, const=True, default=False, type=None, choices=None, help=None, metavar=None)\n\n>>> parser.add_argument('dir', nargs='?', default=os.getcwd())\n\n_StoreAction(option_strings=[], dest='dir', nargs='?', const=None, default='/home/vinay', type=None, choices=None, help=None, metavar=None)\n\n>>> parser.parse_args('somedir -v'.split())\n\nNamespace(dir='somedir', v=True)\n\n>>> parser.parse_args('-v'.split())\n\nNamespace(dir='/home/vinay', v=True)\n\n>>> parser.parse_args(''.split())\n\nNamespace(dir='/home/vinay', v=False)\n\n>>> parser.parse_args(['somedir'])\n\nNamespace(dir='somedir', v=False)\n\n>>> parser.parse_args('somedir -h -v'.split())\n\nusage: [-h] [-v] [dir]\n\npositional arguments:\n\n dir\n\noptional arguments:\n\n -h, --help show this help message and exit\n\n -v\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	446
Is there any pythonic way to combine two dicts (adding values for keys that appear in both)?	<p>Use <a href="http://docs.python.org/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a>:</p>\n\n<pre><code>>>> from collections import Counter\n\n>>> A = Counter({'a':1, 'b':2, 'c':3})\n\n>>> B = Counter({'b':3, 'c':4, 'd':5})\n\n>>> A + B\n\nCounter({'c': 7, 'b': 5, 'd': 5, 'a': 1})\n\n</code></pre>\n\n<p>Counters are basically a subclass of <code>dict</code>, so you can still do everything else with them you'd normally do with that type, such as iterate over their keys and values.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	447
How to filter Pandas dataframe using 'in' and 'not in' like in SQL	<p>You can use <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.isin.html" rel="noreferrer"><code>pd.Series.isin</code></a>. </p>\n\n<p>For "IN" use: <code>something.isin(somewhere)</code> </p>\n\n<p>Or for "NOT IN": <code>~something.isin(somewhere)</code> </p>\n\n<p>As a worked example:</p>\n\n<pre><code>>>> df\n\n countries\n\n0 US\n\n1 UK\n\n2 Germany\n\n3 China\n\n>>> countries\n\n['UK', 'China']\n\n>>> df.countries.isin(countries)\n\n0 False\n\n1 True\n\n2 False\n\n3 True\n\nName: countries, dtype: bool\n\n>>> df[df.countries.isin(countries)]\n\n countries\n\n1 UK\n\n3 China\n\n>>> df[~df.countries.isin(countries)]\n\n countries\n\n0 US\n\n2 Germany\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	448
UnicodeDecodeError when reading CSV file in Pandas with Python	<p><code>read_csv</code> takes an <code>encoding</code> option to deal with files in different formats. I mostly use <code>read_csv('file', encoding = "ISO-8859-1")</code>, or alternatively <code>encoding = "utf-8"</code> for reading, and generally <code>utf-8</code> for <code>to_csv</code>.</p>\n\n<p>You can also use one of several <code>alias</code> options like <code>'latin'</code> instead of <code>'ISO-8859-1'</code> (see <a href="https://docs.python.org/3/library/codecs.html#standard-encodings" rel="noreferrer">python docs</a>, also for numerous other encodings you may encounter).</p>\n\n<p>See <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html" rel="noreferrer">relevant Pandas documentation</a>,\n\n<a href="http://docs.python.org/3/library/csv.html#examples" rel="noreferrer">python docs examples on csv files</a>, and plenty of related questions here on SO. A good background resource is <a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" rel="noreferrer">What every developer should know about unicode and character sets</a>.</p>\n\n<p>To detect the encoding (assuming the file contains non-ascii characters), you can use <code>enca</code> (see <a href="https://linux.die.net/man/1/enconv" rel="noreferrer">man page</a>) or <code>file -i</code> (linux) or <code>file -I</code> (osx) (see <a href="https://linux.die.net/man/1/file" rel="noreferrer">man page</a>). </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	449
How can I represent an 'Enum' in Python?	<p>Before PEP 435, Python didn't have an equivalent but you could implement your own.</p>\n\n<p>Myself, I like keeping it simple (I've seen some horribly complex examples on the net), something like this ...</p>\n\n<pre><code>class Animal:\n\n DOG = 1\n\n CAT = 2\n\nx = Animal.DOG\n\n</code></pre>\n\n<hr>\n\n<p>In Python 3.4 (<a href="http://www.python.org/dev/peps/pep-0435/" rel="noreferrer">PEP 435</a>), you can make <a href="https://docs.python.org/3/library/enum.html" rel="noreferrer">Enum</a> the base class. This gets you a little bit of extra functionality, described in the PEP. For example, enum members are distinct from integers, and they are composed of a <code>name</code> and a <code>value</code>. </p>\n\n<pre><code>class Animal(Enum):\n\n DOG = 1\n\n CAT = 2\n\nprint(Animal.DOG)\n\n# <Animal.DOG: 1>\n\nprint(Animal.DOG.value)\n\n# 1\n\nprint(Animal.DOG.name)\n\n# "DOG"\n\n</code></pre>\n\n<hr>\n\n<p>If you don't want to type the values, use the following shortcut:</p>\n\n<pre><code>class Animal(Enum):\n\n DOG, CAT = range(2)\n\n</code></pre>\n\n<hr>\n\n<p><code>Enum</code> implementations <a href="https://docs.python.org/3/library/enum.html#how-are-enums-different" rel="noreferrer">can be converted to lists and are iterable</a>. The order of its members is the declaration order and has nothing to do with their values. For example: </p>\n\n<pre><code>class Animal(Enum):\n\n DOG = 1\n\n CAT = 2\n\n COW = 0\n\nlist(Animal)\n\n# [<Animal.DOG: 1>, <Animal.CAT: 2>, <Animal.COW: 0>]\n\n[animal.value for animal in Animal]\n\n# [1, 2, 0]\n\nAnimal.CAT in Animal\n\n# True\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	450
How do I get my Python program to sleep for 50 milliseconds?	<pre><code>from time import sleep\n\nsleep(0.05)\n\n</code></pre>\n\n<p><a href="http://docs.python.org/library/time.html#time.sleep" rel="noreferrer">Reference</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	451
Split string with multiple delimiters in Python	<p>Luckily, Python has this built-in :)</p>\n\n<pre><code>import re\n\nre.split('; |, ',str)\n\n</code></pre>\n\n<p><strong>Update:</strong><br>Following your comment:</p>\n\n<pre><code>>>> a='Beautiful, is; better*than ugly'\n\n>>> import re\n\n>>> re.split('; |, |\*| ',a)\n\n['Beautiful', 'is', 'better', 'than', 'ugly']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	452
How can I iterate over files in a given directory?	<p>Original answer:</p>\n\n<pre class="lang-py prettyprint-override"><code>import os\n\nfor filename in os.listdir(directory):\n\n if filename.endswith(".asm") or filename.endswith(".py"): \n\n # print(os.path.join(directory, filename))\n\n continue\n\n else:\n\n continue\n\n</code></pre>\n\n<p>Python 3.6 version of the above answer, using <a href="https://docs.python.org/3.6/library/os.html" rel="noreferrer"><code>os</code></a> - assuming that you have the directory path as a <code>str</code> object in a variable called <code>directory_in_str</code>:</p>\n\n<pre class="lang-py prettyprint-override"><code>import os\n\ndirectory = os.fsencode(directory_in_str)\n\nfor file in os.listdir(directory):\n\n filename = os.fsdecode(file)\n\n if filename.endswith(".asm") or filename.endswith(".py"): \n\n # print(os.path.join(directory, filename))\n\n continue\n\n else:\n\n continue\n\n</code></pre>\n\n<p>Or recursively, using <a href="https://docs.python.org/3.6/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a>:</p>\n\n<pre class="lang-py prettyprint-override"><code>from pathlib import Path\n\npathlist = Path(directory_in_str).glob('**/*.asm')\n\nfor path in pathlist:\n\n # because path is object not string\n\n path_in_str = str(path)\n\n # print(path_in_str)\n\n</code></pre>\n\n<ul>\n\n<li>Use <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob" rel="noreferrer"><code>rglob</code></a> to replace <code>glob('**/*.asm')</code> with <code>rglob('*.asm')</code>\n\n<ul>\n\n<li><em>This is like calling <a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob" rel="noreferrer"><code>Path.glob()</code></a> with <code>'**/'</code> added in front of the given relative pattern:</em></li>\n\n</ul>\n\n</li>\n\n</ul>\n\n<pre class="lang-py prettyprint-override"><code>from pathlib import Path\n\npathlist = Path(directory_in_str).rglob('*.asm')\n\nfor path in pathlist:\n\n # because path is object not string\n\n path_in_str = str(path)\n\n # print(path_in_str)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	453
Unresolved reference issue in PyCharm	<p>Manually adding it as you have done <em>is</em> indeed one way of doing this, but there is a simpler method, and that is by simply telling pycharm that you want to add the <code>src</code> folder as a source root, and then adding the sources root to your python path.</p>\n\n<p>This way, you don't have to hard code things into your interpreter's settings:</p>\n\n<ul>\n\n<li>Add <code>src</code> as a source content root:</li>\n\n</ul>\n\n<p>                           \n\n<img src="https://i.stack.imgur.com/9WunC.png" alt="enter image description here"></p>\n\n<ul>\n\n<li>Then make sure to add add sources to your <code>PYTHONPATH</code>:</li>\n\n</ul>\n\n<p><img src="https://i.stack.imgur.com/rk59O.png" alt="enter image description here"></p>\n\n<ul>\n\n<li>Now imports will be resolved:</li>\n\n</ul>\n\n<p>                     \n\n<img src="https://i.stack.imgur.com/4Z6RD.png" alt="enter image description here"></p>\n\n<p>This way, you can add whatever you want as a source root, and things will simply work. If you unmarked it as a source root however, you <em>will</em> get an error:</p>\n\n<p>                                 \n\n<img src="https://i.stack.imgur.com/vMII4.png" alt="enter image description here"></p>\n\n<p>After all this don't forget to restart. In PyCharm menu select: File --> Invalidate Caches / Restart </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	454
How do I list all files of a directory?	<pre><code>import os\n\nos.listdir("somedirectory")\n\n</code></pre>\n\n<p>will return a list of all files and directories in "somedirectory".</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	455
Convert list to tuple in Python	<p>It should work fine. Don't use <code>tuple</code>, <code>list</code> or other special names as a variable name. It's probably what's causing your problem.</p>\n\n<pre><code>>>> l = [4,5,6]\n\n>>> tuple(l)\n\n(4, 5, 6)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	456
Delete rows from a pandas DataFrame based on a conditional expression involving len(string) giving KeyError	<p>To directly answer this question's original title "How to delete rows from a pandas DataFrame based on a conditional expression" (which I understand is not necessarily the OP's problem but could help other users coming across this question) one way to do this is to use the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.drop.html" rel="noreferrer">drop</a> method:</p>\n\n<p><code>df = df.drop(some labels)</code></p>\n\n<p><code>df = df.drop(df[<some boolean condition>].index)</code></p>\n\n<p><strong>Example</strong></p>\n\n<p>To remove all rows where column 'score' is < 50:</p>\n\n<p><code>df = df.drop(df[df.score < 50].index)</code></p>\n\n<p>In place version (as pointed out in comments)</p>\n\n<p><code>df.drop(df[df.score < 50].index, inplace=True)</code></p>\n\n<p><strong>Multiple conditions</strong></p>\n\n<p>(see <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#boolean-indexing" rel="noreferrer">Boolean Indexing</a>)</p>\n\n<blockquote>\n\n <p>The operators are: <code>|</code> for <code>or</code>, <code>&</code> for <code>and</code>, and <code>~</code> for <code>not</code>. These must be\n\n grouped by using parentheses.</p>\n\n</blockquote>\n\n<p>To remove all rows where column 'score' is < 50 and > 20</p>\n\n<p><code>df = df.drop(df[(df.score < 50) & (df.score > 20)].index)</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	457
Accessing the index in 'for' loops?	<blockquote>\n\n <h1>Using a for loop, how do I access the loop index, from 1 to 5 in this case?</h1>\n\n</blockquote>\n\n<p>Use <code>enumerate</code> to get the index with the element as you iterate:</p>\n\n<pre><code>for index, item in enumerate(items):\n\n print(index, item)\n\n</code></pre>\n\n<p>And note that Python's indexes start at zero, so you would get 0 to 4 with the above. If you want the count, 1 to 5, do this:</p>\n\n<pre><code>for count, item in enumerate(items, start=1):\n\n print(count, item)\n\n</code></pre>\n\n<h1>Unidiomatic control flow</h1>\n\n<p>What you are asking for is the Pythonic equivalent of the following, which is the algorithm most programmers of lower-level languages would use:</p>\n\n<blockquote>\n\n<pre><code>index = 0 # Python's indexing starts at zero\n\nfor item in items: # Python's for loops are a "for each" loop \n\n print(index, item)\n\n index += 1\n\n</code></pre>\n\n</blockquote>\n\n<p>Or in languages that do not have a for-each loop:</p>\n\n<blockquote>\n\n<pre><code>index = 0\n\nwhile index < len(items):\n\n print(index, items[index])\n\n index += 1\n\n</code></pre>\n\n</blockquote>\n\n<p>or sometimes more commonly (but unidiomatically) found in Python:</p>\n\n<blockquote>\n\n<pre><code>for index in range(len(items)):\n\n print(index, items[index])\n\n</code></pre>\n\n</blockquote>\n\n<h1>Use the Enumerate Function</h1>\n\n<p>Python's <a href="https://docs.python.org/2/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code> function</a> reduces the visual clutter by hiding the accounting for the indexes, and encapsulating the iterable into another iterable (an <code>enumerate</code> object) that yields a two-item tuple of the index and the item that the original iterable would provide. That looks like this:</p>\n\n<pre><code>for index, item in enumerate(items, start=0): # default is zero\n\n print(index, item)\n\n</code></pre>\n\n<p>This code sample is fairly well the <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#index-item-2-enumerate" rel="noreferrer">canonical</a> example of the difference between code that is idiomatic of Python and code that is not. Idiomatic code is sophisticated (but not complicated) Python, written in the way that it was intended to be used. Idiomatic code is expected by the designers of the language, which means that usually this code is not just more readable, but also more efficient.</p>\n\n<h2>Getting a count</h2>\n\n<p>Even if you don't need indexes as you go, but you need a count of the iterations (sometimes desirable) you can start with <code>1</code> and the final number will be your count.</p>\n\n<pre><code>for count, item in enumerate(items, start=1): # default is zero\n\n print(item)\n\nprint('there were {0} items printed'.format(count))\n\n</code></pre>\n\n<p>The count seems to be more what you intend to ask for (as opposed to index) when you said you wanted from 1 to 5.</p>\n\n<hr>\n\n<h2>Breaking it down - a step by step explanation</h2>\n\n<p>To break these examples down, say we have a list of items that we want to iterate over with an index:</p>\n\n<pre><code>items = ['a', 'b', 'c', 'd', 'e']\n\n</code></pre>\n\n<p>Now we pass this iterable to enumerate, creating an enumerate object:</p>\n\n<pre><code>enumerate_object = enumerate(items) # the enumerate object\n\n</code></pre>\n\n<p>We can pull the first item out of this iterable that we would get in a loop with the <code>next</code> function:</p>\n\n<pre><code>iteration = next(enumerate_object) # first iteration from enumerate\n\nprint(iteration)\n\n</code></pre>\n\n<p>And we see we get a tuple of <code>0</code>, the first index, and <code>'a'</code>, the first item:</p>\n\n<pre><code>(0, 'a')\n\n</code></pre>\n\n<p>we can use what is referred to as "<a href="https://docs.python.org/2/tutorial/datastructures.html#tuples-and-sequences" rel="noreferrer">sequence unpacking</a>" to extract the elements from this two-tuple:</p>\n\n<pre><code>index, item = iteration\n\n# 0, 'a' = (0, 'a') # essentially this.\n\n</code></pre>\n\n<p>and when we inspect <code>index</code>, we find it refers to the first index, 0, and <code>item</code> refers to the first item, <code>'a'</code>.</p>\n\n<pre><code>>>> print(index)\n\n0\n\n>>> print(item)\n\na\n\n</code></pre>\n\n<h1>Conclusion</h1>\n\n<ul>\n\n<li>Python indexes start at zero</li>\n\n<li>To get these indexes from an iterable as you iterate over it, use the enumerate function</li>\n\n<li>Using enumerate in the idiomatic way (along with tuple unpacking) creates code that is more readable and maintainable:</li>\n\n</ul>\n\n<p>So do this:</p>\n\n<pre><code>for index, item in enumerate(items, start=0): # Python indexes start at zero\n\n print(index, item)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	458
How to install psycopg2 with "pip" on Python?	<p><strong><em>Note</strong>: Since a while back, there are binary wheels for Windows in PyPI, so this should no longer be an issue for Windows users. Below are solutions for Linux, Mac users, since lots of them find this post through web searches.</em></p>\n\n<hr>\n\n<h1>Option 1</h1>\n\n<p>Install the <code>psycopg2-binary</code> PyPI package instead, it has Python wheels for Linux and Mac OS.</p>\n\n<pre><code>pip install psycopg2-binary\n\n</code></pre>\n\n<hr>\n\n<h1>Option 2</h1>\n\n<p>Install the prerequsisites for building the <code>psycopg2</code> package from source:</p>\n\n<h2>Debian/Ubuntu</h2>\n\n<h3>Python 3</h3>\n\n<pre><code>sudo apt install libpq-dev python3-dev\n\n</code></pre>\n\n<p>You might need to install <code>python3.8-dev</code> or similar for e.g. Python 3.8.</p>\n\n<h3>Python 2<sup>1</sup></h3>\n\n<pre><code>sudo apt install libpq-dev python-dev\n\n</code></pre>\n\n<p>If that's not enough, try</p>\n\n<pre><code>sudo apt install build-essential\n\n</code></pre>\n\n<p>or</p>\n\n<pre><code>sudo apt install postgresql-server-dev-all\n\n</code></pre>\n\n<p>as well before installing psycopg2 again.</p>\n\n<h2>CentOS 6</h2>\n\n<p>See <a href="https://stackoverflow.com/a/13158616/202522">Banjer's answer</a></p>\n\n<hr>\n\n<p><sup>1</sup> Really? It's 2020</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	459
What is the difference between range and xrange functions in Python 2.X?	<p>In Python 2.x:</p>\n\n<ul>\n\n<li><p><code>range</code> creates a list, so if you do <code>range(1, 10000000)</code> it creates a list in memory with <code>9999999</code> elements.</p></li>\n\n<li><p><code>xrange</code> is a sequence object that evaluates lazily. </p></li>\n\n</ul>\n\n<p>In Python 3, <code>range</code> does the equivalent of python's <code>xrange</code>, and to get the list, you have to use <code>list(range(...))</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	460
Return None if Dictionary key is not available	<p>You can use <a href="http://docs.python.org/library/stdtypes.html#dict.get" rel="noreferrer"><code>dict.get()</code></a></p>\n\n<pre><code>value = d.get(key)\n\n</code></pre>\n\n<p>which will return <code>None</code> if <code>key is not in d</code>. You can also provide a different default value that will be returned instead of <code>None</code>:</p>\n\n<pre><code>value = d.get(key, "empty")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	461
Working with UTF-8 encoding in Python source	<p>In the source header you can declare:</p>\n\n<pre><code>#!/usr/bin/env python\n\n# -*- coding: utf-8 -*-\n\n....\n\n</code></pre>\n\n<p>It is described in the <a href="http://www.python.org/dev/peps/pep-0263/" rel="noreferrer">PEP 0263</a>:</p>\n\n<p>Then you can use UTF-8 in strings:</p>\n\n<pre><code>#!/usr/bin/env python\n\n# -*- coding: utf-8 -*-\n\nu = 'idzie wÄ Å¼ wÄ skÄ drÃ³Å¼kÄ '\n\nuu = u.decode('utf8')\n\ns = uu.encode('cp1250')\n\nprint(s)\n\n</code></pre>\n\n<p>This declaration is not needed in Python 3 as UTF-8 is the default source encoding (see <a href="https://www.python.org/dev/peps/pep-3120/" rel="noreferrer">PEP 3120</a>).</p>\n\n<p>In addition, it may be worth verifying that your text editor properly encodes your code in UTF-8. Otherwise, you may have invisible characters that are not interpreted as UTF-8.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	462
How to print colored text in Python?	<p>I'm surprised no one has mentioned the <a href="http://pypi.python.org/pypi/termcolor" rel="noreferrer">Python termcolor module</a>. Usage is pretty simple:</p>\n\n<pre><code>from termcolor import colored\n\nprint colored('hello', 'red'), colored('world', 'green')\n\n</code></pre>\n\n<p>Or in Python 3:</p>\n\n<pre><code>print(colored('hello', 'red'), colored('world', 'green'))\n\n</code></pre>\n\n<p>It may not be sophisticated enough, however, for game programming and the "colored blocks" that you want to do...</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	463
How to put the legend out of the plot	<h2>Placing the legend (<code>bbox_to_anchor</code>)</h2>\n\n<p>A legend is positioned inside the bounding box of the axes using the <code>loc</code> argument to <a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.legend" rel="noreferrer"><code>plt.legend</code></a>.<br>\n\nE.g. <code>loc="upper right"</code> places the legend in the upper right corner of the bounding box, which by default extents from <code>(0,0)</code> to <code>(1,1)</code> in axes coordinates (or in bounding box notation <code>(x0,y0, width, height)=(0,0,1,1)</code>).</p>\n\n<p>To place the legend outside of the axes bounding box, one may specify a tuple <code>(x0,y0)</code> of axes coordinates of the lower left corner of the legend.</p>\n\n<pre><code>plt.legend(loc=(1.04,0))\n\n</code></pre>\n\n<p>However, a more versatile approach would be to manually specify the bounding box into which the legend should be placed, using the <strong><code>bbox_to_anchor</code></strong> argument. One can restrict oneself to supply only the <code>(x0,y0)</code> part of the bbox. This creates a zero span box, out of which the legend will expand in the direction given by the <code>loc</code> argument. E.g.</p>\n\n<p><strong><pre>plt.legend(bbox_to_anchor=(1.04,1), loc="upper left")</pre></strong></p>\n\n<p>places the legend outside the axes, such that the upper left corner of the legend is at position <code>(1.04,1)</code> in axes coordinates. </p>\n\n<p>Further examples are given below, where additionally the interplay between different arguments like <code>mode</code> and <code>ncols</code> are shown. </p>\n\n<p><a href="https://i.stack.imgur.com/OIMyM.png" rel="noreferrer"><img src="https://i.stack.imgur.com/OIMyM.png" alt="enter image description here"></a></p>\n\n<pre><code>l1 = plt.legend(bbox_to_anchor=(1.04,1), borderaxespad=0)\n\nl2 = plt.legend(bbox_to_anchor=(1.04,0), loc="lower left", borderaxespad=0)\n\nl3 = plt.legend(bbox_to_anchor=(1.04,0.5), loc="center left", borderaxespad=0)\n\nl4 = plt.legend(bbox_to_anchor=(0,1.02,1,0.2), loc="lower left",\n\n mode="expand", borderaxespad=0, ncol=3)\n\nl5 = plt.legend(bbox_to_anchor=(1,0), loc="lower right", \n\n bbox_transform=fig.transFigure, ncol=3)\n\nl6 = plt.legend(bbox_to_anchor=(0.4,0.8), loc="upper right")\n\n</code></pre>\n\n<p>Details about how to interpret the 4-tuple argument to <code>bbox_to_anchor</code>, as in <code>l4</code>, can be found in <a href="https://stackoverflow.com/questions/39803385/what-does-a-4-element-tuple-argument-for-bbox-to-anchor-mean-in-matplotlib">this question</a>. The <code>mode="expand"</code> expands the legend horizontally inside the bounding box given by the 4-tuple. For a vertically expanded legend, see <a href="https://stackoverflow.com/questions/46710546/matplotlib-expand-legend-vertically">this question</a>.</p>\n\n<p>Sometimes it may be useful to specify the bounding box in figure coordinates instead of axes coordinates. This is shown in the example <code>l5</code> from above, where the <code>bbox_transform</code> argument is used to put the legend in the lower left corner of the figure. </p>\n\n<h3>Postprocessing</h3>\n\n<p>Having placed the legend outside the axes often leads to the undesired situation that it is completely or partially outside the figure canvas.</p>\n\n<p>Solutions to this problem are:</p>\n\n<ul>\n\n<li><p><strong>Adjust the subplot parameters</strong><br>\n\nOne can adjust the subplot parameters such, that the axes take less space inside the figure (and thereby leave more space to the legend) by using <a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplots_adjust" rel="noreferrer"><code>plt.subplots_adjust</code></a>. E.g. </p>\n\n<pre><code>plt.subplots_adjust(right=0.7)\n\n</code></pre>\n\n<p>leaves 30% space on the right-hand side of the figure, where one could place the legend.</p></li>\n\n<li><p><strong>Tight layout</strong><br>\n\nUsing <a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.tight_layout" rel="noreferrer"><code>plt.tight_layout</code></a> Allows to automatically adjust the subplot parameters such that the elements in the figure sit tight against the figure edges. Unfortunately, the legend is not taken into account in this automatism, but we can supply a rectangle box that the whole subplots area (including labels) will fit into. </p>\n\n<pre><code>plt.tight_layout(rect=[0,0,0.75,1])\n\n</code></pre></li>\n\n<li><p><strong>Saving the figure with <code>bbox_inches = "tight"</code></strong><br>\n\nThe argument <code>bbox_inches = "tight"</code> to <a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.savefig" rel="noreferrer"><code>plt.savefig</code></a> can be used to save the figure such that all artist on the canvas (including the legend) are fit into the saved area. If needed, the figure size is automatically adjusted. </p>\n\n<pre><code>plt.savefig("output.png", bbox_inches="tight")\n\n</code></pre></li>\n\n<li><strong>automatically adjusting the subplot params</strong><br>\n\nA way to automatically adjust the subplot position such that the legend fits inside the canvas <strong>without changing the figure size</strong> can be found in this answer: <a href="https://stackoverflow.com/a/43001737/4124317">Creating figure with exact size and no padding (and legend outside the axes)</a></li>\n\n</ul>\n\n<p>Comparison between the cases discussed above: </p>\n\n<p><a href="https://i.stack.imgur.com/zqKjY.png" rel="noreferrer"><img src="https://i.stack.imgur.com/zqKjY.png" alt="enter image description here"></a></p>\n\n<h2>Alternatives</h2>\n\n<p><strong>A figure legend</strong><br>\n\nOne may use a legend to the figure instead of the axes, <a href="https://matplotlib.org/api/_as_gen/matplotlib.figure.Figure.html#matplotlib.figure.Figure.legend" rel="noreferrer"><code>matplotlib.figure.Figure.legend</code></a>. This has become especially useful for matplotlib version >=2.1, where no special arguments are needed</p>\n\n<pre><code>fig.legend(loc=7) \n\n</code></pre>\n\n<p>to create a legend for all artists in the different axes of the figure. The legend is placed using the <code>loc</code> argument, similar to how it is placed inside an axes, but in reference to the whole figure - hence it will be outside the axes somewhat automatically. What remains is to adjust the subplots such that there is no overlap between the legend and the axes. Here the point <em>"Adjust the subplot parameters"</em> from above will be helpful. An example:</p>\n\n<pre><code>import numpy as np\n\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0,2*np.pi)\n\ncolors=["#7aa0c4","#ca82e1" ,"#8bcd50","#e18882"]\n\nfig, axes = plt.subplots(ncols=2)\n\nfor i in range(4):\n\n axes[i//2].plot(x,np.sin(x+i), color=colors[i],label="y=sin(x+{})".format(i))\n\nfig.legend(loc=7)\n\nfig.tight_layout()\n\nfig.subplots_adjust(right=0.75) \n\nplt.show()\n\n</code></pre>\n\n<p><a href="https://i.stack.imgur.com/v1AU6.png" rel="noreferrer"><img src="https://i.stack.imgur.com/v1AU6.png" alt="enter image description here"></a></p>\n\n<p><strong>Legend inside dedicated subplot axes</strong><br>\n\nAn alternative to using <code>bbox_to_anchor</code> would be to place the legend in its dedicated subplot axes (<code>lax</code>). \n\nSince the legend subplot should be smaller than the plot, we may use <code>gridspec_kw={"width_ratios":[4,1]}</code> at axes creation.\n\nWe can hide the axes <code>lax.axis("off")</code> but still put a legend in. The legend handles and labels need to obtained from the real plot via <code>h,l = ax.get_legend_handles_labels()</code>, and can then be supplied to the legend in the <code>lax</code> subplot, <code>lax.legend(h,l)</code>. A complete example is below.</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nplt.rcParams["figure.figsize"] = 6,2\n\nfig, (ax,lax) = plt.subplots(ncols=2, gridspec_kw={"width_ratios":[4,1]})\n\nax.plot(x,y, label="y=sin(x)")\n\n....\n\nh,l = ax.get_legend_handles_labels()\n\nlax.legend(h,l, borderaxespad=0)\n\nlax.axis("off")\n\nplt.tight_layout()\n\nplt.show()\n\n</code></pre>\n\n<p>This produces a plot which is visually pretty similar to the plot from above:</p>\n\n<p><a href="https://i.stack.imgur.com/4RrYb.png" rel="noreferrer"><img src="https://i.stack.imgur.com/4RrYb.png" alt="enter image description here"></a></p>\n\n<p>We could also use the first axes to place the legend, but use the <code>bbox_transform</code> of the legend axes,</p>\n\n<pre><code>ax.legend(bbox_to_anchor=(0,0,1,1), bbox_transform=lax.transAxes)\n\nlax.axis("off")\n\n</code></pre>\n\n<p>In this approach, we do not need to obtain the legend handles externally, but we need to specify the <code>bbox_to_anchor</code> argument.</p>\n\n<h3>Further reading and notes:</h3>\n\n<ul>\n\n<li>Consider the matplotlib <a href="http://matplotlib.org/users/legend_guide.html" rel="noreferrer">legend guide</a> with some examples of other stuff you want to do with legends.</li>\n\n<li>Some example code for placing legends for pie charts may directly be found in answer to this question: <a href="https://stackoverflow.com/questions/43272206/python-legend-overlaps-with-the-pie-chart">Python - Legend overlaps with the pie chart</a></li>\n\n<li>The <code>loc</code> argument can take numbers instead of strings, which make calls shorter, however, they are not very intuitively mapped to each other. Here is the mapping for reference: </li>\n\n</ul>\n\n<p><a href="https://i.stack.imgur.com/jxecX.png" rel="noreferrer"><img src="https://i.stack.imgur.com/jxecX.png" alt="enter image description here"></a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	464
How can I parse a YAML file in Python	<p>The easiest and purest method without relying on C headers is PyYaml (<a href="http://pyyaml.org/wiki/PyYAMLDocumentation" rel="noreferrer">documentation</a>), which can be installed via <strong><code>pip install pyyaml</code></strong>:</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport yaml\n\nimport json\n\nwith open("example.yaml", 'r') as stream:\n\n try:\n\n print(yaml.safe_load(stream))\n\n except yaml.YAMLError as exc:\n\n print(exc)\n\n</code></pre>\n\n<p>And that's it. A plain <code>yaml.load()</code> function also exists, but <code>yaml.safe_load()</code> should always be preferred unless you explicitly need the arbitrary object serialization/deserialization provided in order to avoid introducing the possibility for arbitrary code execution.</p>\n\n<p>Note the PyYaml project supports versions up through the <a href="https://yaml.org/spec/1.1/spec.html" rel="noreferrer">YAML 1.1 specification</a>. If <a href="https://yaml.org/spec/1.2/spec.html" rel="noreferrer">YAML 1.2 specification</a> support is needed, see <a href="https://yaml.readthedocs.io/" rel="noreferrer">ruamel.yaml</a> as noted in <a href="https://stackoverflow.com/a/38922434/313192">this answer</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	465
Convert date to datetime in Python	<p>You can use <a href="https://docs.python.org/2/library/datetime.html#datetime.datetime.combine" rel="noreferrer"><code>datetime.combine(date, time)</code></a>; for the time, you create a <code>datetime.time</code> object initialized to midnight.</p>\n\n<pre><code>from datetime import date\n\nfrom datetime import datetime\n\ndt = datetime.combine(date.today(), datetime.min.time())\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	466
How to set the current working directory?	<p>Try <a href="http://docs.python.org/library/os.html#os.chdir" rel="noreferrer"><code>os.chdir</code></a></p>\n\n<blockquote>\n\n<pre><code>os.chdir(path)\n\n</code></pre>\n\n <p>Â Â Â Â Â Â Â Â Change the current working directory to path. Availability: Unix, Windows.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	467
Does Python have a ternary conditional operator?	<p>You can index into a tuple:</p>\n\n<pre><code>(falseValue, trueValue)[test]\n\n</code></pre>\n\n<p><code>test</code> needs to return <em>True</em> or <em>False</em>.<br>\n\nIt might be safer to always implement it as:</p>\n\n<pre><code>(falseValue, trueValue)[test == True]\n\n</code></pre>\n\n<p>or you can use the built-in <a href="https://docs.python.org/3.3/library/functions.html#bool" rel="noreferrer" title="bool"><code>bool()</code></a> to assure a <a href="https://en.wikipedia.org/wiki/Boolean_data_type" rel="noreferrer" title="Boolean data type">Boolean</a> value:</p>\n\n<pre><code>(falseValue, trueValue)[bool(<expression>)]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	468
Correct way to try/except using Python requests module?	<p>Have a look at the Requests <a href="https://requests.readthedocs.io/en/latest/user/quickstart/#errors-and-exceptions" rel="noreferrer">exception docs</a>. In short:</p>\n\n<blockquote>\n\n<p>In the event of a network problem (e.g. DNS failure, refused connection, etc), Requests will raise a <strong><code>ConnectionError</code></strong> exception.</p>\n\n<p>In the event of the rare invalid HTTP response, Requests will raise an <strong><code>HTTPError</code></strong> exception.</p>\n\n<p>If a request times out, a <strong><code>Timeout</code></strong> exception is raised.</p>\n\n<p>If a request exceeds the configured number of maximum redirections, a <strong><code>TooManyRedirects</code></strong> exception is raised.</p>\n\n<p>All exceptions that Requests explicitly raises inherit from <strong><code>requests.exceptions.RequestException</code></strong>.</p>\n\n</blockquote>\n\n<p>To answer your question, what you show will <em>not</em> cover all of your bases. You'll only catch connection-related errors, not ones that time out.</p>\n\n<p>What to do when you catch the exception is really up to the design of your script/program. Is it acceptable to exit? Can you go on and try again? If the error is catastrophic and you can't go on, then yes, you may abort your program by raising <a href="https://docs.python.org/3/library/exceptions.html#SystemExit" rel="noreferrer">SystemExit</a> (a nice way to both print an error and call <code>sys.exit</code>).</p>\n\n<p>You can either catch the base-class exception, which will handle all cases:</p>\n\n<pre><code>try:\n\n r = requests.get(url, params={'s': thing})\n\nexcept requests.exceptions.RequestException as e: # This is the correct syntax\n\n raise SystemExit(e)\n\n</code></pre>\n\n<p>Or you can catch them separately and do different things.</p>\n\n<pre><code>try:\n\n r = requests.get(url, params={'s': thing})\n\nexcept requests.exceptions.Timeout:\n\n # Maybe set up for a retry, or continue in a retry loop\n\nexcept requests.exceptions.TooManyRedirects:\n\n # Tell the user their URL was bad and try a different one\n\nexcept requests.exceptions.RequestException as e:\n\n # catastrophic error. bail.\n\n raise SystemExit(e)\n\n</code></pre>\n\n<hr />\n\n<p>As <a href="https://stackoverflow.com/users/456550/christian-long">Christian</a> pointed out:</p>\n\n<blockquote>\n\n<p>If you want http errors (e.g. 401 Unauthorized) to raise exceptions, you can call <a href="https://requests.readthedocs.io/en/latest/api/#requests.Response.raise_for_status" rel="noreferrer"><code>Response.raise_for_status</code></a>. That will raise an <code>HTTPError</code>, if the response was an http error.</p>\n\n</blockquote>\n\n<p>An example:</p>\n\n<pre><code>try:\n\n r = requests.get('http://www.google.com/nothere')\n\n r.raise_for_status()\n\nexcept requests.exceptions.HTTPError as err:\n\n raise SystemExit(err)\n\n</code></pre>\n\n<p>Will print:</p>\n\n<pre class="lang-none prettyprint-override"><code>404 Client Error: Not Found for url: http://www.google.com/nothere\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	469
How can I force division to be floating point? Division keeps rounding down to 0?	<p>In Python 2, division of two ints produces an int. In Python 3, it produces a float. We can get the new behaviour by importing from <code>__future__</code>.</p>\n\n<pre><code>>>> from __future__ import division\n\n>>> a = 4\n\n>>> b = 6\n\n>>> c = a / b\n\n>>> c\n\n0.66666666666666663\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	470
How to calculate number of days between two given dates?	<p>If you have two date objects, you can just subtract them, which computes a <a href="https://docs.python.org/3/library/datetime.html#datetime.timedelta" rel="noreferrer"><code>timedelta</code></a> object.</p>\n\n<pre><code>from datetime import date\n\nd0 = date(2008, 8, 18)\n\nd1 = date(2008, 9, 26)\n\ndelta = d1 - d0\n\nprint(delta.days)\n\n</code></pre>\n\n<p>The relevant section of the docs:\n\n<a href="https://docs.python.org/library/datetime.html" rel="noreferrer">https://docs.python.org/library/datetime.html</a>.</p>\n\n<p>See <a href="https://stackoverflow.com/a/8258465">this answer</a> for another example.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	471
How to deal with SettingWithCopyWarning in Pandas?	<p>The <code>SettingWithCopyWarning</code> was created to flag potentially confusing "chained" assignments, such as the following, which does not always work as expected, particularly when the first selection returns a <em>copy</em>. [see <a href="https://github.com/pydata/pandas/pull/5390" rel="noreferrer">GH5390</a> and <a href="https://github.com/pydata/pandas/issues/5597" rel="noreferrer">GH5597</a> for background discussion.]</p>\n\n<pre><code>df[df['A'] > 2]['B'] = new_val # new_val not set in df\n\n</code></pre>\n\n<p>The warning offers a suggestion to rewrite as follows:</p>\n\n<pre><code>df.loc[df['A'] > 2, 'B'] = new_val\n\n</code></pre>\n\n<p>However, this doesn't fit your usage, which is equivalent to:</p>\n\n<pre><code>df = df[df['A'] > 2]\n\ndf['B'] = new_val\n\n</code></pre>\n\n<p>While it's clear that you don't care about writes making it back to the original frame (since you are overwriting the reference to it), unfortunately this pattern cannot be differentiated from the first chained assignment example. Hence the (false positive) warning. The potential for false positives is addressed in the <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy" rel="noreferrer">docs on indexing</a>, if you'd like to read further. You can safely disable this new warning with the following assignment.</p>\n\n<pre><code>import pandas as pd\n\npd.options.mode.chained_assignment = None # default='warn'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	472
open() in Python does not create a file if it doesn't exist	<p>You should use <code>open</code> with the <code>w+</code> mode:</p>\n\n<pre><code>file = open('myfile.dat', 'w+')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	473
Elegant Python function to convert CamelCase to snake_case?	<h2>Camel case to snake case</h2>\n\n<pre class="lang-py prettyprint-override"><code>import re\n\nname = 'CamelCaseName'\n\nname = re.sub(r'(?<!^)(?=[A-Z])', '_', name).lower()\n\nprint(name) # camel_case_name\n\n</code></pre>\n\n<p>If you do this many times and the above is slow, compile the regex beforehand:</p>\n\n<pre><code>pattern = re.compile(r'(?<!^)(?=[A-Z])')\n\nname = pattern.sub('_', name).lower()\n\n</code></pre>\n\n<p>To handle more advanced cases specially (this is not reversible anymore):</p>\n\n<pre class="lang-py prettyprint-override"><code>def camel_to_snake(name):\n\n name = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)\n\n return re.sub('([a-z0-9])([A-Z])', r'\1_\2', name).lower()\n\nprint(camel_to_snake('camel2_camel2_case')) # camel2_camel2_case\n\nprint(camel_to_snake('getHTTPResponseCode')) # get_http_response_code\n\nprint(camel_to_snake('HTTPResponseCodeXYZ')) # http_response_code_xyz\n\n</code></pre>\n\n<h2>Snake case to camel case</h2>\n\n<pre class="lang-py prettyprint-override"><code>name = 'snake_case_name'\n\nname = ''.join(word.title() for word in name.split('_'))\n\nprint(name) # SnakeCaseName\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	474
What does on_delete do on Django models?	<p>This is the behaviour to adopt when the <em>referenced</em> object is deleted. It is not specific to django, this is an SQL standard.</p>\n\n<p>There are 6 possible actions to take when such event occurs:</p>\n\n<ul>\n\n<li><code>CASCADE</code>: When the referenced object is deleted, also delete the objects that have references to it (When you remove a blog post for instance, you might want to delete comments as well). SQL equivalent: <code>CASCADE</code>.</li>\n\n<li><code>PROTECT</code>: Forbid the deletion of the referenced object. To delete it you will have to delete all objects that reference it manually. SQL equivalent: <code>RESTRICT</code>.</li>\n\n<li><code>SET_NULL</code>: Set the reference to NULL (requires the field to be nullable). For instance, when you delete a User, you might want to keep the comments he posted on blog posts, but say it was posted by an anonymous (or deleted) user. SQL equivalent: <code>SET NULL</code>.</li>\n\n<li><code>SET_DEFAULT</code>: Set the default value. SQL equivalent: <code>SET DEFAULT</code>.</li>\n\n<li><code>SET(...)</code>: Set a given value. This one is not part of the SQL standard and is entirely handled by Django.</li>\n\n<li><code>DO_NOTHING</code>: Probably a very bad idea since this would create integrity issues in your database (referencing an object that actually doesn't exist). SQL equivalent: <code>NO ACTION</code>.</li>\n\n</ul>\n\n<p>Source: <a href="https://docs.djangoproject.com/en/stable/ref/models/fields/#django.db.models.ForeignKey.on_delete" rel="noreferrer">Django documentation</a></p>\n\n<p>See also <a href="https://www.postgresql.org/docs/current/static/sql-createtable.html" rel="noreferrer">the documentation of PostGreSQL</a> for instance.</p>\n\n<p>In most cases, <code>CASCADE</code> is the expected behaviour, but for every ForeignKey, you should always ask yourself what is the expected behaviour in this situation. <code>PROTECT</code> and <code>SET_NULL</code> are often useful. Setting <code>CASCADE</code> where it should not, can potentially delete all your database in cascade, by simply deleting a single user.</p>\n\n<hr>\n\n<p><strong>Additional note to clarify cascade direction</strong></p>\n\n<p>It's funny to notice that the direction of the <code>CASCADE</code> action is not clear to many people. Actually, it's funny to notice that <strong>only</strong> the <code>CASCADE</code> action is not clear. I understand the cascade behavior might be confusing, however you must think that <strong>it is the same direction as any other action</strong>. Thus, if you feel that <code>CASCADE</code> direction is not clear to you, it actually means that <code>on_delete</code> behavior is not clear to you.</p>\n\n<p>In your database, a foreign key is basically represented by an integer field which value is the primary key of the foreign object. Let's say you have an entry <strong>comment_A</strong>, which has a foreign key to an entry <strong>article_B</strong>. If you delete the entry <strong>comment_A</strong>, everything is fine, <strong>article_B</strong> used to live without <strong>comment_A</strong> and don't bother if it's deleted. However, if you delete <strong>article_B</strong>, then <strong>comment_A</strong> panics! It never lived without <strong>article_B</strong> and needs it, it's part of its attributes (<code>article=article_B</code>, but what is *article_B**???). This is where <code>on_delete</code> steps in, to determine how to resolve this <em>integrity error</em>, either by saying:</p>\n\n<ul>\n\n<li><em>"No! Please! Don't! I can't live without you!"</em> (which is said <code>PROTECT</code> in SQL language)</li>\n\n<li><em>"Alright, if I'm not yours, then I'm nobody's"</em> (which is said <code>SET_NULL</code>)</li>\n\n<li><em>"Good bye world, I can't live without article_B"</em> and commit suicide (this is the <code>CASCADE</code> behavior).</li>\n\n<li><em>"It's OK, I've got spare lover, I'll reference article_C from now"</em> (<code>SET_DEFAULT</code>, or even <code>SET(...)</code>).</li>\n\n<li><em>"I can't face reality, I'll keep calling your name even if that's the only thing left to me!"</em> (<code>DO_NOTHING</code>)</li>\n\n</ul>\n\n<p>I hope it makes cascade direction clearer. :)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	475
Suppress InsecureRequestWarning: Unverified HTTPS request is being made in Python2.6	<p>You can disable any Python warnings via the <code>PYTHONWARNINGS</code> environment variable. In this case, you want:</p>\n\n<pre><code>export PYTHONWARNINGS="ignore:Unverified HTTPS request"\n\n</code></pre>\n\n<p>To disable using Python code (<code>requests >= 2.16.0</code>):</p>\n\n<pre><code>import urllib3\n\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\n</code></pre>\n\n<p>For <code>requests < 2.16.0</code>, see original answer below.</p>\n\n<p><strong>Original answer</strong></p>\n\n<p>The reason doing <code>urllib3.disable_warnings()</code> didn't work for you is because it looks like you're using a separate instance of urllib3 vendored inside of requests.</p>\n\n<p>I gather this based on the path here: <code>/usr/lib/python2.6/site-packages/requests/packages/urllib3/connectionpool.py</code></p>\n\n<p>To disable warnings in requests' vendored urllib3, you'll need to import that specific instance of the module:</p>\n\n<pre><code>import requests\n\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\n\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	476
How to set environment variables in Python	<p>Environment variables must be strings, so use</p>\n\n<pre><code>os.environ["DEBUSSY"] = "1"\n\n</code></pre>\n\n<p>to set the variable <code>DEBUSSY</code> to the string <code>1</code>.</p>\n\n<p>To access this variable later, simply use:</p>\n\n<pre><code>print(os.environ["DEBUSSY"])\n\n</code></pre>\n\n<p>Child processes automatically inherit the environment variables of the parent process -- no special action on your part is required.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	477
Difference between staticmethod and classmethod	<p>A <strong>staticmethod</strong> is a method that knows nothing about the class or instance it was called on. It just gets the arguments that were passed, no implicit first argument. It is basically useless in Python -- you can just use a module function instead of a staticmethod.</p>\n\n<p>A <strong>classmethod</strong>, on the other hand, is a method that gets passed the class it was called on, or the class of the instance it was called on, as first argument. This is useful when you want the method to be a factory for the class: since it gets the actual class it was called on as first argument, you can always instantiate the right class, even when subclasses are involved. Observe for instance how <code>dict.fromkeys()</code>, a classmethod, returns an instance of the subclass when called on a subclass:</p>\n\n<pre><code>>>> class DictSubclass(dict):\n\n... def __repr__(self):\n\n... return "DictSubclass"\n\n... \n\n>>> dict.fromkeys("abc")\n\n{'a': None, 'c': None, 'b': None}\n\n>>> DictSubclass.fromkeys("abc")\n\nDictSubclass\n\n>>> \n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	478
How to install packages using pip according to the requirements.txt file from a local directory?	<p>This works for me:</p>\n\n<pre><code>$ pip install -r requirements.txt --no-index --find-links file:///tmp/packages\n\n</code></pre>\n\n<p><code>--no-index</code> - Ignore package index (only looking at <code>--find-links</code> URLs instead). </p>\n\n<p><code>-f, --find-links <URL></code> - If a URL or path to an html file, then parse for links to archives. \n\nIf a local path or <code>file://</code> URL that's a directory, then look for archives in the directory listing.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	479
How do I unload (reload) a Python module?	<p>You can reload a module when it has already been imported by using the <a href="https://docs.python.org/2.7/library/functions.html#reload" rel="noreferrer"><code>reload</code></a> builtin function <em>(Python 3.4+ only)</em>:</p>\n\n<pre><code>from importlib import reload \n\nimport foo\n\nwhile True:\n\n # Do some things.\n\n if is_changed(foo):\n\n foo = reload(foo)\n\n</code></pre>\n\n<p>In Python 3, <code>reload</code> was moved to the <a href="https://docs.python.org/3.2/library/imp.html" rel="noreferrer"><code>imp</code></a> module. In 3.4, <code>imp</code> was deprecated in favor of <a href="https://docs.python.org/3.4/library/importlib.html" rel="noreferrer"><code>importlib</code></a>, and <a href="https://docs.python.org/3.4/library/importlib.html#importlib.reload" rel="noreferrer"><code>reload</code></a> was added to the latter. When targeting 3 or later, either reference the appropriate module when calling <code>reload</code> or import it.</p>\n\n<p>I think that this is what you want. Web servers like Django's development server use this so that you can see the effects of your code changes without restarting the server process itself.</p>\n\n<p>To quote from the docs:</p>\n\n<blockquote>\n\n <p>Python modulesâ code is recompiled and\n\n the module-level code reexecuted,\n\n defining a new set of objects which\n\n are bound to names in the moduleâs\n\n dictionary. The init function of\n\n extension modules is not called a\n\n second time. As with all other objects\n\n in Python the old objects are only\n\n reclaimed after their reference counts\n\n drop to zero. The names in the module\n\n namespace are updated to point to any\n\n new or changed objects. Other\n\n references to the old objects (such as\n\n names external to the module) are not\n\n rebound to refer to the new objects\n\n and must be updated in each namespace\n\n where they occur if that is desired.</p>\n\n</blockquote>\n\n<p>As you noted in your question, you'll have to reconstruct <code>Foo</code> objects if the <code>Foo</code> class resides in the <code>foo</code> module.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	480
Select by partial string from a pandas DataFrame	<p>Based on github issue <a href="https://github.com/pydata/pandas/issues/620" rel="noreferrer">#620</a>, it looks like you'll soon be able to do the following:</p>\n\n<pre><code>df[df['A'].str.contains("hello")]\n\n</code></pre>\n\n<p>Update: <a href="http://pandas.pydata.org/pandas-docs/stable/text.html#text-string-methods" rel="noreferrer">vectorized string methods (i.e., Series.str)</a> are available in pandas 0.8.1 and up. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	481
Unzipping files in Python	<pre><code>import zipfile\n\nwith zipfile.ZipFile(path_to_zip_file, 'r') as zip_ref:\n\n zip_ref.extractall(directory_to_extract_to)\n\n</code></pre>\n\n<p>That's pretty much it!</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	482
Extract file name from path, no matter what the os/path format	<p>Using <code>os.path.split</code> or <code>os.path.basename</code> as others suggest won't work in all cases: if you're running the script on Linux and attempt to process a classic windows-style path, it will fail.</p>\n\n<p>Windows paths can use either backslash or forward slash as path separator. Therefore, the <code>ntpath</code> module (which is equivalent to os.path when running on windows) will work for all<sup>(1)</sup> paths on all platforms.</p>\n\n<pre><code>import ntpath\n\nntpath.basename("a/b/c")\n\n</code></pre>\n\n<p>Of course, if the file ends with a slash, the basename will be empty, so make your own function to deal with it:</p>\n\n<pre><code>def path_leaf(path):\n\n head, tail = ntpath.split(path)\n\n return tail or ntpath.basename(head)\n\n</code></pre>\n\n<p>Verification:</p>\n\n<pre><code>>>> paths = ['a/b/c/', 'a/b/c', '\\a\\b\\c', '\\a\\b\\c\\', 'a\\b\\c', \n\n... 'a/b/../../a/b/c/', 'a/b/../../a/b/c']\n\n>>> [path_leaf(path) for path in paths]\n\n['c', 'c', 'c', 'c', 'c', 'c', 'c']\n\n</code></pre>\n\n<p><br></p>\n\n<p><sup>(1) There's one caveat: Linux filenames <em>may contain backslashes</em>. So on linux, <code>r'a/b\c'</code> always refers to the file <code>b\c</code> in the <code>a</code> folder, while on Windows, it always refers to the <code>c</code> file in the <code>b</code> subfolder of the <code>a</code> folder. So when both forward and backward slashes are used in a path, you <em>need</em> to know the associated platform to be able to interpret it correctly. In practice it's usually safe to assume it's a windows path since backslashes are seldom used in Linux filenames, but keep this in mind when you code so you don't create accidental security holes.</sup></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	483
Speed comparison with Project Euler: C vs Python vs Erlang vs Haskell	<p>Using <code>GHC 7.0.3</code>, <code>gcc 4.4.6</code>, <code>Linux 2.6.29</code> on an x86_64 Core2 Duo (2.5GHz) machine, compiling using <code>ghc -O2 -fllvm -fforce-recomp</code> for Haskell and <code>gcc -O3 -lm</code> for C.</p>\n\n<ul>\n\n<li>Your C routine runs in 8.4 seconds (faster than your run probably because of <code>-O3</code>)</li>\n\n<li>The Haskell solution runs in 36 seconds (due to the <code>-O2</code> flag)</li>\n\n<li>Your <code>factorCount'</code> code isn't explicitly typed and defaulting to <code>Integer</code> (thanks to Daniel for correcting my misdiagnosis here!). Giving an explicit type signature (which is standard practice anyway) using <code>Int</code> and the time changes to <strong>11.1 seconds</strong></li>\n\n<li>in <code>factorCount'</code> you have needlessly called <code>fromIntegral</code>. A fix results in no change though (the compiler is smart, lucky for you).</li>\n\n<li>You used <code>mod</code> where <code>rem</code> is faster and sufficient. This changes the time to <strong>8.5 seconds</strong>.</li>\n\n<li><code>factorCount'</code> is constantly applying two extra arguments that never change (<code>number</code>, <code>sqrt</code>). A worker/wrapper transformation gives us:</li>\n\n</ul>\n\n<pre class="lang-hs prettyprint-override"><code> $ time ./so\n\n 842161320 \n\n real 0m7.954s \n\n user 0m7.944s \n\n sys 0m0.004s \n\n</code></pre>\n\n<p>That's right, <strong>7.95 seconds</strong>. Consistently <strong>half a second faster than the C solution</strong>. Without the <code>-fllvm</code> flag I'm still getting <code>8.182 seconds</code>, so the NCG backend is doing well in this case too.</p>\n\n<p>Conclusion: Haskell is awesome.</p>\n\n<p><strong>Resulting Code</strong></p>\n\n<pre class="lang-hs prettyprint-override"><code>factorCount number = factorCount' number isquare 1 0 - (fromEnum $ square == fromIntegral isquare)\n\n where square = sqrt $ fromIntegral number\n\n isquare = floor square\n\nfactorCount' :: Int -> Int -> Int -> Int -> Int\n\nfactorCount' number sqrt candidate0 count0 = go candidate0 count0\n\n where\n\n go candidate count\n\n | candidate > sqrt = count\n\n | number `rem` candidate == 0 = go (candidate + 1) (count + 2)\n\n | otherwise = go (candidate + 1) count\n\nnextTriangle index triangle\n\n | factorCount triangle > 1000 = triangle\n\n | otherwise = nextTriangle (index + 1) (triangle + index + 1)\n\nmain = print $ nextTriangle 1 1\n\n</code></pre>\n\n<p>EDIT: So now that we've explored that, lets address the questions</p>\n\n<blockquote>\n\n <p>Question 1: Do erlang, python and haskell lose speed due to using\n\n arbitrary length integers or don't they as long as the values are less\n\n than MAXINT?</p>\n\n</blockquote>\n\n<p>In Haskell, using <code>Integer</code> is slower than <code>Int</code> but how much slower depends on the computations performed. Luckily (for 64 bit machines) <code>Int</code> is sufficient. For portability sake you should probably rewrite my code to use <code>Int64</code> or <code>Word64</code> (C isn't the only language with a <code>long</code>).</p>\n\n<blockquote>\n\n <p>Question 2: Why is haskell so slow? Is there a compiler flag that\n\n turns off the brakes or is it my implementation? (The latter is quite\n\n probable as haskell is a book with seven seals to me.)</p>\n\n <p>Question 3: Can you offer me some hints how to optimize these\n\n implementations without changing the way I determine the factors?\n\n Optimization in any way: nicer, faster, more "native" to the language.</p>\n\n</blockquote>\n\n<p>That was what I answered above. The answer was </p>\n\n<ul>\n\n<li>0) Use optimization via <code>-O2</code> </li>\n\n<li>1) Use fast (notably: unbox-able) types when possible </li>\n\n<li>2) <code>rem</code> not <code>mod</code> (a frequently forgotten optimization) and </li>\n\n<li>3) worker/wrapper transformation (perhaps the most common optimization).</li>\n\n</ul>\n\n<blockquote>\n\n <p>Question 4: Do my functional implementations permit LCO and hence\n\n avoid adding unnecessary frames onto the call stack?</p>\n\n</blockquote>\n\n<p>Yes, that wasn't the issue. Good work and glad you considered this.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	484
pg_config executable not found	<p><code>pg_config</code> is in <code>postgresql-devel</code> (<code>libpq-dev</code> in Debian/Ubuntu, <code>libpq-devel</code> on Centos/Cygwin/Babun.)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	485
How do you get a query string on Flask?	<pre><code>from flask import request\n\n@app.route('/data')\n\ndef data():\n\n # here we want to get the value of user (i.e. ?user=some-value)\n\n user = request.args.get('user')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	486
What's the idiomatic syntax for prepending to a short python list?	<p>The <code>s.insert(0, x)</code> form is the most common.</p>\n\n<p>Whenever you see it though, it may be time to consider using a <a href="http://docs.python.org/library/collections.html#collections.deque" rel="noreferrer">collections.deque</a> instead of a list.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	487
How do I capture SIGINT in Python?	<p>Register your handler with <code>signal.signal</code> like this:</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport signal\n\nimport sys\n\ndef signal_handler(sig, frame):\n\n print('You pressed Ctrl+C!')\n\n sys.exit(0)\n\nsignal.signal(signal.SIGINT, signal_handler)\n\nprint('Press Ctrl+C')\n\nsignal.pause()\n\n</code></pre>\n\n<p>Code adapted from <a href="http://www.linuxjournal.com/article/3946" rel="noreferrer">here</a>.</p>\n\n<p>More documentation on <code>signal</code> can be found <a href="http://docs.python.org/library/signal.html" rel="noreferrer">here</a>.\n\nÂ </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	488
How do I parse XML in Python?	<p>I suggest <a href="http://docs.python.org/library/xml.etree.elementtree.html" rel="noreferrer"><code>ElementTree</code></a>. There are other compatible implementations of the same API, such as <a href="https://lxml.de/parsing.html" rel="noreferrer"><code>lxml</code></a>, and <code>cElementTree</code> in the Python standard library itself; but, in this context, what they chiefly add is even more speed -- the ease of programming part depends on the API, which <code>ElementTree</code> defines.</p>\n\n<p>First build an Element instance <code>root</code> from the XML, e.g. with the <a href="http://docs.python.org/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML" rel="noreferrer">XML</a> function, or by parsing a file with something like:</p>\n\n<pre><code>import xml.etree.ElementTree as ET\n\nroot = ET.parse('thefile.xml').getroot()\n\n</code></pre>\n\n<p>Or any of the many other ways shown at <a href="http://docs.python.org/library/xml.etree.elementtree.html" rel="noreferrer"><code>ElementTree</code></a>. Then do something like:</p>\n\n<pre><code>for type_tag in root.findall('bar/type'):\n\n value = type_tag.get('foobar')\n\n print(value)\n\n</code></pre>\n\n<p>And similar, usually pretty simple, code patterns.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	489
Get the last 4 characters of a string	<p>Like this:</p>\n\n<pre><code>>>>mystr = "abcdefghijkl"\n\n>>>mystr[-4:]\n\n'ijkl'\n\n</code></pre>\n\n<p>This <a href="https://docs.python.org/3/reference/expressions.html#slicings" rel="noreferrer">slices</a> the string's last 4 characters. The -4 starts the range from the string's end. A modified expression with <code>[:-4]</code> removes the same 4 characters from the end of the string:</p>\n\n<pre><code>>>>mystr[:-4]\n\n'abcdefgh'\n\n</code></pre>\n\n<p>For more information on slicing see <a href="https://stackoverflow.com/a/509295/8117067">this Stack Overflow answer</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	490
How do I set the figure title and axes labels font size in Matplotlib?	<p>Functions dealing with text like <code>label</code>, <code>title</code>, etc. accept parameters same as <a href="http://matplotlib.org/users/text_props.html" rel="noreferrer"><code>matplotlib.text.Text</code></a>. For the font size you can use <code>size/fontsize</code>:</p>\n\n<pre><code>from matplotlib import pyplot as plt \n\nfig = plt.figure()\n\nplt.plot(data)\n\nfig.suptitle('test title', fontsize=20)\n\nplt.xlabel('xlabel', fontsize=18)\n\nplt.ylabel('ylabel', fontsize=16)\n\nfig.savefig('test.jpg')\n\n</code></pre>\n\n<p>For globally setting <code>title</code> and <code>label</code> sizes, <a href="http://matplotlib.org/users/customizing.html" rel="noreferrer"><code>mpl.rcParams</code></a> contains <code>axes.titlesize</code> and <code>axes.labelsize</code>. (From the page):</p>\n\n<pre><code>axes.titlesize : large # fontsize of the axes title\n\naxes.labelsize : medium # fontsize of the x any y labels\n\n</code></pre>\n\n<p>(As far as I can see, there is no way to set <code>x</code> and <code>y</code> label sizes separately.)</p>\n\n<p>And I see that <code>axes.titlesize</code> does not affect <code>suptitle</code>. I guess, you need to set that manually.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	491
How to create a GUID/UUID in Python	<blockquote>\n\n <p>The uuid module, in Python 2.5 and up, provides RFC compliant UUID\n\n generation. See the module docs and the RFC for details. [<a href="http://code.activestate.com/lists/python-list/72693/" rel="noreferrer">source</a>]</p>\n\n</blockquote>\n\n<p>Docs:</p>\n\n<ul>\n\n<li>Python 2: <a href="http://docs.python.org/2/library/uuid.html" rel="noreferrer">http://docs.python.org/2/library/uuid.html</a></li>\n\n<li>Python 3:\n\n<a href="https://docs.python.org/3/library/uuid.html" rel="noreferrer">https://docs.python.org/3/library/uuid.html</a></li>\n\n</ul>\n\n<p>Example (working on 2 and 3):</p>\n\n<pre><code>>>> import uuid\n\n>>> uuid.uuid4()\n\nUUID('bd65600d-8669-4903-8a14-af88203add38')\n\n>>> str(uuid.uuid4())\n\n'f50ec0b7-f960-400d-91f0-c42a6d44e3d0'\n\n>>> uuid.uuid4().hex\n\n'9fe2c4e93f654fdbb24c02b15259716c'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	492
Append integer to beginning of list in Python	<pre><code>>>>var=7\n\n>>>array = [1,2,3,4,5,6]\n\n>>>array.insert(0,var)\n\n>>>array\n\n[7, 1, 2, 3, 4, 5, 6]\n\n</code></pre>\n\n<p>How it works:</p>\n\n<p><code>array.insert(index, value)</code></p>\n\n<p>Insert an item at a given position. The first argument is the index of the element before which to insert, so <code>array.insert(0, x)</code> inserts at the front of the list, and <code>array.insert(len(array), x)</code> is equivalent to <code>array.append(x)</code>.Negative values are treated as being relative to the end of the array.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	493
How can I find script's directory with Python?	<p>You need to call <code>os.path.realpath</code> on <code>__file__</code>, so that when <code>__file__</code> is a filename without the path you still get the dir path:</p>\n\n<pre><code>import os\n\nprint(os.path.dirname(os.path.realpath(__file__)))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	494
Sort a list by multiple attributes?	<p>A key can be a function that returns a tuple:</p>\n\n<pre><code>s = sorted(s, key = lambda x: (x[1], x[2]))\n\n</code></pre>\n\n<p>Or you can achieve the same using <code>itemgetter</code> (which is faster and avoids a Python function call):</p>\n\n<pre><code>import operator\n\ns = sorted(s, key = operator.itemgetter(1, 2))\n\n</code></pre>\n\n<p>And notice that here you can use <code>sort</code> instead of using <code>sorted</code> and then reassigning:</p>\n\n<pre><code>s.sort(key = operator.itemgetter(1, 2))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	495
Does Python's time.time() return the local or UTC timestamp?	<p>The <a href="https://docs.python.org/2/library/time.html#time.time" rel="noreferrer"><code>time.time()</code></a> function returns the number of seconds since the epoch, as seconds. Note that the "epoch" is defined as the start of January 1st, 1970 in UTC. So the epoch is defined in terms of UTC and establishes a global moment in time. No matter where you are "seconds past epoch" (time.time()) returns the same value at the same moment.</p>\n\n<p>Here is some sample output I ran on my computer, converting it to a string as well.</p>\n\n<pre><code>Python 2.7.3 (default, Apr 24 2012, 00:00:54) \n\n[GCC 4.7.0 20120414 (prerelease)] on linux2\n\nType "help", "copyright", "credits" or "license" for more information.\n\n>>> import time\n\n>>> ts = time.time()\n\n>>> print ts\n\n1355563265.81\n\n>>> import datetime\n\n>>> st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')\n\n>>> print st\n\n2012-12-15 01:21:05\n\n>>>\n\n</code></pre>\n\n<p>The <code>ts</code> variable is the time returned in seconds. I then converted it to a string using the <code>datetime</code> library making it a string that is human readable. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	496
What is the purpose of the single underscore "_" variable in Python?	<p><code>_</code> has 5 main conventional uses in Python:</p>\n\n<ol>\n\n<li>To hold the result of the last executed expression(/statement) in an interactive\n\ninterpreter session. This precedent was set by the standard CPython\n\ninterpreter, and other interpreters have followed suit</li>\n\n<li>As a general purpose "throwaway" variable name to indicate that part\n\nof a function result is being deliberately ignored (Conceptually, it is being discarded.), as in code like:\n\n<code>label, has_label, _ = text.partition(':')</code>.</li>\n\n<li>As part of a function definition (using either <code>def</code> or <code>lambda</code>), where\n\nthe signature is fixed (e.g. by a callback or parent class API), but\n\nthis particular function implementation doesn't need all of the\n\nparameters, as in code like: <code>callback = lambda _: True</code></li>\n\n<li>The python linter recognizes the underscore as a purposefully unused variable (both use cases above). For example <code>year,month,day = date()</code> will raise a lint warning if the <code>day</code> variable is not used later on in the code, the fix if the day is truly not needed is to write <code>year,month,_ = date()</code>. Same with lambda functions, <code>lambda arg: 1.0</code> is creating a function requiring one argument but not using it, that will be caught by lint, the fix is to write <code>lambda _: 1.0</code>. An unused variable is often hiding a bug/typo (set <code>day</code> but used <code>dya</code> the next line).</li>\n\n<li>For translation lookup in i18n (see the\n\n<a href="https://docs.python.org/3/library/gettext.html#localizing-your-module" rel="nofollow noreferrer">gettext</a>\n\ndocumentation for example), as in code like\n\n<code>raise forms.ValidationError(_("Please enter a correct username"))</code>.</li>\n\n</ol>\n\n<pre><code> # the usage of underscore in translation comes from examples in the doc\n\n # that have been copy/pasted over decades, like this one:\n\n import gettext\n\n gettext.bindtextdomain('myapplication', '/path/to/my/language/directory')\n\n gettext.textdomain('myapplication')\n\n _ = gettext.gettext\n\n # ...\n\n print(_('This is a translatable string.'))\n\n</code></pre>\n\n<p><strong>2019 update</strong>: Added lambda. For a long time this answer only listed three use cases, but the lambda case came up often enough, as noted <a href="https://stackoverflow.com/questions/5893163/what-is-the-purpose-of-the-single-underscore-variable-in-python/5893946?noredirect=1#comment100906549_5893946">here</a>, to be worth listing explicitly</p>\n\n<p><strong>2020 update</strong>: Added lint. Surprised nobody has highlighted this because it's common to have lint checks enforced on CI, flagging unused variables and potentially failing the build with a hard error if strict.</p>\n\n<p>The latter "throwaway variable or parameter name" uses cases can conflict with the translation lookup use case, so it is necessary to avoid using <code>_</code> as a throwaway variable in any code block that also uses it for i18n translation (many folks prefer a double-underscore, <code>__</code>, as their throwaway variable for exactly this reason).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	497
Transpose/Unzip Function (inverse of zip)?	<p><a href="http://docs.python.org/library/functions.html#zip" rel="noreferrer"><code>zip</code></a> is its own inverse! Provided you use the special * operator.</p>\n\n<pre><code>>>> zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n\n[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]\n\n</code></pre>\n\n<p>The way this works is by calling <code>zip</code> with the arguments:</p>\n\n<pre><code>zip(('a', 1), ('b', 2), ('c', 3), ('d', 4))\n\n</code></pre>\n\n<p>â¦ except the arguments are passed to <code>zip</code> directly (after being converted to a tuple), so there's no need to worry about the number of arguments getting too big.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	498
How can I make a time delay in Python?	<p>You can use the <a href="https://docs.python.org/library/time.html#time.sleep" rel="noreferrer"><code>sleep()</code> function in the <code>time</code> module</a>. It can take a float argument for sub-second resolution.</p>\n\n<pre><code>from time import sleep\n\nsleep(0.1) # Time in seconds\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	499
Python class inherits object	<blockquote>\n\n <h3>Is there any reason for a class declaration to inherit from <code>object</code>?</h3>\n\n</blockquote>\n\n<p>In Python 3, apart from compatibility between Python 2 and 3, <em>no reason</em>. In Python 2, <em>many reasons</em>. </p>\n\n<hr>\n\n<h3>Python 2.x story:</h3>\n\n<p>In Python 2.x (from 2.2 onwards) there's two styles of classes depending on the presence or absence of <code>object</code> as a base-class:</p>\n\n<ol>\n\n<li><p><strong>"classic" style</strong> classes: they don't have <code>object</code> as a base class:</p>\n\n<pre><code>>>> class ClassicSpam: # no base class\n\n... pass\n\n>>> ClassicSpam.__bases__\n\n()\n\n</code></pre></li>\n\n<li><p><strong>"new" style</strong> classes: they have, directly <em>or indirectly</em> (e.g inherit from a <a href="https://docs.python.org/3/library/stdtypes.html" rel="noreferrer">built-in type</a>), <code>object</code> as a base class:</p>\n\n<pre><code>>>> class NewSpam(object): # directly inherit from object\n\n... pass\n\n>>> NewSpam.__bases__\n\n(<type 'object'>,)\n\n>>> class IntSpam(int): # indirectly inherit from object...\n\n... pass\n\n>>> IntSpam.__bases__\n\n(<type 'int'>,) \n\n>>> IntSpam.__bases__[0].__bases__ # ... because int inherits from object \n\n(<type 'object'>,)\n\n</code></pre></li>\n\n</ol>\n\n<p>Without a doubt, when writing a class you'll <em>always</em> want to go for new-style classes. The perks of doing so are numerous, to list some of them:</p>\n\n<ul>\n\n<li><p><a href="https://docs.python.org/3/howto/descriptor.html" rel="noreferrer">Support for descriptors</a>. Specifically, the following constructs are made possible with descriptors: </p>\n\n<ol>\n\n<li><a href="https://docs.python.org/3/library/functions.html#classmethod" rel="noreferrer"><code>classmethod</code></a>: A method that receives the class as an implicit argument instead of the instance.</li>\n\n<li><a href="https://docs.python.org/3/library/functions.html#staticmethod" rel="noreferrer"><code>staticmethod</code></a>: A method that does not receive the implicit argument <code>self</code> as a first argument.</li>\n\n<li>properties with <a href="https://docs.python.org/3/library/functions.html#property" rel="noreferrer"><code>property</code></a>: Create functions for managing the getting, setting and deleting of an attribute. </li>\n\n<li><a href="https://docs.python.org/3/reference/datamodel.html#slots" rel="noreferrer"><code>__slots__</code></a>: Saves memory consumptions of a class and also results in faster attribute access. Of course, it does <a href="https://docs.python.org/3/reference/datamodel.html#notes-on-using-slots" rel="noreferrer">impose limitations</a>.</li>\n\n</ol></li>\n\n<li><p>The <a href="https://docs.python.org/3/reference/datamodel.html#object.__new__" rel="noreferrer"><code>__new__</code></a> static method: lets you customize how new class instances are created. </p></li>\n\n<li><p><a href="https://www.python.org/download/releases/2.3/mro/" rel="noreferrer">Method resolution order (MRO)</a>: in what order the base classes of a class will be searched when trying to resolve which method to call. </p></li>\n\n<li><p>Related to MRO, <a href="https://docs.python.org/3/library/functions.html#super" rel="noreferrer"><code>super</code> calls</a>. Also see, <a href="https://rhettinger.wordpress.com/2011/05/26/super-considered-super/" rel="noreferrer"><code>super()</code> considered super.</a></p></li>\n\n</ul>\n\n<p>If you don't inherit from <code>object</code>, forget these. A more exhaustive description of the previous bullet points along with other perks of "new" style classes can be found <a href="https://www.python.org/download/releases/2.2.3/descrintro/" rel="noreferrer">here</a>.</p>\n\n<p>One of the downsides of new-style classes is that the class itself is more memory demanding. Unless you're creating many class objects, though, I doubt this would be an issue and it's a negative sinking in a sea of positives.</p>\n\n<hr>\n\n<h3>Python 3.x story:</h3>\n\n<p>In Python 3, things are simplified. Only new-style classes exist (referred to plainly as classes) so, the only difference in adding <code>object</code> is requiring you to type in 8 more characters. This:</p>\n\n<pre><code>class ClassicSpam:\n\n pass\n\n</code></pre>\n\n<p>is completely equivalent (apart from their name :-) to this:</p>\n\n<pre><code>class NewSpam(object):\n\n pass\n\n</code></pre>\n\n<p>and to this:</p>\n\n<pre><code>class Spam():\n\n pass\n\n</code></pre>\n\n<p>All have <code>object</code> in their <code>__bases__</code>.</p>\n\n<pre><code>>>> [object in cls.__bases__ for cls in {Spam, NewSpam, ClassicSpam}]\n\n[True, True, True]\n\n</code></pre>\n\n<hr>\n\n<h2>So, what should you do?</h2>\n\n<p><strong>In Python 2:</strong> <em>always inherit from <code>object</code> explicitly</em>. Get the perks.</p>\n\n<p><strong>In Python 3:</strong> inherit from <code>object</code> if you are writing code that tries to be Python agnostic, that is, it needs to work both in Python 2 and in Python 3. Otherwise don't, it really makes no difference since Python inserts it for you behind the scenes.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	500
Create list of single item repeated N times	<p>You can also write:</p>\n\n<pre><code>[e] * n\n\n</code></pre>\n\n<p>You should note that if e is for example an empty list you get a list with n references to the same list, not n independent empty lists. </p>\n\n<p><strong>Performance testing</strong></p>\n\n<p>At first glance it <em>seems</em> that repeat is the fastest way to create a list with n identical elements:</p>\n\n<pre><code>>>> timeit.timeit('itertools.repeat(0, 10)', 'import itertools', number = 1000000)\n\n0.37095273281943264\n\n>>> timeit.timeit('[0] * 10', 'import itertools', number = 1000000)\n\n0.5577236771712819\n\n</code></pre>\n\n<p>But wait - it's not a fair test...</p>\n\n<pre><code>>>> itertools.repeat(0, 10)\n\nrepeat(0, 10) # Not a list!!!\n\n</code></pre>\n\n<p>The function <code>itertools.repeat</code> doesn't actually create the list, it just creates an object that can be used to create a list if you wish! Let's try that again, but converting to a list:</p>\n\n<pre><code>>>> timeit.timeit('list(itertools.repeat(0, 10))', 'import itertools', number = 1000000)\n\n1.7508119747063233\n\n</code></pre>\n\n<p>So if you want a list, use <code>[e] * n</code>. If you want to generate the elements lazily, use <code>repeat</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	501
How do I check if a list is empty?	<p>I prefer it explicitly:</p>\n\n<pre><code>if len(li) == 0:\n\n print('the list is empty')\n\n</code></pre>\n\n<p>This way it's 100% clear that <code>li</code> is a sequence (list) and we want to test its size. My problem with <code>if not li: ...</code> is that it gives the false impression that <code>li</code> is a boolean variable.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	502
StringIO in Python3	<blockquote>\n\n <p>when i write import StringIO it says there is no such module.</p>\n\n</blockquote>\n\n<p>From <a href="http://docs.python.org/3.0/whatsnew/3.0.html" rel="noreferrer">Whatâs New In Python 3.0</a>:</p>\n\n<blockquote>\n\n <p>The <code>StringIO</code> and <code>cStringIO</code> modules are gone. Instead, import the <code>io</code>\n\n module and use <code>io.StringIO</code> or <code>io.BytesIO</code> for text and data\n\n respectively.</p>\n\n</blockquote>\n\n<p>.</p>\n\n<hr>\n\n<p>A possibly useful method of fixing some Python 2 code to also work in Python 3 (caveat emptor):</p>\n\n<pre><code>try:\n\n from StringIO import StringIO ## for Python 2\n\nexcept ImportError:\n\n from io import StringIO ## for Python 3\n\n</code></pre>\n\n<blockquote>\n\n <p><em>Note: This example may be tangential to the main issue of the question and is included only as something to consider when generically addressing the missing <code>StringIO</code> module.</em> For a more direct solution the the message <code>TypeError: Can't convert 'bytes' object to str implicitly</code>, see <a href="https://stackoverflow.com/a/11970414/86967">this answer</a>.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	503
How to convert string representation of list to a list?	<pre><code>>>> import ast\n\n>>> x = u'[ "A","B","C" , " D"]'\n\n>>> x = ast.literal_eval(x)\n\n>>> x\n\n['A', 'B', 'C', ' D']\n\n>>> x = [n.strip() for n in x]\n\n>>> x\n\n['A', 'B', 'C', 'D']\n\n</code></pre>\n\n<p><a href="https://docs.python.org/library/ast.html#ast.literal_eval" rel="noreferrer">ast.literal_eval</a>:</p>\n\n<blockquote>\n\n <p>With ast.literal_eval, you can safely evaluate an expression node or a string containing a Python expression. The string or node provided may only consist of the following Python literal structures: strings, numbers, tuples, lists, dicts, booleans, and None.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	504
Getting a map() to return a list in Python 3.x	<p>Do this:</p>\n\n<pre><code>list(map(chr,[66,53,0,94]))\n\n</code></pre>\n\n<p>In Python 3+, many processes that iterate over iterables return iterators themselves. In most cases, this ends up saving memory, and should make things go faster. </p>\n\n<p>If all you're going to do is iterate over this list eventually, there's no need to even convert it to a list, because you can still iterate over the <code>map</code> object like so:</p>\n\n<pre><code># Prints "ABCD"\n\nfor ch in map(chr,[65,66,67,68]):\n\n print(ch)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	505
Using global variables in a function	<p>If I'm understanding your situation correctly, what you're seeing is the result of how Python handles local (function) and global (module) namespaces.</p>\n\n<p>Say you've got a module like this:</p>\n\n<pre><code># sample.py\n\nmyGlobal = 5\n\ndef func1():\n\n myGlobal = 42\n\ndef func2():\n\n print myGlobal\n\nfunc1()\n\nfunc2()\n\n</code></pre>\n\n<p>You might expecting this to print 42, but instead it prints 5. As has already been mentioned, if you add a '<code>global</code>' declaration to <code>func1()</code>, then <code>func2()</code> will print 42.</p>\n\n<pre><code>def func1():\n\n global myGlobal\n\n myGlobal = 42\n\n</code></pre>\n\n<p>What's going on here is that Python assumes that any name that is <em>assigned to</em>, anywhere within a function, is local to that function unless explicitly told otherwise. If it is only <em>reading</em> from a name, and the name doesn't exist locally, it will try to look up the name in any containing scopes (e.g. the module's global scope).</p>\n\n<p>When you assign 42 to the name <code>myGlobal</code>, therefore, Python creates a local variable that shadows the global variable of the same name. That local goes out of scope and is <a href="http://www.digi.com/wiki/developer/index.php/Python_Garbage_Collection" rel="noreferrer">garbage-collected</a> when <code>func1()</code> returns; meanwhile, <code>func2()</code> can never see anything other than the (unmodified) global name. Note that this namespace decision happens at compile time, not at runtime -- if you were to read the value of <code>myGlobal</code> inside <code>func1()</code> before you assign to it, you'd get an <code>UnboundLocalError</code>, because Python has already decided that it must be a local variable but it has not had any value associated with it yet. But by using the '<code>global</code>' statement, you tell Python that it should look elsewhere for the name instead of assigning to it locally.</p>\n\n<p>(I believe that this behavior originated largely through an optimization of local namespaces -- without this behavior, Python's VM would need to perform at least three name lookups each time a new name is assigned to inside a function (to ensure that the name didn't already exist at module/builtin level), which would significantly slow down a very common operation.)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	506
How to convert index of a pandas dataframe into a column?	<p>either:</p>\n\n<pre><code>df['index1'] = df.index\n\n</code></pre>\n\n<p>or, <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.reset_index.html" rel="noreferrer"><code>.reset_index</code></a>:</p>\n\n<pre><code>df.reset_index(level=0, inplace=True)\n\n</code></pre>\n\n<hr>\n\n<p>so, if you have a multi-index frame with 3 levels of index, like:</p>\n\n<pre><code>>>> df\n\n val\n\ntick tag obs \n\n2016-02-26 C 2 0.0139\n\n2016-02-27 A 2 0.5577\n\n2016-02-28 C 6 0.0303\n\n</code></pre>\n\n<p>and you want to convert the 1st (<code>tick</code>) and 3rd (<code>obs</code>) levels in the index into columns, you would do:</p>\n\n<pre><code>>>> df.reset_index(level=['tick', 'obs'])\n\n tick obs val\n\ntag \n\nC 2016-02-26 2 0.0139\n\nA 2016-02-27 2 0.5577\n\nC 2016-02-28 6 0.0303\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	507
Alphabet range in Python	<pre><code>>>> import string\n\n>>> string.ascii_lowercase\n\n'abcdefghijklmnopqrstuvwxyz'\n\n</code></pre>\n\n<p>If you really need a list:</p>\n\n<pre><code>>>> list(string.ascii_lowercase)\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n</code></pre>\n\n<p>And to do it with <code>range</code></p>\n\n<pre><code>>>> list(map(chr, range(97, 123))) #or list(map(chr, range(ord('a'), ord('z')+1)))\n\n['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n</code></pre>\n\n<p>Other helpful <code>string</code> module features:</p>\n\n<pre><code>>>> help(string) # on Python 3\n\n....\n\nDATA\n\n ascii_letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n ascii_lowercase = 'abcdefghijklmnopqrstuvwxyz'\n\n ascii_uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n digits = '0123456789'\n\n hexdigits = '0123456789abcdefABCDEF'\n\n octdigits = '01234567'\n\n printable = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~ \x0b\x0c'\n\n punctuation = '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'\n\n whitespace = ' \x0b\x0c'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	508
How do I change the working directory in Python?	<p>You can change the working directory with:</p>\n\n<pre class="lang-py prettyprint-override"><code>import os\n\nos.chdir(path)\n\n</code></pre>\n\n<p>There are two best practices to follow when using this method:</p>\n\n<ol>\n\n<li>Catch the exception (WindowsError, OSError) on invalid path. If the exception is thrown, do not perform any recursive operations, especially destructive ones. They will operate on the old path and not the new one.</li>\n\n<li>Return to your old directory when you're done. This can be done in an exception-safe manner by wrapping your chdir call in a context manager, like Brian M. Hunt did in <a href="https://stackoverflow.com/questions/431684/how-do-i-cd-in-python/13197763#13197763">his answer</a>.</li>\n\n</ol>\n\n<p>Changing the current working directory in a subprocess does not change the current working directory in the parent process. This is true of the Python interpreter as well. You cannot use <code>os.chdir()</code> to change the CWD of the calling process.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	509
How can I replace all the NaN values with Zeros in a column of a pandas dataframe	<p>I believe <code>DataFrame.fillna()</code> will do this for you.</p>\n\n<p>Link to Docs for <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html" rel="noreferrer">a dataframe</a> and for <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.Series.fillna.html" rel="noreferrer">a Series</a>. </p>\n\n<p>Example: </p>\n\n<pre><code>In [7]: df\n\nOut[7]: \n\n 0 1\n\n0 NaN NaN\n\n1 -0.494375 0.570994\n\n2 NaN NaN\n\n3 1.876360 -0.229738\n\n4 NaN NaN\n\nIn [8]: df.fillna(0)\n\nOut[8]: \n\n 0 1\n\n0 0.000000 0.000000\n\n1 -0.494375 0.570994\n\n2 0.000000 0.000000\n\n3 1.876360 -0.229738\n\n4 0.000000 0.000000\n\n</code></pre>\n\n<p>To fill the NaNs in only one column, select just that column. in this case I'm using inplace=True to actually change the contents of df. </p>\n\n<pre><code>In [12]: df[1].fillna(0, inplace=True)\n\nOut[12]: \n\n0 0.000000\n\n1 0.570994\n\n2 0.000000\n\n3 -0.229738\n\n4 0.000000\n\nName: 1\n\nIn [13]: df\n\nOut[13]: \n\n 0 1\n\n0 NaN 0.000000\n\n1 -0.494375 0.570994\n\n2 NaN 0.000000\n\n3 1.876360 -0.229738\n\n4 NaN 0.000000\n\n</code></pre>\n\n<p><strong>EDIT:</strong></p>\n\n<p>To avoid a <code>SettingWithCopyWarning</code>, use the built in column-specific functionality:</p>\n\n<pre><code>df.fillna({1:0}, inplace=True)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	510
Python exit commands - why so many and when should each be used?	<p>Let me give some information on them:</p>\n\n<ol>\n\n<li><p><a href="http://docs.python.org/2/library/constants.html#quit" rel="noreferrer"><code>quit()</code></a> simply raises the <a href="http://docs.python.org/2/library/exceptions.html#exceptions.SystemExit" rel="noreferrer"><code>SystemExit</code></a> exception. </p>\n\n<p>Furthermore, if you print it, it will give a message:</p>\n\n<pre><code>>>> print (quit)\n\nUse quit() or Ctrl-Z plus Return to exit\n\n>>>\n\n</code></pre>\n\n<p>This functionality was included to help people who do not know Python. After all, one of the most likely things a newbie will try to exit Python is typing in <code>quit</code>.</p>\n\n<p>Nevertheless, <code>quit</code> should <strong>not</strong> be used in production code. This is because it only works if the <a href="http://docs.python.org/2/library/constants.html#constants-added-by-the-site-module" rel="noreferrer"><code>site</code></a> module is loaded. Instead, this function should only be used in the interpreter.</p></li>\n\n<li><p><a href="http://docs.python.org/2/library/constants.html#exit" rel="noreferrer"><code>exit()</code></a> is an alias for <code>quit</code> (or vice-versa). They exist together simply to make Python more user-friendly. </p>\n\n<p>Furthermore, it too gives a message when printed:</p>\n\n<pre><code>>>> print (exit)\n\nUse exit() or Ctrl-Z plus Return to exit\n\n>>>\n\n</code></pre>\n\n<p>However, like <code>quit</code>, <code>exit</code> is considered bad to use in production code and should be reserved for use in the interpreter. This is because it too relies on the <code>site</code> module.</p></li>\n\n<li><p><a href="http://docs.python.org/2/library/sys.html#sys.exit" rel="noreferrer"><code>sys.exit()</code></a> also raises the <code>SystemExit</code> exception. This means that it is the same as <code>quit</code> and <code>exit</code> in that respect. </p>\n\n<p>Unlike those two however, <code>sys.exit</code> is considered good to use in production code. This is because the <a href="http://docs.python.org/2/library/sys.html" rel="noreferrer"><code>sys</code></a> module will always be there.</p></li>\n\n<li><p><a href="http://docs.python.org/2/library/os.html#os._exit" rel="noreferrer"><code>os._exit()</code></a> exits the program <strong>without calling cleanup handlers, flushing stdio buffers, etc</strong>. Thus, it is not a standard way to exit and should only be used in special cases. The most common of these is in the child process(es) created by <a href="http://docs.python.org/2/library/os.html#os.fork" rel="noreferrer"><code>os.fork</code></a>.</p>\n\n<p>Note that, of the four methods given, only this one is unique in what it does.</p></li>\n\n</ol>\n\n<p>Summed up, all four methods exit the program. However, the first two are considered bad to use in production code and the last is a non-standard, dirty way that is only used in special scenarios. So, if you want to exit a program normally, go with the third method: <code>sys.exit</code>.</p>\n\n<hr>\n\n<p>Or, even better in my opinion, you can just do directly what <code>sys.exit</code> does behind the scenes and run:</p>\n\n<pre><code>raise SystemExit\n\n</code></pre>\n\n<p>This way, you do not need to import <code>sys</code> first. </p>\n\n<p>However, this choice is simply one on style and is purely up to you.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	511
How do I convert seconds to hours, minutes and seconds?	<p>You can use <a href="https://docs.python.org/library/datetime.html#datetime.timedelta" rel="noreferrer"><code>datetime.timedelta</code></a> function:</p>\n\n<pre><code>>>> import datetime\n\n>>> str(datetime.timedelta(seconds=666))\n\n'0:11:06'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	512
How can I check if a string represents an int, without using try/except?	<p>with positive integers you could use <a href="http://docs.python.org/library/stdtypes.html#str.isdigit" rel="noreferrer"><code>.isdigit</code></a>:</p>\n\n<pre><code>>>> '16'.isdigit()\n\nTrue\n\n</code></pre>\n\n<p>it doesn't work with negative integers though. suppose you could try the following:</p>\n\n<pre><code>>>> s = '-17'\n\n>>> s.startswith('-') and s[1:].isdigit()\n\nTrue\n\n</code></pre>\n\n<p>it won't work with <code>'16.0'</code> format, which is similar to <code>int</code> casting in this sense.</p>\n\n<p><strong>edit</strong>:</p>\n\n<pre><code>def check_int(s):\n\n if s[0] in ('-', '+'):\n\n return s[1:].isdigit()\n\n return s.isdigit()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	513
How do you remove duplicates from a list whilst preserving order?	<p>Here you have some alternatives: <a href="http://www.peterbe.com/plog/uniqifiers-benchmark" rel="noreferrer">http://www.peterbe.com/plog/uniqifiers-benchmark</a></p>\n\n<p>Fastest one:</p>\n\n<pre><code>def f7(seq):\n\n seen = set()\n\n seen_add = seen.add\n\n return [x for x in seq if not (x in seen or seen_add(x))]\n\n</code></pre>\n\n<p>Why assign <code>seen.add</code> to <code>seen_add</code> instead of just calling <code>seen.add</code>? Python is a dynamic language, and resolving <code>seen.add</code> each iteration is more costly than resolving a local variable. <code>seen.add</code> could have changed between iterations, and the runtime isn't smart enough to rule that out. To play it safe, it has to check the object each time.</p>\n\n<p>If you plan on using this function a lot on the same dataset, perhaps you would be better off with an ordered set: <a href="http://code.activestate.com/recipes/528878/" rel="noreferrer">http://code.activestate.com/recipes/528878/</a></p>\n\n<p><em>O</em>(1) insertion, deletion and member-check per operation.</p>\n\n<p>(Small additional note: <code>seen.add()</code> always returns <code>None</code>, so the <em><code>or</code></em> above is there only as a way to attempt a set update, and not as an integral part of the logical test.)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	514
Understanding Python super() with __init__() methods	<blockquote>\n\n <h2>I'm trying to understand <code>super()</code></h2>\n\n</blockquote>\n\n<p>The reason we use <code>super</code> is so that child classes that may be using cooperative multiple inheritance will call the correct next parent class function in the Method Resolution Order (MRO).</p>\n\n<p>In Python 3, we can call it like this:</p>\n\n<pre><code>class ChildB(Base):\n\n def __init__(self):\n\n super().__init__() \n\n</code></pre>\n\n<p>In Python 2, we are required to use it like this:</p>\n\n<pre><code>super(ChildB, self).__init__()\n\n</code></pre>\n\n<p>Without super, you are limited in your ability to use multiple inheritance:</p>\n\n<pre><code>Base.__init__(self) # Avoid this.\n\n</code></pre>\n\n<p>I further explain below.</p>\n\n<blockquote>\n\n <h2>"What difference is there actually in this code?:"</h2>\n\n</blockquote>\n\n<pre><code>class ChildA(Base):\n\n def __init__(self):\n\n Base.__init__(self)\n\nclass ChildB(Base):\n\n def __init__(self):\n\n super(ChildB, self).__init__()\n\n # super().__init__() # you can call super like this in Python 3!\n\n</code></pre>\n\n<p>The primary difference in this code is that you get a layer of indirection in the <code>__init__</code> with <code>super</code>, which uses the current class to determine the next class's <code>__init__</code> to look up in the MRO.</p>\n\n<p>I illustrate this difference in an answer at the <a href="https://stackoverflow.com/a/33469090/541136">canonical question, How to use 'super' in Python?</a>, which demonstrates <strong>dependency injection</strong> and <strong>cooperative multiple inheritance</strong>.</p>\n\n<h2>If Python didn't have <code>super</code></h2>\n\n<p>Here's code that's actually closely equivalent to <code>super</code> (how it's implemented in C, minus some checking and fallback behavior, and translated to Python):</p>\n\n<pre><code>class ChildB(Base):\n\n def __init__(self):\n\n mro = type(self).mro() # Get the Method Resolution Order.\n\n check_next = mro.index(ChildB) + 1 # Start looking after *this* class.\n\n while check_next < len(mro):\n\n next_class = mro[check_next]\n\n if '__init__' in next_class.__dict__:\n\n next_class.__init__(self)\n\n break\n\n check_next += 1\n\n</code></pre>\n\n<p>Written a little more like native Python:</p>\n\n<pre><code>class ChildB(Base):\n\n def __init__(self):\n\n mro = type(self).mro()\n\n for next_class in mro[mro.index(ChildB) + 1:]: # slice to end\n\n if hasattr(next_class, '__init__'):\n\n next_class.__init__(self)\n\n break\n\n</code></pre>\n\n<p>If we didn't have the <code>super</code> object, we'd have to write this manual code everywhere (or recreate it!) to ensure that we call the proper next method in the Method Resolution Order!</p>\n\n<p>How does super do this in Python 3 without being told explicitly which class and instance from the method it was called from? </p>\n\n<p>It gets the calling stack frame, and finds the class (implicitly stored as a local free variable, <code>__class__</code>, making the calling function a closure over the class) and the first argument to that function, which should be the instance or class that informs it which Method Resolution Order (MRO) to use. </p>\n\n<p>Since it requires that first argument for the MRO, <a href="https://bugs.python.org/issue31118" rel="noreferrer">using <code>super</code> with static methods is impossible</a>.</p>\n\n<h2>Criticisms of other answers:</h2>\n\n<blockquote>\n\n <p>super() lets you avoid referring to the base class explicitly, which can be nice. . But the main advantage comes with multiple inheritance, where all sorts of fun stuff can happen. See the standard docs on super if you haven't already.</p>\n\n</blockquote>\n\n<p>It's rather hand-wavey and doesn't tell us much, but the point of <code>super</code> is not to avoid writing the parent class. The point is to ensure that the next method in line in the method resolution order (MRO) is called. This becomes important in multiple inheritance.</p>\n\n<p>I'll explain here.</p>\n\n<pre><code>class Base(object):\n\n def __init__(self):\n\n print("Base init'ed")\n\nclass ChildA(Base):\n\n def __init__(self):\n\n print("ChildA init'ed")\n\n Base.__init__(self)\n\nclass ChildB(Base):\n\n def __init__(self):\n\n print("ChildB init'ed")\n\n super(ChildB, self).__init__()\n\n</code></pre>\n\n<p>And let's create a dependency that we want to be called after the Child:</p>\n\n<pre><code>class UserDependency(Base):\n\n def __init__(self):\n\n print("UserDependency init'ed")\n\n super(UserDependency, self).__init__()\n\n</code></pre>\n\n<p>Now remember, <code>ChildB</code> uses super, <code>ChildA</code> does not:</p>\n\n<pre><code>class UserA(ChildA, UserDependency):\n\n def __init__(self):\n\n print("UserA init'ed")\n\n super(UserA, self).__init__()\n\nclass UserB(ChildB, UserDependency):\n\n def __init__(self):\n\n print("UserB init'ed")\n\n super(UserB, self).__init__()\n\n</code></pre>\n\n<p>And <code>UserA</code> does not call the UserDependency method:</p>\n\n<pre><code>>>> UserA()\n\nUserA init'ed\n\nChildA init'ed\n\nBase init'ed\n\n<__main__.UserA object at 0x0000000003403BA8>\n\n</code></pre>\n\n<p>But <code>UserB</code> does in-fact call UserDependency because <code>ChildB</code> invokes <code>super</code>:</p>\n\n<pre><code>>>> UserB()\n\nUserB init'ed\n\nChildB init'ed\n\nUserDependency init'ed\n\nBase init'ed\n\n<__main__.UserB object at 0x0000000003403438>\n\n</code></pre>\n\n<h3>Criticism for another answer</h3>\n\n<p>In no circumstance should you do the following, which another answer suggests, as you'll definitely get errors when you subclass ChildB:</p>\n\n<pre><code>super(self.__class__, self).__init__() # DON'T DO THIS! EVER.\n\n</code></pre>\n\n<p><sub>(That answer is not clever or particularly interesting, but in spite of direct criticism in the comments and over 17 downvotes, the answerer persisted in suggesting it until a kind editor fixed his problem.)</sub></p>\n\n<p>Explanation: Using <code>self.__class__</code> as a substitute for the class name in <code>super()</code> breaks the MRO and can lead to recursion. <code>super</code> lets us look up the next parent in the MRO (see the first section of this answer) for child classes. If you tell <code>super</code> we're in the child instance's method, it will then lookup the next method in line (probably this one) resulting in recursion, probably causing a logical failure (in the answerer's example, it does) or a <code>RuntimeError</code> when the recursion depth is exceeded.</p>\n\n<pre><code>>>> class Polygon(object):\n\n... def __init__(self, id):\n\n... self.id = id\n\n...\n\n>>> class Rectangle(Polygon):\n\n... def __init__(self, id, width, height):\n\n... super(self.__class__, self).__init__(id)\n\n... self.shape = (width, height)\n\n...\n\n>>> class Square(Rectangle):\n\n... pass\n\n...\n\n>>> Square('a', 10, 10)\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "<stdin>", line 3, in __init__\n\nTypeError: __init__() missing 2 required positional arguments: 'width' and 'height'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	515
How do Python functions handle the types of the parameters that you pass in?	<p>The other answers have done a good job at explaining duck typing and <a href="https://stackoverflow.com/questions/2489669/function-parameter-types-in-python/21384492#comment2574436_2489692">the simple answer by tzot</a>:</p>\n\n<blockquote>\n\n <p>Python does not have variables, like other languages where variables have a type and a value; it has names pointing to objects, which know their type.</p>\n\n</blockquote>\n\n<p><strong>However</strong>, one interesting thing has changed since 2010 (when the question was first asked), namely the implementation of <a href="http://www.python.org/dev/peps/pep-3107/" rel="noreferrer">PEP 3107</a> (implemented in Python 3). You can now actually specify the type of a parameter and the type of the return type of a function like this:</p>\n\n<pre><code>def pick(l: list, index: int) -> int:\n\n return l[index]\n\n</code></pre>\n\n<p>We can here see that <code>pick</code> takes 2 parameters, a list <code>l</code> and an integer <code>index</code>. It should also return an integer.</p>\n\n<p>So here it is implied that <code>l</code> is a list of integers which we can see without much effort, but for more complex functions it can be a bit confusing as to what the list should contain. We also want the default value of <code>index</code> to be 0. To solve this you may choose to write <code>pick</code> like this instead:</p>\n\n<pre><code>def pick(l: "list of ints", index: int = 0) -> int:\n\n return l[index]\n\n</code></pre>\n\n<p>Note that we now put in a string as the type of <code>l</code>, which is syntactically allowed, but it is not good for parsing programmatically (which we'll come back to later).</p>\n\n<p>It is important to note that Python won't raise a <code>TypeError</code> if you pass a float into <code>index</code>, the reason for this is one of the main points in Python's design philosophy: <em>"We're all consenting adults here"</em>, which means you are expected to be aware of what you can pass to a function and what you can't. If you really want to write code that throws TypeErrors you can use the <code>isinstance</code> function to check that the passed argument is of the proper type or a subclass of it like this:</p>\n\n<pre><code>def pick(l: list, index: int = 0) -> int:\n\n if not isinstance(l, list):\n\n raise TypeError\n\n return l[index]\n\n</code></pre>\n\n<p>More on why you should rarely do this and what you should do instead is talked about in the next section and in the comments. </p>\n\n<p><a href="http://www.python.org/dev/peps/pep-3107/" rel="noreferrer">PEP 3107</a> does not only improve code readability but also has several fitting use cases which you can read about <a href="http://www.python.org/dev/peps/pep-3107/#use-cases" rel="noreferrer"><strong>here</strong></a>.</p>\n\n<hr>\n\n<p>Type annotation got a lot more attention in Python 3.5 with the introduction of <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP 484</a> which introduces a standard module for type hints.</p>\n\n<p>These type hints came from the type checker <a href="http://mypy-lang.org/" rel="noreferrer">mypy</a> (<a href="https://github.com/JukkaL/mypy" rel="noreferrer">GitHub</a>), which is now <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP 484</a> compliant.</p>\n\n<p>With the typing module comes with a pretty comprehensive collection of type hints, including:</p>\n\n<ul>\n\n<li><code>List</code>, <code>Tuple</code>, <code>Set</code>, <code>Map</code> - for <code>list</code>, <code>tuple</code>, <code>set</code> and <code>map</code> respectively.</li>\n\n<li><code>Iterable</code> - useful for generators.</li>\n\n<li><code>Any</code> - when it could be anything.</li>\n\n<li><code>Union</code> - when it could be anything within a specified set of types, as opposed to <code>Any</code>.</li>\n\n<li><code>Optional</code> - when it <strong>might</strong> be None. Shorthand for <code>Union[T, None]</code>.</li>\n\n<li><code>TypeVar</code> - used with generics.</li>\n\n<li><code>Callable</code> - used primarily for functions, but could be used for other callables.</li>\n\n</ul>\n\n<p>These are the most common type hints. A complete listing can be found in the <a href="https://docs.python.org/3/library/typing.html" rel="noreferrer">documentation for the typing module</a>.</p>\n\n<p>Here is the old example using the annotation methods introduced in the typing module:</p>\n\n<pre><code>from typing import List\n\ndef pick(l: List[int], index: int) -> int:\n\n return l[index]\n\n</code></pre>\n\n<p>One powerful feature is the <code>Callable</code> which allows you to type annotate methods that take a function as an argument. For example:</p>\n\n<pre><code>from typing import Callable, Any, Iterable\n\ndef imap(f: Callable[[Any], Any], l: Iterable[Any]) -> List[Any]:\n\n """An immediate version of map, don't pass it any infinite iterables!"""\n\n return list(map(f, l))\n\n</code></pre>\n\n<p>The above example could become more precise with the usage of <code>TypeVar</code> instead of <code>Any</code>, but this has been left as an exercise to the reader since I believe I've already filled my answer with too much information about the wonderful new features enabled by type hinting.</p>\n\n<hr>\n\n<p>Previously when one documented Python code with for example <a href="http://sphinx-doc.org/" rel="noreferrer">Sphinx</a> some of the above functionality could be obtained by writing docstrings formatted like this:</p>\n\n<pre><code>def pick(l, index):\n\n """\n\n :param l: list of integers\n\n :type l: list\n\n :param index: index at which to pick an integer from *l*\n\n :type index: int\n\n :returns: integer at *index* in *l*\n\n :rtype: int\n\n """\n\n return l[index]\n\n</code></pre>\n\n<p>As you can see, this takes a number of extra lines (the exact number depends on how explicit you want to be and how you format your docstring). But it should now be clear to you how <a href="http://www.python.org/dev/peps/pep-3107/" rel="noreferrer">PEP 3107</a> provides an alternative that is in many (all?) ways superior. This is especially true in combination with <a href="https://www.python.org/dev/peps/pep-0484/" rel="noreferrer">PEP 484</a> which, as we have seen, provides a standard module that defines a syntax for these type hints/annotations that can be used in such a way that it is unambiguous and precise yet flexible, making for a powerful combination.</p>\n\n<p>In my personal opinion, this is one of the greatest features in Python ever. I can't wait for people to start harnessing the power of it. Sorry for the long answer, but this is what happens when I get excited.</p>\n\n<hr>\n\n<p>An example of Python code which heavily uses type hinting can be found <a href="https://github.com/ActivityWatch/aw-core/blob/master/aw_core/models.py" rel="noreferrer">here</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	516
Convert JSON string to dict using Python	<p><a href="http://docs.python.org/library/json.html#json.loads" rel="noreferrer"><code>json.loads()</code></a></p>\n\n<pre><code>import json\n\nd = json.loads(j)\n\nprint d['glossary']['title']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	517
Why is [] faster than list()?	<p>Because <code>[]</code> and <code>{}</code> are <em>literal syntax</em>. Python can create bytecode just to create the list or dictionary objects:</p>\n\n<pre><code>>>> import dis\n\n>>> dis.dis(compile('[]', '', 'eval'))\n\n 1 0 BUILD_LIST 0\n\n 3 RETURN_VALUE \n\n>>> dis.dis(compile('{}', '', 'eval'))\n\n 1 0 BUILD_MAP 0\n\n 3 RETURN_VALUE \n\n</code></pre>\n\n<p><code>list()</code> and <code>dict()</code> are separate objects. Their names need to be resolved, the stack has to be involved to push the arguments, the frame has to be stored to retrieve later, and a call has to be made. That all takes more time.</p>\n\n<p>For the empty case, that means you have at the very least a <a href="https://docs.python.org/2/library/dis.html#opcode-LOAD_NAME" rel="noreferrer"><code>LOAD_NAME</code></a> (which has to search through the global namespace as well as the <a href="https://docs.python.org/2/library/__builtin__.html" rel="noreferrer"><code>__builtin__</code> module</a>) followed by a <a href="https://docs.python.org/2/library/dis.html#opcode-CALL_FUNCTION" rel="noreferrer"><code>CALL_FUNCTION</code></a>, which has to preserve the current frame:</p>\n\n<pre><code>>>> dis.dis(compile('list()', '', 'eval'))\n\n 1 0 LOAD_NAME 0 (list)\n\n 3 CALL_FUNCTION 0\n\n 6 RETURN_VALUE \n\n>>> dis.dis(compile('dict()', '', 'eval'))\n\n 1 0 LOAD_NAME 0 (dict)\n\n 3 CALL_FUNCTION 0\n\n 6 RETURN_VALUE \n\n</code></pre>\n\n<p>You can time the name lookup separately with <code>timeit</code>:</p>\n\n<pre><code>>>> import timeit\n\n>>> timeit.timeit('list', number=10**7)\n\n0.30749011039733887\n\n>>> timeit.timeit('dict', number=10**7)\n\n0.4215109348297119\n\n</code></pre>\n\n<p>The time discrepancy there is probably a dictionary hash collision. Subtract those times from the times for calling those objects, and compare the result against the times for using literals:</p>\n\n<pre><code>>>> timeit.timeit('[]', number=10**7)\n\n0.30478692054748535\n\n>>> timeit.timeit('{}', number=10**7)\n\n0.31482696533203125\n\n>>> timeit.timeit('list()', number=10**7)\n\n0.9991960525512695\n\n>>> timeit.timeit('dict()', number=10**7)\n\n1.0200958251953125\n\n</code></pre>\n\n<p>So having to call the object takes an additional <code>1.00 - 0.31 - 0.30 == 0.39</code> seconds per 10 million calls.</p>\n\n<p>You can avoid the global lookup cost by aliasing the global names as locals (using a <code>timeit</code> setup, everything you bind to a name is a local):</p>\n\n<pre><code>>>> timeit.timeit('_list', '_list = list', number=10**7)\n\n0.1866450309753418\n\n>>> timeit.timeit('_dict', '_dict = dict', number=10**7)\n\n0.19016098976135254\n\n>>> timeit.timeit('_list()', '_list = list', number=10**7)\n\n0.841480016708374\n\n>>> timeit.timeit('_dict()', '_dict = dict', number=10**7)\n\n0.7233691215515137\n\n</code></pre>\n\n<p>but you never can overcome that <code>CALL_FUNCTION</code> cost.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	518
What is a "slug" in Django?	<p>A "slug" is a way of generating a valid URL, generally using data already obtained. For instance, a slug uses the title of an article to generate a URL. I advise to generate the slug by means of a function, given the title (or another piece of data), rather than setting it manually.</p>\n\n<p>An example:</p>\n\n<pre class="lang-html prettyprint-override"><code><title> The 46 Year Old Virgin </title>\n\n<content> A silly comedy movie </content>\n\n<slug> the-46-year-old-virgin </slug>\n\n</code></pre>\n\n<p>Now let's pretend that we have a Django model such as:</p>\n\n<pre class="lang-python prettyprint-override"><code>class Article(models.Model):\n\n title = models.CharField(max_length=100)\n\n content = models.TextField(max_length=1000)\n\n slug = models.SlugField(max_length=40)\n\n</code></pre>\n\n<p>How would you reference this object with a URL and with a meaningful name? You could for instance use Article.id so the URL would look like this:</p>\n\n<pre><code>www.example.com/article/23\n\n</code></pre>\n\n<p>Or, you might want to reference the title like this:</p>\n\n<pre><code>www.example.com/article/The 46 Year Old Virgin\n\n</code></pre>\n\n<p>Since spaces aren't valid in URLs, they must be replaced by <code>%20</code>, which results in:</p>\n\n<pre><code>www.example.com/article/The%2046%20Year%20Old%20Virgin\n\n</code></pre>\n\n<p>Both attempts are not resulting in very meaningful, easy-to-read URL. This is better:</p>\n\n<pre><code>www.example.com/article/the-46-year-old-virgin\n\n</code></pre>\n\n<p>In this example, <code>the-46-year-old-virgin</code> is a slug: it is created from the title by down-casing all letters, and replacing spaces by hyphens <code>-</code>. </p>\n\n<p>Also see the URL of this very web page for another example.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	519
What is the difference between __init__ and __call__?	<p>The first is used to initialise newly created object, and receives arguments used to do that:</p>\n\n<pre><code>class Foo:\n\n def __init__(self, a, b, c):\n\n # ...\n\nx = Foo(1, 2, 3) # __init__\n\n</code></pre>\n\n<p>The second implements function call operator.</p>\n\n<pre><code>class Foo:\n\n def __call__(self, a, b, c):\n\n # ...\n\nx = Foo()\n\nx(1, 2, 3) # __call__\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	520
Python int to binary string?	<p>Python's string format method can take a format spec. </p>\n\n<pre><code>>>> "{0:b}".format(37)\n\n'100101'\n\n</code></pre>\n\n<p><a href="https://docs.python.org/2/library/string.html#formatspec" rel="noreferrer">Format spec docs for Python 2</a> </p>\n\n<p><a href="https://docs.python.org/3/library/string.html#formatspec" rel="noreferrer">Format spec docs for Python 3</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	521
Styling multi-line conditions in 'if' statements?	<p>You don't need to use 4 spaces on your second conditional line. Maybe use:</p>\n\n<pre><code>if (cond1 == 'val1' and cond2 == 'val2' and \n\n cond3 == 'val3' and cond4 == 'val4'):\n\n do_something\n\n</code></pre>\n\n<p>Also, don't forget the whitespace is more flexible than you might think:</p>\n\n<pre><code>if ( \n\n cond1 == 'val1' and cond2 == 'val2' and \n\n cond3 == 'val3' and cond4 == 'val4'\n\n ):\n\n do_something\n\nif (cond1 == 'val1' and cond2 == 'val2' and \n\n cond3 == 'val3' and cond4 == 'val4'):\n\n do_something\n\n</code></pre>\n\n<p>Both of those are fairly ugly though.</p>\n\n<p>Maybe lose the brackets (the <a href="https://www.python.org/dev/peps/pep-0008/#multiline-if-statements" rel="noreferrer">Style Guide</a> discourages this though)?</p>\n\n<pre><code>if cond1 == 'val1' and cond2 == 'val2' and \\n\n cond3 == 'val3' and cond4 == 'val4':\n\n do_something\n\n</code></pre>\n\n<p>This at least gives you some differentiation.</p>\n\n<p>Or even:</p>\n\n<pre><code>if cond1 == 'val1' and cond2 == 'val2' and \\n\n cond3 == 'val3' and \\n\n cond4 == 'val4':\n\n do_something\n\n</code></pre>\n\n<p>I think I prefer:</p>\n\n<pre><code>if cond1 == 'val1' and \\n\n cond2 == 'val2' and \\n\n cond3 == 'val3' and \\n\n cond4 == 'val4':\n\n do_something\n\n</code></pre>\n\n<p>Here's the <a href="https://www.python.org/dev/peps/pep-0008/#multiline-if-statements" rel="noreferrer">Style Guide</a>, which (since 2010) recommends using brackets.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	522
Return JSON response from Flask view	<p>Pass the summary data to the <a href="http://flask.pocoo.org/docs/latest/api/#flask.json.jsonify" rel="noreferrer"><code>jsonify</code></a> function, which returns a JSON response.</p>\n\n<pre><code>from flask import jsonify\n\n@app.route('/summary')\n\ndef summary():\n\n d = make_summary()\n\n return jsonify(d)\n\n</code></pre>\n\n<p>As of Flask 0.11, you can pass any JSON-serializable type, not just dict, as the top level object.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	523
Get HTML Source of WebElement in Selenium WebDriver using Python	<p>You can read <code>innerHTML</code> attribute to get source of the <em>content</em> of the element or <code>outerHTML</code> for source with the current element.</p>\n\n<p>Python:</p>\n\n<pre><code>element.get_attribute('innerHTML')\n\n</code></pre>\n\n<p>Java:</p>\n\n<pre><code>elem.getAttribute("innerHTML");\n\n</code></pre>\n\n<p>C#:</p>\n\n<pre><code>element.GetAttribute("innerHTML");\n\n</code></pre>\n\n<p>Ruby:</p>\n\n<pre><code>element.attribute("innerHTML")\n\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>element.getAttribute('innerHTML');\n\n</code></pre>\n\n<p>PHP:</p>\n\n<pre><code>$element->getAttribute('innerHTML');\n\n</code></pre>\n\n<p>Tested and works with the <code>ChromeDriver</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	524
How do you change the size of figures drawn with matplotlib?	<p>If you've already got the figure created you can quickly do this:</p>\n\n<pre><code>fig = matplotlib.pyplot.gcf()\n\nfig.set_size_inches(18.5, 10.5)\n\nfig.savefig('test2png.png', dpi=100)\n\n</code></pre>\n\n<p>To propagate the size change to an existing gui window add <code>forward=True</code></p>\n\n<pre><code>fig.set_size_inches(18.5, 10.5, forward=True)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	525
Python: Checking if a 'Dictionary' is empty doesn't seem to work	<p>Empty dictionaries <a href="https://docs.python.org/2/library/stdtypes.html#truth-value-testing" rel="noreferrer">evaluate to <code>False</code></a> in Python:</p>\n\n<pre><code>>>> dct = {}\n\n>>> bool(dct)\n\nFalse\n\n>>> not dct\n\nTrue\n\n>>>\n\n</code></pre>\n\n<p>Thus, your <code>isEmpty</code> function is unnecessary. All you need to do is:</p>\n\n<pre><code>def onMessage(self, socket, message):\n\n if not self.users:\n\n socket.send("Nobody is online, please use REGISTER command" \\n\n " in order to register into the server")\n\n else:\n\n socket.send("ONLINE " + ' ' .join(self.users.keys()))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	526
How can I check file size in Python?	<p>You need the <a href="https://docs.python.org/library/os.html#os.stat_result.st_size" rel="noreferrer"><code>st_size</code></a> property of <a href="https://docs.python.org/library/os.html#os.stat_result" rel="noreferrer">the object returned by <code>os.stat</code></a>. You can get it by either using <a href="https://docs.python.org/library/pathlib.html" rel="noreferrer"><code>pathlib</code></a> (Python 3.4+):</p>\n\n<pre><code>>>> from pathlib import Path\n\n>>> Path('somefile.txt').stat()\n\nos.stat_result(st_mode=33188, st_ino=6419862, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=1564, st_atime=1584299303, st_mtime=1584299400, st_ctime=1584299400)\n\n>>> Path('somefile.txt').stat().st_size\n\n1564\n\n</code></pre>\n\n<p>or using <a href="https://docs.python.org/library/os.html#os.stat" rel="noreferrer"><code>os.stat</code></a>:</p>\n\n<pre><code>>>> import os\n\n>>> os.stat('somefile.txt')\n\nos.stat_result(st_mode=33188, st_ino=6419862, st_dev=16777220, st_nlink=1, st_uid=501, st_gid=20, st_size=1564, st_atime=1584299303, st_mtime=1584299400, st_ctime=1584299400)\n\n>>> os.stat('somefile.txt').st_size\n\n1564\n\n</code></pre>\n\n<p>Output is in bytes.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	527
Can I force pip to reinstall the current version?	<pre><code>pip install --upgrade --force-reinstall <package>\n\n</code></pre>\n\n<p>When upgrading, reinstall all packages even if they are already up-to-date.</p>\n\n<pre><code>pip install -I <package>\n\npip install --ignore-installed <package>\n\n</code></pre>\n\n<p>Ignore the installed packages (reinstalling instead).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	528
Call a parent class's method from child class?	<p>Yes, but only with <a href="http://docs.python.org/glossary.html#term-new-style-class" rel="noreferrer">new-style classes</a>. Use the <a href="http://docs.python.org/library/functions.html#super" rel="noreferrer"><code>super()</code></a> function:</p>\n\n<pre class="lang-py prettyprint-override"><code>class Foo(Bar):\n\n def baz(self, arg):\n\n return super().baz(arg)\n\n</code></pre>\n\n<p>For python < 3, use:</p>\n\n<pre class="lang-py prettyprint-override"><code>class Foo(Bar):\n\n def baz(self, arg):\n\n return super(Foo, self).baz(arg)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	529
python exception message capturing	<p>You have to define which type of exception you want to catch. So write <code>except Exception, e:</code> instead of <code>except, e:</code> for a general exception (that will be logged anyway).</p>\n\n<p>Other possibility is to write your whole try/except code this way:</p>\n\n<pre><code>try:\n\n with open(filepath,'rb') as f:\n\n con.storbinary('STOR '+ filepath, f)\n\n logger.info('File successfully uploaded to '+ FTPADDR)\n\nexcept Exception, e: # work on python 2.x\n\n logger.error('Failed to upload to ftp: '+ str(e))\n\n</code></pre>\n\n<p>in Python 3.x and modern versions of Python 2.x use <code>except Exception as e</code> instead of <code>except Exception, e</code>:</p>\n\n<pre><code>try:\n\n with open(filepath,'rb') as f:\n\n con.storbinary('STOR '+ filepath, f)\n\n logger.info('File successfully uploaded to '+ FTPADDR)\n\nexcept Exception as e: # work on python 3.x\n\n logger.error('Failed to upload to ftp: '+ str(e))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	530
How to write inline if statement for print?	<p>Python does <strong>not</strong> have a trailing <code>if</code> <strong>statement</strong>.</p>\n\n<p>There are two kinds of <code>if</code> in Python:</p>\n\n<ol>\n\n<li><p><code>if</code> statement:</p>\n\n<pre><code>if condition: statement\n\nif condition:\n\n block\n\n</code></pre></li>\n\n<li><p><code>if</code> <strong>expression</strong> (introduced in Python 2.5)</p>\n\n<pre><code>expression_if_true if condition else expression_if_false\n\n</code></pre></li>\n\n</ol>\n\n<p>And note, that both <code>print a</code> and <code>b = a</code> are statements. Only the <code>a</code> part is an expression. So if you write</p>\n\n<pre><code>print a if b else 0\n\n</code></pre>\n\n<p>it means</p>\n\n<pre><code>print (a if b else 0)\n\n</code></pre>\n\n<p>and similarly when you write</p>\n\n<pre><code>x = a if b else 0\n\n</code></pre>\n\n<p>it means</p>\n\n<pre><code>x = (a if b else 0)\n\n</code></pre>\n\n<p>Now what would it print/assign if there was no <code>else</code> clause? The print/assignment is <strong>still there</strong>.</p>\n\n<p>And note, that if you don't want it to be there, you can always write the regular <code>if</code> statement on a single line, though it's less readable and there is really no reason to avoid the two-line variant.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	531
Difference between modes a, a+, w, w+, and r+ in built-in open function?	<p>The opening modes are exactly the same as those for the C standard library function <strong><code>fopen()</code></strong>.</p>\n\n<p><a href="http://www.manpagez.com/man/3/fopen/" rel="noreferrer">The BSD <code>fopen</code> manpage</a> defines them as follows:</p>\n\n<pre class="lang-none prettyprint-override"><code> The argument mode points to a string beginning with one of the following\n\n sequences (Additional characters may follow these sequences.):\n\n ``r'' Open text file for reading. The stream is positioned at the\n\n beginning of the file.\n\n ``r+'' Open for reading and writing. The stream is positioned at the\n\n beginning of the file.\n\n ``w'' Truncate file to zero length or create text file for writing.\n\n The stream is positioned at the beginning of the file.\n\n ``w+'' Open for reading and writing. The file is created if it does not\n\n exist, otherwise it is truncated. The stream is positioned at\n\n the beginning of the file.\n\n ``a'' Open for writing. The file is created if it does not exist. The\n\n stream is positioned at the end of the file. Subsequent writes\n\n to the file will always end up at the then current end of file,\n\n irrespective of any intervening fseek(3) or similar.\n\n ``a+'' Open for reading and writing. The file is created if it does not\n\n exist. The stream is positioned at the end of the file. Subse-\n\n quent writes to the file will always end up at the then current\n\n end of file, irrespective of any intervening fseek(3) or similar.\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	532
Best practice for Python assert	<p>Asserts should be used to test conditions that <em>should never happen</em>. The purpose is to crash early in the case of a corrupt program state.</p>\n\n<p>Exceptions should be used for errors that can conceivably happen, and <strong>you should almost always create your own Exception classes</strong>.</p>\n\n<hr>\n\n<p>For example, if you're writing a function to read from a configuration file into a <code>dict</code>, improper formatting in the file should raise a <code>ConfigurationSyntaxError</code>, while you can <code>assert</code> that you're not about to return <code>None</code>.</p>\n\n<hr>\n\n<p>In your example, if <code>x</code> is a value set via a user interface or from an external source, an exception is best.</p>\n\n<p>If <code>x</code> is only set by your own code in the same program, go with an assertion.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	533
How do I log a Python error with debug information?	<p><a href="http://docs.python.org/library/logging.html#logging.Logger.exception" rel="noreferrer"><code>logger.exception</code></a> will output a stack trace alongside the error message.</p>\n\n<p>For example:</p>\n\n<pre><code>import logging\n\ntry:\n\n 1/0\n\nexcept ZeroDivisionError as e:\n\n logging.exception("message")\n\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>ERROR:root:message\n\nTraceback (most recent call last):\n\n File "<stdin>", line 2, in <module>\n\nZeroDivisionError: integer division or modulo by zero\n\n</code></pre>\n\n<p><a href="https://stackoverflow.com/users/1163081/paulo-cheque">@Paulo Cheque</a> notes, "be aware that in Python 3 you must call the <code>logging.exception</code> method just inside the <code>except</code> part. If you call this method in an arbitrary place you may get a bizarre exception. The docs alert about that."</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	534
Sorting arrays in NumPy by column	<p>I suppose this works: <code>a[a[:,1].argsort()]</code></p>\n\n<p>This indicates the second column of <code>a</code> and sort it based on it accordingly.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	535
Expanding tuples into arguments	<p><code>myfun(*some_tuple)</code> does exactly what you request. The <code>*</code> operator simply unpacks the tuple (or any iterable) and passes them as the positional arguments to the function. Read more about <a href="https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments" rel="noreferrer">unpacking arguments</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	536
How do I copy a file in Python?	<p><a href="https://docs.python.org/2/library/shutil.html#shutil.copy2" rel="noreferrer"><code>copy2(src,dst)</code></a> is often more useful than <a href="https://docs.python.org/2/library/shutil.html#shutil.copyfile" rel="noreferrer"><code>copyfile(src,dst)</code></a> because:</p>\n\n<ul>\n\n<li>it allows <code>dst</code> to be a <em>directory</em> (instead of the complete target filename), in which case the <a href="https://docs.python.org/2/library/os.path.html#os.path.basename" rel="noreferrer">basename</a> of <code>src</code> is used for creating the new file;</li>\n\n<li>it preserves the original modification and access info (mtime and atime) in the file metadata (however, this comes with a slight overhead).</li>\n\n</ul>\n\n<p>Here is a short example:</p>\n\n<pre><code>import shutil\n\nshutil.copy2('/src/dir/file.ext', '/dst/dir/newname.ext') # complete target filename given\n\nshutil.copy2('/src/file.ext', '/dst/dir') # target filename is /dst/dir/file.ext\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	537
How can I use pickle to save a dict?	<p>Try this:</p>\n\n<pre><code>import pickle\n\na = {'hello': 'world'}\n\nwith open('filename.pickle', 'wb') as handle:\n\n pickle.dump(a, handle, protocol=pickle.HIGHEST_PROTOCOL)\n\nwith open('filename.pickle', 'rb') as handle:\n\n b = pickle.load(handle)\n\nprint a == b\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	538
Hidden features of Python	<h2>Chaining comparison operators:</h2>\n\n<pre><code>>>> x = 5\n\n>>> 1 < x < 10\n\nTrue\n\n>>> 10 < x < 20 \n\nFalse\n\n>>> x < 10 < x*10 < 100\n\nTrue\n\n>>> 10 > x <= 9\n\nTrue\n\n>>> 5 == x > 4\n\nTrue\n\n</code></pre>\n\n<p>In case you're thinking it's doing <code>1 < x</code>, which comes out as <code>True</code>, and then comparing <code>True < 10</code>, which is also <code>True</code>, then no, that's really not what happens (see the last example.) It's really translating into <code>1 < x and x < 10</code>, and <code>x < 10 and 10 < x * 10 and x*10 < 100</code>, but with less typing and each term is only evaluated once.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	539
How to count the NaN values in a column in pandas DataFrame	<p>You can use the <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.isna.html" rel="noreferrer"><code>isna()</code></a> method (or it's alias <code>isnull()</code> which is also compatible with older pandas versions < 0.21.0) and then sum to count the NaN values. For one column:</p>\n\n<pre><code>In [1]: s = pd.Series([1,2,3, np.nan, np.nan])\n\nIn [4]: s.isna().sum() # or s.isnull().sum() for older pandas versions\n\nOut[4]: 2\n\n</code></pre>\n\n<p>For several columns, it also works:</p>\n\n<pre><code>In [5]: df = pd.DataFrame({'a':[1,2,np.nan], 'b':[np.nan,1,np.nan]})\n\nIn [6]: df.isna().sum()\n\nOut[6]:\n\na 1\n\nb 2\n\ndtype: int64\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	540
What are the advantages of NumPy over regular Python lists?	<p>NumPy's arrays are more compact than Python lists -- a list of lists as you describe, in Python, would take at least 20 MB or so, while a NumPy 3D array with single-precision floats in the cells would fit in 4 MB. Access in reading and writing items is also faster with NumPy.</p>\n\n<p>Maybe you don't care that much for just a million cells, but you definitely would for a billion cells -- neither approach would fit in a 32-bit architecture, but with 64-bit builds NumPy would get away with 4 GB or so, Python alone would need at least about 12 GB (lots of pointers which double in size) -- a much costlier piece of hardware!</p>\n\n<p>The difference is mostly due to "indirectness" -- a Python list is an array of pointers to Python objects, at least 4 bytes per pointer plus 16 bytes for even the smallest Python object (4 for type pointer, 4 for reference count, 4 for value -- and the memory allocators rounds up to 16). A NumPy array is an array of uniform values -- single-precision numbers takes 4 bytes each, double-precision ones, 8 bytes. Less flexible, but you pay substantially for the flexibility of standard Python lists!</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	541
How to check version of python modules?	<p>I suggest using <a href="https://stackoverflow.com/a/3220572/1265154">pip in place of easy_install</a>. With pip, you can list all installed packages and their versions with </p>\n\n<pre><code>pip freeze\n\n</code></pre>\n\n<p>In most linux systems, you can pipe this to <code>grep</code>(or <code>findstr</code> on Windows) to find the row for the particular package you're interested in:</p>\n\n<pre><code>Linux:\n\n$ pip freeze | grep lxml\n\nlxml==2.3\n\nWindows:\n\nc:\> pip freeze | findstr lxml\n\nlxml==2.3\n\n</code></pre>\n\n<p>For an individual module, you can try the <a href="http://www.python.org/dev/peps/pep-0396/" rel="noreferrer"><code>__version__</code> attribute</a>, however there are modules without it:</p>\n\n<pre><code>$ python -c "import requests; print(requests.__version__)"\n\n2.14.2\n\n$ python -c "import lxml; print(lxml.__version__)"\n\nTraceback (most recent call last):\n\n File "<string>", line 1, in <module>\n\nAttributeError: 'module' object has no attribute '__version__'\n\n</code></pre>\n\n<p>Lastly, as the commands in your question are prefixed with <code>sudo</code>, it appears you're installing to the global python environment. Strongly advise to take look into python <a href="https://pypi.python.org/pypi/virtualenv" rel="noreferrer">virtual environment</a> managers, for example <a href="http://virtualenvwrapper.readthedocs.org/en/latest/" rel="noreferrer">virtualenvwrapper</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	542
Check if multiple strings exist in another string	<p>You can use <a href="http://docs.python.org/library/functions.html#any" rel="noreferrer"><strong><code>any</code></strong></a>:</p>\n\n<pre><code>a_string = "A string is more than its parts!"\n\nmatches = ["more", "wholesome", "milk"]\n\nif any(x in a_string for x in matches):\n\n</code></pre>\n\n<p>Similarly to check if <em>all</em> the strings from the list are found, use <a href="http://docs.python.org/library/functions.html#all" rel="noreferrer"><strong><code>all</code></strong></a> instead of <code>any</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	543
Why does "not(True) in [False, True]" return False?	<p><strong>Operator precedence</strong> <sup><a href="https://docs.python.org/2/reference/expressions.html#operator-precedence" rel="noreferrer">2.x</a>, <a href="https://docs.python.org/3/reference/expressions.html#operator-precedence" rel="noreferrer">3.x</a></sup>. The precedence of <code>not</code> is lower than that of <code>in</code>. So it is equivalent to:</p>\n\n<pre><code>>>> not ((True) in [False, True])\n\nFalse\n\n</code></pre>\n\n<p>This is what you want:</p>\n\n<pre><code>>>> (not True) in [False, True]\n\nTrue\n\n</code></pre>\n\n<hr>\n\n<p>As @Ben points out: It's recommended to never write <code>not(True)</code>, prefer <code>not True</code>. The former makes it look like a function call, while <code>not</code> is an operator, not a function.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	544
Breaking out of nested loops	<pre><code>for x in xrange(10):\n\n for y in xrange(10):\n\n print x*y\n\n if x*y > 50:\n\n break\n\n else:\n\n continue # only executed if the inner loop did NOT break\n\n break # only executed if the inner loop DID break\n\n</code></pre>\n\n<p>The same works for deeper loops:</p>\n\n<pre><code>for x in xrange(10):\n\n for y in xrange(10):\n\n for z in xrange(10):\n\n print x,y,z\n\n if x*y*z == 30:\n\n break\n\n else:\n\n continue\n\n break\n\n else:\n\n continue\n\n break\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	545
Change the name of a key in dictionary	<p>Easily done in 2 steps:</p>\n\n<pre><code>dictionary[new_key] = dictionary[old_key]\n\ndel dictionary[old_key]\n\n</code></pre>\n\n<p>Or in 1 step:</p>\n\n<pre><code>dictionary[new_key] = dictionary.pop(old_key)\n\n</code></pre>\n\n<p>which will raise <code>KeyError</code> if <code>dictionary[old_key]</code> is undefined. Note that this <em>will</em> delete <code>dictionary[old_key]</code>.</p>\n\n<pre><code>>>> dictionary = { 1: 'one', 2:'two', 3:'three' }\n\n>>> dictionary['ONE'] = dictionary.pop(1)\n\n>>> dictionary\n\n{2: 'two', 3: 'three', 'ONE': 'one'}\n\n>>> dictionary['ONE'] = dictionary.pop(1)\n\nTraceback (most recent call last):\n\n File "<input>", line 1, in <module>\n\nKeyError: 1\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	546
Importing files from different folder	<p>Nothing wrong with:</p>\n\n<pre><code>from application.app.folder.file import func_name\n\n</code></pre>\n\n<p>Just make sure <code>folder</code> also contains an <code>__init__.py</code>, this allows it to be included as a package. Not sure why the other answers talk about <code>PYTHONPATH</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	547
What are the differences between the urllib, urllib2, urllib3 and requests module?	<p>I know it's been said already, but I'd highly recommend the <a href="https://requests.readthedocs.io/" rel="noreferrer"><code>requests</code></a> Python package.</p>\n\n<p>If you've used languages other than python, you're probably thinking <code>urllib</code> and <code>urllib2</code> are easy to use, not much code, and highly capable, that's how I used to think. But the <code>requests</code> package is so unbelievably useful and short that everyone should be using it.</p>\n\n<p>First, it supports a fully restful API, and is as easy as:</p>\n\n<pre><code>import requests\n\nresp = requests.get('http://www.mywebsite.com/user')\n\nresp = requests.post('http://www.mywebsite.com/user')\n\nresp = requests.put('http://www.mywebsite.com/user/put')\n\nresp = requests.delete('http://www.mywebsite.com/user/delete')\n\n</code></pre>\n\n<p>Regardless of whether GET / POST, you never have to encode parameters again, it simply takes a dictionary as an argument and is good to go:</p>\n\n<pre><code>userdata = {"firstname": "John", "lastname": "Doe", "password": "jdoe123"}\n\nresp = requests.post('http://www.mywebsite.com/user', data=userdata)\n\n</code></pre>\n\n<p>Plus it even has a built in JSON decoder (again, I know <code>json.loads()</code> isn't a lot more to write, but this sure is convenient):</p>\n\n<pre><code>resp.json()\n\n</code></pre>\n\n<p>Or if your response data is just text, use:</p>\n\n<pre><code>resp.text\n\n</code></pre>\n\n<p>This is just the tip of the iceberg. This is the list of features from the requests site:</p>\n\n<ul>\n\n<li>International Domains and URLs</li>\n\n<li>Keep-Alive & Connection Pooling</li>\n\n<li>Sessions with Cookie Persistence</li>\n\n<li>Browser-style SSL Verification</li>\n\n<li>Basic/Digest Authentication</li>\n\n<li>Elegant Key/Value Cookies</li>\n\n<li>Automatic Decompression</li>\n\n<li>Unicode Response Bodies</li>\n\n<li>Multipart File Uploads</li>\n\n<li>Connection Timeouts</li>\n\n<li>.netrc support</li>\n\n<li>List item</li>\n\n<li>Python 2.6â3.4</li>\n\n<li>Thread-safe.</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	548
How to print colored text in Python?	<p>The answer is <a href="https://pypi.python.org/pypi/colorama" rel="noreferrer">Colorama</a> for all cross-platform coloring in Python.</p>\n\n<p>A Python 3.6 example screenshot:\n\n<a href="https://i.stack.imgur.com/q3D4W.png" rel="noreferrer"><img src="https://i.stack.imgur.com/q3D4W.png" alt="example screenshot"></a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	549
Configure Flask dev server to be visible across the network	<p>While this is possible, you should not use the Flask dev server in production. The Flask dev server is not designed to be particularly secure, stable, or efficient. See the docs on <a href="http://flask.pocoo.org/docs/dev/deploying/" rel="noreferrer">deploying</a> for correct solutions.</p>\n\n<hr>\n\n<p>Add a parameter to your <code>app.run()</code>. By default it runs on localhost, change it to <code>app.run(host= '0.0.0.0')</code> to run on your machines IP address.</p>\n\n<p>Documented on the Flask site under "Externally Visible Server" on the <a href="http://flask.pocoo.org/docs/quickstart/#a-minimal-application" rel="noreferrer">Quickstart page</a>:</p>\n\n<blockquote>\n\n <p>Externally Visible Server</p>\n\n <p>If you run the server you will notice that the server is only\n\n available from your own computer, not from any other in the network.\n\n This is the default because in debugging mode a user of the\n\n application can execute arbitrary Python code on your computer. If you\n\n have debug disabled or trust the users on your network, you can make\n\n the server publicly available.</p>\n\n <p>Just change the call of the <code>run()</code> method to look like this:</p>\n\n <p><code>app.run(host='0.0.0.0')</code></p>\n\n <p>This tells your operating system to listen on a public IP.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	550
Pandas conditional creation of a series/dataframe column	<p><strong>If you only have two choices to select from:</strong></p>\n\n<pre><code>df['color'] = np.where(df['Set']=='Z', 'green', 'red')\n\n</code></pre>\n\n<p>For example,</p>\n\n<pre><code>import pandas as pd\n\nimport numpy as np\n\ndf = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})\n\ndf['color'] = np.where(df['Set']=='Z', 'green', 'red')\n\nprint(df)\n\n</code></pre>\n\n<p>yields</p>\n\n<pre><code> Set Type color\n\n0 Z A green\n\n1 Z B green\n\n2 X B red\n\n3 Y C red\n\n</code></pre>\n\n<hr>\n\n<p><strong>If you have more than two conditions then use <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.select.html" rel="noreferrer"><code>np.select</code></a></strong>. For example, if you want <code>color</code> to be </p>\n\n<ul>\n\n<li><code>yellow</code> when <code>(df['Set'] == 'Z') & (df['Type'] == 'A')</code></li>\n\n<li>otherwise <code>blue</code> when <code>(df['Set'] == 'Z') & (df['Type'] == 'B')</code> </li>\n\n<li>otherwise <code>purple</code> when <code>(df['Type'] == 'B')</code></li>\n\n<li>otherwise <code>black</code>,</li>\n\n</ul>\n\n<p>then use</p>\n\n<pre><code>df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})\n\nconditions = [\n\n (df['Set'] == 'Z') & (df['Type'] == 'A'),\n\n (df['Set'] == 'Z') & (df['Type'] == 'B'),\n\n (df['Type'] == 'B')]\n\nchoices = ['yellow', 'blue', 'purple']\n\ndf['color'] = np.select(conditions, choices, default='black')\n\nprint(df)\n\n</code></pre>\n\n<p>which yields</p>\n\n<pre><code> Set Type color\n\n0 Z A yellow\n\n1 Z B blue\n\n2 X B purple\n\n3 Y C black\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	551
How to delete an item in a list if it exists?	<h2>1) Almost-English style:</h2>\n\n<p>Test for presence using the <code>in</code> operator, then apply the <code>remove</code> method.</p>\n\n<pre class="lang-py prettyprint-override"><code>if thing in some_list: some_list.remove(thing)\n\n</code></pre>\n\n<p>The <code>remove</code>method will remove only the first occurrence of <code>thing</code>, in order to remove all occurrences you can use <code>while</code> instead of <code>if</code>.</p>\n\n<pre class="lang-py prettyprint-override"><code>while thing in some_list: some_list.remove(thing) \n\n</code></pre>\n\n<ul>\n\n<li>Simple enough, probably my choice.for small lists (can't resist one-liners)</li>\n\n</ul>\n\n<h2>2) <a href="http://docs.python.org/glossary.html#term-duck-typing" rel="noreferrer">Duck-typed</a>, <a href="http://docs.python.org/glossary.html#term-eafp" rel="noreferrer">EAFP</a> style:</h2>\n\n<p>This shoot-first-ask-questions-last attitude is common in Python. Instead of testing in advance if the object is suitable, just carry out the operation and catch relevant Exceptions:</p>\n\n<pre class="lang-py prettyprint-override"><code>try:\n\n some_list.remove(thing)\n\nexcept ValueError:\n\n pass # or scream: thing not in some_list!\n\nexcept AttributeError:\n\n call_security("some_list not quacking like a list!")\n\n</code></pre>\n\n<p>Off course the second except clause in the example above is not only of questionable humor but totally unnecessary (the point was to illustrate duck-typing for people not familiar with the concept).</p>\n\n<p>If you expect multiple occurrences of thing:</p>\n\n<pre class="lang-py prettyprint-override"><code>while True:\n\n try:\n\n some_list.remove(thing)\n\n except ValueError:\n\n break\n\n</code></pre>\n\n<ul>\n\n<li>a little verbose for this specific use case, but very idiomatic in Python.</li>\n\n<li>this performs better than #1</li>\n\n<li><a href="http://www.python.org/dev/peps/pep-0463/" rel="noreferrer">PEP 463</a> proposed a shorter syntax for try/except simple usage that would be handy here, but it was not approved.</li>\n\n</ul>\n\n<p>However, with <a href="https://docs.python.org/3/library/contextlib.html#contextlib.suppress" rel="noreferrer">contextlib's suppress() contextmanager</a> (introduced in python 3.4) the above code can be simplified to this:</p>\n\n<pre class="lang-py prettyprint-override"><code>with suppress(ValueError, AttributeError):\n\n some_list.remove(thing)\n\n</code></pre>\n\n<p>Again, if you expect multiple occurrences of thing:</p>\n\n<pre class="lang-py prettyprint-override"><code>with suppress(ValueError):\n\n while True:\n\n some_list.remove(thing)\n\n</code></pre>\n\n<h2>3) Functional style:</h2>\n\n<p>Around 1993, Python got <code>lambda</code>, <code>reduce()</code>, <code>filter()</code> and <code>map()</code>, courtesy of a <a href="https://en.wikipedia.org/wiki/Lisp_%28programming_language%29" rel="noreferrer">Lisp</a> hacker who missed them and submitted working patches*. You can use <code>filter</code> to remove elements from the list:</p>\n\n<pre class="lang-py prettyprint-override"><code>is_not_thing = lambda x: x is not thing\n\ncleaned_list = filter(is_not_thing, some_list)\n\n</code></pre>\n\n<p>There is a shortcut that may be useful for your case: if you want to filter out empty items (in fact items where <code>bool(item) == False</code>, like <code>None</code>, zero, empty strings or other empty collections), you can pass None as the first argument:</p>\n\n<pre class="lang-py prettyprint-override"><code>cleaned_list = filter(None, some_list)\n\n</code></pre>\n\n<ul>\n\n<li><strong>[update]</strong>: in Python 2.x, <code>filter(function, iterable)</code> used to be equivalent to <code>[item for item in iterable if function(item)]</code> (or <code>[item for item in iterable if item]</code> if the first argument is <code>None</code>); in Python 3.x, it is now equivalent to <code>(item for item in iterable if function(item))</code>. The subtle difference is that filter used to return a list, now it works like a generator expression - this is OK if you are only iterating over the cleaned list and discarding it, but if you really need a list, you have to enclose the <code>filter()</code> call with the <code>list()</code> constructor.</li>\n\n<li>*These Lispy flavored constructs are considered a little alien in Python. Around 2005, <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="noreferrer">Guido was even talking about dropping <code>filter</code></a> - along with companions <code>map</code> and <code>reduce</code> (they are not gone yet but <code>reduce</code> was moved into the <a href="http://docs.python.org/2/library/functools.html#functools.reduce" rel="noreferrer">functools</a> module, which is worth a look if you like <a href="http://en.wikipedia.org/wiki/Higher-order_function" rel="noreferrer">high order functions</a>).</li>\n\n</ul>\n\n<h2>4) Mathematical style:</h2>\n\n<p><a href="http://en.wikipedia.org/wiki/List_comprehension" rel="noreferrer">List comprehensions</a> became the preferred style for list manipulation in Python since introduced in version 2.0 by <a href="http://www.python.org/dev/peps/pep-0202/" rel="noreferrer">PEP 202</a>. The rationale behind it is that List comprehensions provide a more concise way to create lists in situations where <code>map()</code> and <code>filter()</code> and/or nested loops would currently be used.</p>\n\n<pre class="lang-py prettyprint-override"><code>cleaned_list = [ x for x in some_list if x is not thing ]\n\n</code></pre>\n\n<p>Generator expressions were introduced in version 2.4 by <a href="http://www.python.org/dev/peps/pep-0289/" rel="noreferrer">PEP 289</a>. A generator expression is better for situations where you don't really need (or want) to have a full list created in memory - like when you just want to iterate over the elements one at a time. If you are only iterating over the list, you can think of a generator expression as a <a href="http://en.wikipedia.org/wiki/Lazy_evaluation" rel="noreferrer">lazy evaluated</a> list comprehension:</p>\n\n<pre class="lang-py prettyprint-override"><code>for item in (x for x in some_list if x is not thing):\n\n do_your_thing_with(item)\n\n</code></pre>\n\n<ul>\n\n<li>See <a href="http://python-history.blogspot.com.br/2010/06/from-list-comprehensions-to-generator.html" rel="noreferrer">this Python history blog</a> post by <a href="http://en.wikipedia.org/wiki/Guido_van_Rossum" rel="noreferrer">GvR</a>.</li>\n\n<li>This syntax is inspired by the <a href="http://en.wikipedia.org/wiki/Set-builder_notation" rel="noreferrer">set-builder notation</a> in math.</li>\n\n<li>Python 3 has also <a href="http://www.python.org/dev/peps/pep-3100/#id103" rel="noreferrer">set</a> and <a href="http://www.python.org/dev/peps/pep-0274/" rel="noreferrer">dict comprehensions</a>.</li>\n\n</ul>\n\n<h2>Notes</h2>\n\n<ol>\n\n<li>you may want to use the inequality operator <code>!=</code> instead of <code>is not</code> (<a href="https://stackoverflow.com/q/2209755/">the difference is important</a>)</li>\n\n<li>for critics of methods implying a list copy: contrary to popular belief, generator expressions are not always more efficient than list comprehensions - please profile before complaining</li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	552
Hide all warnings in ipython	<p>I eventually figured it out. Place:</p>\n\n<pre><code>import warnings\n\nwarnings.filterwarnings('ignore')\n\n</code></pre>\n\n<p>inside <code>~/.ipython/profile_default/startup/disable-warnings.py</code>. I'm leaving this question and answer for the record in case anyone else comes across the same issue.</p>\n\n<p>Quite often it is useful to see a warning once. This can be set by:</p>\n\n<pre><code>warnings.filterwarnings(action='once')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	553
What does if __name__ == "__main__": do?	<p>The simplest explanation for the <code>__name__</code> variable (imho) is the following:</p>\n\n<p>Create the following files.</p>\n\n<pre><code># a.py\n\nimport b\n\n</code></pre>\n\n<p>and</p>\n\n<pre><code># b.py\n\nprint "Hello World from %s!" % __name__\n\nif __name__ == '__main__':\n\n print "Hello World again from %s!" % __name__\n\n</code></pre>\n\n<p>Running them will get you this output:</p>\n\n<pre><code>$ python a.py\n\nHello World from b!\n\n</code></pre>\n\n<p>As you can see, when a module is imported, Python sets <code>globals()['__name__']</code> in this module to the module's name. Also, upon import all the code in the module is being run. As the <code>if</code> statement evaluates to <code>False</code> this part is not executed.</p>\n\n<pre><code>$ python b.py\n\nHello World from __main__!\n\nHello World again from __main__!\n\n</code></pre>\n\n<p>As you can see, when a file is executed, Python sets <code>globals()['__name__']</code> in this file to <code>"__main__"</code>. This time, the <code>if</code> statement evaluates to <code>True</code> and is being run.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	554
Rename a dictionary key	<p>For a regular dict, you can use:</p>\n\n<pre><code>mydict[new_key] = mydict.pop(old_key)\n\n</code></pre>\n\n<p>For an OrderedDict, I think you must build an entirely new one using a comprehension. </p>\n\n<pre><code>>>> OrderedDict(zip('123', 'abc'))\n\nOrderedDict([('1', 'a'), ('2', 'b'), ('3', 'c')])\n\n>>> oldkey, newkey = '2', 'potato'\n\n>>> OrderedDict((newkey if k == oldkey else k, v) for k, v in _.viewitems())\n\nOrderedDict([('1', 'a'), ('potato', 'b'), ('3', 'c')])\n\n</code></pre>\n\n<p>Modifying the key itself, as this question seems to be asking, is impractical because dict keys are usually <em>immutable</em> objects such as numbers, strings or tuples. Instead of trying to modify the key, reassigning the value to a new key and removing the old key is how you can achieve the "rename" in python. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	555
What is a mixin, and why are they useful?	<p>A mixin is a special kind of multiple inheritance. There are two main situations where mixins are used:</p>\n\n<ol>\n\n<li>You want to provide a lot of optional features for a class.</li>\n\n<li>You want to use one particular feature in a lot of different classes.</li>\n\n</ol>\n\n<p>For an example of number one, consider <a href="http://werkzeug.pocoo.org/docs/wrappers/" rel="noreferrer">werkzeug's request and response system</a>. I can make a plain old request object by saying:</p>\n\n<pre><code>from werkzeug import BaseRequest\n\nclass Request(BaseRequest):\n\n pass\n\n</code></pre>\n\n<p>If I want to add accept header support, I would make that</p>\n\n<pre><code>from werkzeug import BaseRequest, AcceptMixin\n\nclass Request(AcceptMixin, BaseRequest):\n\n pass\n\n</code></pre>\n\n<p>If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:</p>\n\n<pre><code>from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin\n\nclass Request(AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin, BaseRequest):\n\n pass\n\n</code></pre>\n\n<p>The difference is subtle, but in the above examples, the mixin classes weren't made to stand on their own. In more traditional multiple inheritance, the <code>AuthenticationMixin</code> (for example) would probably be something more like <code>Authenticator</code>. That is, the class would probably be designed to stand on its own.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	556
How do you read from stdin?	<p>There's a few ways to do it.</p>\n\n<ul>\n\n<li><p><a href="http://docs.python.org/library/sys.html#sys.stdin" rel="noreferrer"><code>sys.stdin</code></a> is a file-like object on which you can call functions <code>read</code> or <code>readlines</code> if you want to read everything or you want to read everything and split it by newline automatically. (You need to <code>import sys</code> for this to work.)</p></li>\n\n<li><p>If you want to <em>prompt</em> the user for input, you can use <a href="https://docs.python.org/2.7/library/functions.html?highlight=raw_input#raw_input" rel="noreferrer"><code>raw_input</code></a> in Python 2.X, and just <a href="https://docs.python.org/3/library/functions.html#input" rel="noreferrer"><code>input</code></a> in Python 3. </p></li>\n\n<li><p>If you actually just want to read command-line options, you can access them via the <a href="http://docs.python.org/library/sys.html#sys.argv" rel="noreferrer">sys.argv</a> list.</p></li>\n\n</ul>\n\n<p>You will probably find <a href="http://en.wikibooks.org/wiki/Python_Programming/Input_and_output" rel="noreferrer">this Wikibook article on I/O in Python</a> to be a useful reference as well.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	557
Multiprocessing vs Threading Python	<p>The <code>threading</code> module uses threads, the <code>multiprocessing</code> module uses processes. The difference is that threads run in the same memory space, while processes have separate memory. This makes it a bit harder to share objects between processes with multiprocessing. Since threads use the same memory, precautions have to be taken or two threads will write to the same memory at the same time. This is what the global interpreter lock is for.</p>\n\n<p>Spawning processes is a bit slower than spawning threads.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	558
Get current time in milliseconds in Python?	<p>For what I needed, here's what I did, based on @samplebias' comment above:</p>\n\n<pre><code>import time\n\nmillis = int(round(time.time() * 1000))\n\nprint millis\n\n</code></pre>\n\n<p>Quick'n'easy. Thanks all, sorry for the brain fart.</p>\n\n<p>For reuse:</p>\n\n<pre><code>import time\n\ncurrent_milli_time = lambda: int(round(time.time() * 1000))\n\n</code></pre>\n\n<p>Then:</p>\n\n<pre><code>>>> current_milli_time()\n\n1378761833768\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	559
ImportError: No module named requests	<p>Requests is not a built in module (does not come with the default python installation), so you will have to install it: </p>\n\n<h2>OSX/Linux</h2>\n\n<p>Use <code>$ sudo pip install requests</code> (or <code>pip3 install requests</code> for python3) if you have <code>pip</code> installed. If pip is installed but not in your path you can use <code>python -m pip install requests</code> (or <code>python3 -m pip install requests</code> for python3)</p>\n\n<p>Alternatively you can also use <code>sudo easy_install -U requests</code> if you have <code>easy_install</code> installed.</p>\n\n<p>Alternatively you can use your systems package manager:</p>\n\n<p>For centos: <code>yum install python-requests</code>\n\nFor Ubuntu: <code>apt-get install python-requests</code></p>\n\n<h2>Windows</h2>\n\n<p>Use <code>pip install requests</code> (or <code>pip3 install requests</code> for python3) if you have <code>pip</code> installed and Pip.exe added to the Path Environment Variable. If pip is installed but not in your path you can use <code>python -m pip install requests</code> (or <code>python3 -m pip install requests</code> for python3)</p>\n\n<p>Alternatively from a cmd prompt, use <code>> Path\easy_install.exe requests</code>, where <code>Path</code> is your <code>Python*\Scripts</code> folder, if it was installed. (For example: <code>C:\Python32\Scripts</code>)</p>\n\n<p>If you manually want to add a library to a windows machine, you can download the compressed library, uncompress it, and then place it into the <code>Lib\site-packages</code> folder of your python path. (For example: <code>C:\Python27\Lib\site-packages</code>)</p>\n\n<h2>From Source (Universal)</h2>\n\n<p>For any missing library, the source is usually available at <a href="https://pypi.python.org/pypi/" rel="noreferrer">https://pypi.python.org/pypi/</a>. You can download requests here: <a href="https://pypi.python.org/pypi/requests" rel="noreferrer">https://pypi.python.org/pypi/requests</a></p>\n\n<p>On mac osx and windows, after downloading the source zip, uncompress it and from the termiminal/cmd run <code>python setup.py install</code> from the uncompressed dir.</p>\n\n<p>(<a href="https://www.pericror.com/software/importerror-no-module-named-requests" rel="noreferrer">source</a>)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	560
How to print the full traceback without halting the program?	<p><a href="http://docs.python.org/3/library/traceback.html#traceback.format_exc" rel="noreferrer"><code>traceback.format_exc()</code></a> or <a href="http://docs.python.org/3/library/sys.html#sys.exc_info" rel="noreferrer"><code>sys.exc_info()</code></a> will yield more info if that's what you want.</p>\n\n<pre><code>import traceback\n\nimport sys\n\ntry:\n\n do_stuff()\n\nexcept Exception:\n\n print(traceback.format_exc())\n\n # or\n\n print(sys.exc_info()[2])\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	561
How does Python's super() work with multiple inheritance?	<p>This is detailed with a reasonable amount of detail by Guido himself in his blog post <a href="http://python-history.blogspot.com/2010/06/method-resolution-order.html" rel="noreferrer">Method Resolution Order</a> (including two earlier attempts).</p>\n\n<p>In your example, <code>Third()</code> will call <code>First.__init__</code>. Python looks for each attribute in the class's parents as they are listed left to right. In this case, we are looking for <code>__init__</code>. So, if you define</p>\n\n<pre><code>class Third(First, Second):\n\n ...\n\n</code></pre>\n\n<p>Python will start by looking at <code>First</code>, and, if <code>First</code> doesn't have the attribute, then it will look at <code>Second</code>.</p>\n\n<p>This situation becomes more complex when inheritance starts crossing paths (for example if <code>First</code> inherited from <code>Second</code>). Read the link above for more details, but, in a nutshell, Python will try to maintain the order in which each class appears on the inheritance list, starting with the child class itself.</p>\n\n<p>So, for instance, if you had:</p>\n\n<pre><code>class First(object):\n\n def __init__(self):\n\n print "first"\n\nclass Second(First):\n\n def __init__(self):\n\n print "second"\n\nclass Third(First):\n\n def __init__(self):\n\n print "third"\n\nclass Fourth(Second, Third):\n\n def __init__(self):\n\n super(Fourth, self).__init__()\n\n print "that's it"\n\n</code></pre>\n\n<p>the MRO would be <code>[Fourth, Second, Third, First].</code></p>\n\n<p>By the way: if Python cannot find a coherent method resolution order, it'll raise an exception, instead of falling back to behavior which might surprise the user.</p>\n\n<p>Edited to add an example of an ambiguous MRO:</p>\n\n<pre><code>class First(object):\n\n def __init__(self):\n\n print "first"\n\nclass Second(First):\n\n def __init__(self):\n\n print "second"\n\nclass Third(First, Second):\n\n def __init__(self):\n\n print "third"\n\n</code></pre>\n\n<p>Should <code>Third</code>'s MRO be <code>[First, Second]</code> or <code>[Second, First]</code>? There's no obvious expectation, and Python will raise an error:</p>\n\n<pre><code>TypeError: Error when calling the metaclass bases\n\n Cannot create a consistent method resolution order (MRO) for bases Second, First\n\n</code></pre>\n\n<p><strong>Edit:</strong> I see several people arguing that the examples above lack <code>super()</code> calls, so let me explain: The point of the examples is to show how the MRO is constructed. They are <strong>not</strong> intended to print "first second hird" or whatever. You can â and should, of course, play around with the example, add <code>super()</code> calls, see what happens, and gain a deeper understanding of Python's inheritance model. But my goal here is to keep it simple and show how the MRO is built. And it is built as I explained:</p>\n\n<pre><code>>>> Fourth.__mro__\n\n(<class '__main__.Fourth'>,\n\n <class '__main__.Second'>, <class '__main__.Third'>,\n\n <class '__main__.First'>,\n\n <type 'object'>)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	562
How can I force division to be floating point? Division keeps rounding down to 0?	<p>You can cast to float by doing <code>c = a / float(b)</code>. If the numerator or denominator is a float, then the result will be also.</p>\n\n<hr>\n\n<p>A caveat: as commenters have pointed out, this won't work if <code>b</code> might be something other than an integer or floating-point number (or a string representing one). If you might be dealing with other types (such as complex numbers) you'll need to either check for those or use a different method.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	563
Unicode (UTF-8) reading and writing to files in Python	<p>Rather than mess with the encode and decode methods I find it easier to specify the encoding when opening the file. The <a href="https://docs.python.org/2/library/io.html?highlight=io#io.open" rel="noreferrer"><code>io</code> module</a> (added in Python 2.6) provides an <code>io.open</code> function, which has an encoding parameter.</p>\n\n<p>Use the open method from the <code>io</code> module.</p>\n\n<pre><code>>>>import io\n\n>>>f = io.open("test", mode="r", encoding="utf-8")\n\n</code></pre>\n\n<p>Then after calling f's read() function, an encoded Unicode object is returned.</p>\n\n<pre><code>>>>f.read()\n\nu'Capit\xe1l '\n\n</code></pre>\n\n<p>Note that in Python 3, the <code>io.open</code> function is an alias for the built-in <code>open</code> function. The built-in open function only supports the encoding argument in Python 3, not Python 2.</p>\n\n<p><strong>Edit: Previously this answer recommended the <a href="https://docs.python.org/3/library/codecs.html" rel="noreferrer">codecs</a> module. The <a href="https://stackoverflow.com/a/46438434/101923">codecs module can cause problems when mixing <code>read()</code> and <code>readline()</code></a>, so this answer now recommends the <a href="https://docs.python.org/3/library/io.html" rel="noreferrer">io</a> module instead.</strong> </p>\n\n<p>Use the open method from the codecs module.</p>\n\n<pre><code>>>>import codecs\n\n>>>f = codecs.open("test", "r", "utf-8")\n\n</code></pre>\n\n<p>Then after calling f's read() function, an encoded Unicode object is returned.</p>\n\n<pre><code>>>>f.read()\n\nu'Capit\xe1l '\n\n</code></pre>\n\n<p>If you know the encoding of a file, using the codecs package is going to be much less confusing.</p>\n\n<p>See <a href="http://docs.python.org/library/codecs.html#codecs.open" rel="noreferrer">http://docs.python.org/library/codecs.html#codecs.open</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	564
How can I use threading in Python?	<p>Here's a simple example: you need to try a few alternative URLs and return the contents of the first one to respond.</p>\n\n<pre><code>import Queue\n\nimport threading\n\nimport urllib2\n\n# Called by each thread\n\ndef get_url(q, url):\n\n q.put(urllib2.urlopen(url).read())\n\ntheurls = ["http://google.com", "http://yahoo.com"]\n\nq = Queue.Queue()\n\nfor u in theurls:\n\n t = threading.Thread(target=get_url, args = (q,u))\n\n t.daemon = True\n\n t.start()\n\ns = q.get()\n\nprint s\n\n</code></pre>\n\n<p>This is a case where threading is used as a simple optimization: each subthread is waiting for a URL to resolve and respond, in order to put its contents on the queue; each thread is a daemon (won't keep the process up if main thread ends -- that's more common than not); the main thread starts all subthreads, does a <code>get</code> on the queue to wait until one of them has done a <code>put</code>, then emits the results and terminates (which takes down any subthreads that might still be running, since they're daemon threads).</p>\n\n<p>Proper use of threads in Python is invariably connected to I/O operations (since CPython doesn't use multiple cores to run CPU-bound tasks anyway, the only reason for threading is not blocking the process while there's a wait for some I/O). Queues are almost invariably the best way to farm out work to threads and/or collect the work's results, by the way, and they're intrinsically threadsafe, so they save you from worrying about locks, conditions, events, semaphores, and other inter-thread coordination/communication concepts.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	565
TensorFlow not found using pip	<p>I found this to finally work.</p>\n\n<pre><code>python3 -m pip install --upgrade https://storage.googleapis.com/tensorflow/mac/cpu/tensorflow-1.12.0-py3-none-any.whl\n\n</code></pre>\n\n<p>Edit 1: This was tested on Windows (8, 8.1, 10), Mac and Linux. Change <code>python3</code> to <code>python</code> according to your configuration. Change <code>py3</code> to <code>py2</code> in the url if you are using Python 2.x.</p>\n\n<p>Edit 2: A list of different versions if someone needs: <a href="https://storage.googleapis.com/tensorflow" rel="noreferrer">https://storage.googleapis.com/tensorflow</a></p>\n\n<p>Edit 3: A list of urls for the available wheel packages is available here:\n\n<a href="https://www.tensorflow.org/install/pip#package-location" rel="noreferrer">https://www.tensorflow.org/install/pip#package-location</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	566
How to uninstall Python 2.7 on a Mac OS X 10.6.4?	<h3>Do not attempt to remove any Apple-supplied system Python which are in <code>/System/Library</code> and <code>/usr/bin</code>, as this may break your whole operating system.</h3>\n\n<hr>\n\n<p><strong>NOTE:</strong> <em>The steps listed below do <strong>not</strong> affect the Apple-supplied system Python 2.7; they only remove a third-party Python framework, like those installed by <a href="https://www.python.org/downloads/" rel="noreferrer">python.org installers</a>.</em></p>\n\n<hr>\n\n<p>The complete list is <a href="http://bugs.python.org/issue7107" rel="noreferrer">documented here</a>. Basically, all you need to do is the following:</p>\n\n<ol>\n\n<li><p>Remove the third-party Python 2.7 framework</p>\n\n<pre><code>sudo rm -rf /Library/Frameworks/Python.framework/Versions/2.7\n\n</code></pre></li>\n\n<li><p>Remove the Python 2.7 applications directory</p>\n\n<pre><code>sudo rm -rf "/Applications/Python 2.7"\n\n</code></pre></li>\n\n<li><p>Remove the symbolic links, in <code>/usr/local/bin</code>, that point to this Python version. See them using</p>\n\n<pre><code>ls -l /usr/local/bin | grep '../Library/Frameworks/Python.framework/Versions/2.7' \n\n</code></pre>\n\n<p>and then run the following command to remove all the links:</p>\n\n<pre><code>cd /usr/local/bin/\n\nls -l /usr/local/bin | grep '../Library/Frameworks/Python.framework/Versions/2.7' | awk '{print $9}' | tr -d @ | xargs rm\n\n</code></pre></li>\n\n<li><p>If necessary, edit your shell profile file(s) to remove adding <code>/Library/Frameworks/Python.framework/Versions/2.7</code> to your <code>PATH</code> environment file. Depending on which shell you use, any of the following files may have been modified:\n\n<code>~/.bash_login</code>, <code>~/.bash_profile</code>, <code>~/.cshrc</code>, <code>~/.profile</code>, <code>~/.tcshrc</code>, and/or <code>~/.zprofile</code>.</p></li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	567
What is the naming convention in Python for variable and function names?	<p>The <a href="https://google.github.io/styleguide/pyguide.html#316-naming" rel="noreferrer">Google Python Style Guide</a> has the following convention:</p>\n\n<blockquote>\n\n <p><code>module_name</code>, <code>package_name</code>, <code>ClassName</code>, <code>method_name</code>, <code>ExceptionName</code>, <code>function_name</code>, <code>GLOBAL_CONSTANT_NAME</code>, <code>global_var_name</code>, <code>instance_var_name</code>, <code>function_parameter_name</code>, <code>local_var_name</code>.</p>\n\n</blockquote>\n\n<p>A similar naming scheme should be applied to a <code>CLASS_CONSTANT_NAME</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	568
What is the purpose of the word 'self'?	<p>The reason you need to use <code>self.</code> is because Python does not use the <code>@</code> syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be <em>passed</em> automatically, but not <em>received</em> automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although <code>self</code> is the convention, and people will generally frown at you when you use something else.) <code>self</code> is not special to the code, it's just another object.</p>\n\n<p>Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs <code>self.</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	569
What is setup.py?	<p><code>setup.py</code> is a python file, which usually tells you that the module/package you are about to install has been packaged and distributed with Distutils, which is the standard for distributing Python Modules.<br></p>\n\n<p>This allows you to easily install Python packages. Often it's enough to write:</p>\n\n<pre><code>$ pip install . \n\n</code></pre>\n\n<p><code>pip</code> will use setup.py to install your module. Avoid calling <code>setup.py</code> directly.</p>\n\n<p><a href="https://docs.python.org/3/installing/index.html#installing-index" rel="noreferrer">https://docs.python.org/3/installing/index.html#installing-index</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	570
Asking the user for input until they give a valid response	<p>The simplest way to accomplish this is to put the <code>input</code> method in a while loop. Use <a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops" rel="noreferrer"><code>continue</code></a> when you get bad input, and <code>break</code> out of the loop when you're satisfied.</p>\n\n<h2>When Your Input Might Raise an Exception</h2>\n\n<p>Use <a href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions" rel="noreferrer"><code>try</code> and <code>except</code></a> to detect when the user enters data that can't be parsed.</p>\n\n<pre><code>while True:\n\n try:\n\n # Note: Python 2.x users should use raw_input, the equivalent of 3.x's input\n\n age = int(input("Please enter your age: "))\n\n except ValueError:\n\n print("Sorry, I didn't understand that.")\n\n #better try again... Return to the start of the loop\n\n continue\n\n else:\n\n #age was successfully parsed!\n\n #we're ready to exit the loop.\n\n break\n\nif age >= 18: \n\n print("You are able to vote in the United States!")\n\nelse:\n\n print("You are not able to vote in the United States.")\n\n</code></pre>\n\n<h2>Implementing Your Own Validation Rules</h2>\n\n<p>If you want to reject values that Python can successfully parse, you can add your own validation logic.</p>\n\n<pre><code>while True:\n\n data = input("Please enter a loud message (must be all caps): ")\n\n if not data.isupper():\n\n print("Sorry, your response was not loud enough.")\n\n continue\n\n else:\n\n #we're happy with the value given.\n\n #we're ready to exit the loop.\n\n break\n\nwhile True:\n\n data = input("Pick an answer from A to D:")\n\n if data.lower() not in ('a', 'b', 'c', 'd'):\n\n print("Not an appropriate choice.")\n\n else:\n\n break\n\n</code></pre>\n\n<h2>Combining Exception Handling and Custom Validation</h2>\n\n<p>Both of the above techniques can be combined into one loop.</p>\n\n<pre><code>while True:\n\n try:\n\n age = int(input("Please enter your age: "))\n\n except ValueError:\n\n print("Sorry, I didn't understand that.")\n\n continue\n\n if age < 0:\n\n print("Sorry, your response must not be negative.")\n\n continue\n\n else:\n\n #age was successfully parsed, and we're happy with its value.\n\n #we're ready to exit the loop.\n\n break\n\nif age >= 18: \n\n print("You are able to vote in the United States!")\n\nelse:\n\n print("You are not able to vote in the United States.")\n\n</code></pre>\n\n<h2>Encapsulating it All in a Function</h2>\n\n<p>If you need to ask your user for a lot of different values, it might be useful to put this code in a function, so you don't have to retype it every time.</p>\n\n<pre><code>def get_non_negative_int(prompt):\n\n while True:\n\n try:\n\n value = int(input(prompt))\n\n except ValueError:\n\n print("Sorry, I didn't understand that.")\n\n continue\n\n if value < 0:\n\n print("Sorry, your response must not be negative.")\n\n continue\n\n else:\n\n break\n\n return value\n\nage = get_non_negative_int("Please enter your age: ")\n\nkids = get_non_negative_int("Please enter the number of children you have: ")\n\nsalary = get_non_negative_int("Please enter your yearly earnings, in dollars: ")\n\n</code></pre>\n\n<h3>Putting It All Together</h3>\n\n<p>You can extend this idea to make a very generic input function:</p>\n\n<pre><code>def sanitised_input(prompt, type_=None, min_=None, max_=None, range_=None):\n\n if min_ is not None and max_ is not None and max_ < min_:\n\n raise ValueError("min_ must be less than or equal to max_.")\n\n while True:\n\n ui = input(prompt)\n\n if type_ is not None:\n\n try:\n\n ui = type_(ui)\n\n except ValueError:\n\n print("Input type must be {0}.".format(type_.__name__))\n\n continue\n\n if max_ is not None and ui > max_:\n\n print("Input must be less than or equal to {0}.".format(max_))\n\n elif min_ is not None and ui < min_:\n\n print("Input must be greater than or equal to {0}.".format(min_))\n\n elif range_ is not None and ui not in range_:\n\n if isinstance(range_, range):\n\n template = "Input must be between {0.start} and {0.stop}."\n\n print(template.format(range_))\n\n else:\n\n template = "Input must be {0}."\n\n if len(range_) == 1:\n\n print(template.format(*range_))\n\n else:\n\n expected = " or ".join((\n\n ", ".join(str(x) for x in range_[:-1]),\n\n str(range_[-1])\n\n ))\n\n print(template.format(expected))\n\n else:\n\n return ui\n\n</code></pre>\n\n<p>With usage such as:</p>\n\n<pre><code>age = sanitised_input("Enter your age: ", int, 1, 101)\n\nanswer = sanitised_input("Enter your answer: ", str.lower, range_=('a', 'b', 'c', 'd'))\n\n</code></pre>\n\n<h2>Common Pitfalls, and Why you Should Avoid Them</h2>\n\n<h3>The Redundant Use of Redundant <code>input</code> Statements</h3>\n\n<p>This method works but is generally considered poor style:</p>\n\n<pre><code>data = input("Please enter a loud message (must be all caps): ")\n\nwhile not data.isupper():\n\n print("Sorry, your response was not loud enough.")\n\n data = input("Please enter a loud message (must be all caps): ")\n\n</code></pre>\n\n<p>It might look attractive initially because it's shorter than the <code>while True</code> method, but it violates the <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself" rel="noreferrer">Don't Repeat Yourself</a> principle of software development. This increases the likelihood of bugs in your system. What if you want to backport to 2.7 by changing <code>input</code> to <code>raw_input</code>, but accidentally change only the first <code>input</code> above? It's a <code>SyntaxError</code> just waiting to happen.</p>\n\n<h3>Recursion Will Blow Your Stack</h3>\n\n<p>If you've just learned about recursion, you might be tempted to use it in <code>get_non_negative_int</code> so you can dispose of the while loop.</p>\n\n<pre><code>def get_non_negative_int(prompt):\n\n try:\n\n value = int(input(prompt))\n\n except ValueError:\n\n print("Sorry, I didn't understand that.")\n\n return get_non_negative_int(prompt)\n\n if value < 0:\n\n print("Sorry, your response must not be negative.")\n\n return get_non_negative_int(prompt)\n\n else:\n\n return value\n\n</code></pre>\n\n<p>This appears to work fine most of the time, but if the user enters invalid data enough times, the script will terminate with a <code>RuntimeError: maximum recursion depth exceeded</code>. You may think "no fool would make 1000 mistakes in a row", but you're underestimating the ingenuity of fools!</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	571
List vs tuple, when to use each?	<p><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences" rel="noreferrer">Tuples</a> are fixed size in nature whereas <a href="https://docs.python.org/3/tutorial/introduction.html#lists" rel="noreferrer">lists</a> are dynamic.<br>\n\nIn other words, a <code>tuple</code> is <strong>immutable</strong> whereas a <code>list</code> is <strong>mutable</strong>.</p>\n\n<ol>\n\n<li>You can't add elements to a tuple. Tuples have no append or extend method.</li>\n\n<li>You can't remove elements from a tuple. Tuples have no remove or pop method.</li>\n\n<li>You can find elements in a tuple, since this doesnât change the tuple. </li>\n\n<li>You can also use the <code>in</code> operator to check if an element exists in the tuple.</li>\n\n</ol>\n\n<hr>\n\n<ul>\n\n<li><p><strong>Tuples are faster than lists.</strong> If you're defining a constant set of values and all you're ever going to do with it is iterate through it, use a tuple instead of a list.</p></li>\n\n<li><p>It makes your code safer if you âwrite-protectâ data that does not need to be changed. Using a tuple instead of a list is like having an implied assert statement that this data is constant, and that special thought (and a specific function) is required to override that.</p></li>\n\n<li><p>Some tuples can be used as dictionary keys (specifically, tuples that contain immutable values like strings, numbers, and other tuples). Lists can never be used as dictionary keys, because lists are not immutable. </p></li>\n\n</ul>\n\n<p>Source: <a href="https://diveintopython3.net/native-datatypes.html#tuples" rel="noreferrer">Dive into Python 3</a> </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	572
How can I represent an infinite number in Python?	<p>In Python, you can do:</p>\n\n<pre><code>test = float("inf")\n\n</code></pre>\n\n<p>In Python 3.5, you can do:</p>\n\n<pre><code>import math\n\ntest = math.inf\n\n</code></pre>\n\n<p>And then:</p>\n\n<pre><code>test > 1\n\ntest > 10000\n\ntest > x\n\n</code></pre>\n\n<p>Will always be true. Unless of course, as pointed out, x is also infinity or "nan" ("not a number").</p>\n\n<p>Additionally (Python 2.x ONLY), in a comparison to <code>Ellipsis</code>, <code>float(inf)</code> is lesser, e.g:</p>\n\n<pre><code>float('inf') < Ellipsis\n\n</code></pre>\n\n<p>would return true.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	573
What is a clean, pythonic way to have multiple constructors in Python?	<p>Using <code>num_holes=None</code> as the default is fine if you are going to have just <code>__init__</code>.</p>\n\n<p>If you want multiple, independent "constructors", you can provide these as class methods. These are usually called factory methods. In this case you could have the default for <code>num_holes</code> be <code>0</code>.</p>\n\n<pre><code>class Cheese(object):\n\n def __init__(self, num_holes=0):\n\n "defaults to a solid cheese"\n\n self.number_of_holes = num_holes\n\n @classmethod\n\n def random(cls):\n\n return cls(randint(0, 100))\n\n @classmethod\n\n def slightly_holey(cls):\n\n return cls(randint(0, 33))\n\n @classmethod\n\n def very_holey(cls):\n\n return cls(randint(66, 100))\n\n</code></pre>\n\n<p>Now create object like this:</p>\n\n<pre><code>gouda = Cheese()\n\nemmentaler = Cheese.random()\n\nleerdammer = Cheese.slightly_holey()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	574
mysql_config not found when installing mysqldb python interface	<p>mySQLdb is a python interface for mysql, but it is not mysql itself. And apparently mySQLdb needs the command 'mysql_config', so you need to install that first.</p>\n\n<p>Can you confirm that you did or did not install mysql itself, by running "mysql" from the shell? That should give you a response other than "mysql: command not found". </p>\n\n<p>Which linux distribution are you using? Mysql is pre-packaged for most linux distributions. For example, for debian / ubuntu, installing mysql is as easy as </p>\n\n<pre><code>sudo apt-get install mysql-server\n\n</code></pre>\n\n<p>mysql-config is in a different package, which can be installed from (again, assuming debian / ubuntu):</p>\n\n<pre><code>sudo apt-get install libmysqlclient-dev\n\n</code></pre>\n\n<p>if you are using mariadb, the drop in replacement for mysql, then run</p>\n\n<pre><code>sudo apt-get install libmariadbclient-dev\n\n</code></pre>\n\n<p>Reference:\n\n<a href="https://github.com/JudgeGirl/Judge-sender/issues/4#issuecomment-186542797" rel="noreferrer">https://github.com/JudgeGirl/Judge-sender/issues/4#issuecomment-186542797</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	575
How to install pip with Python 3?	<p>edit: Manual installation and use of <code>setuptools</code> is not the standard process anymore.</p>\n\n<h2>If you're running Python 2.7.9+ or Python 3.4+</h2>\n\n<p>Congrats, you <em>should</em> already have <code>pip</code> installed. If you do not, read onward.</p>\n\n<h2>If you're running a Unix-like System</h2>\n\n<p>You can usually install the package for <code>pip</code> through your package manager if your version of Python is older than 2.7.9 or 3.4, or if your system did not include it for whatever reason.</p>\n\n<p>Instructions for some of the more common distros follow.</p>\n\n<h3>Installing on Debian (Wheezy and newer) and Ubuntu (Trusty Tahr and newer) for Python 2.x</h3>\n\n<p>Run the following command from a terminal:</p>\n\n<pre><code>sudo apt-get install python-pip \n\n</code></pre>\n\n<h3>Installing on Debian (Wheezy and newer) and Ubuntu (Trusty Tahr and newer) for Python 3.x</h3>\n\n<p>Run the following command from a terminal:</p>\n\n<pre><code>sudo apt-get install python3-pip\n\n</code></pre>\n\n<strong>Note:</strong>\n\n<p>On a fresh Debian/Ubuntu install, the package may not be found until you do:</p>\n\n<pre><code>sudo apt-get update\n\n</code></pre>\n\n<h3>Installing <code>pip</code> on CentOS 7 for Python 2.x</h3>\n\n<p>On CentOS 7, you have to install setup tools first, and then use that to install <code>pip</code>, as there is no direct package for it.</p>\n\n<pre><code>sudo yum install python-setuptools\n\nsudo easy_install pip\n\n</code></pre>\n\n<h3>Installing <code>pip</code> on CentOS 7 for Python 3.x</h3>\n\n<p>Assuming you installed Python 3.4 <a href="https://fedoraproject.org/wiki/EPEL" rel="noreferrer">from EPEL</a>, you can install Python 3's setup tools and use it to install <code>pip</code>.</p>\n\n<pre><code># First command requires you to have enabled EPEL for CentOS7\n\nsudo yum install python34-setuptools\n\nsudo easy_install pip\n\n</code></pre>\n\n<h3>If your Unix/Linux distro doesn't have it in package repos</h3>\n\n<p>Install using the manual way detailed below.</p>\n\n<h2>The manual way</h2>\n\n<p>If you want to do it the manual way, the now-recommended method is to install using the <code>get-pip.py</code> script from <a href="https://pip.pypa.io/en/stable/installing.html" rel="noreferrer"><code>pip</code>'s installation instructions</a>.</p>\n\n<blockquote>\n\n<p>Install pip</p>\n\n<p>To install pip, securely download <a href="https://bootstrap.pypa.io/get-pip.py" rel="noreferrer"><code>get-pip.py</code></a></p>\n\n<p>Then run the following (which may require administrator access):</p>\n\n<pre><code>python get-pip.py \n\n</code></pre>\n\n<p>If <code>setuptools</code> is not already installed, <code>get-pip.py</code> will install setuptools for you.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	576
How can I fill out a Python string with spaces?	<p>You can do this with <a href="http://docs.python.org/library/stdtypes.html#str.ljust" rel="noreferrer"><strong><code>str.ljust(width[, fillchar])</code></strong></a>:</p>\n\n<blockquote>\n\n <p>Return the string left justified in a string of length <em>width</em>. Padding is done using the specified <em>fillchar</em> (default is a space). The original string is returned if <em>width</em> is less than <code>len(s)</code>.</p>\n\n</blockquote>\n\n<pre><code>>>> 'hi'.ljust(10)\n\n'hi '\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	577
How do I check if a string is a number (float)?	<blockquote>\n\n <p>Which, not only is ugly and slow</p>\n\n</blockquote>\n\n<p>I'd dispute both.</p>\n\n<p>A regex or other string parsing method would be uglier and slower. </p>\n\n<p>I'm not sure that anything much could be faster than the above. It calls the function and returns. Try/Catch doesn't introduce much overhead because the most common exception is caught without an extensive search of stack frames.</p>\n\n<p>The issue is that any numeric conversion function has two kinds of results</p>\n\n<ul>\n\n<li>A number, if the number is valid</li>\n\n<li>A status code (e.g., via errno) or exception to show that no valid number could be parsed.</li>\n\n</ul>\n\n<p>C (as an example) hacks around this a number of ways. Python lays it out clearly and explicitly.</p>\n\n<p>I think your code for doing this is perfect.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	578
Python "extend" for a dictionary	<pre><code>a.update(b)\n\n</code></pre>\n\n<p><a href="http://docs.python.org/library/stdtypes.html#dict.update" rel="noreferrer">Latest Python Standard Library Documentation</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	579
How to get the position of a character in Python?	<p>There are two string methods for this, <code>find()</code> and <code>index()</code>. The difference between the two is what happens when the search string isn't found. <code>find()</code> returns <code>-1</code> and <code>index()</code> raises <code>ValueError</code>.</p>\n\n<h2>Using <code>find()</code></h2>\n\n<pre><code>>>> myString = 'Position of a character'\n\n>>> myString.find('s')\n\n2\n\n>>> myString.find('x')\n\n-1\n\n</code></pre>\n\n<hr>\n\n<h2>Using <code>index()</code></h2>\n\n<pre><code>>>> myString = 'Position of a character'\n\n>>> myString.index('s')\n\n2\n\n>>> myString.index('x')\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nValueError: substring not found\n\n</code></pre>\n\n<hr>\n\n<h2>From the <a href="https://docs.python.org/2/library/string.html" rel="noreferrer">Python manual</a></h2>\n\n<blockquote>\n\n <p><code>string.find(s, sub[, start[, end]])</code><br>\n\n Return the lowest index in <em>s</em> where the substring <em>sub</em> is found such that <em>sub</em> is wholly contained in <code>s[start:end]</code>. Return <code>-1</code> on failure. Defaults for <em>start</em> and <em>end</em> and interpretation of negative values is the same as for slices.</p>\n\n</blockquote>\n\n<p>And:</p>\n\n<blockquote>\n\n <p><code>string.index(s, sub[, start[, end]])</code><br>\n\n Like <code>find()</code> but raise <code>ValueError</code> when the substring is not found.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	580
How to measure elapsed time in Python?	<p>Use <code>timeit.default_timer</code> instead of <code>timeit.timeit</code>. The former provides the best clock available on your platform and version of Python automatically:</p>\n\n<pre><code>from timeit import default_timer as timer\n\nstart = timer()\n\n# ...\n\nend = timer()\n\nprint(end - start) # Time in seconds, e.g. 5.38091952400282\n\n</code></pre>\n\n<p><a href="http://docs.python.org/2/library/timeit.html#timeit.default_timer" rel="noreferrer">timeit.default_timer</a> is assigned to time.time() or time.clock() depending on OS. On Python 3.3+ <a href="http://docs.python.org/3/library/timeit#timeit.default_timer" rel="noreferrer">default_timer</a> is <a href="http://docs.python.org/3/library/time.html#time.perf_counter" rel="noreferrer">time.perf_counter()</a> on all platforms. See <a href="https://stackoverflow.com/q/85451/4279">Python - time.clock() vs. time.time() - accuracy?</a></p>\n\n<p>See also:</p>\n\n<ul>\n\n<li><a href="http://scipy-lectures.github.io/advanced/optimizing/" rel="noreferrer">Optimizing code</a></li>\n\n<li><a href="http://scikit-learn.org/stable/developers/performance.html" rel="noreferrer">How to optimize for speed</a></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	581
How do I translate an ISO 8601 datetime string into a Python datetime object?	<p>I prefer using the <a href="https://pypi.org/project/python-dateutil/" rel="noreferrer">dateutil</a> library for timezone handling and generally solid date parsing. If you were to get an <code>ISO 8601</code> string like: <code>2010-05-08T23:41:54.000Z</code> you'd have a fun time parsing that with strptime, especially if you didn't know up front whether or not the timezone was included. <code>pyiso8601</code> has a couple of issues (check their tracker) that I ran into during my usage and it hasn't been updated in a few years. dateutil, by contrast, has been active and worked for me: </p>\n\n<pre><code>import dateutil.parser\n\nyourdate = dateutil.parser.parse(datestring)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	582
Checking whether a string starts with XXXX	<pre><code>aString = "hello world"\n\naString.startswith("hello")\n\n</code></pre>\n\n<p>More info about <a href="https://docs.python.org/3/library/stdtypes.html?highlight=startswith#str.startswith" rel="noreferrer"><code>startswith</code></a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	583
How do I do a not equal in Django queryset filtering?	<p>Maybe <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects" rel="noreferrer">Q objects</a> could be of help for this problem. I've never used them but it seems they can be negated and combined much like normal python expressions.</p>\n\n<p>Update: I Just tried it out, it seems to work pretty well:</p>\n\n<pre><code>>>> from myapp.models import Entry\n\n>>> from django.db.models import Q\n\n>>> Entry.objects.filter(~Q(id = 3))\n\n[<Entry: Entry object>, <Entry: Entry object>, <Entry: Entry object>, ...]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	584
SQLAlchemy ORDER BY DESCENDING?	<p>Just as an FYI, you can also specify those things as column attributes. For instance, I might have done:</p>\n\n<pre><code>.order_by(model.Entry.amount.desc())\n\n</code></pre>\n\n<p>This is handy since it avoids an <code>import</code>, and you can use it on other places such as in a relation definition, etc.</p>\n\n<p>For more information, you can <a href="http://docs.sqlalchemy.org/en/latest/orm/tutorial.html" rel="noreferrer">refer this</a> </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	585
How to reset index in a pandas dataframe?	<p><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.reset_index.html" rel="nofollow noreferrer"><code>DataFrame.reset_index</code></a> is what you're looking for. If you don't want it saved as a column, then do:</p>\n\n<pre><code>df = df.reset_index(drop=True)\n\n</code></pre>\n\n<p>If you don't want to reassign:</p>\n\n<pre><code>df.reset_index(drop=True, inplace=True)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	586
How do I pass a variable by reference?	<p>The problem comes from a misunderstanding of what variables are in Python. If you're used to most traditional languages, you have a mental model of what happens in the following sequence:</p>\n\n<pre><code>a = 1\n\na = 2\n\n</code></pre>\n\n<p>You believe that <code>a</code> is a memory location that stores the value <code>1</code>, then is updated to store the value <code>2</code>. That's not how things work in Python. Rather, <code>a</code> starts as a reference to an object with the value <code>1</code>, then gets reassigned as a reference to an object with the value <code>2</code>. Those two objects may continue to coexist even though <code>a</code> doesn't refer to the first one anymore; in fact they may be shared by any number of other references within the program.</p>\n\n<p>When you call a function with a parameter, a new reference is created that refers to the object passed in. This is separate from the reference that was used in the function call, so there's no way to update that reference and make it refer to a new object. In your example:</p>\n\n<pre><code>def __init__(self):\n\n self.variable = 'Original'\n\n self.Change(self.variable)\n\ndef Change(self, var):\n\n var = 'Changed'\n\n</code></pre>\n\n<p><code>self.variable</code> is a reference to the string object <code>'Original'</code>. When you call <code>Change</code> you create a second reference <code>var</code> to the object. Inside the function you reassign the reference <code>var</code> to a different string object <code>'Changed'</code>, but the reference <code>self.variable</code> is separate and does not change.</p>\n\n<p>The only way around this is to pass a mutable object. Because both references refer to the same object, any changes to the object are reflected in both places.</p>\n\n<pre><code>def __init__(self): \n\n self.variable = ['Original']\n\n self.Change(self.variable)\n\ndef Change(self, var):\n\n var[0] = 'Changed'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	587
How to declare and add items to an array in Python?	<p><code>{}</code> represents an empty dictionary, not an array/list. For lists or arrays, you need <code>[]</code>.</p>\n\n<p>To initialize an empty list do this:</p>\n\n<pre><code>my_list = []\n\n</code></pre>\n\n<p>or</p>\n\n<pre><code>my_list = list()\n\n</code></pre>\n\n<p>To add elements to the list, use <code>append</code></p>\n\n<pre><code>my_list.append(12)\n\n</code></pre>\n\n<p>To <code>extend</code> the list to include the elements from another list use <code>extend</code></p>\n\n<pre><code>my_list.extend([1,2,3,4])\n\nmy_list\n\n--> [12,1,2,3,4]\n\n</code></pre>\n\n<p>To remove an element from a list use <code>remove</code></p>\n\n<pre><code>my_list.remove(2)\n\n</code></pre>\n\n<p>Dictionaries represent a collection of key/value pairs also known as an associative array or a map. </p>\n\n<p>To initialize an empty dictionary use <code>{}</code> or <code>dict()</code></p>\n\n<p>Dictionaries have keys and values</p>\n\n<pre><code>my_dict = {'key':'value', 'another_key' : 0}\n\n</code></pre>\n\n<p>To extend a dictionary with the contents of another dictionary you may use the <code>update</code> method</p>\n\n<pre><code>my_dict.update({'third_key' : 1})\n\n</code></pre>\n\n<p>To remove a value from a dictionary</p>\n\n<pre><code>del my_dict['key']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	588
Python vs Cpython	<h2>So what is CPython?</h2>\n\n<p>CPython is the <em>original</em> Python implementation. It is the implementation you download from Python.org. People call it CPython to distinguish it from other, later, Python implementations, and to distinguish the implementation of the language engine from the Python <em>programming language</em> itself.</p>\n\n<p>The latter part is where your confusion comes from; you need to keep Python-the-language separate from whatever <em>runs</em> the Python code.</p>\n\n<p>CPython <em>happens</em> to be implemented in C. That is just an implementation detail, really. CPython compiles your Python code into bytecode (transparently) and interprets that bytecode in a evaluation loop.</p>\n\n<p>CPython is also the first to implement new features; Python-the-language development uses CPython as the base; other implementations follow.</p>\n\n<h2>What about Jython, etc.?</h2>\n\n<p><a href="http://www.jython.org/" rel="noreferrer">Jython</a>, <a href="http://ironpython.net/" rel="noreferrer">IronPython</a> and <a href="https://pypy.org/" rel="noreferrer">PyPy</a> are the current "other" implementations of the Python programming language; these are implemented in Java, C# and RPython (a subset of Python), respectively. Jython compiles your Python code to <em>Java</em> bytecode, so your Python code can run on the JVM. IronPython lets you run Python on the <a href="https://docs.microsoft.com/en-us/dotnet/standard/clr" rel="noreferrer">Microsoft CLR</a>. And PyPy, being implemented in (a subset of) Python, lets you run Python code faster than CPython, which rightly should blow your mind. :-)</p>\n\n<h2>Actually compiling to C</h2>\n\n<p>So CPython does <strong>not</strong> translate your Python code to C by itself. Instead, it runs an interpreter loop. There <em>is</em> a project that <em>does</em> translate Python-ish code to C, and that is called <a href="http://cython.org/" rel="noreferrer">Cython</a>. Cython adds a few extensions to the Python language, and lets you compile your code to C extensions, code that plugs <em>into</em> the CPython interpreter.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	589
How to access the ith column of a NumPy multidimensional array?	<pre><code>>>> test[:,0]\n\narray([1, 3, 5])\n\n</code></pre>\n\n<p>Similarly, </p>\n\n<pre><code>>>> test[1,:]\n\narray([3, 4])\n\n</code></pre>\n\n<p>lets you access rows. This is covered in Section 1.4 (Indexing) of the <a href="http://docs.scipy.org/doc/numpy/reference/arrays.indexing.html" rel="noreferrer">NumPy reference</a>. This is quick, at least in my experience. It's certainly much quicker than accessing each element in a loop.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	590
Decorators with parameters?	<p>The syntax for decorators with arguments is a bit different - the decorator with arguments should return a function that will <em>take a function</em> and return another function. So it should really return a normal decorator. A bit confusing, right? What I mean is:</p>\n\n<pre><code>def decorator_factory(argument):\n\n def decorator(function):\n\n def wrapper(*args, **kwargs):\n\n funny_stuff()\n\n something_with_argument(argument)\n\n result = function(*args, **kwargs)\n\n more_funny_stuff()\n\n return result\n\n return wrapper\n\n return decorator\n\n</code></pre>\n\n<p><a href="https://www.artima.com/weblogs/viewpost.jsp?thread=240845#decorator-functions-with-decorator-arguments" rel="noreferrer">Here</a> you can read more on the subject - it's also possible to implement this using callable objects and that is also explained there.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	591
Substitute multiple whitespace with single whitespace in Python	<p>A simple possibility (if you'd rather avoid REs) is</p>\n\n<pre><code>' '.join(mystring.split())\n\n</code></pre>\n\n<p>The split and join perform the task you're explicitly asking about -- plus, they also do the extra one that you don't talk about but is seen in your example, removing trailing spaces;-).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	592
What does the 'b' character do in front of a string literal?	<p><a href="http://www.diveintopython3.net/strings.html" rel="noreferrer">Python 3.x</a> makes a clear distinction between the types:</p>\n\n<ul>\n\n<li><code>str</code> = <code>'...'</code> literals = a sequence of Unicode characters (UTF-16 or UTF-32, depending on how Python was compiled)</li>\n\n<li><code>bytes</code> = <code>b'...'</code> literals = a sequence of octets (integers between 0 and 255)</li>\n\n</ul>\n\n<p>If you're familiar with Java or C#, think of <code>str</code> as <code>String</code> and <code>bytes</code> as <code>byte[]</code>. If you're familiar with SQL, think of <code>str</code> as <code>NVARCHAR</code> and <code>bytes</code> as <code>BINARY</code> or <code>BLOB</code>. If you're familiar with the Windows registry, think of <code>str</code> as <code>REG_SZ</code> and <code>bytes</code> as <code>REG_BINARY</code>. If you're familiar with C(++), then forget everything you've learned about <code>char</code> and strings, because <strong>A CHARACTER IS NOT A BYTE</strong>. That idea is long obsolete.</p>\n\n<p>You use <code>str</code> when you want to represent text.</p>\n\n<pre><code>print('×©××× ×¢×××')\n\n</code></pre>\n\n<p>You use <code>bytes</code> when you want to represent low-level binary data like structs.</p>\n\n<pre><code>NaN = struct.unpack('>d', b'\xff\xf8\x00\x00\x00\x00\x00\x00')[0]\n\n</code></pre>\n\n<p>You can <a href="http://en.wikipedia.org/wiki/Character_encoding" rel="noreferrer">encode</a> a <code>str</code> to a <code>bytes</code> object.</p>\n\n<pre><code>>>> '\uFEFF'.encode('UTF-8')\n\nb'\xef\xbb\xbf'\n\n</code></pre>\n\n<p>And you can decode a <code>bytes</code> into a <code>str</code>.</p>\n\n<pre><code>>>> b'\xE2\x82\xAC'.decode('UTF-8')\n\n'â¬'\n\n</code></pre>\n\n<p>But you can't freely mix the two types.</p>\n\n<pre><code>>>> b'\xEF\xBB\xBF' + 'Text with a UTF-8 BOM'\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: can't concat bytes to str\n\n</code></pre>\n\n<p>The <code>b'...'</code> notation is somewhat confusing in that it allows the bytes 0x01-0x7F to be specified with ASCII characters instead of hex numbers.</p>\n\n<pre><code>>>> b'A' == b'\x41'\n\nTrue\n\n</code></pre>\n\n<p>But I must emphasize, <strong>a character is not a byte</strong>.</p>\n\n<pre><code>>>> 'A' == b'A'\n\nFalse\n\n</code></pre>\n\n<h1>In Python 2.x</h1>\n\n<p>Pre-3.0 versions of Python lacked this kind of distinction between text and binary data. Instead, there was:</p>\n\n<ul>\n\n<li><code>unicode</code> = <code>u'...'</code> literals = sequence of Unicode characters = 3.x <code>str</code></li>\n\n<li><code>str</code> = <code>'...'</code> literals = sequences of confounded bytes/characters\n\n<ul>\n\n<li>Usually text, encoded in some unspecified encoding.</li>\n\n<li>But also used to represent binary data like <code>struct.pack</code> output.</li>\n\n</ul></li>\n\n</ul>\n\n<p>In order to ease the 2.x-to-3.x transition, the <code>b'...'</code> literal syntax was backported to Python 2.6, in order to allow distinguishing binary strings (which should be <code>bytes</code> in 3.x) from text strings (which should be <code>str</code> in 3.x). The <code>b</code> prefix does nothing in 2.x, but tells the <code>2to3</code> script not to convert it to a Unicode string in 3.x.</p>\n\n<p>So yes, <code>b'...'</code> literals in Python have the same purpose that they do in PHP.</p>\n\n<blockquote>\n\n <p>Also, just out of curiosity, are there\n\n more symbols than the b and u that do\n\n other things?</p>\n\n</blockquote>\n\n<p>The <code>r</code> prefix creates a raw string (e.g., <code>r' '</code> is a backslash + <code>t</code> instead of a tab), and triple quotes <code>'''...'''</code> or <code>"""..."""</code> allow multi-line string literals.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	593
How do you test that a Python function throws an exception?	<p>Use <a href="http://docs.python.org/library/unittest.html#unittest.TestCase.assertRaises" rel="noreferrer"><code>TestCase.assertRaises</code></a> (or <code>TestCase.failUnlessRaises</code>) from the unittest module, for example:</p>\n\n<pre><code>import mymod\n\nclass MyTestCase(unittest.TestCase):\n\n def test1(self):\n\n self.assertRaises(SomeCoolException, mymod.myfunc)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	594
What exactly do "u" and "r" string flags do, and what are raw string literals?	<p>There's not really any "raw <em>string</em>"; there are raw <em>string literals</em>, which are exactly the string literals marked by an <code>'r'</code> before the opening quote.</p>\n\n<p>A "raw string literal" is a slightly different syntax for a string literal, in which a backslash, <code>\</code>, is taken as meaning "just a backslash" (except when it comes right before a quote that would otherwise terminate the literal) -- no "escape sequences" to represent newlines, tabs, backspaces, form-feeds, and so on. In normal string literals, each backslash must be doubled up to avoid being taken as the start of an escape sequence.</p>\n\n<p>This syntax variant exists mostly because the syntax of regular expression patterns is heavy with backslashes (but never at the end, so the "except" clause above doesn't matter) and it looks a bit better when you avoid doubling up each of them -- that's all. It also gained some popularity to express native Windows file paths (with backslashes instead of regular slashes like on other platforms), but that's very rarely needed (since normal slashes mostly work fine on Windows too) and imperfect (due to the "except" clause above).</p>\n\n<p><code>r'...'</code> is a byte string (in Python 2.*), <code>ur'...'</code> is a Unicode string (again, in Python 2.*), and any of the other three kinds of quoting also produces exactly the same types of strings (so for example <code>r'...'</code>, <code>r'''...'''</code>, <code>r"..."</code>, <code>r"""..."""</code> are all byte strings, and so on).</p>\n\n<p>Not sure what you mean by "going <em>back</em>" - there is no intrinsically back and forward directions, because there's no raw string <strong>type</strong>, it's just an alternative syntax to express perfectly normal string objects, byte or unicode as they may be.</p>\n\n<p>And yes, in Python 2.*, <code>u'...'</code> <strong>is</strong> of course always distinct from just <code>'...'</code> -- the former is a unicode string, the latter is a byte string. What encoding the literal might be expressed in is a completely orthogonal issue.</p>\n\n<p>E.g., consider (Python 2.6):</p>\n\n<pre><code>>>> sys.getsizeof('ciao')\n\n28\n\n>>> sys.getsizeof(u'ciao')\n\n34\n\n</code></pre>\n\n<p>The Unicode object of course takes more memory space (very small difference for a very short string, obviously ;-).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	595
How to upgrade all Python packages with pip?	<p>You can use the following Python code. Unlike <code>pip freeze</code>, this will not print warnings and FIXME errors.\n\n<strong>For pip < 10.0.1</strong></p>\n\n<pre><code>import pip\n\nfrom subprocess import call\n\npackages = [dist.project_name for dist in pip.get_installed_distributions()]\n\ncall("pip install --upgrade " + ' '.join(packages), shell=True)\n\n</code></pre>\n\n<p><strong>For pip >= 10.0.1</strong></p>\n\n<pre><code>import pkg_resources\n\nfrom subprocess import call\n\npackages = [dist.project_name for dist in pkg_resources.working_set]\n\ncall("pip install --upgrade " + ' '.join(packages), shell=True)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	596
What's the pythonic way to use getters and setters?	<p>Try this: <a href="http://docs.python.org/library/functions.html?highlight=property#property" rel="noreferrer">Python Property</a></p>\n\n<p>The sample code is:</p>\n\n<pre><code>class C(object):\n\n def __init__(self):\n\n self._x = None\n\n @property\n\n def x(self):\n\n """I'm the 'x' property."""\n\n print("getter of x called")\n\n return self._x\n\n @x.setter\n\n def x(self, value):\n\n print("setter of x called")\n\n self._x = value\n\n @x.deleter\n\n def x(self):\n\n print("deleter of x called")\n\n del self._x\n\nc = C()\n\nc.x = 'foo' # setter called\n\nfoo = c.x # getter called\n\ndel c.x # deleter called\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	597
What is the Python equivalent of static variables inside a function?	<p>A bit reversed, but this should work:</p>\n\n<pre><code>def foo():\n\n foo.counter += 1\n\n print "Counter is %d" % foo.counter\n\nfoo.counter = 0\n\n</code></pre>\n\n<p>If you want the counter initialization code at the top instead of the bottom, you can create a decorator:</p>\n\n<pre><code>def static_vars(**kwargs):\n\n def decorate(func):\n\n for k in kwargs:\n\n setattr(func, k, kwargs[k])\n\n return func\n\n return decorate\n\n</code></pre>\n\n<p>Then use the code like this:</p>\n\n<pre><code>@static_vars(counter=0)\n\ndef foo():\n\n foo.counter += 1\n\n print "Counter is %d" % foo.counter\n\n</code></pre>\n\n<p>It'll still require you to use the <code>foo.</code> prefix, unfortunately.</p>\n\n<p><sup>(Credit: <a href="https://stackoverflow.com/questions/279561/what-is-the-python-equivalent-of-static-variables-inside-a-function/279586#comment41067162_279586">@ony</a>)</sup></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	598
How to drop rows of Pandas DataFrame whose value in a certain column is NaN	<p>Don't drop, just take the rows where EPS is not NA:</p>\n\n<pre class="lang-py prettyprint-override"><code>df = df[df['EPS'].notna()]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	599
error: Unable to find vcvarsall.bat	<p><strong><em>Update</strong>: Comments point out that the instructions here may be dangerous. Consider using the Visual C++ 2008 Express edition or the purpose-built <a href="http://www.microsoft.com/en-us/download/details.aspx?id=44266" rel="noreferrer">Microsoft Visual C++ Compiler for Python</a> (<a href="/a/26127562/2778484">details</a>) and <strong>NOT</strong> using the original answer below. Original error message means the required version of Visual C++ is not installed.</em></p>\n\n<hr>\n\n<p>For Windows installations:</p>\n\n<p>While running setup.py for package installations, Python 2.7 searches for an installed Visual Studio 2008. You can trick Python to use a newer Visual Studio by setting the correct path in <code>VS90COMNTOOLS</code> environment variable before calling <code>setup.py</code>.</p>\n\n<p>Execute the following command based on the version of Visual Studio installed:</p>\n\n<ul>\n\n<li>Visual Studio 2010 (VS10): <code>SET VS90COMNTOOLS=%VS100COMNTOOLS%</code></li>\n\n<li>Visual Studio 2012 (VS11): <code>SET VS90COMNTOOLS=%VS110COMNTOOLS%</code></li>\n\n<li>Visual Studio 2013 (VS12): <code>SET VS90COMNTOOLS=%VS120COMNTOOLS%</code></li>\n\n<li>Visual Studio 2015 (VS14): <code>SET VS90COMNTOOLS=%VS140COMNTOOLS%</code></li>\n\n</ul>\n\n<hr>\n\n<p>WARNING: As noted below, this answer is unlikely to work if you are trying to compile python modules.</p>\n\n<p>See <a href="https://stackoverflow.com/questions/3047542">Building lxml for Python 2.7 on Windows</a> for details.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	600
Getting file size in Python?	<p>Use <a href="https://docs.python.org/library/os.path.html#os.path.getsize" rel="noreferrer"><code>os.path.getsize(path)</code></a> which will</p>\n\n<blockquote>\n\n <p>Return the size, in bytes, of <em>path</em>. Raise <a href="https://docs.python.org/library/exceptions.html#OSError" rel="noreferrer"><code>OSError</code></a> if the file does not exist or is inaccessible.</p>\n\n</blockquote>\n\n<pre><code>import os\n\nos.path.getsize('C:\\Python27\\Lib\\genericpath.py')\n\n</code></pre>\n\n<p>Or use <a href="https://docs.python.org/3/library/os.html#os.stat" rel="noreferrer"><code>os.stat(path).st_size</code></a></p>\n\n<pre><code>import os\n\nos.stat('C:\\Python27\\Lib\\genericpath.py').st_size \n\n</code></pre>\n\n<p>Or use <a href="https://docs.python.org/library/pathlib.html#pathlib.Path.stat" rel="noreferrer"><code>Path(path).stat().st_size</code></a> (Python 3.4+)</p>\n\n<pre><code>from pathlib import Path\n\nPath('C:\\Python27\\Lib\\genericpath.py').stat().st_size\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	601
How to get file creation & modification date/times in Python?	<p>You have a couple of choices. For one, you can use the <a href="https://docs.python.org/library/os.path.html#os.path.getmtime" rel="noreferrer"><code>os.path.getmtime</code></a> and <a href="https://docs.python.org/library/os.path.html#os.path.getctime" rel="noreferrer"><code>os.path.getctime</code></a> functions:</p>\n\n<pre><code>import os.path, time\n\nprint("last modified: %s" % time.ctime(os.path.getmtime(file)))\n\nprint("created: %s" % time.ctime(os.path.getctime(file)))\n\n</code></pre>\n\n<p>Your other option is to use <a href="https://docs.python.org/library/os.html#os.stat" rel="noreferrer"><code>os.stat</code></a>:</p>\n\n<pre><code>import os, time\n\n(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)\n\nprint("last modified: %s" % time.ctime(mtime))\n\n</code></pre>\n\n<p><strong>Note</strong>: <code>ctime()</code> does <em>not</em> refer to creation time on *nix systems, but rather the last time the inode data changed. (thanks to kojiro for making that fact more clear in the comments by providing a link to an interesting blog post)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	602
IndentationError: unindent does not match any outer indentation level	<p>Other posters are probably correct...there might be spaces mixed in with your tabs. Try doing a search & replace to replace all tabs with a few spaces.</p>\n\n<p>Try this:</p>\n\n<pre><code>import sys\n\ndef Factorial(n): # return factorial\n\n result = 1\n\n for i in range (1,n):\n\n result = result * i\n\n print "factorial is ",result\n\n return result\n\nprint Factorial(10)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	603
How to check Django version	<p>Django 1.5 supports Python 2.6.5 and later.</p>\n\n<p>If you're under Linux and want to check the Python version you're using, run <code>python -V</code> from the command line.</p>\n\n<p>If you want to check the Django version, open a Python console and type</p>\n\n<pre><code>>>> import django\n\n>>> django.VERSION\n\n(2, 0, 0, 'final', 0)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	604
Is there any way to kill a Thread?	<p>It is generally a bad pattern to kill a thread abruptly, in Python and in any language. Think of the following cases:</p>\n\n<ul>\n\n<li>the thread is holding a critical resource that must be closed properly</li>\n\n<li>the thread has created several other threads that must be killed as well.</li>\n\n</ul>\n\n<p>The nice way of handling this if you can afford it (if you are managing your own threads) is to have an exit_request flag that each threads checks on regular interval to see if it is time for it to exit.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>import threading\n\nclass StoppableThread(threading.Thread):\n\n """Thread class with a stop() method. The thread itself has to check\n\n regularly for the stopped() condition."""\n\n def __init__(self, *args, **kwargs):\n\n super(StoppableThread, self).__init__(*args, **kwargs)\n\n self._stop_event = threading.Event()\n\n def stop(self):\n\n self._stop_event.set()\n\n def stopped(self):\n\n return self._stop_event.is_set()\n\n</code></pre>\n\n<p>In this code, you should call <code>stop()</code> on the thread when you want it to exit, and wait for the thread to exit properly using <code>join()</code>. The thread should check the stop flag at regular intervals.</p>\n\n<p>There are cases however when you really need to kill a thread. An example is when you are wrapping an external library that is busy for long calls and you want to interrupt it.</p>\n\n<p>The following code allows (with some restrictions) to raise an Exception in a Python thread:</p>\n\n<pre><code>def _async_raise(tid, exctype):\n\n '''Raises an exception in the threads with id tid'''\n\n if not inspect.isclass(exctype):\n\n raise TypeError("Only types can be raised (not instances)")\n\n res = ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid),\n\n ctypes.py_object(exctype))\n\n if res == 0:\n\n raise ValueError("invalid thread id")\n\n elif res != 1:\n\n # "if it returns a number greater than one, you're in trouble,\n\n # and you should call it again with exc=NULL to revert the effect"\n\n ctypes.pythonapi.PyThreadState_SetAsyncExc(ctypes.c_long(tid), None)\n\n raise SystemError("PyThreadState_SetAsyncExc failed")\n\nclass ThreadWithExc(threading.Thread):\n\n '''A thread class that supports raising exception in the thread from\n\n another thread.\n\n '''\n\n def _get_my_tid(self):\n\n """determines this (self's) thread id\n\n CAREFUL : this function is executed in the context of the caller\n\n thread, to get the identity of the thread represented by this\n\n instance.\n\n """\n\n if not self.isAlive():\n\n raise threading.ThreadError("the thread is not active")\n\n # do we have it cached?\n\n if hasattr(self, "_thread_id"):\n\n return self._thread_id\n\n # no, look for it in the _active dict\n\n for tid, tobj in threading._active.items():\n\n if tobj is self:\n\n self._thread_id = tid\n\n return tid\n\n # TODO: in python 2.6, there's a simpler way to do : self.ident\n\n raise AssertionError("could not determine the thread's id")\n\n def raiseExc(self, exctype):\n\n """Raises the given exception type in the context of this thread.\n\n If the thread is busy in a system call (time.sleep(),\n\n socket.accept(), ...), the exception is simply ignored.\n\n If you are sure that your exception should terminate the thread,\n\n one way to ensure that it works is:\n\n t = ThreadWithExc( ... )\n\n ...\n\n t.raiseExc( SomeException )\n\n while t.isAlive():\n\n time.sleep( 0.1 )\n\n t.raiseExc( SomeException )\n\n If the exception is to be caught by the thread, you need a way to\n\n check that your thread has caught it.\n\n CAREFUL : this function is executed in the context of the\n\n caller thread, to raise an excpetion in the context of the\n\n thread represented by this instance.\n\n """\n\n _async_raise( self._get_my_tid(), exctype )\n\n</code></pre>\n\n<p>(Based on <a href="http://tomerfiliba.com/recipes/Thread2/" rel="noreferrer">Killable Threads</a> by Tomer Filiba. The quote about the return value of <code>PyThreadState_SetAsyncExc</code> appears to be from an <a href="https://svn.python.org/projects/stackless/Python-2.4.3/dev/Python/pystate.c" rel="noreferrer">old version of Python</a>.)</p>\n\n<p>As noted in the documentation, this is not a magic bullet because if the thread is busy outside the Python interpreter, it will not catch the interruption.</p>\n\n<p>A good usage pattern of this code is to have the thread catch a specific exception and perform the cleanup. That way, you can interrupt a task and still have proper cleanup.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	605
Does Python have a string 'contains' substring method?	<p>If it's just a substring search you can use <code>string.find("substring")</code>.</p>\n\n<p>You do have to be a little careful with <a href="https://docs.python.org/library/stdtypes.html#str.find" rel="noreferrer"><code>find</code></a>, <a href="https://docs.python.org/library/stdtypes.html#str.index" rel="noreferrer"><code>index</code></a>, and <a href="https://docs.python.org/reference/expressions.html#membership-test-operations" rel="noreferrer"><code>in</code></a> though, as they are substring searches. In other words, this:</p>\n\n<pre><code>s = "This be a string"\n\nif s.find("is") == -1:\n\n print("No 'is' here!")\n\nelse:\n\n print("Found 'is' in the string.")\n\n</code></pre>\n\n<p>It would print <code>Found 'is' in the string.</code> Similarly, <code>if "is" in s:</code> would evaluate to <code>True</code>. This may or may not be what you want.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	606
Multiple variables in a 'with' statement?	<p>It is possible in <a href="http://docs.python.org/3.1/reference/compound_stmts.html#with" rel="noreferrer">Python 3 since v3.1</a> and <a href="http://docs.python.org/dev/whatsnew/2.7.html#other-language-changes" rel="noreferrer">Python 2.7</a>. The new <a href="https://docs.python.org/3/reference/compound_stmts.html#the-with-statement" rel="noreferrer"><code>with</code> syntax</a> supports multiple context managers:</p>\n\n<pre><code>with A() as a, B() as b, C() as c:\n\n doSomething(a,b,c)\n\n</code></pre>\n\n<p>Unlike the <code>contextlib.nested</code>, this guarantees that <code>a</code> and <code>b</code> will have their <code>__exit__()</code>'s called even if <code>C()</code> or it's <code>__enter__()</code> method raises an exception.</p>\n\n<p>You can also use earlier variables in later definitions (h/t <a href="https://stackoverflow.com/questions/893333/multiple-variables-in-a-with-statement#comment78254813_1073814">Ahmad</a> below):</p>\n\n<pre><code>with A() as a, B(a) as b, C(a, b) as c:\n\n doSomething(a, c)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	607
Is it a good practice to use try-except-else in Python?	<blockquote>\n\n <p>"I do not know if it is out of ignorance, but I do not like that\n\n kind of programming, as it is using exceptions to perform flow control."</p>\n\n</blockquote>\n\n<p>In the Python world, using exceptions for flow control is common and normal.</p>\n\n<p>Even the Python core developers use exceptions for flow-control and that style is heavily baked into the language (i.e. the iterator protocol uses <a href="http://docs.python.org/2.7/library/exceptions.html#exceptions.StopIteration" rel="noreferrer"><em>StopIteration</em></a> to signal loop termination).</p>\n\n<p>In addition, the try-except-style is used to prevent the race-conditions inherent in some of the <a href="http://docs.python.org/2.7/glossary.html#term-lbyl" rel="noreferrer">"look-before-you-leap"</a> constructs. For example, testing <a href="http://docs.python.org/2.7/library/os.path.html#os.path.exists" rel="noreferrer"><em>os.path.exists</em></a> results in information that may be out-of-date by the time you use it. Likewise, <a href="http://docs.python.org/2.7/library/queue.html#Queue.Queue.full" rel="noreferrer"><em>Queue.full</em></a> returns information that may be stale. The <a href="http://docs.python.org/2.7/glossary.html#term-eafp" rel="noreferrer">try-except-else style</a> will produce more reliable code in these cases.</p>\n\n<blockquote>\n\n <p>"It my understanding that exceptions are not errors, they should only\n\n be used for exceptional conditions"</p>\n\n</blockquote>\n\n<p>In some other languages, that rule reflects their cultural norms as reflected in their libraries. The "rule" is also based in-part on performance considerations for those languages.</p>\n\n<p>The Python cultural norm is somewhat different. In many cases, you <em>must</em> use exceptions for control-flow. Also, the use of exceptions in Python does not slow the surrounding code and calling code as it does in some compiled languages (i.e. <a href="http://en.wikipedia.org/wiki/CPython" rel="noreferrer">CPython</a> already implements code for exception checking at every step, regardless of whether you actually use exceptions or not).</p>\n\n<p>In other words, your understanding that "exceptions are for the exceptional" is a rule that makes sense in some other languages, but not for Python.</p>\n\n<blockquote>\n\n <p>"However, if it is included in the language itself, there must be a\n\n good reason for it, isn't it?"</p>\n\n</blockquote>\n\n<p>Besides helping to avoid race-conditions, exceptions are also very useful for pulling error-handling outside loops. This is a necessary optimization in interpreted languages which do not tend to have automatic <a href="http://en.wikipedia.org/wiki/Loop-invariant_code_motion" rel="noreferrer">loop invariant code motion</a>.</p>\n\n<p>Also, exceptions can simplify code quite a bit in common situations where the ability to handle an issue is far removed from where the issue arose. For example, it is common to have top level user-interface code calling code for business logic which in turn calls low-level routines. Situations arising in the low-level routines (such as duplicate records for unique keys in database accesses) can only be handled in top-level code (such as asking the user for a new key that doesn't conflict with existing keys). The use of exceptions for this kind of control-flow allows the mid-level routines to completely ignore the issue and be nicely decoupled from that aspect of flow-control.</p>\n\n<p>There is a <a href="http://uberpython.wordpress.com/2012/09/23/why-im-not-leaving-python-for-go/" rel="noreferrer">nice blog post on the indispensibility of exceptions here</a>.</p>\n\n<p>Also, see this Stack Overflow answer: <a href="https://stackoverflow.com/questions/180937/are-exceptions-really-for-exceptional-errors">Are exceptions really for exceptional errors?</a></p>\n\n<blockquote>\n\n <p>"What is the reason for the try-except-else to exist?"</p>\n\n</blockquote>\n\n<p>The else-clause itself is interesting. It runs when there is no exception but before the finally-clause. That is its primary purpose.</p>\n\n<p>Without the else-clause, the only option to run additional code before finalization would be the clumsy practice of adding the code to the try-clause. That is clumsy because it risks\n\nraising exceptions in code that wasn't intended to be protected by the try-block.</p>\n\n<p>The use-case of running additional unprotected code prior to finalization doesn't arise very often. So, don't expect to see many examples in published code. It is somewhat rare.</p>\n\n<p>Another use-case for the else-clause is to perform actions that must occur when no exception occurs and that do not occur when exceptions are handled. For example:</p>\n\n<pre class="lang-py prettyprint-override"><code>recip = float('Inf')\n\ntry:\n\n recip = 1 / f(x)\n\nexcept ZeroDivisionError:\n\n logging.info('Infinite result')\n\nelse:\n\n logging.info('Finite result')\n\n</code></pre>\n\n<p>Another example occurs in unittest runners:</p>\n\n<pre><code>try:\n\n tests_run += 1\n\n run_testcase(case)\n\nexcept Exception:\n\n tests_failed += 1\n\n logging.exception('Failing test case: %r', case)\n\n print('F', end='')\n\nelse:\n\n logging.info('Successful test case: %r', case)\n\n print('.', end='')\n\n</code></pre>\n\n<p>Lastly, the most common use of an else-clause in a try-block is for a bit of beautification (aligning the exceptional outcomes and non-exceptional outcomes at the same level of indentation). This use is always optional and isn't strictly necessary.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	608
How do I determine the size of an object in Python?	<p>Just use the <a href="http://docs.python.org/library/sys.html#sys.getsizeof" rel="nofollow noreferrer">sys.getsizeof</a> function defined in the <code>sys</code> module.</p>\n\n<blockquote>\n\n<p><code>sys.getsizeof(object[, default])</code>:</p>\n\n<p>Return the size of an object in bytes.\n\nThe object can be any type of object.\n\nAll built-in objects will return\n\ncorrect results, but this does not\n\nhave to hold true for third-party\n\nextensions as it is implementation\n\nspecific.</p>\n\n<p>Only the memory consumption directly attributed to the object is\n\naccounted for, not the memory consumption of objects it refers to.</p>\n\n<p>The <code>default</code> argument allows to define\n\na value which will be returned if the\n\nobject type does not provide means to\n\nretrieve the size and would cause a\n\n<code>TypeError</code>.</p>\n\n<p><code>getsizeof</code> calls the objectâs\n\n<code>__sizeof__</code> method and adds an additional garbage collector overhead\n\nif the object is managed by the\n\ngarbage collector.</p>\n\n<p>See <a href="https://code.activestate.com/recipes/577504" rel="nofollow noreferrer">recursive sizeof recipe</a> for an example of using <code>getsizeof()</code> recursively to find the size of containers and all their contents.</p>\n\n</blockquote>\n\n<p>Usage example, in python 3.0:</p>\n\n<pre><code>>>> import sys\n\n>>> x = 2\n\n>>> sys.getsizeof(x)\n\n24\n\n>>> sys.getsizeof(sys.getsizeof)\n\n32\n\n>>> sys.getsizeof('this')\n\n38\n\n>>> sys.getsizeof('this also')\n\n48\n\n</code></pre>\n\n<p>If you are in python < 2.6 and don't have <code>sys.getsizeof</code> you can use <a href="http://code.activestate.com/recipes/546530/" rel="nofollow noreferrer">this extensive module</a> instead. Never used it though.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	609
Creating a new dictionary in Python	<p>Call <code>dict</code> with no parameters</p>\n\n<pre><code>new_dict = dict()\n\n</code></pre>\n\n<p>or simply write</p>\n\n<pre><code>new_dict = {}\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	610
Filter dict to contain only certain keys?	<p>Constructing a new dict: </p>\n\n<pre><code>dict_you_want = { your_key: old_dict[your_key] for your_key in your_keys }\n\n</code></pre>\n\n<p>Uses dictionary comprehension. </p>\n\n<p>If you use a version which lacks them (ie Python 2.6 and earlier), make it <code>dict((your_key, old_dict[your_key]) for ...)</code>. It's the same, though uglier.</p>\n\n<p>Note that this, unlike jnnnnn's version, has stable performance (depends only on number of your_keys) for <code>old_dict</code>s of any size. Both in terms of speed and memory. Since this is a generator expression, it processes one item at a time, and it doesn't looks through all items of old_dict.</p>\n\n<p>Removing everything in-place:</p>\n\n<pre><code>unwanted = set(keys) - set(your_dict)\n\nfor unwanted_key in unwanted: del your_dict[unwanted_key]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	611
Repeat string to certain length	<p>Jason Scheirer's answer is correct but could use some more exposition.</p>\n\n<p>First off, to repeat a string an integer number of times, you can use overloaded multiplication:</p>\n\n<pre><code>>>> 'abc' * 7\n\n'abcabcabcabcabcabcabc'\n\n</code></pre>\n\n<p>So, to repeat a string until it's <em>at least</em> as long as the length you want, you calculate the appropriate number of repeats and put it on the right-hand side of that multiplication operator:</p>\n\n<pre><code>def repeat_to_at_least_length(s, wanted):\n\n return s * (wanted//len(s) + 1)\n\n>>> repeat_to_at_least_length('abc', 7)\n\n'abcabcabc'\n\n</code></pre>\n\n<p>Then, you can trim it to the exact length you want with an array slice:</p>\n\n<pre><code>def repeat_to_length(s, wanted):\n\n return (s * (wanted//len(s) + 1))[:wanted]\n\n>>> repeat_to_length('abc', 7)\n\n'abcabca'\n\n</code></pre>\n\n<p>Alternatively, as suggested in <a href="https://stackoverflow.com/a/3391233/215487">pillmod's answer</a> that probably nobody scrolls down far enough to notice anymore, you can use <a href="https://docs.python.org/3/library/functions.html#divmod" rel="noreferrer"><code>divmod</code></a> to compute the number of full repetitions needed, and the number of extra characters, all at once:</p>\n\n<pre><code>def pillmod_repeat_to_length(s, wanted):\n\n a, b = divmod(wanted, len(s))\n\n return s * a + s[:b]\n\n</code></pre>\n\n<p>Which is better? Let's benchmark it:</p>\n\n<pre><code>>>> import timeit\n\n>>> timeit.repeat('scheirer_repeat_to_length("abcdefg", 129)', globals=globals())\n\n[0.3964178159367293, 0.32557755894958973, 0.32851039397064596]\n\n>>> timeit.repeat('pillmod_repeat_to_length("abcdefg", 129)', globals=globals())\n\n[0.5276265419088304, 0.46511475392617285, 0.46291469305288047]\n\n</code></pre>\n\n<p>So, pillmod's version is something like 40% slower, which is too bad, since personally I think it's much more readable. There are several possible reasons for this, starting with its compiling to about 40% more bytecode instructions.</p>\n\n<p>Note: these examples use the new-ish <code>//</code> operator for truncating integer division. This is often <em>called</em> a Python 3 feature, but according to <a href="https://www.python.org/dev/peps/pep-0238/" rel="noreferrer">PEP 238</a>, it was introduced all the way back in Python 2.2. You only <em>have</em> to use it in Python 3 (or in modules that have <code>from __future__ import division</code>) but you <em>can</em> use it regardless.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	612
If Python is interpreted, what are .pyc files?	<p>They contain <a href="http://en.wikipedia.org/wiki/Bytecode" rel="noreferrer">byte code</a>, which is what the Python interpreter compiles the source to. This code is then executed by Python's virtual machine. </p>\n\n<p>Python's documentation explains the definition like this:</p>\n\n<blockquote>\n\n <p>Python is an interpreted language, as\n\n opposed to a compiled one, though the\n\n distinction can be blurry because of\n\n the presence of the bytecode compiler.\n\n This means that source files can be\n\n run directly without explicitly\n\n creating an executable which is then\n\n run.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	613
Creating a singleton in Python	<h2>Use a Metaclass</h2>\n\n<p>I would recommend <strong>Method #2</strong>, but you're better off using a <strong>metaclass</strong> than a base class. Here is a sample implementation:</p>\n\n<pre><code>class Singleton(type):\n\n _instances = {}\n\n def __call__(cls, *args, **kwargs):\n\n if cls not in cls._instances:\n\n cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)\n\n return cls._instances[cls]\n\nclass Logger(object):\n\n __metaclass__ = Singleton\n\n</code></pre>\n\n<p>Or in Python3</p>\n\n<pre><code>class Logger(metaclass=Singleton):\n\n pass\n\n</code></pre>\n\n<p>If you want to run <code>__init__</code> every time the class is called, add</p>\n\n<pre><code> else:\n\n cls._instances[cls].__init__(*args, **kwargs)\n\n</code></pre>\n\n<p>to the <code>if</code> statement in <code>Singleton.__call__</code>.</p>\n\n<p>A few words about metaclasses. A metaclass is the <strong>class of a class</strong>; that is, a class is an <strong>instance of its metaclass</strong>. You find the metaclass of an object in Python with <code>type(obj)</code>. Normal new-style classes are of type <code>type</code>. <code>Logger</code> in the code above will be of type <code>class 'your_module.Singleton'</code>, just as the (only) instance of <code>Logger</code> will be of type <code>class 'your_module.Logger'</code>. When you call logger with <code>Logger()</code>, Python first asks the metaclass of <code>Logger</code>, <code>Singleton</code>, what to do, allowing instance creation to be pre-empted. This process is the same as Python asking a class what to do by calling <code>__getattr__</code> when you reference one of it's attributes by doing <code>myclass.attribute</code>.</p>\n\n<p>A metaclass essentially decides <strong>what the definition of a class means</strong> and how to implement that definition. See for example <a href="http://code.activestate.com/recipes/498149/" rel="noreferrer">http://code.activestate.com/recipes/498149/</a>, which essentially recreates C-style <code>struct</code>s in Python using metaclasses. The thread <a href="https://stackoverflow.com/questions/392160/what-are-your-concrete-use-cases-for-metaclasses-in-python">What are some (concrete) use-cases for metaclasses?</a> also provides some examples, they generally seem to be related to declarative programming, especially as used in ORMs.</p>\n\n<p>In this situation, if you use your <strong>Method #2</strong>, and a subclass defines a <code>__new__</code> method, it will be <strong>executed every time</strong> you call <code>SubClassOfSingleton()</code> -- because it is responsible for calling the method that returns the stored instance. With a metaclass, it will <strong>only be called once</strong>, when the only instance is created. You want to <strong>customize what it means to call the class</strong>, which is decided by it's type.</p>\n\n<p>In general, it <strong>makes sense</strong> to use a metaclass to implement a singleton. A singleton is special because is <strong>created only once</strong>, and a metaclass is the way you customize the <strong>creation of a class</strong>. Using a metaclass gives you <strong>more control</strong> in case you need to customize the singleton class definitions in other ways.</p>\n\n<p>Your singletons <strong>won't need multiple inheritance</strong> (because the metaclass is not a base class), but for <strong>subclasses of the created class</strong> that use multiple inheritance, you need to make sure the singleton class is the <strong>first / leftmost</strong> one with a metaclass that redefines <code>__call__</code> This is very unlikely to be an issue. The instance dict is <strong>not in the instance's namespace</strong> so it won't accidentally overwrite it.</p>\n\n<p>You will also hear that the singleton pattern violates the "Single Responsibility Principle" -- each class should do <strong>only one thing</strong>. That way you don't have to worry about messing up one thing the code does if you need to change another, because they are separate and encapsulated. The metaclass implementation <strong>passes this test</strong>. The metaclass is responsible for <strong>enforcing the pattern</strong> and the created class and subclasses need not be <strong>aware that they are singletons</strong>. <strong>Method #1</strong> fails this test, as you noted with "MyClass itself is a a function, not a class, so you cannot call class methods from it."</p>\n\n<h1>Python 2 and 3 Compatible Version</h1>\n\n<p>Writing something that works in both Python2 and 3 requires using a slightly more complicated scheme. Since metaclasses are usually subclasses of type <code>type</code>, it's possible to use one to dynamically create an intermediary base class at run time with it as its metaclass and then use <em>that</em> as the baseclass of the public <code>Singleton</code> base class. It's harder to explain than to do, as illustrated next:</p>\n\n<pre><code># works in Python 2 & 3\n\nclass _Singleton(type):\n\n """ A metaclass that creates a Singleton base class when called. """\n\n _instances = {}\n\n def __call__(cls, *args, **kwargs):\n\n if cls not in cls._instances:\n\n cls._instances[cls] = super(_Singleton, cls).__call__(*args, **kwargs)\n\n return cls._instances[cls]\n\nclass Singleton(_Singleton('SingletonMeta', (object,), {})): pass\n\nclass Logger(Singleton):\n\n pass\n\n</code></pre>\n\n<p>An ironic aspect of this approach is that it's using subclassing to implement a metaclass. One possible advantage is that, unlike with a pure metaclass, <code>isinstance(inst, Singleton)</code> will return <code>True</code>.</p>\n\n<h2>Corrections</h2>\n\n<p>On another topic, you've probably already noticed this, but the base class implementation in your original post is wrong. <code>_instances</code> needs to be <strong>referenced on the class</strong>, you need to use <code>super()</code> or you're <strong>recursing</strong>, and <code>__new__</code> is actually a static method that you have to <strong>pass the class to</strong>, not a class method, as the actual class <strong>hasn't been created</strong> yet when it is called. All of these things will be true for a metaclass implementation as well.</p>\n\n<pre><code>class Singleton(object):\n\n _instances = {}\n\n def __new__(class_, *args, **kwargs):\n\n if class_ not in class_._instances:\n\n class_._instances[class_] = super(Singleton, class_).__new__(class_, *args, **kwargs)\n\n return class_._instances[class_]\n\nclass MyClass(Singleton):\n\n pass\n\nc = MyClass()\n\n</code></pre>\n\n<h2>Decorator Returning A Class</h2>\n\n<p>I originally was writing a comment but it was too long, so I'll add this here. <strong>Method #4</strong> is better than the other decorator version, but it's more code than needed for a singleton, and it's not as clear what it does.</p>\n\n<p>The main problems stem from the class being it's own base class. First, isn't it weird to have a class be a subclass of a nearly identical class with the same name that exists only in its <code>__class__</code> attribute? This also means that you can't define <strong>any methods that call the method of the same name on their base class</strong> with <code>super()</code> because they will recurse. This means your class can't customize <code>__new__</code>, and can't derive from any classes that need <code>__init__</code> called on them.</p>\n\n<h2>When to use the singleton pattern</h2>\n\n<p>Your use case is <strong>one of the better examples</strong> of wanting to use a singleton. You say in one of the comments "To me logging has always seemed a natural candidate for Singletons." You're <strong>absolutely right</strong>.</p>\n\n<p>When people say singletons are bad, the most common reason is they are <strong>implicit shared state</strong>. While with global variables and top-level module imports are <strong>explicit</strong> shared state, other objects that are passed around are generally instantiated. This is a good point, <strong>with two exceptions</strong>.</p>\n\n<p>The first, and one that gets mentioned in various places, is when the singletons are <strong>constant</strong>. Use of global constants, especially enums, is widely accepted, and considered sane because no matter what, <strong>none of the users can mess them up for any other user</strong>. This is equally true for a constant singleton.</p>\n\n<p>The second exception, which get mentioned less, is the opposite -- when the singleton is <strong>only a data sink</strong>, not a data source (directly or indirectly). This is why loggers feel like a "natural" use for singletons. As the various users are <strong>not changing the loggers</strong> in ways other users will care about, there is <strong>not really shared state</strong>. This negates the primary argument against the singleton pattern, and makes them a reasonable choice because of their <strong>ease of use</strong> for the task.</p>\n\n<p>Here is a quote from <a href="http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html" rel="noreferrer">http://googletesting.blogspot.com/2008/08/root-cause-of-singletons.html</a>:</p>\n\n<blockquote>\n\n<p>Now, there is one kind of Singleton which is OK. That is a singleton where all of the reachable objects are immutable. If all objects are immutable than Singleton has no global state, as everything is constant. But it is so easy to turn this kind of singleton into mutable one, it is very slippery slope. Therefore, I am against these Singletons too, not because they are bad, but because it is very easy for them to go bad. (As a side note Java enumeration are just these kind of singletons. As long as you don't put state into your enumeration you are OK, so please don't.)</p>\n\n<p>The other kind of Singletons, which are semi-acceptable are those which don't effect the execution of your code, They have no "side effects". Logging is perfect example. It is loaded with Singletons and global state. It is acceptable (as in it will not hurt you) because your application does not behave any different whether or not a given logger is enabled. The information here flows one way: From your application into the logger. Even thought loggers are global state since no information flows from loggers into your application, loggers are acceptable. You should still inject your logger if you want your test to assert that something is getting logged, but in general Loggers are not harmful despite being full of state.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	614
List comprehension vs map	<p><code>map</code> may be microscopically faster in some cases (when you're NOT making a lambda for the purpose, but using the same function in map and a listcomp). List comprehensions may be faster in other cases and most (not all) pythonistas consider them more direct and clearer.</p>\n\n<p>An example of the tiny speed advantage of map when using exactly the same function:</p>\n\n<pre><code>$ python -mtimeit -s'xs=range(10)' 'map(hex, xs)'\n\n100000 loops, best of 3: 4.86 usec per loop\n\n$ python -mtimeit -s'xs=range(10)' '[hex(x) for x in xs]'\n\n100000 loops, best of 3: 5.58 usec per loop\n\n</code></pre>\n\n<p>An example of how performance comparison gets completely reversed when map needs a lambda:</p>\n\n<pre><code>$ python -mtimeit -s'xs=range(10)' 'map(lambda x: x+2, xs)'\n\n100000 loops, best of 3: 4.24 usec per loop\n\n$ python -mtimeit -s'xs=range(10)' '[x+2 for x in xs]'\n\n100000 loops, best of 3: 2.32 usec per loop\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	615
Is there a way to perform "if" in python's lambda	<p>The syntax you're looking for:</p>\n\n<pre><code>lambda x: True if x % 2 == 0 else False\n\n</code></pre>\n\n<p>But you can't use <code>print</code> or <code>raise</code> in a lambda.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	616
Automatically creating directories with file output	<p>The <a href="http://docs.python.org/library/os.html#os.makedirs" rel="noreferrer"><code>os.makedirs</code></a> function does this. Try the following:</p>\n\n<pre class="lang-py prettyprint-override"><code>import os\n\nimport errno\n\nfilename = "/foo/bar/baz.txt"\n\nif not os.path.exists(os.path.dirname(filename)):\n\n try:\n\n os.makedirs(os.path.dirname(filename))\n\n except OSError as exc: # Guard against race condition\n\n if exc.errno != errno.EEXIST:\n\n raise\n\nwith open(filename, "w") as f:\n\n f.write("FOOBAR")\n\n</code></pre>\n\n<p>The reason to add the <code>try-except</code> block is to handle the case when the directory was created between the <code>os.path.exists</code> and the <code>os.makedirs</code> calls, so that to protect us from race conditions.</p>\n\n<hr>\n\n<p>In Python 3.2+, there is a <a href="https://docs.python.org/3/library/os.html#os.makedirs" rel="noreferrer">more elegant way</a> that avoids the race condition above:</p>\n\n<pre class="lang-py prettyprint-override"><code>import os\n\nfilename = "/foo/bar/baz.txt"\n\nos.makedirs(os.path.dirname(filename), exist_ok=True)\n\nwith open(filename, "w") as f:\n\n f.write("FOOBAR")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	617
Convert nested Python dict to object?	<p><strong>Update:</strong> In Python 2.6 and onwards, consider whether the <a href="https://docs.python.org/2/library/collections.html#collections.namedtuple" rel="noreferrer"><code>namedtuple</code></a> data structure suits your needs:</p>\n\n<pre><code>>>> from collections import namedtuple\n\n>>> MyStruct = namedtuple('MyStruct', 'a b d')\n\n>>> s = MyStruct(a=1, b={'c': 2}, d=['hi'])\n\n>>> s\n\nMyStruct(a=1, b={'c': 2}, d=['hi'])\n\n>>> s.a\n\n1\n\n>>> s.b\n\n{'c': 2}\n\n>>> s.c\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nAttributeError: 'MyStruct' object has no attribute 'c'\n\n>>> s.d\n\n['hi']\n\n</code></pre>\n\n<p>The alternative (original answer contents) is:</p>\n\n<pre><code>class Struct:\n\n def __init__(self, **entries):\n\n self.__dict__.update(entries)\n\n</code></pre>\n\n<p>Then, you can use:</p>\n\n<pre><code>>>> args = {'a': 1, 'b': 2}\n\n>>> s = Struct(**args)\n\n>>> s\n\n<__main__.Struct instance at 0x01D6A738>\n\n>>> s.a\n\n1\n\n>>> s.b\n\n2\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	618
How to copy a dictionary and only edit the copy	<p>When you assign <code>dict2 = dict1</code>, you are not making a copy of <code>dict1</code>, it results in <code>dict2</code> being just another name for <code>dict1</code>.</p>\n\n<p>To copy the mutable types like dictionaries, use <code>copy</code> / <code>deepcopy</code> of the <a href="http://docs.python.org/library/copy.html" rel="noreferrer"><code>copy</code></a> module.</p>\n\n<pre><code>import copy\n\ndict2 = copy.deepcopy(dict1)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	619
Why shouldn't I use PyPy over CPython if PyPy is 6.3 times faster?	<blockquote>\n\n <p><strong>NOTE:</strong> PyPy is more mature and better supported now than it was in 2013, when this question was asked. Avoid drawing conclusions from out-of-date information.</p>\n\n</blockquote>\n\n<hr>\n\n<ol>\n\n<li>PyPy, as others have been quick to mention, has <strong>tenuous support for C extensions</strong>. It <em>has</em> support, but typically at slower-than-Python speeds and it's iffy at best. Hence a lot of modules simply <em>require</em> CPython. <strike>PyPy doesn't support numpy</strike> <strong>PyPy now supports numpy</strong>. Some extensions are still not supported (Pandas, SciPy, etc.), take a look at <a href="http://packages.pypy.org" rel="noreferrer">the list of supported packages</a> before making the change.</li>\n\n<li>Python 3 support <strike>is experimental at the moment.</strike> <strong>has just reached stable! As of 20th June 2014, <a href="http://morepypy.blogspot.co.uk/2014/06/pypy3-231-fulcrum.html" rel="noreferrer">PyPy3 2.3.1 - Fulcrum is out</a>!</strong></li>\n\n<li>PyPy sometimes <em>isn't</em> actually faster for "scripts", which a lot of people use Python for. These are the short-running programs that do something simple and small. Because PyPy is a JIT compiler its main advantages come from long run times and simple types (such as numbers). Frankly, <strong>PyPy's pre-JIT speeds are pretty bad</strong> compared to CPython.</li>\n\n<li><strong>Inertia</strong>. Moving to PyPy often requires retooling, which for some people and organizations is simply too much work.</li>\n\n</ol>\n\n<p>Those are the main reasons that affect me, I'd say.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	620
Why does Python code run faster in a function?	<p>Inside a function, the bytecode is:</p>\n\n<pre><code> 2 0 SETUP_LOOP 20 (to 23)\n\n 3 LOAD_GLOBAL 0 (xrange)\n\n 6 LOAD_CONST 3 (100000000)\n\n 9 CALL_FUNCTION 1\n\n 12 GET_ITER \n\n >> 13 FOR_ITER 6 (to 22)\n\n 16 STORE_FAST 0 (i)\n\n 3 19 JUMP_ABSOLUTE 13\n\n >> 22 POP_BLOCK \n\n >> 23 LOAD_CONST 0 (None)\n\n 26 RETURN_VALUE \n\n</code></pre>\n\n<p>At the top level, the bytecode is:</p>\n\n<pre><code> 1 0 SETUP_LOOP 20 (to 23)\n\n 3 LOAD_NAME 0 (xrange)\n\n 6 LOAD_CONST 3 (100000000)\n\n 9 CALL_FUNCTION 1\n\n 12 GET_ITER \n\n >> 13 FOR_ITER 6 (to 22)\n\n 16 STORE_NAME 1 (i)\n\n 2 19 JUMP_ABSOLUTE 13\n\n >> 22 POP_BLOCK \n\n >> 23 LOAD_CONST 2 (None)\n\n 26 RETURN_VALUE \n\n</code></pre>\n\n<p>The difference is that <a href="http://docs.python.org/library/dis.html#opcode-STORE_FAST" rel="noreferrer"><code>STORE_FAST</code></a> is faster (!) than <a href="http://docs.python.org/library/dis.html#opcode-STORE_NAME" rel="noreferrer"><code>STORE_NAME</code></a>. This is because in a function, <code>i</code> is a local but at toplevel it is a global.</p>\n\n<p>To examine bytecode, use the <a href="http://docs.python.org/library/dis.html" rel="noreferrer"><code>dis</code> module</a>. I was able to disassemble the function directly, but to disassemble the toplevel code I had to use the <a href="http://docs.python.org/library/functions.html#compile" rel="noreferrer"><code>compile</code> builtin</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	621
Download large file in python with requests	<p>With the following streaming code, the Python memory usage is restricted regardless of the size of the downloaded file:</p>\n\n<pre><code>def download_file(url):\n\n local_filename = url.split('/')[-1]\n\n # NOTE the stream=True parameter below\n\n with requests.get(url, stream=True) as r:\n\n r.raise_for_status()\n\n with open(local_filename, 'wb') as f:\n\n for chunk in r.iter_content(chunk_size=8192): \n\n # If you have chunk encoded response uncomment if\n\n # and set chunk_size parameter to None.\n\n #if chunk: \n\n f.write(chunk)\n\n return local_filename\n\n</code></pre>\n\n<p>Note that the number of bytes returned using <code>iter_content</code> is not exactly the <code>chunk_size</code>; it's expected to be a random number that is often far bigger, and is expected to be different in every iteration. </p>\n\n<p>See <a href="https://requests.readthedocs.io/en/latest/user/advanced/#body-content-workflow" rel="noreferrer">https://requests.readthedocs.io/en/latest/user/advanced/#body-content-workflow</a> and <a href="https://requests.readthedocs.io/en/latest/api/#requests.Response.iter_content" rel="noreferrer">https://requests.readthedocs.io/en/latest/api/#requests.Response.iter_content</a> for further reference.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	622
Calling C/C++ from Python?	<p><a href="https://docs.python.org/3/library/ctypes.html" rel="nofollow noreferrer">ctypes</a> module is part of the standard library, and therefore is more stable and widely available than <a href="http://www.swig.org/" rel="nofollow noreferrer">swig</a>, which always tended to give me <a href="http://groups.google.com/group/comp.lang.python/browse_thread/thread/d94badd9847fe43a?pli=1" rel="nofollow noreferrer">problems</a>.</p>\n\n<p>With ctypes, you need to satisfy any compile time dependency on python, and your binding will work on any python that has ctypes, not just the one it was compiled against.</p>\n\n<p>Suppose you have a simple C++ example class you want to talk to in a file called foo.cpp:</p>\n\n<pre><code>#include <iostream>\n\nclass Foo{\n\n public:\n\n void bar(){\n\n std::cout << "Hello" << std::endl;\n\n }\n\n};\n\n</code></pre>\n\n<p>Since ctypes can only talk to C functions, you need to provide those declaring them as extern "C"</p>\n\n<pre><code>extern "C" {\n\n Foo* Foo_new(){ return new Foo(); }\n\n void Foo_bar(Foo* foo){ foo->bar(); }\n\n}\n\n</code></pre>\n\n<p>Next you have to compile this to a shared library</p>\n\n<pre><code>g++ -c -fPIC foo.cpp -o foo.o\n\ng++ -shared -Wl,-soname,libfoo.so -o libfoo.so foo.o\n\n</code></pre>\n\n<p>And finally you have to write your python wrapper (e.g. in fooWrapper.py)</p>\n\n<pre><code>from ctypes import cdll\n\nlib = cdll.LoadLibrary('./libfoo.so')\n\nclass Foo(object):\n\n def __init__(self):\n\n self.obj = lib.Foo_new()\n\n def bar(self):\n\n lib.Foo_bar(self.obj)\n\n</code></pre>\n\n<p>Once you have that you can call it like</p>\n\n<pre><code>f = Foo()\n\nf.bar() #and you will see "Hello" on the screen\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	623
Running unittest with typical test directory structure	<p>The best solution in my opinion is to use the <code>unittest</code> <a href="https://docs.python.org/2/library/unittest.html#command-line-interface" rel="noreferrer">command line interface</a> which will add the directory to the <code>sys.path</code> so you don't have to (done in the <code>TestLoader</code> class).</p>\n\n<p>For example for a directory structure like this:</p>\n\n<pre><code>new_project\n\nâââ antigravity.py\n\nâââ test_antigravity.py\n\n</code></pre>\n\n<p>You can just run:</p>\n\n<pre><code>$ cd new_project\n\n$ python -m unittest test_antigravity\n\n</code></pre>\n\n<p>For a directory structure like yours:</p>\n\n<pre><code>new_project\n\nâââ antigravity\n\nâÂ Â âââ __init__.py # make it a package\n\nâÂ Â âââ antigravity.py\n\nâââ test\n\n âââ __init__.py # also make test a package\n\n âââ test_antigravity.py\n\n</code></pre>\n\n<p>And in the test modules inside the <code>test</code> package, you can import the <code>antigravity</code> package and its modules as usual:</p>\n\n<pre><code># import the package\n\nimport antigravity\n\n# import the antigravity module\n\nfrom antigravity import antigravity\n\n# or an object inside the antigravity module\n\nfrom antigravity.antigravity import my_object\n\n</code></pre>\n\n<p><strong>Running a single test module:</strong></p>\n\n<p>To run a single test module, in this case <code>test_antigravity.py</code>:</p>\n\n<pre><code>$ cd new_project\n\n$ python -m unittest test.test_antigravity\n\n</code></pre>\n\n<p>Just reference the test module the same way you import it.</p>\n\n<p><strong>Running a single test case or test method:</strong></p>\n\n<p>Also you can run a single <code>TestCase</code> or a single test method:</p>\n\n<pre><code>$ python -m unittest test.test_antigravity.GravityTestCase\n\n$ python -m unittest test.test_antigravity.GravityTestCase.test_method\n\n</code></pre>\n\n<p><strong>Running all tests:</strong></p>\n\n<p>You can also use <a href="https://docs.python.org/2/library/unittest.html#test-discovery" rel="noreferrer">test discovery</a> which will discover and run all the tests for you, they must be modules or packages named <code>test*.py</code> (can be changed with the <code>-p, --pattern</code> flag):</p>\n\n<pre><code>$ cd new_project\n\n$ python -m unittest discover\n\n$ # Also works without discover for Python 3\n\n$ # as suggested by @Burrito in the comments\n\n$ python -m unittest\n\n</code></pre>\n\n<p>This will run all the <code>test*.py</code> modules inside the <code>test</code> package.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	624
How to get a random number between a float range?	<p>Use <a href="http://docs.python.org/library/random.html#random.uniform">random.uniform(a, b)</a>:</p>\n\n<pre><code>>>> random.uniform(1.5, 1.9)\n\n1.8733202628557872\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	625
How do I use itertools.groupby()?	<p><strong>IMPORTANT NOTE:</strong> You have to <strong>sort your data</strong> first.</p>\n\n<hr>\n\n<p>The part I didn't get is that in the example construction</p>\n\n<pre><code>groups = []\n\nuniquekeys = []\n\nfor k, g in groupby(data, keyfunc):\n\n groups.append(list(g)) # Store group iterator as a list\n\n uniquekeys.append(k)\n\n</code></pre>\n\n<p><code>k</code> is the current grouping key, and <code>g</code> is an iterator that you can use to iterate over the group defined by that grouping key. In other words, the <code>groupby</code> iterator itself returns iterators.</p>\n\n<p>Here's an example of that, using clearer variable names:</p>\n\n<pre><code>from itertools import groupby\n\nthings = [("animal", "bear"), ("animal", "duck"), ("plant", "cactus"), ("vehicle", "speed boat"), ("vehicle", "school bus")]\n\nfor key, group in groupby(things, lambda x: x[0]):\n\n for thing in group:\n\n print "A %s is a %s." % (thing[1], key)\n\n print " "\n\n</code></pre>\n\n<p>This will give you the output:</p>\n\n<blockquote>\n\n <p>A bear is a animal.<br>\n\n A duck is a animal.</p>\n\n <p>A cactus is a plant.</p>\n\n <p>A speed boat is a vehicle.<br>\n\n A school bus is a vehicle.</p>\n\n</blockquote>\n\n<p>In this example, <code>things</code> is a list of tuples where the first item in each tuple is the group the second item belongs to. </p>\n\n<p>The <code>groupby()</code> function takes two arguments: (1) the data to group and (2) the function to group it with. </p>\n\n<p>Here, <code>lambda x: x[0]</code> tells <code>groupby()</code> to use the first item in each tuple as the grouping key.</p>\n\n<p>In the above <code>for</code> statement, <code>groupby</code> returns three (key, group iterator) pairs - once for each unique key. You can use the returned iterator to iterate over each individual item in that group.</p>\n\n<p>Here's a slightly different example with the same data, using a list comprehension:</p>\n\n<pre><code>for key, group in groupby(things, lambda x: x[0]):\n\n listOfThings = " and ".join([thing[1] for thing in group])\n\n print key + "s: " + listOfThings + "."\n\n</code></pre>\n\n<p>This will give you the output:</p>\n\n<blockquote>\n\n <p>animals: bear and duck.<br>\n\n plants: cactus.<br>\n\n vehicles: speed boat and school bus.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	626
What is the difference between '/' and '//' when used for division?	<p>In Python 3.x, <code>5 / 2</code> will return <code>2.5</code> and <code>5 // 2</code> will return <code>2</code>. The former is floating point division, and the latter is <strong><em>floor division</em></strong>, sometimes also called <strong><em>integer division</em></strong>.</p>\n\n<p>In Python 2.2 or later in the 2.x line, there is no difference for integers unless you perform a <code>from __future__ import division</code>, which causes Python 2.x to adopt the 3.x behavior.</p>\n\n<p>Regardless of the future import, <code>5.0 // 2</code> will return <code>2.0</code> since that's the floor division result of the operation.</p>\n\n<p>You can find a detailed description at <a href="https://docs.python.org/whatsnew/2.2.html#pep-238-changing-the-division-operator" rel="noreferrer">https://docs.python.org/whatsnew/2.2.html#pep-238-changing-the-division-operator</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	627
Saving utf-8 texts in json.dumps as UTF8, not as \u escape sequence	<p>Use the <code>ensure_ascii=False</code> switch to <code>json.dumps()</code>, then encode the value to UTF-8 manually:</p>\n\n<pre><code>>>> json_string = json.dumps("××¨× ×¦×§××", ensure_ascii=False).encode('utf8')\n\n>>> json_string\n\nb'"\xd7\x91\xd7\xa8\xd7\x99 \xd7\xa6\xd7\xa7\xd7\x9c\xd7\x94"'\n\n>>> print(json_string.decode())\n\n"××¨× ×¦×§××"\n\n</code></pre>\n\n<p>If you are writing to a file, just use <code>json.dump()</code> and leave it to the file object to encode:</p>\n\n<pre><code>with open('filename', 'w', encoding='utf8') as json_file:\n\n json.dump("××¨× ×¦×§××", json_file, ensure_ascii=False)\n\n</code></pre>\n\n<p><strong>Caveats for Python 2</strong></p>\n\n<p>For Python 2, there are some more caveats to take into account. If you are writing this to a file, you can use <a href="https://docs.python.org/2/library/io.html#io.open" rel="noreferrer"><code>io.open()</code></a> instead of <code>open()</code> to produce a file object that encodes Unicode values for you as you write, then use <code>json.dump()</code> instead to write to that file:</p>\n\n<pre><code>with io.open('filename', 'w', encoding='utf8') as json_file:\n\n json.dump(u"××¨× ×¦×§××", json_file, ensure_ascii=False)\n\n</code></pre>\n\n<p>Do note that there is a <a href="http://bugs.python.org/issue13769" rel="noreferrer">bug in the <code>json</code> module</a> where the <code>ensure_ascii=False</code> flag can produce a <em>mix</em> of <code>unicode</code> and <code>str</code> objects. The workaround for Python 2 then is:</p>\n\n<pre><code>with io.open('filename', 'w', encoding='utf8') as json_file:\n\n data = json.dumps(u"××¨× ×¦×§××", ensure_ascii=False)\n\n # unicode(data) auto-decodes data to unicode if str\n\n json_file.write(unicode(data))\n\n</code></pre>\n\n<p>In Python 2, when using byte strings (type <code>str</code>), encoded to UTF-8, make sure to also set the <code>encoding</code> keyword:</p>\n\n<pre><code>>>> d={ 1: "××¨× ×¦×§××", 2: u"××¨× ×¦×§××" }\n\n>>> d\n\n{1: '\xd7\x91\xd7\xa8\xd7\x99 \xd7\xa6\xd7\xa7\xd7\x9c\xd7\x94', 2: u'\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4'}\n\n>>> s=json.dumps(d, ensure_ascii=False, encoding='utf8')\n\n>>> s\n\nu'{"1": "\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4", "2": "\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4"}'\n\n>>> json.loads(s)['1']\n\nu'\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4'\n\n>>> json.loads(s)['2']\n\nu'\u05d1\u05e8\u05d9 \u05e6\u05e7\u05dc\u05d4'\n\n>>> print json.loads(s)['1']\n\n××¨× ×¦×§××\n\n>>> print json.loads(s)['2']\n\n××¨× ×¦×§××\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	628
Download file from web in Python 3	<p>If you want to obtain the contents of a web page into a variable, just <code>read</code> the response of <a href="http://docs.python.org/dev/library/urllib.request.html#urllib.request.urlopen" rel="noreferrer"><strong><code>urllib.request.urlopen</code></strong></a>:</p>\n\n<pre><code>import urllib.request\n\n...\n\nurl = 'http://example.com/'\n\nresponse = urllib.request.urlopen(url)\n\ndata = response.read() # a `bytes` object\n\ntext = data.decode('utf-8') # a `str`; this step can't be used if data is binary\n\n</code></pre>\n\n<hr />\n\n<p>The easiest way to download and save a file is to use the <a href="http://docs.python.org/dev/library/urllib.request.html#urllib.request.urlretrieve" rel="noreferrer"><strong><code>urllib.request.urlretrieve</code></strong></a> function:</p>\n\n<pre><code>import urllib.request\n\n...\n\n# Download the file from `url` and save it locally under `file_name`:\n\nurllib.request.urlretrieve(url, file_name)\n\n</code></pre>\n\n<pre><code>import urllib.request\n\n...\n\n# Download the file from `url`, save it in a temporary directory and get the\n\n# path to it (e.g. '/tmp/tmpb48zma.txt') in the `file_name` variable:\n\nfile_name, headers = urllib.request.urlretrieve(url)\n\n</code></pre>\n\n<p>But keep in mind that <code>urlretrieve</code> is considered <a href="http://docs.python.org/dev/library/urllib.request.html#legacy-interface" rel="noreferrer">legacy</a> and might become deprecated (not sure why, though).</p>\n\n<p>So the most <em>correct</em> way to do this would be to use the <a href="http://docs.python.org/dev/library/urllib.request.html#urllib.request.urlopen" rel="noreferrer"><strong><code>urllib.request.urlopen</code></strong></a> function to return a file-like object that represents an HTTP response and copy it to a real file using <a href="http://docs.python.org/dev/library/shutil.html#shutil.copyfileobj" rel="noreferrer"><strong><code>shutil.copyfileobj</code></strong></a>.</p>\n\n<pre><code>import urllib.request\n\nimport shutil\n\n...\n\n# Download the file from `url` and save it locally under `file_name`:\n\nwith urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:\n\n shutil.copyfileobj(response, out_file)\n\n</code></pre>\n\n<p>If this seems too complicated, you may want to go simpler and store the whole download in a <code>bytes</code> object and then write it to a file. But this works well only for small files.</p>\n\n<pre><code>import urllib.request\n\n...\n\n# Download the file from `url` and save it locally under `file_name`:\n\nwith urllib.request.urlopen(url) as response, open(file_name, 'wb') as out_file:\n\n data = response.read() # a `bytes` object\n\n out_file.write(data)\n\n</code></pre>\n\n<hr />\n\n<p>It is possible to extract <code>.gz</code> (and maybe other formats) compressed data on the fly, but such an operation probably requires the HTTP server to support random access to the file.</p>\n\n<pre><code>import urllib.request\n\nimport gzip\n\n...\n\n# Read the first 64 bytes of the file inside the .gz archive located at `url`\n\nurl = 'http://example.com/something.gz'\n\nwith urllib.request.urlopen(url) as response:\n\n with gzip.GzipFile(fileobj=response) as uncompressed:\n\n file_header = uncompressed.read(64) # a `bytes` object\n\n # Or do anything shown above using `uncompressed` instead of `response`.\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	629
How to remove an element from a list by index	<p>You probably want <code>pop</code>:</p>\n\n<pre><code>a = ['a', 'b', 'c', 'd']\n\na.pop(1)\n\n# now a is ['a', 'c', 'd']\n\n</code></pre>\n\n<p>By default, <code>pop</code> without any arguments removes the last item:</p>\n\n<pre><code>a = ['a', 'b', 'c', 'd']\n\na.pop()\n\n# now a is ['a', 'b', 'c']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	630
How do I find the location of my Python site-packages directory?	<pre><code>>>> import site; site.getsitepackages()\n\n['/usr/local/lib/python2.7/dist-packages', '/usr/lib/python2.7/dist-packages']\n\n</code></pre>\n\n<p>(or just first item with <code>site.getsitepackages()[0]</code>)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	631
How do I read CSV data into a record array in NumPy?	<p>You can use Numpy's <code>genfromtxt()</code> method to do so, by setting the <code>delimiter</code> kwarg to a comma.</p>\n\n<pre><code>from numpy import genfromtxt\n\nmy_data = genfromtxt('my_file.csv', delimiter=',')\n\n</code></pre>\n\n<p>More information on the function can be found at its respective <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.genfromtxt.html" rel="noreferrer">documentation</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	632
How to find elements by class	<p>You can refine your search to only find those divs with a given class using BS3:</p>\n\n<pre class="lang-py prettyprint-override"><code>mydivs = soup.findAll("div", {"class": "stylelistrow"})\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	633
How to serve static files in Flask	<p>The preferred method is to use nginx or another web server to serve static files; they'll be able to do it more efficiently than Flask.</p>\n\n<p>However, you can use <a href="http://flask.pocoo.org/docs/latest/api/#flask.send_from_directory" rel="noreferrer"><code>send_from_directory</code></a> to send files from a directory, which can be pretty convenient in some situations:</p>\n\n<pre><code>from flask import Flask, request, send_from_directory\n\n# set the project root directory as the static folder, you can set others.\n\napp = Flask(__name__, static_url_path='')\n\n@app.route('/js/<path:path>')\n\ndef send_js(path):\n\n return send_from_directory('js', path)\n\nif __name__ == "__main__":\n\n app.run()\n\n</code></pre>\n\n<p>Do <strong>not</strong> use <code>send_file</code> or <code>send_static_file</code> with a user-supplied path.</p>\n\n<p><code>send_static_file</code> example:</p>\n\n<pre><code>from flask import Flask, request\n\n# set the project root directory as the static folder, you can set others.\n\napp = Flask(__name__, static_url_path='')\n\n@app.route('/')\n\ndef root():\n\n return app.send_static_file('index.html')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	634
Python - Create list with numbers between 2 values?	<p>Use <a href="http://docs.python.org/2.7/library/functions.html#range" rel="noreferrer"><code>range</code></a>. In Python 2.x it returns a list so all you need is:</p>\n\n<pre class="lang-py prettyprint-override"><code>>>> range(11, 17)\n\n[11, 12, 13, 14, 15, 16]\n\n</code></pre>\n\n<p>In Python 3.x <a href="https://docs.python.org/3/library/stdtypes.html#typesseq-range" rel="noreferrer"><code>range</code></a> is a iterator. So, you need to convert it to a list:</p>\n\n<pre class="lang-py prettyprint-override"><code>>>> list(range(11, 17))\n\n[11, 12, 13, 14, 15, 16]\n\n</code></pre>\n\n<p><strong>Note</strong>: The second number is exclusive. So, here it needs to be <code>16+1</code> = <code>17</code></p>\n\n<p>EDIT:</p>\n\n<p>To respond to the question about incrementing by <code>0.5</code>, the easiest option would probably be to use <a href="https://pypi.python.org/pypi/numpy" rel="noreferrer">numpy's</a> <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.arange.html" rel="noreferrer"><code>arange()</code></a> and <a href="https://numpy.org/devdocs/reference/generated/numpy.ndarray.tolist.html" rel="noreferrer"><code>.tolist()</code></a>:</p>\n\n<pre class="lang-py prettyprint-override"><code>>>> import numpy as np\n\n>>> np.arange(11, 17, 0.5).tolist()\n\n[11.0, 11.5, 12.0, 12.5, 13.0, 13.5,\n\n 14.0, 14.5, 15.0, 15.5, 16.0, 16.5]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	635
Build a Basic Python Iterator	<p>Iterator objects in python conform to the iterator protocol, which basically means they provide two methods: <code>__iter__()</code> and <code>__next__()</code>. </p>\n\n<ul>\n\n<li><p>The <code>__iter__</code> returns the iterator object and is implicitly called\n\nat the start of loops.</p></li>\n\n<li><p>The <code>__next__()</code> method returns the next value and is implicitly called at each loop increment. This method raises a StopIteration exception when there are no more value to return, which is implicitly captured by looping constructs to stop iterating.</p></li>\n\n</ul>\n\n<p>Here's a simple example of a counter:</p>\n\n<pre><code>class Counter:\n\n def __init__(self, low, high):\n\n self.current = low - 1\n\n self.high = high\n\n def __iter__(self):\n\n return self\n\n def __next__(self): # Python 2: def next(self)\n\n self.current += 1\n\n if self.current < self.high:\n\n return self.current\n\n raise StopIteration\n\nfor c in Counter(3, 9):\n\n print(c)\n\n</code></pre>\n\n<p>This will print:</p>\n\n<pre><code>3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n</code></pre>\n\n<p>This is easier to write using a generator, as covered in a previous answer:</p>\n\n<pre><code>def counter(low, high):\n\n current = low\n\n while current < high:\n\n yield current\n\n current += 1\n\nfor c in counter(3, 9):\n\n print(c)\n\n</code></pre>\n\n<p>The printed output will be the same. Under the hood, the generator object supports the iterator protocol and does something roughly similar to the class Counter.</p>\n\n<p>David Mertz's article, <a href="https://www.ibm.com/developerworks/library/l-pycon/" rel="noreferrer">Iterators and Simple Generators</a>, is a pretty good introduction. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	636
How to upgrade all Python packages with pip?	<p>To upgrade all local packages; you could use <a href="https://github.com/jgonggrijp/pip-review" rel="noreferrer"><code>pip-review</code></a>:</p>\n\n<pre><code>$ pip install pip-review\n\n$ pip-review --local --interactive\n\n</code></pre>\n\n<hr>\n\n<p><code>pip-review</code> is a fork of <code>pip-tools</code>. See <a href="https://github.com/nvie/pip-tools/issues/185" rel="noreferrer"><code>pip-tools</code> issue</a> mentioned by <a href="https://stackoverflow.com/questions/2720014/upgrading-all-packages-with-pip/16269635#comment51585726_16269635">@knedlsepp</a>. <code>pip-review</code> package works but <code>pip-tools</code> package no longer works.</p>\n\n<p><code>pip-review</code> works on Windows <a href="https://stackoverflow.com/questions/2720014/upgrading-all-packages-with-pip/16269635#comment67179492_16269635">since version 0.5</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	637
pip install fails with "connection error: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:598)"	<p>-----> pip install gensim config --global http.sslVerify false</p>\n\n<p>Just install any package with the "config --global http.sslVerify false" statement</p>\n\n<p>You can ignore SSL errors by setting <a href="https://pypi.org" rel="noreferrer"><code>pypi.org</code></a> and <a href="https://files.pythonhosted.org" rel="noreferrer"><code>files.pythonhosted.org</code></a> as trusted hosts.</p>\n\n<pre><code>$ pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org <package_name>\n\n</code></pre>\n\n<p><strong>Note</strong>: Sometime during April 2018, the <a href="https://pypi.org" rel="noreferrer">Python Package Index</a> was migrated from <code>pypi.python.org</code> to <code>pypi.org</code>. This means "trusted-host" commands using the old domain no longer work.</p>\n\n<h3>Permanent Fix</h3>\n\n<p>Since the release of pip 10.0, you should be able to fix this permanently just by upgrading <code>pip</code> itself:</p>\n\n<pre><code>$ pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org pip setuptools\n\n</code></pre>\n\n<p>Or by just <a href="https://pip.pypa.io/en/stable/installing/" rel="noreferrer">reinstalling it</a> to get the latest version:</p>\n\n<pre><code>$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n\n</code></pre>\n\n<p>(â¦Â and then running <code>get-pip.py</code> with the relevant Python interpreter).</p>\n\n<p><code>pip install <otherpackage></code> should just work after this. If not, then you will need to do more, as explained below.</p>\n\n<hr>\n\n<p>You may want to <a href="https://pip.pypa.io/en/stable/user_guide/?highlight=appdata#config-file" rel="noreferrer">add the trusted hosts and proxy to your config file</a>. </p>\n\n<p><code>pip.ini</code> (Windows) or <code>pip.conf</code> (unix)</p>\n\n<pre><code>[global]\n\ntrusted-host = pypi.python.org\n\n pypi.org\n\n files.pythonhosted.org\n\n</code></pre>\n\n<hr>\n\n<p><strong>Alternate Solutions (Less secure)</strong></p>\n\n<p>Most of the answers could pose a security issue.</p>\n\n<p>Two of the workarounds that help in installing most of the python packages with ease would be:</p>\n\n<ul>\n\n<li><strong>Using easy_install</strong>: if you are really lazy and don't want to waste much time, use <code>easy_install <package_name></code>. Note that some packages won't be found or will give small errors.</li>\n\n<li><strong>Using Wheel</strong>: download the <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="noreferrer">Wheel of the python package</a> and use the pip command <code>pip install wheel_package_name.whl</code> to install the package.</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	638
Is it possible to break a long line to multiple lines in Python	<p>From <a href="http://www.python.org/dev/peps/pep-0008/" rel="noreferrer">PEP 8 - Style Guide for Python Code</a>:</p>\n\n<blockquote>\n\n <p>The preferred way of wrapping long lines is by using Python's implied line\n\n continuation inside parentheses, brackets and braces. If necessary, you\n\n can add an extra pair of parentheses around an expression, but sometimes\n\n using a backslash looks better. Make sure to indent the continued line\n\n appropriately. </p>\n\n</blockquote>\n\n<p>Example of implicit line continuation:</p>\n\n<pre><code>a = some_function(\n\n '1' + '2' + '3' - '4')\n\n</code></pre>\n\n<p>On the topic of line-breaks around a binary operator, it goes on to say:-</p>\n\n<blockquote>\n\n <p>For decades the recommended style was to break after binary operators.\n\n But this can hurt readability in two ways: the operators tend to get scattered across different columns on the screen, and each operator is moved away from its operand and onto the previous line.</p>\n\n <p>In Python code, it is permissible to break before or after a binary operator, as long as the convention is consistent locally. For new code Knuth's style (line breaks <em>before</em> the operator) is suggested.</p>\n\n</blockquote>\n\n<p>Example of explicit line continuation:</p>\n\n<pre><code>a = '1' \\n\n + '2' \\n\n + '3' \\n\n - '4'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	639
Python locale error: unsupported locale setting	<p>Run following commands</p>\n\n<pre><code>export LC_ALL="en_US.UTF-8"\n\nexport LC_CTYPE="en_US.UTF-8"\n\nsudo dpkg-reconfigure locales\n\n</code></pre>\n\n<p>It will solve this.</p>\n\n<p>Make sure to match the <code>.UTF-8</code> part to the actual syntax found in the output of <code>locale -a</code> e.g. <code>.utf8</code> on some systems.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	640
What is the difference between Python's list methods append and extend?	<p><code>append</code> adds an element to a list, and <code>extend</code> concatenates the first list with another list (or another iterable, not necessarily a list.)</p>\n\n<pre><code>>>> li = ['a', 'b', 'mpilgrim', 'z', 'example']\n\n>>> li\n\n['a', 'b', 'mpilgrim', 'z', 'example']\n\n>>> li.append("new")\n\n>>> li\n\n['a', 'b', 'mpilgrim', 'z', 'example', 'new']\n\n>>> li.append(["new", 2])\n\n>>> li\n\n['a', 'b', 'mpilgrim', 'z', 'example', 'new', ['new', 2]]\n\n>>> li.insert(2, "new")\n\n>>> li\n\n['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', ['new', 2]]\n\n>>> li.extend(["two", "elements"])\n\n>>> li\n\n['a', 'b', 'new', 'mpilgrim', 'z', 'example', 'new', ['new', 2], 'two', 'elements']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	641
How to delete a character from a string using Python	<p>In Python, strings are immutable, so you have to create a new string. You have a few options of how to create the new string. If you want to remove the 'M' wherever it appears:</p>\n\n<pre><code>newstr = oldstr.replace("M", "")\n\n</code></pre>\n\n<p>If you want to remove the central character:</p>\n\n<pre><code>midlen = len(oldstr)/2 # //2 in python 3\n\nnewstr = oldstr[:midlen] + oldstr[midlen+1:]\n\n</code></pre>\n\n<p>You asked if strings end with a special character. No, you are thinking like a C programmer. In Python, strings are stored with their length, so any byte value, including <code>\0</code>, can appear in a string.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	642
Making Python loggers output all messages to stdout in addition to log file	<p>All logging output is handled by the handlers; just add a <a href="http://docs.python.org/library/logging.handlers.html#streamhandler" rel="noreferrer"><code>logging.StreamHandler()</code></a> to the root logger.</p>\n\n<p>Here's an example configuring a stream handler (using <code>stdout</code> instead of the default <code>stderr</code>) and adding it to the root logger:</p>\n\n<pre><code>import logging\n\nimport sys\n\nroot = logging.getLogger()\n\nroot.setLevel(logging.DEBUG)\n\nhandler = logging.StreamHandler(sys.stdout)\n\nhandler.setLevel(logging.DEBUG)\n\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n\nhandler.setFormatter(formatter)\n\nroot.addHandler(handler)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	643
How do I return multiple values from a function?	<p><a href="http://docs.python.org/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields" rel="noreferrer">Named tuples</a> were added in 2.6 for this purpose. Also see <a href="http://docs.python.org/library/os.html#os.stat" rel="noreferrer">os.stat</a> for a similar builtin example.</p>\n\n<pre><code>>>> import collections\n\n>>> Point = collections.namedtuple('Point', ['x', 'y'])\n\n>>> p = Point(1, y=2)\n\n>>> p.x, p.y\n\n1 2\n\n>>> p[0], p[1]\n\n1 2\n\n</code></pre>\n\n<p>In recent versions of Python 3 (3.6+, I think), the new <code>typing</code> library got the <a href="https://docs.python.org/3/library/typing.html#typing.NamedTuple" rel="noreferrer"><code>NamedTuple</code></a> class to make named tuples easier to create and more powerful. Inheriting from <code>typing.NamedTuple</code> lets you use docstrings, default values, and type annotations.</p>\n\n<p>Example (From the docs):</p>\n\n<pre><code>class Employee(NamedTuple): # inherit from typing.NamedTuple\n\n name: str\n\n id: int = 3 # default value\n\nemployee = Employee('Guido')\n\nassert employee.id == 3\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	644
Sort a list of tuples by 2nd item (integer value)	<p>Try using the <code>key</code> keyword with <code>sorted()</code>.</p>\n\n<pre><code>sorted([('abc', 121),('abc', 231),('abc', 148), ('abc',221)], key=lambda x: x[1])\n\n</code></pre>\n\n<p><code>key</code> should be a function that identifies how to retrieve the comparable element from your data structure. In your case, it is the second element of the tuple, so we access <code>[1]</code>.</p>\n\n<p>For optimization, see jamylak's response using <code>itemgetter(1)</code>, which is essentially a faster version of <code>lambda x: x[1]</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	645
How to print the full NumPy array, without truncation?	<p>Use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html" rel="noreferrer"><code>numpy.set_printoptions</code></a>:</p>\n\n<pre><code>import sys\n\nimport numpy\n\nnumpy.set_printoptions(threshold=sys.maxsize)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	646
How to overcome "datetime.datetime not JSON serializable"?	<p>My quick & dirty JSON dump that eats dates and everything:</p>\n\n<pre><code>json.dumps(my_dictionary, indent=4, sort_keys=True, default=str)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	647
How to change the font size on a matplotlib plot	<p>From the <a href="http://matplotlib.sourceforge.net/api/matplotlib_configuration_api.html#matplotlib.rc" rel="noreferrer">matplotlib documentation</a>, </p>\n\n<pre><code>font = {'family' : 'normal',\n\n 'weight' : 'bold',\n\n 'size' : 22}\n\nmatplotlib.rc('font', **font)\n\n</code></pre>\n\n<p>This sets the font of all items to the font specified by the kwargs object, <code>font</code>.</p>\n\n<p>Alternatively, you could also use the <code>rcParams</code> <code>update</code> method as suggested in <a href="https://stackoverflow.com/a/6441839/605121">this answer</a>:</p>\n\n<pre><code>matplotlib.rcParams.update({'font.size': 22})\n\n</code></pre>\n\n<p>or</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nplt.rcParams.update({'font.size': 22})\n\n</code></pre>\n\n<p>You can find a full list of available properties on the <a href="http://matplotlib.org/users/customizing.html" rel="noreferrer">Customizing matplotlib page</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	648
How do I merge two dictionaries in a single expression in Python?	<p>An alternative:</p>\n\n<pre><code>z = x.copy()\n\nz.update(y)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	649
How do I integrate Ajax with Django applications?	<p>Even though this isn't entirely in the SO spirit, I love this question, because I had the same trouble when I started, so I'll give you a quick guide. Obviously you don't understand the principles behind them (don't take it as an offense, but if you did you wouldn't be asking). </p>\n\n<p>Django is <strong>server-side</strong>. It means, say a client goes to a URL, you have a function inside <code>views</code> that renders what he sees and returns a response in HTML. Let's break it up into examples:</p>\n\n<p><strong>views.py:</strong></p>\n\n<pre><code>def hello(request):\n\n return HttpResponse('Hello World!')\n\ndef home(request):\n\n return render_to_response('index.html', {'variable': 'world'})\n\n</code></pre>\n\n<p><strong>index.html:</strong></p>\n\n<pre class="lang-html prettyprint-override"><code><h1>Hello {{ variable }}, welcome to my awesome site</h1>\n\n</code></pre>\n\n<p><strong>urls.py:</strong></p>\n\n<pre><code>url(r'^hello/', 'myapp.views.hello'),\n\nurl(r'^home/', 'myapp.views.home'),\n\n</code></pre>\n\n<p>That's an example of the simplest of usages. Going to <code>127.0.0.1:8000/hello</code> means a request to the <code>hello()</code> function, going to <code>127.0.0.1:8000/home</code> will return the <code>index.html</code> and replace all the variables as asked (you probably know all this by now).</p>\n\n<p>Now let's talk about <strong>AJAX</strong>. AJAX calls are client-side code that does asynchronous requests. That sounds complicated, but it simply means it does a request for you in the background and then handles the response. So when you do an AJAX call for some URL, you get the same data you would get as a user going to that place. </p>\n\n<p>For example, an AJAX call to <code>127.0.0.1:8000/hello</code> will return the same thing it would as if you visited it. Only this time, you have it inside a JavaScript function and you can deal with it however you'd like. Let's look at a simple use case:</p>\n\n<pre class="lang-javascript prettyprint-override"><code>$.ajax({\n\n url: '127.0.0.1:8000/hello',\n\n type: 'get', // This is the default though, you don't actually need to always mention it\n\n success: function(data) {\n\n alert(data);\n\n },\n\n failure: function(data) { \n\n alert('Got an error dude');\n\n }\n\n}); \n\n</code></pre>\n\n<p>The general process is this:</p>\n\n<ol>\n\n<li>The call goes to the URL <code>127.0.0.1:8000/hello</code> as if you opened a new tab and did it yourself.</li>\n\n<li>If it succeeds (status code 200), do the function for success, which will alert the data received.</li>\n\n<li>If fails, do a different function.</li>\n\n</ol>\n\n<p>Now what would happen here? You would get an alert with 'hello world' in it. What happens if you do an AJAX call to home? Same thing, you'll get an alert stating <code><h1>Hello world, welcome to my awesome site</h1></code>.</p>\n\n<p>In other words - there's nothing new about AJAX calls. They are just a way for you to let the user get data and information without leaving the page, and it makes for a smooth and very neat design of your website. A few guidelines you should take note of:</p>\n\n<ol>\n\n<li><strong>Learn jQuery</strong>. I cannot stress this enough. You're gonna have to understand it a little to know how to handle the data you receive. You'll also need to understand some basic JavaScript syntax (not far from python, you'll get used to it). I strongly recommend <a href="https://tutsplus.com/course/30-days-to-learn-jquery/" rel="noreferrer">Envato's video tutorials for jQuery</a>, they are great and will put you on the right path.</li>\n\n<li><strong>When to use JSON?</strong>. You're going to see a lot of examples where the data sent by the Django views is in JSON. I didn't go into detail on that, because it isn't important <em>how</em> to do it (there are plenty of explanations abound) and a lot more important <em>when</em>. And the answer to that is - JSON data is serialized data. That is, data you can manipulate. Like I mentioned, an AJAX call will fetch the response as if the user did it himself. Now say you don't want to mess with all the html, and instead want to send data (a list of objects perhaps). JSON is good for this, because it sends it as an object (JSON data looks like a python dictionary), and then you can iterate over it or do something else that removes the need to sift through useless html.</li>\n\n<li><strong>Add it last</strong>. When you build a web app and want to implement AJAX - do yourself a favor. First, build the entire app completely devoid of any AJAX. See that everything is working. Then, and only then, start writing the AJAX calls. That's a good process that helps you learn a lot as well.</li>\n\n<li><strong>Use chrome's developer tools</strong>. Since AJAX calls are done in the background it's sometimes very hard to debug them. You should use the chrome developer tools (or similar tools such as firebug) and <code>console.log</code> things to debug. I won't explain in detail, just google around and find out about it. It would be very helpful to you.</li>\n\n<li><strong>CSRF awareness</strong>. Finally, remember that post requests in Django require the <code>csrf_token</code>. With AJAX calls, a lot of times you'd like to send data without refreshing the page. You'll probably face some trouble before you'd finally remember that - wait, you forgot to send the <code>csrf_token</code>. This is a known beginner roadblock in AJAX-Django integration, but after you learn how to make it play nice, it's easy as pie.</li>\n\n</ol>\n\n<p>That's everything that comes to my head. It's a vast subject, but yeah, there's probably not enough examples out there. Just work your way there, slowly, you'll get it eventually.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	650
How to define two fields "unique" as couple	<p>There is a simple solution for you called <a href="https://docs.djangoproject.com/en/dev/ref/models/options/#unique-together" rel="noreferrer">unique_together</a> which does exactly what you want.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>class MyModel(models.Model):\n\n field1 = models.CharField(max_length=50)\n\n field2 = models.CharField(max_length=50)\n\n class Meta:\n\n unique_together = ('field1', 'field2',)\n\n</code></pre>\n\n<p><strong>And in your case:</strong></p>\n\n<pre><code>class Volume(models.Model):\n\n id = models.AutoField(primary_key=True)\n\n journal_id = models.ForeignKey(Journals, db_column='jid', null=True, verbose_name = "Journal")\n\n volume_number = models.CharField('Volume Number', max_length=100)\n\n comments = models.TextField('Comments', max_length=4000, blank=True)\n\n class Meta:\n\n unique_together = ('journal_id', 'volume_number',)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	651
How to make a class JSON serializable	<p>Here is a simple solution for a simple feature:</p>\n\n<h2><code>.toJSON()</code> Method</h2>\n\n<p>Instead of a JSON serializable class, implement a serializer method:</p>\n\n<pre class="lang-py prettyprint-override"><code>import json\n\nclass Object:\n\n def toJSON(self):\n\n return json.dumps(self, default=lambda o: o.__dict__, \n\n sort_keys=True, indent=4)\n\n</code></pre>\n\n<p>So you just call it to serialize:</p>\n\n<pre class="lang-py prettyprint-override"><code>me = Object()\n\nme.name = "Onur"\n\nme.age = 35\n\nme.dog = Object()\n\nme.dog.name = "Apollo"\n\nprint(me.toJSON())\n\n</code></pre>\n\n<p>will output:</p>\n\n<pre class="lang-js prettyprint-override"><code>{\n\n "age": 35,\n\n "dog": {\n\n "name": "Apollo"\n\n },\n\n "name": "Onur"\n\n}\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	652
How to know if an object has an attribute in Python	<p>As <a href="https://stackoverflow.com/questions/610883/how-to-know-if-an-object-has-an-attribute-in-python/610893#610893">Jarret Hardie</a> answered, <code>hasattr</code> will do the trick. I would like to add, though, that many in the Python community recommend a strategy of "easier to ask for forgiveness than permission" (EAFP) rather than "look before you leap" (LBYL). See these references:</p>\n\n<p><a href="http://web.archive.org/web/20070929122422/http://mail.python.org/pipermail/python-list/2003-May/205182.html" rel="noreferrer">EAFP vs LBYL (was Re: A little disappointed so far)</a><br>\n\n<a href="https://web.archive.org/web/20180411011411/http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html#eafp-vs-lbyl" rel="noreferrer">EAFP vs. LBYL @Code Like a Pythonista: Idiomatic Python</a></p>\n\n<p>ie:</p>\n\n<pre><code>try:\n\n doStuff(a.property)\n\nexcept AttributeError:\n\n otherStuff()\n\n</code></pre>\n\n<p>... is preferred to:</p>\n\n<pre><code>if hasattr(a, 'property'):\n\n doStuff(a.property)\n\nelse:\n\n otherStuff()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	653
Rename multiple files in a directory in Python	<p>Use <a href="https://docs.python.org/3/library/os.html#os.rename" rel="noreferrer"><code>os.rename(src, dst)</code></a> to rename or move a file or a directory.</p>\n\n<pre><code>$ ls\n\ncheese_cheese_type.bar cheese_cheese_type.foo\n\n$ python\n\n>>> import os\n\n>>> for filename in os.listdir("."):\n\n... if filename.startswith("cheese_"):\n\n... os.rename(filename, filename[7:])\n\n... \n\n>>> \n\n$ ls\n\ncheese_type.bar cheese_type.foo\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	654
No module named pkg_resources	<p><strong>July 2018 Update</strong> </p>\n\n<p>Most people should now use <code>pip install setuptools</code> (possibly with <code>sudo</code>).</p>\n\n<p>Some may need to (re)install the <code>python-setuptools</code> package via their package manager (<code>apt-get install</code>, <code>yum install</code>, etc.).</p>\n\n<p>This issue can be highly dependent on your OS and dev environment. See the legacy/other answers below if the above isn't working for you.</p>\n\n<p><strong>Explanation</strong></p>\n\n<p>This error message is caused by a missing/broken Python <code>setuptools</code> package. Per Matt M.'s comment and <a href="https://github.com/pypa/setuptools/issues/581" rel="noreferrer">setuptools issue #581</a>, the bootstrap script referred to below is no longer the recommended installation method.</p>\n\n<p>The bootstrap script instructions will remain below, in case it's still helpful to anyone.</p>\n\n<p><strong>Legacy Answer</strong></p>\n\n<p>I encountered the same <code>ImportError</code> today while trying to use pip. Somehow the <code>setuptools</code> package had been deleted in my Python environment.</p>\n\n<p>To fix the issue, run the setup script for <code>setuptools</code>:</p>\n\n<pre><code>wget https://bootstrap.pypa.io/ez_setup.py -O - | python\n\n</code></pre>\n\n<p>(or if you don't have <code>wget</code> installed (e.g. OS X), try</p>\n\n<pre><code>curl https://bootstrap.pypa.io/ez_setup.py | python\n\n</code></pre>\n\n<p>possibly with <code>sudo</code> prepended.)</p>\n\n<p>If you have any version of <a href="http://pythonhosted.org/setuptools/merge-faq.html" rel="noreferrer"><code>distribute</code></a>, or any <code>setuptools</code> below 0.6, you will have to uninstall it first.*</p>\n\n<p>See <a href="https://pypi.python.org/pypi/setuptools/0.9.8#installation-instructions" rel="noreferrer">Installation Instructions</a> for further details.</p>\n\n<hr>\n\n<p>* If you already have a working <code>distribute</code>, upgrading it to the "compatibility wrapper" that switches you over to <code>setuptools</code> is easier. But if things are already broken, don't try that.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	655
Import error: No module name urllib2	<p>As stated in the <a href="https://docs.python.org/2/library/urllib2.html" rel="noreferrer"><code>urllib2</code> documentation</a>:</p>\n\n<blockquote>\n\n <p>The <code>urllib2</code> module has been split across several modules in Python 3 named <code>urllib.request</code> and <code>urllib.error</code>. The <code>2to3</code> tool will automatically adapt imports when converting your sources to Python 3.</p>\n\n</blockquote>\n\n<p>So you should instead be saying</p>\n\n<pre><code>from urllib.request import urlopen\n\nhtml = urlopen("http://www.google.com/").read()\n\nprint(html)\n\n</code></pre>\n\n<p>Your current, now-edited code sample is incorrect because you are saying <code>urllib.urlopen("http://www.google.com/")</code> instead of just <code>urlopen("http://www.google.com/")</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	656
No module named MySQLdb	<p>You need to use one of the following commands. Which one depends on what OS and software you have and use.</p>\n\n<ol>\n\n<li><strong>easy_install mysql-python</strong> (mix os)</li>\n\n<li><strong>pip install mysql-python</strong> (mix os/ python 2)</li>\n\n<li><strong>pip install mysqlclient</strong> (mix os/ python 3)</li>\n\n<li><strong>apt-get install python-mysqldb</strong> (Linux Ubuntu, ...)</li>\n\n<li><strong>cd /usr/ports/databases/py-MySQLdb && make install clean</strong> (FreeBSD)</li>\n\n<li><strong>yum install MySQL-python</strong> (Linux Fedora, CentOS ...)</li>\n\n</ol>\n\n<p>For Windows, see this answer: <a href="https://stackoverflow.com/q/21440230/4646678">Install mysql-python (Windows)</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	657
Separation of business logic and data access in django	<p>It seems like you are asking about the difference between the <em>data model</em> and the <em>domain model</em> âÂ the latter is where you can find the business logic and entities as perceived by your end user, the former is where you actually store your data. </p>\n\n<p>Furthermore, I've interpreted the 3rd part of your question as: how to notice failure to keep these models separate. </p>\n\n<p>These are two very different concepts and it's always hard to keep them separate. However, there are some common patterns and tools that can be used for this purpose. </p>\n\n<h2>About the Domain Model</h2>\n\n<p>The first thing you need to recognize is that your domain model is not really about data; it is about <em>actions</em> and <em>questions</em> such as "activate this user", "deactivate this user", "which users are currently activated?", and "what is this user's name?". In classical terms: it's about <em>queries</em> and <em>commands</em>. </p>\n\n<h2>Thinking in Commands</h2>\n\n<p>Let's start by looking at the commands in your example: "activate this user" and "deactivate this user". The nice thing about commands is that they can easily be expressed by small given-when-then scenario's: </p>\n\n<blockquote>\n\n <p><strong>given</strong> an inactive user <br/>\n\n <strong>when</strong> the admin activates this user <br/>\n\n <strong>then</strong> the user becomes active <br/>\n\n <strong>and</strong> a confirmation e-mail is sent to the user <br/>\n\n <strong>and</strong> an entry is added to the system log<br/>\n\n (etc. etc.)</p>\n\n</blockquote>\n\n<p>Such scenario's are useful to see how different parts of your infrastructure can be affected by a single command âÂ in this case your database (some kind of 'active' flag), your mail server, your system log, etc. </p>\n\n<p>Such scenario's also really help you in setting up a Test Driven Development environment. </p>\n\n<p>And finally, thinking in commands really helps you create a task-oriented application. Your users will appreciate this :-)</p>\n\n<h2>Expressing Commands</h2>\n\n<p>Django provides two easy ways of expressing commands; they are both valid options and it is not unusual to mix the two approaches. </p>\n\n<h3>The service layer</h3>\n\n<p>The <em>service module</em> has already been <a href="https://stackoverflow.com/a/12579490/383793">described by @Hedde</a>. Here you define a separate module and each command is represented as a function. </p>\n\n<p><strong>services.py</strong></p>\n\n<pre><code>def activate_user(user_id):\n\n user = User.objects.get(pk=user_id)\n\n # set active flag\n\n user.active = True\n\n user.save()\n\n # mail user\n\n send_mail(...)\n\n # etc etc\n\n</code></pre>\n\n<h3>Using forms</h3>\n\n<p>The other way is to use a Django Form for each command. I prefer this approach, because it combines multiple closely related aspects:</p>\n\n<ul>\n\n<li>execution of the command (what does it do?)</li>\n\n<li>validation of the command parameters (can it do this?)</li>\n\n<li>presentation of the command (how can I do this?)</li>\n\n</ul>\n\n<p><strong>forms.py</strong></p>\n\n<pre><code>class ActivateUserForm(forms.Form):\n\n user_id = IntegerField(widget = UsernameSelectWidget, verbose_name="Select a user to activate")\n\n # the username select widget is not a standard Django widget, I just made it up\n\n def clean_user_id(self):\n\n user_id = self.cleaned_data['user_id']\n\n if User.objects.get(pk=user_id).active:\n\n raise ValidationError("This user cannot be activated")\n\n # you can also check authorizations etc. \n\n return user_id\n\n def execute(self):\n\n """\n\n This is not a standard method in the forms API; it is intended to replace the \n\n 'extract-data-from-form-in-view-and-do-stuff' pattern by a more testable pattern. \n\n """\n\n user_id = self.cleaned_data['user_id']\n\n user = User.objects.get(pk=user_id)\n\n # set active flag\n\n user.active = True\n\n user.save()\n\n # mail user\n\n send_mail(...)\n\n # etc etc\n\n</code></pre>\n\n<h2>Thinking in Queries</h2>\n\n<p>You example did not contain any queries, so I took the liberty of making up a few useful queries. I prefer to use the term "question", but queries is the classical terminology. Interesting queries are: "What is the name of this user?", "Can this user log in?", "Show me a list of deactivated users", and "What is the geographical distribution of deactivated users?" </p>\n\n<p>Before embarking on answering these queries, you should always ask yourself two questions: is this a <em>presentational</em> query just for my templates, and/or a <em>business logic</em> query tied to executing my commands, and/or a <em>reporting</em> query. </p>\n\n<p>Presentational queries are merely made to improve the user interface. The answers to business logic queries directly affect the execution of your commands. Reporting queries are merely for analytical purposes and have looser time constraints. These categories are not mutually exclusive. </p>\n\n<p>The other question is: "do I have complete control over the answers?" For example, when querying the user's name (in this context) we do not have any control over the outcome, because we rely on an external API. </p>\n\n<h2>Making Queries</h2>\n\n<p>The most basic query in Django is the use of the Manager object: </p>\n\n<pre><code>User.objects.filter(active=True)\n\n</code></pre>\n\n<p>Of course, this only works if the data is actually represented in your data model. This is not always the case. In those cases, you can consider the options below. </p>\n\n<h3>Custom tags and filters</h3>\n\n<p>The first alternative is useful for queries that are merely presentational: custom tags and template filters. </p>\n\n<p><strong>template.html</strong></p>\n\n<pre><code><h1>Welcome, {{ user|friendly_name }}</h1>\n\n</code></pre>\n\n<p><strong>template_tags.py</strong></p>\n\n<pre><code>@register.filter\n\ndef friendly_name(user):\n\n return remote_api.get_cached_name(user.id)\n\n</code></pre>\n\n<h3>Query methods</h3>\n\n<p>If your query is not merely presentational, you could add queries to your <strong>services.py</strong> (if you are using that), or introduce a <strong>queries.py</strong> module: </p>\n\n<p><strong>queries.py</strong></p>\n\n<pre><code>def inactive_users():\n\n return User.objects.filter(active=False)\n\ndef users_called_publysher():\n\n for user in User.objects.all():\n\n if remote_api.get_cached_name(user.id) == "publysher":\n\n yield user \n\n</code></pre>\n\n<h3>Proxy models</h3>\n\n<p>Proxy models are very useful in the context of business logic and reporting. You basically define an enhanced subset of your model. You can override a Managerâs base QuerySet by overriding the <a href="https://docs.djangoproject.com/en/2.0/topics/db/managers/#modifying-a-manager-s-initial-queryset" rel="noreferrer"><code>Manager.get_queryset()</code></a> method. </p>\n\n<p><strong>models.py</strong></p>\n\n<pre><code>class InactiveUserManager(models.Manager):\n\n def get_queryset(self):\n\n query_set = super(InactiveUserManager, self).get_queryset()\n\n return query_set.filter(active=False)\n\nclass InactiveUser(User):\n\n """\n\n >>> for user in InactiveUser.objects.all():\n\n â¦ assert user.active is False \n\n """\n\n objects = InactiveUserManager()\n\n class Meta:\n\n proxy = True\n\n</code></pre>\n\n<h3>Query models</h3>\n\n<p>For queries that are inherently complex, but are executed quite often, there is the possibility of query models. A query model is a form of denormalization where relevant data for a single query is stored in a separate model. The trick of course is to keep the denormalized model in sync with the primary model. Query models can only be used if changes are entirely under your control. </p>\n\n<p><strong>models.py</strong></p>\n\n<pre><code>class InactiveUserDistribution(models.Model):\n\n country = CharField(max_length=200)\n\n inactive_user_count = IntegerField(default=0)\n\n</code></pre>\n\n<p>The first option is to update these models in your commands. This is very useful if these models are only changed by one or two commands. </p>\n\n<p><strong>forms.py</strong></p>\n\n<pre><code>class ActivateUserForm(forms.Form):\n\n # see above\n\n def execute(self):\n\n # see above\n\n query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)\n\n query_model.inactive_user_count -= 1\n\n query_model.save()\n\n</code></pre>\n\n<p>A better option would be to use custom signals. These signals are of course emitted by your commands. Signals have the advantage that you can keep multiple query models in sync with your original model. Furthermore, signal processing can be offloaded to background tasks, using Celery or similar frameworks. </p>\n\n<p><strong>signals.py</strong></p>\n\n<pre><code>user_activated = Signal(providing_args = ['user'])\n\nuser_deactivated = Signal(providing_args = ['user'])\n\n</code></pre>\n\n<p><strong>forms.py</strong></p>\n\n<pre><code>class ActivateUserForm(forms.Form):\n\n # see above\n\n def execute(self):\n\n # see above\n\n user_activated.send_robust(sender=self, user=user)\n\n</code></pre>\n\n<p><strong>models.py</strong></p>\n\n<pre><code>class InactiveUserDistribution(models.Model):\n\n # see above\n\n@receiver(user_activated)\n\ndef on_user_activated(sender, **kwargs):\n\n user = kwargs['user']\n\n query_model = InactiveUserDistribution.objects.get_or_create(country=user.country)\n\n query_model.inactive_user_count -= 1\n\n query_model.save()\n\n</code></pre>\n\n<h2>Keeping it clean</h2>\n\n<p>When using this approach, it becomes ridiculously easy to determine if your code stays clean. Just follow these guidelines:</p>\n\n<ul>\n\n<li>Does my model contain methods that do more than managing database state? You should extract a command. </li>\n\n<li>Does my model contain properties that do not map to database fields? You should extract a query. </li>\n\n<li>Does my model reference infrastructure that is not my database (such as mail)? You should extract a command.</li>\n\n</ul>\n\n<p>The same goes for views (because views often suffer from the same problem). </p>\n\n<ul>\n\n<li>Does my view actively manage database models? You should extract a command.</li>\n\n</ul>\n\n<h2>Some References</h2>\n\n<p><a href="https://docs.djangoproject.com/en/dev/topics/db/models/#proxy-models" rel="noreferrer">Django documentation: proxy models</a></p>\n\n<p><a href="https://docs.djangoproject.com/en/dev/topics/signals/" rel="noreferrer">Django documentation: signals</a></p>\n\n<p><a href="https://rads.stackoverflow.com/amzn/click/com/0321125215" rel="noreferrer" rel="nofollow noreferrer">Architecture: Domain Driven Design</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	658
How to fix "Attempted relative import in non-package" even with __init__.py	<p>To elaborate on <a href="https://stackoverflow.com/a/11536794/5337834">Ignacio Vazquez-Abrams's</a> answer:</p>\n\n<p>The Python import mechanism works relative to the <code>__name__</code> of the current file. When you execute a file directly, it doesn't have its usual name, but has <code>"__main__"</code> as its name instead. So relative imports don't work.</p>\n\n<p>You can, as Igancio suggested, execute it using the <code>-m</code> option. If you have a part of your package that is meant to be run as a script, you can also use the <code>__package__</code> attribute to tell that file what name it's supposed to have in the package hierarchy. </p>\n\n<p>See <a href="http://www.python.org/dev/peps/pep-0366/" rel="noreferrer">http://www.python.org/dev/peps/pep-0366/</a> for details.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	659
Dealing with multiple Python versions and PIP?	<p>The <a href="https://packaging.python.org/guides/installing-using-pip-and-virtualenv/" rel="noreferrer">current recommendation</a> is to use <code>python -m pip</code>, where <code>python</code> is the version of Python you would like to use. This is the recommendation because it works across all versions of Python, and in all forms of virtualenv. For example:</p>\n\n<pre><code># The system default python:\n\n$ python -m pip install fish\n\n# A virtualenv's python:\n\n$ .env/bin/python -m pip install fish\n\n# A specific version of python:\n\n$ python-3.6 -m pip install fish\n\n</code></pre>\n\n<p>Previous answer, left for posterity:</p>\n\n<p>Since version 0.8, Pip supports <code>pip-{version}</code>. You can use it the same as <code>easy_install-{version}</code>:</p>\n\n<pre><code>$ pip-2.5 install myfoopackage\n\n$ pip-2.6 install otherpackage\n\n$ pip-2.7 install mybarpackage\n\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT</strong>: pip changed its schema to use <code>pipVERSION</code> instead of <code>pip-VERSION</code> in version 1.5. You should use the following if you have <code>pip >= 1.5</code>:</p>\n\n<pre><code>$ pip2.6 install otherpackage\n\n$ pip2.7 install mybarpackage\n\n</code></pre>\n\n<p>Check <a href="https://github.com/pypa/pip/pull/1053" rel="noreferrer">https://github.com/pypa/pip/pull/1053</a> for more details</p>\n\n<hr>\n\n<p>References:</p>\n\n<ul>\n\n<li><a href="https://github.com/pypa/pip/issues/200" rel="noreferrer">https://github.com/pypa/pip/issues/200</a></li>\n\n<li><a href="http://www.pip-installer.org/docs/pip/en/0.8.3/news.html#id4" rel="noreferrer">http://www.pip-installer.org/docs/pip/en/0.8.3/news.html#id4</a></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	660
How to print instances of a class using print()?	<pre><code>>>> class Test:\n\n... def __repr__(self):\n\n... return "Test()"\n\n... def __str__(self):\n\n... return "member of Test"\n\n... \n\n>>> t = Test()\n\n>>> t\n\nTest()\n\n>>> print(t)\n\nmember of Test\n\n</code></pre>\n\n<p>The <code>__str__</code> method is what happens when you print it, and the <code>__repr__</code> method is what happens when you use the <a href="https://docs.python.org/library/functions.html#repr" rel="noreferrer"><code>repr()</code></a> function (or when you look at it with the interactive prompt). If this isn't the most <em>Pythonic</em> method, I apologize, because I'm still learning too - but it works.</p>\n\n<p>If no <code>__str__</code> method is given, Python will print the result of <code>__repr__</code> instead. If you define <code>__str__</code> but not <code>__repr__</code>, Python will use what you see above as the <code>__repr__</code>, but still use <code>__str__</code> for printing.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	661
How to read a text file into a string variable and strip newlines?	<p>Use <code>read()</code>, not <code>readline()</code>:</p>\n\n<pre><code>with open('data.txt', 'r') as myfile:\n\n data = myfile.read()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	662
No Multiline Lambda in Python: Why not?	<p>Guido van Rossum (the inventor of Python) answers this exact question himself in <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=147358" rel="noreferrer">an old blog post</a>.<br>\n\nBasically, he admits that it's theoretically possible, but that any proposed solution would be un-Pythonic:</p>\n\n<blockquote>\n\n <p>"But the complexity of any proposed solution for this puzzle is immense, to me: it requires the parser (or more precisely, the lexer) to be able to switch back and forth between indent-sensitive and indent-insensitive modes, keeping a stack of previous modes and indentation level. Technically that can all be solved (there's already a stack of indentation levels that could be generalized). But none of that takes away my gut feeling that it is all an elaborate <a href="http://en.wikipedia.org/wiki/Rube_Goldberg_Machine" rel="noreferrer">Rube Goldberg contraption</a>."</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	663
How to get file creation & modification date/times in Python?	<p>Getting some sort of modification date in a cross-platform way is easy - just call <a href="https://docs.python.org/library/os.path.html#os.path.getmtime" rel="noreferrer"><code>os.path.getmtime(<i>path</i>)</code></a> and you'll get the Unix timestamp of when the file at <code>path</code> was last modified.</p>\n\n<p>Getting file <em>creation</em> dates, on the other hand, is fiddly and platform-dependent, differing even between the three big OSes:</p>\n\n<ul>\n\n<li>On <strong>Windows</strong>, a file's <code>ctime</code> (documented at <a href="https://msdn.microsoft.com/en-us/library/14h5k7ff.aspx" rel="noreferrer">https://msdn.microsoft.com/en-us/library/14h5k7ff.aspx</a>) stores its creation date. You can access this in Python through <a href="https://docs.python.org/library/os.path.html#os.path.getctime" rel="noreferrer"><code>os.path.getctime()</code></a> or the <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_ctime" rel="noreferrer"><code>.st_ctime</code></a> attribute of the result of a call to <a href="https://docs.python.org/3/library/os.html#os.stat" rel="noreferrer"><code>os.stat()</code></a>. This <em>won't</em> work on Unix, where the <code>ctime</code> <a href="http://www.linux-faqs.info/general/difference-between-mtime-ctime-and-atime" rel="noreferrer">is the last time that the file's attributes <em>or</em> content were changed</a>.</li>\n\n<li>On <strong>Mac</strong>, as well as some other Unix-based OSes, you can use the <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_birthtime" rel="noreferrer"><code>.st_birthtime</code></a> attribute of the result of a call to <code>os.stat()</code>.</li>\n\n<li><p>On <strong>Linux</strong>, this is currently impossible, at least without writing a C extension for Python. Although some file systems commonly used with Linux <a href="https://unix.stackexchange.com/questions/7562/what-file-systems-on-linux-store-the-creation-time">do store creation dates</a> (for example, <code>ext4</code> stores them in <code>st_crtime</code>) , the Linux kernel <a href="https://unix.stackexchange.com/questions/91197/how-to-find-creation-date-of-file">offers no way of accessing them</a>; in particular, the structs it returns from <code>stat()</code> calls in C, as of the latest kernel version, <a href="https://github.com/torvalds/linux/blob/v4.8-rc6/include/linux/stat.h" rel="noreferrer">don't contain any creation date fields</a>. You can also see that the identifier <code>st_crtime</code> doesn't currently feature anywhere in the <a href="https://github.com/python/cpython/search?utf8=%E2%9C%93&q=st_crtime" rel="noreferrer">Python source</a>. At least if you're on <code>ext4</code>, the data <em>is</em> attached to the inodes in the file system, but there's no convenient way of accessing it.</p>\n\n<p>The next-best thing on Linux is to access the file's <code>mtime</code>, through either <a href="https://docs.python.org/library/os.path.html#os.path.getmtime" rel="noreferrer"><code>os.path.getmtime()</code></a> or the <a href="https://docs.python.org/3/library/os.html#os.stat_result.st_mtime" rel="noreferrer"><code>.st_mtime</code></a> attribute of an <code>os.stat()</code> result. This will give you the last time the file's content was modified, which may be adequate for some use cases.</p></li>\n\n</ul>\n\n<p>Putting this all together, cross-platform code should look something like this...</p>\n\n<pre><code>import os\n\nimport platform\n\ndef creation_date(path_to_file):\n\n """\n\n Try to get the date that a file was created, falling back to when it was\n\n last modified if that isn't possible.\n\n See http://stackoverflow.com/a/39501288/1709587 for explanation.\n\n """\n\n if platform.system() == 'Windows':\n\n return os.path.getctime(path_to_file)\n\n else:\n\n stat = os.stat(path_to_file)\n\n try:\n\n return stat.st_birthtime\n\n except AttributeError:\n\n # We're probably on Linux. No easy way to get creation dates here,\n\n # so we'll settle for when its content was last modified.\n\n return stat.st_mtime\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	664
How to get all possible combinations of a listâs elements?	<p><a href="https://stackoverflow.com/questions/464864/python-code-to-pick-out-all-possible-combinations-from-a-list/464882#464882">This answer</a> missed one aspect: the OP asked for ALL combinations... not just combinations of length "r".</p>\n\n<p>So you'd either have to loop through all lengths "L":</p>\n\n<pre><code>import itertools\n\nstuff = [1, 2, 3]\n\nfor L in range(0, len(stuff)+1):\n\n for subset in itertools.combinations(stuff, L):\n\n print(subset)\n\n</code></pre>\n\n<p>Or -- if you want to get snazzy (or bend the brain of whoever reads your code after you) -- you can generate the chain of "combinations()" generators, and iterate through that:</p>\n\n<pre><code>from itertools import chain, combinations\n\ndef all_subsets(ss):\n\n return chain(*map(lambda x: combinations(ss, x), range(0, len(ss)+1)))\n\nfor subset in all_subsets(stuff):\n\n print(subset)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	665
How to "test" NoneType in python?	<blockquote>\n\n <p>So how can I question a variable that is a NoneType?</p>\n\n</blockquote>\n\n<p>Use <code>is</code> operator, like this</p>\n\n<pre><code>if variable is None:\n\n</code></pre>\n\n<p><strong>Why this works?</strong></p>\n\n<p>Since <a href="https://docs.python.org/2/library/constants.html#None"><code>None</code></a> is the sole singleton object of <a href="https://docs.python.org/2/library/types.html#types.NoneType"><code>NoneType</code></a> in Python, we can use <code>is</code> operator to check if a variable has <code>None</code> in it or not.</p>\n\n<p>Quoting from <a href="https://docs.python.org/2/reference/expressions.html#is"><code>is</code> docs</a>,</p>\n\n<blockquote>\n\n <p>The operators <code>is</code> and <code>is not</code> test for object identity: <code>x is y</code> is true if and only if <code>x</code> and <code>y</code> are the same object. <code>x is not y</code> yields the inverse truth value.</p>\n\n</blockquote>\n\n<p>Since there can be only one instance of <code>None</code>, <code>is</code> would be the preferred way to check <code>None</code>.</p>\n\n<hr>\n\n<p><strong>Hear it from the horse's mouth</strong></p>\n\n<p>Quoting <a href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations">Python's Coding Style Guidelines - PEP-008</a> (jointly defined by Guido himself),</p>\n\n<blockquote>\n\n <p>Comparisons to singletons like <strong><code>None</code> should always be done with <code>is</code> or <code>is not</code></strong>, <strong>never the equality operators</strong>.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	666
How to get line count of a large file cheaply in Python?	<p>One line, probably pretty fast:</p>\n\n<pre><code>num_lines = sum(1 for line in open('myfile.txt'))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	667
How to get the seconds since epoch from the time + date output of gmtime()?	<p>Use the <a href="https://docs.python.org/library/time.html" rel="noreferrer">time</a> module:</p>\n\n<pre><code>epoch_time = int(time.time())\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	668
How to get the current time in Python	<pre><code>from datetime import datetime\n\ndatetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n</code></pre>\n\n<p>For this example, the output will be like this: <code>'2013-09-18 11:16:32'</code></p>\n\n<p>Here is the list of <a href="https://docs.python.org/library/datetime.html#strftime-and-strptime-format-codes" rel="noreferrer"><code>strftime</code> directives</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	669
Remove specific characters from a string in Python	<p>Strings in Python are <em>immutable</em> (can't be changed). Because of this, the effect of <code>line.replace(...)</code> is just to create a new string, rather than changing the old one. You need to <em>rebind</em> (assign) it to <code>line</code> in order to have that variable take the new value, with those characters removed.</p>\n\n<p>Also, the way you are doing it is going to be kind of slow, relatively. It's also likely to be a bit confusing to experienced pythonators, who will see a doubly-nested structure and think for a moment that something more complicated is going on.</p>\n\n<p>Starting in Python 2.6 and newer Python 2.x versions *, you can instead use <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="noreferrer"><code>str.translate</code></a>, (but read on for Python 3 differences):</p>\n\n<pre><code>line = line.translate(None, '!@#$')\n\n</code></pre>\n\n<p>or regular expression replacement with <a href="https://docs.python.org/2/library/re.html#re.sub" rel="noreferrer"><code>re.sub</code></a></p>\n\n<pre><code>import re\n\nline = re.sub('[!@#$]', '', line)\n\n</code></pre>\n\n<p>The characters enclosed in brackets constitute a <em>character class</em>. Any characters in <code>line</code> which are in that class are replaced with the second parameter to <code>sub</code>: an empty string.</p>\n\n<p>In Python 3, strings are Unicode. You'll have to translate a little differently. kevpie mentions this in a <a href="https://stackoverflow.com/questions/3939361/remove-specific-characters-from-a-string-in-python#comment-4205256">comment</a> on one of the answers, and it's noted in the <a href="https://docs.python.org/2/library/stdtypes.html#str.translate" rel="noreferrer">documentation for <code>str.translate</code></a>.</p>\n\n<p>When calling the <code>translate</code> method of a Unicode string, you cannot pass the second parameter that we used above. You also can't pass <code>None</code> as the first parameter. Instead, you pass a translation table (usually a dictionary) as the only parameter. This table maps the <em>ordinal values</em> of characters (i.e. the result of calling <a href="https://docs.python.org/2/library/functions.html#ord" rel="noreferrer"><code>ord</code></a> on them) to the ordinal values of the characters which should replace them, orâusefully to usâ<code>None</code> to indicate that they should be deleted.</p>\n\n<p>So to do the above dance with a Unicode string you would call something like</p>\n\n<pre><code>translation_table = dict.fromkeys(map(ord, '!@#$'), None)\n\nunicode_line = unicode_line.translate(translation_table)\n\n</code></pre>\n\n<p>Here <a href="https://docs.python.org/2/library/stdtypes.html#dict.fromkeys" rel="noreferrer"><code>dict.fromkeys</code></a> and <a href="https://docs.python.org/2/library/functions.html#map" rel="noreferrer"><code>map</code></a> are used to succinctly generate a dictionary containing</p>\n\n<pre><code>{ord('!'): None, ord('@'): None, ...}\n\n</code></pre>\n\n<p>Even simpler, as <a href="https://stackoverflow.com/questions/23175809/typeerror-translate-takes-one-argument-2-given-python">another answer puts it</a>, create the translation table in place:</p>\n\n<pre><code>unicode_line = unicode_line.translate({ord(c): None for c in '!@#$'})\n\n</code></pre>\n\n<p>Or create the same translation table with <a href="https://docs.python.org/3/library/stdtypes.html#str.maketrans" rel="noreferrer"><code>str.maketrans</code></a>:</p>\n\n<pre><code>unicode_line = unicode_line.translate(str.maketrans('', '', '!@#$'))\n\n</code></pre>\n\n<hr>\n\n<p>* for compatibility with earlier Pythons, you can create a "null" translation table to pass in place of <code>None</code>:</p>\n\n<pre><code>import string\n\nline = line.translate(string.maketrans('', ''), '!@#$')\n\n</code></pre>\n\n<p>Here <a href="https://docs.python.org/2/library/string.html#string.maketrans" rel="noreferrer"><code>string.maketrans</code></a> is used to create a <em>translation table</em>, which is just a string containing the characters with ordinal values 0 to 255.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	670
setting y-axis limit in matplotlib	<p>Try this . Works for subplots too .</p>\n\n<pre><code>axes = plt.gca()\n\naxes.set_xlim([xmin,xmax])\n\naxes.set_ylim([ymin,ymax])\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	671
How to convert strings into integers in Python?	<p><a href="https://docs.python.org/3/library/functions.html#int" rel="noreferrer"><code>int()</code></a> is the Python standard built-in function to convert a string into an integer value. You call it with a string containing a number as the argument, and it returns the number converted to an integer:</p>\n\n<pre><code>print (int("1") + 1)\n\n</code></pre>\n\n<p>The above prints <code>2</code>.</p>\n\n<p>If you know the structure of your list, T1 (that it simply contains lists, only one level), you could do this in Python 2:</p>\n\n<pre><code>T2 = [map(int, x) for x in T1]\n\n</code></pre>\n\n<p>In Python 3:</p>\n\n<pre><code>T2 = [list(map(int, x)) for x in T1]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	672
Best way to format integer as string with leading zeros?	<p>You can use the <code>zfill()</code> method to pad a string with zeros:</p>\n\n<pre><code>In [3]: str(1).zfill(2)\n\nOut[3]: '01'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	673
Determine if variable is defined in Python	<pre><code>try:\n\n thevariable\n\nexcept NameError:\n\n print("well, it WASN'T defined after all!")\n\nelse:\n\n print("sure, it was defined.")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	674
How do I check whether a file exists without exceptions?	<pre><code>import os.path\n\nif os.path.isfile(filepath):\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	675
How do I create test and train samples from one dataframe with pandas?	<p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html" rel="noreferrer">scikit learn's <code>train_test_split</code></a> is a good one.</p>\n\n<pre><code>from sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(df, test_size=0.2)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	676
Get name of current script in Python	<p>You can use <a href="https://docs.python.org/reference/import.html#__file__" rel="noreferrer"><code>__file__</code></a> to get the name of the current file. When used in the main module, this is the name of the script that was originally invoked.</p>\n\n<p>If you want to omit the directory part (which might be present), you can use <code>os.path.basename(__file__)</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	677
Is there a "not equal" operator in Python?	<p>Use <code>!=</code>. See <a href="https://docs.python.org/3/library/stdtypes.html#comparisons" rel="noreferrer">comparison operators</a>. For comparing object identities, you can use the keyword <code>is</code> and its negation <code>is not</code>.</p>\n\n<p>e.g.</p>\n\n<pre><code>1 == 1 # -> True\n\n1 != 1 # -> False\n\n[] is [] #-> False (distinct objects)\n\na = b = []; a is b # -> True (same object)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	678
Filter dataframe rows if value in column is in a set list of values	<p>Use the <code>isin</code> method: </p>\n\n<p><code>rpt[rpt['STK_ID'].isin(stk_list)]</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	679
How can I selectively escape percent (%) in Python strings?	<pre><code>>>> test = "have it break."\n\n>>> selectiveEscape = "Print percent %% in sentence and not %s" % test\n\n>>> print selectiveEscape\n\nPrint percent % in sentence and not have it break.\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	680
Why use def main()?	<p>Without the main sentinel, the code would be executed even if the script were imported as a module.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	681
"Large data" work flows using pandas	<p>I routinely use tens of gigabytes of data in just this fashion\n\ne.g. I have tables on disk that I read via queries, create data and append back.</p>\n\n<p>It's worth reading <a href="http://pandas-docs.github.io/pandas-docs-travis/io.html#hdf5-pytables" rel="noreferrer">the docs</a> and <a href="https://groups.google.com/forum/m/?fromgroups#!topic/pydata/cmw1F3OFJSc" rel="noreferrer">late in this thread</a> for several suggestions for how to store your data.</p>\n\n<p>Details which will affect how you store your data, like:<br>\n\n<em>Give as much detail as you can; and I can help you develop a structure.</em></p>\n\n<ol>\n\n<li>Size of data, # of rows, columns, types of columns; are you appending\n\nrows, or just columns? </li>\n\n<li>What will typical operations look like. E.g. do a query on columns to select a bunch of rows and specific columns, then do an operation (in-memory), create new columns, save these.<br>\n\n(Giving a toy example could enable us to offer more specific recommendations.)</li>\n\n<li>After that processing, then what do you do? Is step 2 ad hoc, or repeatable?</li>\n\n<li>Input flat files: how many, rough total size in Gb. How are these organized e.g. by records? Does each one contains different fields, or do they have some records per file with all of the fields in each file?</li>\n\n<li>Do you ever select subsets of rows (records) based on criteria (e.g. select the rows with field A > 5)? and then do something, or do you just select fields A, B, C with all of the records (and then do something)?</li>\n\n<li>Do you 'work on' all of your columns (in groups), or are there a good proportion that you may only use for reports (e.g. you want to keep the data around, but don't need to pull in that column explicity until final results time)?</li>\n\n</ol>\n\n<h2>Solution</h2>\n\n<p><em>Ensure you have <a href="http://pandas.pydata.org/getpandas.html" rel="noreferrer">pandas at least <code>0.10.1</code></a> installed.</em></p>\n\n<p>Read <a href="http://pandas-docs.github.io/pandas-docs-travis/io.html#iterating-through-files-chunk-by-chunk" rel="noreferrer">iterating files chunk-by-chunk</a> and <a href="http://pandas-docs.github.io/pandas-docs-travis/io.html#multiple-table-queries" rel="noreferrer">multiple table queries</a>.</p>\n\n<p>Since pytables is optimized to operate on row-wise (which is what you query on), we will create a table for each group of fields. This way it's easy to select a small group of fields (which will work with a big table, but it's more efficient to do it this way... I think I may be able to fix this limitation in the future... this is more intuitive anyhow):<br>\n\n(The following is pseudocode.)</p>\n\n<pre><code>import numpy as np\n\nimport pandas as pd\n\n# create a store\n\nstore = pd.HDFStore('mystore.h5')\n\n# this is the key to your storage:\n\n# this maps your fields to a specific group, and defines \n\n# what you want to have as data_columns.\n\n# you might want to create a nice class wrapping this\n\n# (as you will want to have this map and its inversion) \n\ngroup_map = dict(\n\n A = dict(fields = ['field_1','field_2',.....], dc = ['field_1',....,'field_5']),\n\n B = dict(fields = ['field_10',...... ], dc = ['field_10']),\n\n .....\n\n REPORTING_ONLY = dict(fields = ['field_1000','field_1001',...], dc = []),\n\n)\n\ngroup_map_inverted = dict()\n\nfor g, v in group_map.items():\n\n group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))\n\n</code></pre>\n\n<p>Reading in the files and creating the storage (essentially doing what <code>append_to_multiple</code> does):</p>\n\n<pre><code>for f in files:\n\n # read in the file, additional options may be necessary here\n\n # the chunksize is not strictly necessary, you may be able to slurp each \n\n # file into memory in which case just eliminate this part of the loop \n\n # (you can also change chunksize if necessary)\n\n for chunk in pd.read_table(f, chunksize=50000):\n\n # we are going to append to each table by group\n\n # we are not going to create indexes at this time\n\n # but we *ARE* going to create (some) data_columns\n\n # figure out the field groupings\n\n for g, v in group_map.items():\n\n # create the frame for this group\n\n frame = chunk.reindex(columns = v['fields'], copy = False) \n\n # append it\n\n store.append(g, frame, index=False, data_columns = v['dc'])\n\n</code></pre>\n\n<p>Now you have all of the tables in the file (actually you could store them in separate files if you wish, you would prob have to add the filename to the group_map, but probably this isn't necessary).</p>\n\n<p>This is how you get columns and create new ones:</p>\n\n<pre><code>frame = store.select(group_that_I_want)\n\n# you can optionally specify:\n\n# columns = a list of the columns IN THAT GROUP (if you wanted to\n\n# select only say 3 out of the 20 columns in this sub-table)\n\n# and a where clause if you want a subset of the rows\n\n# do calculations on this frame\n\nnew_frame = cool_function_on_frame(frame)\n\n# to 'add columns', create a new group (you probably want to\n\n# limit the columns in this new_group to be only NEW ones\n\n# (e.g. so you don't overlap from the other tables)\n\n# add this info to the group_map\n\nstore.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)\n\n</code></pre>\n\n<p>When you are ready for post_processing:</p>\n\n<pre><code># This may be a bit tricky; and depends what you are actually doing.\n\n# I may need to modify this function to be a bit more general:\n\nreport_data = store.select_as_multiple([groups_1,groups_2,.....], where =['field_1>0', 'field_1000=foo'], selector = group_1)\n\n</code></pre>\n\n<p>About data_columns, you don't actually need to define <strong>ANY</strong> data_columns; they allow you to sub-select rows based on the column. E.g. something like:</p>\n\n<pre><code>store.select(group, where = ['field_1000=foo', 'field_1001>0'])\n\n</code></pre>\n\n<p>They may be most interesting to you in the final report generation stage (essentially a data column is segregated from other columns, which might impact efficiency somewhat if you define a lot).</p>\n\n<p>You also might want to:</p>\n\n<ul>\n\n<li>create a function which takes a list of fields, looks up the groups in the groups_map, then selects these and concatenates the results so you get the resulting frame (this is essentially what select_as_multiple does). <em>This way the structure would be pretty transparent to you.</em></li>\n\n<li>indexes on certain data columns (makes row-subsetting much faster).</li>\n\n<li>enable compression.</li>\n\n</ul>\n\n<p>Let me know when you have questions!</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	682
What does ** (double star/asterisk) and * (star/asterisk) do for parameters?	<p>It's also worth noting that you can use <code>*</code> and <code>**</code> when calling functions as well. This is a shortcut that allows you to pass multiple arguments to a function directly using either a list/tuple or a dictionary. For example, if you have the following function:</p>\n\n<pre><code>def foo(x,y,z):\n\n print("x=" + str(x))\n\n print("y=" + str(y))\n\n print("z=" + str(z))\n\n</code></pre>\n\n<p>You can do things like:</p>\n\n<pre><code>>>> mylist = [1,2,3]\n\n>>> foo(*mylist)\n\nx=1\n\ny=2\n\nz=3\n\n>>> mydict = {'x':1,'y':2,'z':3}\n\n>>> foo(**mydict)\n\nx=1\n\ny=2\n\nz=3\n\n>>> mytuple = (1, 2, 3)\n\n>>> foo(*mytuple)\n\nx=1\n\ny=2\n\nz=3\n\n</code></pre>\n\n<p>Note: The keys in <code>mydict</code> have to be named exactly like the parameters of function <code>foo</code>. Otherwise it will throw a <code>TypeError</code>:</p>\n\n<pre><code>>>> mydict = {'x':1,'y':2,'z':3,'badnews':9}\n\n>>> foo(**mydict)\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: foo() got an unexpected keyword argument 'badnews'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	683
How do I increase the cell width of the Jupyter/ipython notebook in my browser?	<p>If you don't want to change your default settings, and you only want to change the width of the current notebook you're working on, you can enter the following into a cell:</p>\n\n<pre><code>from IPython.core.display import display, HTML\n\ndisplay(HTML("<style>.container { width:100% !important; }</style>"))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	684
Pretty-print an entire Pandas Series / DataFrame	<p>No need to hack settings. There is a simple way:</p>\n\n<pre><code>print(df.to_string())\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	685
Python's most efficient way to choose longest string in list?	<p>From the <a href="http://docs.python.org/whatsnew/2.5.html#other-language-changes" rel="noreferrer">Python documentation</a> itself, you can use <a href="http://docs.python.org/library/functions.html#max" rel="noreferrer"><code>max</code></a>:</p>\n\n<pre><code>>>> mylist = ['123','123456','1234']\n\n>>> print max(mylist, key=len)\n\n123456\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	686
Are static class variables possible in Python?	<p>@Blair Conrad said static variables declared inside the class definition, but not inside a method are class or "static" variables:</p>\n\n<pre><code>>>> class Test(object):\n\n... i = 3\n\n...\n\n>>> Test.i\n\n3\n\n</code></pre>\n\n<p>There are a few gotcha's here. Carrying on from the example above:</p>\n\n<pre><code>>>> t = Test()\n\n>>> t.i # "static" variable accessed via instance\n\n3\n\n>>> t.i = 5 # but if we assign to the instance ...\n\n>>> Test.i # we have not changed the "static" variable\n\n3\n\n>>> t.i # we have overwritten Test.i on t by creating a new attribute t.i\n\n5\n\n>>> Test.i = 6 # to change the "static" variable we do it by assigning to the class\n\n>>> t.i\n\n5\n\n>>> Test.i\n\n6\n\n>>> u = Test()\n\n>>> u.i\n\n6 # changes to t do not affect new instances of Test\n\n# Namespaces are one honking great idea -- let's do more of those!\n\n>>> Test.__dict__\n\n{'i': 6, ...}\n\n>>> t.__dict__\n\n{'i': 5}\n\n>>> u.__dict__\n\n{}\n\n</code></pre>\n\n<p>Notice how the instance variable <code>t.i</code> got out of sync with the "static" class variable when the attribute <code>i</code> was set directly on <code>t</code>. This is because <code>i</code> was re-bound within the <code>t</code> namespace, which is distinct from the <code>Test</code> namespace. If you want to change the value of a "static" variable, you must change it within the scope (or object) where it was originally defined. I put "static" in quotes because Python does not really have static variables in the sense that C++ and Java do.</p>\n\n<p>Although it doesn't say anything specific about static variables or methods, the <a href="http://docs.python.org/tut/" rel="noreferrer">Python tutorial</a> has some relevant information on <a href="https://docs.python.org/2/tutorial/classes.html" rel="noreferrer">classes and class objects</a>. </p>\n\n<p>@Steve Johnson also answered regarding static methods, also documented under "Built-in Functions" in the Python Library Reference.</p>\n\n<pre><code>class Test(object):\n\n @staticmethod\n\n def f(arg1, arg2, ...):\n\n ...\n\n</code></pre>\n\n<p>@beid also mentioned classmethod, which is similar to staticmethod. A classmethod's first argument is the class object. Example:</p>\n\n<pre><code>class Test(object):\n\n i = 3 # class (or static) variable\n\n @classmethod\n\n def g(cls, arg):\n\n # here we can use 'cls' instead of the class name (Test)\n\n if arg > cls.i:\n\n cls.i = arg # would be the same as Test.i = arg1\n\n</code></pre>\n\n<p><a href="https://i.stack.imgur.com/xqnxe.jpg" rel="noreferrer"><img src="https://i.stack.imgur.com/xqnxe.jpg" alt="Pictorial Representation Of Above Example"></a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	687
Get exception description and stack trace which caused an exception, all as a string	<p>See the <code>traceback</code> module, specifically the <code>format_exc()</code> function. <a href="https://docs.python.org/2.7/library/traceback.html#traceback.format_exc" rel="noreferrer">Here</a>.</p>\n\n<pre><code>import traceback\n\ntry:\n\n raise ValueError\n\nexcept ValueError:\n\n tb = traceback.format_exc()\n\nelse:\n\n tb = "No error"\n\nfinally:\n\n print tb\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	688
How do I correctly clean up a Python object?	<p>I'd recommend using Python's <code>with</code> statement for managing resources that need to be cleaned up. The problem with using an explicit <code>close()</code> statement is that you have to worry about people forgetting to call it at all or forgetting to place it in a <code>finally</code> block to prevent a resource leak when an exception occurs.</p>\n\n<p>To use the <code>with</code> statement, create a class with the following methods:</p>\n\n<pre><code> def __enter__(self)\n\n def __exit__(self, exc_type, exc_value, traceback)\n\n</code></pre>\n\n<p>In your example above, you'd use </p>\n\n<pre><code>class Package:\n\n def __init__(self):\n\n self.files = []\n\n def __enter__(self):\n\n return self\n\n # ...\n\n def __exit__(self, exc_type, exc_value, traceback):\n\n for file in self.files:\n\n os.unlink(file)\n\n</code></pre>\n\n<p>Then, when someone wanted to use your class, they'd do the following:</p>\n\n<pre><code>with Package() as package_obj:\n\n # use package_obj\n\n</code></pre>\n\n<p>The variable package_obj will be an instance of type Package (it's the value returned by the <code>__enter__</code> method). Its <code>__exit__</code> method will automatically be called, regardless of whether or not an exception occurs.</p>\n\n<p>You could even take this approach a step further. In the example above, someone could still instantiate Package using its constructor without using the <code>with</code> clause. You don't want that to happen. You can fix this by creating a PackageResource class that defines the <code>__enter__</code> and <code>__exit__</code> methods. Then, the Package class would be defined strictly inside the <code>__enter__</code> method and returned. That way, the caller never could instantiate the Package class without using a <code>with</code> statement:</p>\n\n<pre><code>class PackageResource:\n\n def __enter__(self):\n\n class Package:\n\n ...\n\n self.package_obj = Package()\n\n return self.package_obj\n\n def __exit__(self, exc_type, exc_value, traceback):\n\n self.package_obj.cleanup()\n\n</code></pre>\n\n<p>You'd use this as follows:</p>\n\n<pre><code>with PackageResource() as package_obj:\n\n # use package_obj\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	689
Which version of Python do I have installed?	<pre><code>python -V\n\n</code></pre>\n\n<p><a href="http://docs.python.org/using/cmdline.html#generic-options">http://docs.python.org/using/cmdline.html#generic-options</a></p>\n\n<p><code>--version</code> may also work (introduced in version 2.5)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	690
How do I remove packages installed with Python's easy_install?	<p><a href="http://pypi.python.org/pypi/pip/" rel="noreferrer">pip</a>, an alternative to setuptools/easy_install, provides an "uninstall" command. </p>\n\n<p>Install pip according to the <a href="http://pip.readthedocs.org/en/stable/installing/" rel="noreferrer">installation instructions</a>:</p>\n\n<pre><code>$ wget https://bootstrap.pypa.io/get-pip.py\n\n$ python get-pip.py\n\n</code></pre>\n\n<p>Then you can use <code>pip uninstall</code> to remove packages installed with <code>easy_install</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	691
How do I do a not equal in Django queryset filtering?	<p>Your query appears to have a double negative, you want to exclude all rows where x is not 5, so in other words you want to include all rows where x IS 5. I believe this will do the trick. </p>\n\n<pre><code>results = Model.objects.filter(x=5).exclude(a=true)\n\n</code></pre>\n\n<p>To answer your specific question, there is no "not equal to" but that's probably because django has both "filter" and "exclude" methods available so you can always just switch the logic round to get the desired result.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	692
Difference between abstract class and interface in Python	<p>What you'll see sometimes is the following:</p>\n\n<pre><code>class Abstract1( object ):\n\n """Some description that tells you it's abstract,\n\n often listing the methods you're expected to supply."""\n\n def aMethod( self ):\n\n raise NotImplementedError( "Should have implemented this" )\n\n</code></pre>\n\n<p>Because Python doesn't have (and doesn't need) a formal Interface contract, the Java-style distinction between abstraction and interface doesn't exist. If someone goes through the effort to define a formal interface, it will also be an abstract class. The only differences would be in the stated intent in the docstring. </p>\n\n<p>And the difference between abstract and interface is a hairsplitting thing when you have duck typing.</p>\n\n<p>Java uses interfaces because it doesn't have multiple inheritance.</p>\n\n<p>Because Python has multiple inheritance, you may also see something like this</p>\n\n<pre><code>class SomeAbstraction( object ):\n\n pass # lots of stuff - but missing something\n\nclass Mixin1( object ):\n\n def something( self ):\n\n pass # one implementation\n\nclass Mixin2( object ):\n\n def something( self ):\n\n pass # another\n\nclass Concrete1( SomeAbstraction, Mixin1 ):\n\n pass\n\nclass Concrete2( SomeAbstraction, Mixin2 ):\n\n pass\n\n</code></pre>\n\n<p>This uses a kind of abstract superclass with mixins to create concrete subclasses that are disjoint.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	693
How do I convert seconds to hours, minutes and seconds?	<p>By using the <a href="http://docs.python.org/library/functions.html#divmod" rel="noreferrer"><code>divmod()</code></a> function, which does only a single division to produce both the quotient and the remainder, you can have the result very quickly with only two mathematical operations:</p>\n\n<pre><code>m, s = divmod(seconds, 60)\n\nh, m = divmod(m, 60)\n\n</code></pre>\n\n<p>And then use <a href="https://stackoverflow.com/a/134951/4936137">string formatting</a> to convert the result into your desired output:</p>\n\n<pre><code>print('{:d}:{:02d}:{:02d}'.format(h, m, s)) # Python 3\n\nprint(f'{h:d}:{m:02d}:{s:02d}') # Python 3.6+\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	694
How to avoid Python/Pandas creating an index in a saved csv?	<p>Use <code>index=False</code>.</p>\n\n<pre><code>df.to_csv('your.csv', index=False)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	695
Getting today's date in YYYY-MM-DD in Python?	<p>You can use <a href="http://strftime.org/" rel="noreferrer">strftime</a>:</p>\n\n<pre><code>from datetime import datetime\n\ndatetime.today().strftime('%Y-%m-%d')\n\n</code></pre>\n\n<p>Additionally, for anyone also looking for a zero-padded Hour, Minute, and Second at the end: (Comment by <a href="https://stackoverflow.com/users/4561887/gabriel-staples">Gabriel Staples</a>)</p>\n\n<pre><code>datetime.today().strftime('%Y-%m-%d-%H:%M:%S')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	696
How to count the occurrence of certain item in an ndarray in Python?	<pre><code>>>> a = numpy.array([0, 3, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 3, 4])\n\n>>> unique, counts = numpy.unique(a, return_counts=True)\n\n>>> dict(zip(unique, counts))\n\n{0: 7, 1: 4, 2: 1, 3: 2, 4: 1}\n\n</code></pre>\n\n<p><strong>Non-numpy way</strong>:</p>\n\n<p>Use <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a>;</p>\n\n<pre><code>>> import collections, numpy\n\n>>> a = numpy.array([0, 3, 0, 1, 0, 1, 2, 1, 0, 0, 0, 0, 1, 3, 4])\n\n>>> collections.Counter(a)\n\nCounter({0: 7, 1: 4, 3: 2, 2: 1, 4: 1})\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	697
Getting key with maximum value in dictionary?	<p>You can use <code>operator.itemgetter</code> for that:</p>\n\n<pre><code>import operator\n\nstats = {'a':1000, 'b':3000, 'c': 100}\n\nmax(stats.iteritems(), key=operator.itemgetter(1))[0]\n\n</code></pre>\n\n<p>And instead of building a new list in memory use <code>stats.iteritems()</code>. The <code>key</code> parameter to the <code>max()</code> function is a function that computes a key that is used to determine how to rank items.</p>\n\n<p>Please note that if you were to have another key-value pair 'd': 3000 that this method will only return <strong>one</strong> of the <strong>two</strong> even though they both have the maximum value. </p>\n\n<pre><code>>>> import operator\n\n>>> stats = {'a':1000, 'b':3000, 'c': 100, 'd':3000}\n\n>>> max(stats.iteritems(), key=operator.itemgetter(1))[0]\n\n'b' \n\n</code></pre>\n\n<p>If using Python3:</p>\n\n<pre><code>>>> max(stats.items(), key=operator.itemgetter(1))[0]\n\n'b'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	698
Most pythonic way to delete a file which may not exist	<p>A more pythonic way would be:</p>\n\n<pre><code>try:\n\n os.remove(filename)\n\nexcept OSError:\n\n pass\n\n</code></pre>\n\n<p>Although this takes even more lines and looks very ugly, it avoids the unnecessary call to <code>os.path.exists()</code> and follows the python convention of overusing exceptions.</p>\n\n<p>It may be worthwhile to write a function to do this for you:</p>\n\n<pre><code>import os, errno\n\ndef silentremove(filename):\n\n try:\n\n os.remove(filename)\n\n except OSError as e: # this would be "except OSError, e:" before Python 2.6\n\n if e.errno != errno.ENOENT: # errno.ENOENT = no such file or directory\n\n raise # re-raise exception if a different error occurred\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	699
pip install - locale.Error: unsupported locale setting	<p>The root cause is: your environment variable <code>LC_ALL</code> is missing or invalid somehow </p>\n\n<p><strong>Short answer-</strong> </p>\n\n<p>just run the following command:</p>\n\n<pre><code>$ export LC_ALL=C\n\n</code></pre>\n\n<p>If you keep getting the error in new terminal windows, add it at the bottom of your <code>.bashrc</code> file.</p>\n\n<p><strong>Long answer-</strong></p>\n\n<p>Here is my <code>locale</code> settings:</p>\n\n<pre><code>$ locale\n\nLANG=en_US.UTF-8\n\nLANGUAGE=\n\nLC_CTYPE="C"\n\nLC_NUMERIC="C"\n\nLC_TIME="C"\n\nLC_COLLATE="C"\n\nLC_MONETARY="C"\n\nLC_MESSAGES="C"\n\nLC_PAPER="C"\n\nLC_NAME="C"\n\nLC_ADDRESS="C"\n\nLC_TELEPHONE="C"\n\nLC_MEASUREMENT="C"\n\nLC_IDENTIFICATION="C"\n\nLC_ALL=C\n\n</code></pre>\n\n<p><em>Python2.7</em></p>\n\n<pre><code> $ uname -a\n\n Linux debian 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1+deb8u6 (2015-11-09) x86_64 GNU/Linux\n\n $ python --version\n\n Python 2.7.9\n\n $ pip --version\n\n pip 8.1.1 from /usr/local/lib/python2.7/dist-packages (python 2.7)\n\n $ unset LC_ALL\n\n $ pip install virtualenv\n\n Traceback (most recent call last):\n\n File "/usr/local/bin/pip", line 11, in <module>\n\n sys.exit(main())\n\n File "/usr/local/lib/python2.7/dist-packages/pip/__init__.py", line 215, in main\n\n locale.setlocale(locale.LC_ALL, '')\n\n File "/usr/lib/python2.7/locale.py", line 579, in setlocale\n\n return _setlocale(category, locale)\n\n locale.Error: unsupported locale setting\n\n $ export LC_ALL=C\n\n $ pip install virtualenv\n\n Requirement already satisfied (use --upgrade to upgrade): virtualenv in /usr/local/lib/python2.7/dist-packages\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	700
Using @property versus getters and setters	<p><em>Prefer properties</em>. It's what they're there for.</p>\n\n<p>The reason is that all attributes are public in Python. Starting names with an underscore or two is just a warning that the given attribute is an implementation detail that may not stay the same in future versions of the code. It doesn't prevent you from actually getting or setting that attribute. Therefore, standard attribute access is the normal, Pythonic way of, well, accessing attributes.</p>\n\n<p>The advantage of properties is that they are syntactically identical to attribute access, so you can change from one to another without any changes to client code. You could even have one version of a class that uses properties (say, for code-by-contract or debugging) and one that doesn't for production, without changing the code that uses it. At the same time, you don't have to write getters and setters for everything just in case you might need to better control access later.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	701
Directory-tree listing in Python	<p>This is a way to traverse every file and directory in a directory tree:</p>\n\n<pre><code>import os\n\nfor dirname, dirnames, filenames in os.walk('.'):\n\n # print path to all subdirectories first.\n\n for subdirname in dirnames:\n\n print(os.path.join(dirname, subdirname))\n\n # print path to all filenames.\n\n for filename in filenames:\n\n print(os.path.join(dirname, filename))\n\n # Advanced usage:\n\n # editing the 'dirnames' list will stop os.walk() from recursing into there.\n\n if '.git' in dirnames:\n\n # don't go into any .git directories.\n\n dirnames.remove('.git')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	702
Which exception should I raise on bad/illegal argument combinations in Python?	<p>I would just raise <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow noreferrer">ValueError</a>, unless you need a more specific exception..</p>\n\n<pre><code>def import_to_orm(name, save=False, recurse=False):\n\n if recurse and not save:\n\n raise ValueError("save must be True if recurse is True")\n\n</code></pre>\n\n<p>There's really no point in doing <code>class BadValueError(ValueError):pass</code> - your custom class is identical in use to <a href="https://docs.python.org/3/library/exceptions.html#ValueError" rel="nofollow noreferrer">ValueError</a>, so why not use that?</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	703
How can I get a list of locally installed Python modules?	<h2>Solution</h2>\n\n<h1>Do not use with pip > 10.0!</h1>\n\n<p>My 50 cents for getting a <code>pip freeze</code>-like list from a Python script:</p>\n\n<pre class="lang-python prettyprint-override"><code>import pip\n\ninstalled_packages = pip.get_installed_distributions()\n\ninstalled_packages_list = sorted(["%s==%s" % (i.key, i.version)\n\n for i in installed_packages])\n\nprint(installed_packages_list)\n\n</code></pre>\n\n<p>As a (too long) one liner:</p>\n\n<pre class="lang-python prettyprint-override"><code>sorted(["%s==%s" % (i.key, i.version) for i in pip.get_installed_distributions()])\n\n</code></pre>\n\n<p>Giving:</p>\n\n<pre class="lang-js prettyprint-override"><code>['behave==1.2.4', 'enum34==1.0', 'flask==0.10.1', 'itsdangerous==0.24', \n\n 'jinja2==2.7.2', 'jsonschema==2.3.0', 'markupsafe==0.23', 'nose==1.3.3', \n\n 'parse-type==0.3.4', 'parse==1.6.4', 'prettytable==0.7.2', 'requests==2.3.0',\n\n 'six==1.6.1', 'vioozer-metadata==0.1', 'vioozer-users-server==0.1', \n\n 'werkzeug==0.9.4']\n\n</code></pre>\n\n<h2>Scope</h2>\n\n<p>This solution applies to the system scope or to a virtual environment scope, and covers packages installed by <code>setuptools</code>, <code>pip</code> and (<a href="https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install">god forbid</a>) <code>easy_install</code>.</p>\n\n<h2>My use case</h2>\n\n<p>I added the result of this call to my flask server, so when I call it with <code>http://example.com/exampleServer/environment</code> I get the list of packages installed on the server's virtualenv. It makes debugging a whole lot easier.</p>\n\n<h2>Caveats</h2>\n\n<p>I have noticed a strange behaviour of this technique - when the Python interpreter is invoked in the same directory as a <code>setup.py</code> file, it does not list the package installed by <code>setup.py</code>.</p>\n\n<h3>Steps to reproduce:</h3>\n\nCreate a virtual environment\n\n<pre><code>$ cd /tmp\n\n$ virtualenv test_env\n\nNew python executable in test_env/bin/python\n\nInstalling setuptools, pip...done.\n\n$ source test_env/bin/activate\n\n(test_env) $ \n\n</code></pre>\n\nClone a git repo with <code>setup.py</code>\n\n<pre><code>(test_env) $ git clone https://github.com/behave/behave.git\n\nCloning into 'behave'...\n\nremote: Reusing existing pack: 4350, done.\n\nremote: Total 4350 (delta 0), reused 0 (delta 0)\n\nReceiving objects: 100% (4350/4350), 1.85 MiB | 418.00 KiB/s, done.\n\nResolving deltas: 100% (2388/2388), done.\n\nChecking connectivity... done.\n\n</code></pre>\n\n<p>We have behave's <code>setup.py</code> in <code>/tmp/behave</code>:</p>\n\n<pre><code>(test_env) $ ls /tmp/behave/setup.py\n\n/tmp/behave/setup.py\n\n</code></pre>\n\nInstall the python package from the git repo\n\n<pre><code>(test_env) $ cd /tmp/behave && pip install . \n\nrunning install\n\n...\n\nInstalled /private/tmp/test_env/lib/python2.7/site-packages/enum34-1.0-py2.7.egg\n\nFinished processing dependencies for behave==1.2.5a1\n\n</code></pre>\n\n<h3>If we run the aforementioned solution from <code>/tmp</code></h3>\n\n<pre><code>>>> import pip\n\n>>> sorted(["%s==%s" % (i.key, i.version) for i in pip.get_installed_distributions()])\n\n['behave==1.2.5a1', 'enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\n\n>>> import os\n\n>>> os.getcwd()\n\n'/private/tmp'\n\n</code></pre>\n\n<h3>If we run the aforementioned solution from <code>/tmp/behave</code></h3>\n\n<pre><code>>>> import pip\n\n>>> sorted(["%s==%s" % (i.key, i.version) for i in pip.get_installed_distributions()])\n\n['enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\n\n>>> import os\n\n>>> os.getcwd()\n\n'/private/tmp/behave'\n\n</code></pre>\n\n<p><code>behave==1.2.5a1</code> is missing from the second example, because the working directory contains <code>behave</code>'s <code>setup.py</code> file.</p>\n\n<p>I could not find any reference to this issue in the documentation. Perhaps I shall open a bug for it.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	704
String comparison in Python: is vs. ==	<blockquote>\n\n <p>For all built-in Python objects (like\n\n strings, lists, dicts, functions,\n\n etc.), if x is y, then x==y is also\n\n True.</p>\n\n</blockquote>\n\n<p>Not always. NaN is a counterexample. But <em>usually</em>, identity (<code>is</code>) implies equality (<code>==</code>). The converse is not true: Two distinct objects can have the same value.</p>\n\n<blockquote>\n\n <p>Also, is it generally considered better to just use '==' by default, even\n\n when comparing int or Boolean values?</p>\n\n</blockquote>\n\n<p>You use <code>==</code> when comparing values and <code>is</code> when comparing identities.</p>\n\n<p>When comparing ints (or immutable types in general), you pretty much always want the former. There's an optimization that allows small integers to be compared with <code>is</code>, but don't rely on it.</p>\n\n<p>For boolean values, you shouldn't be doing comparisons at all. Instead of:</p>\n\n<pre><code>if x == True:\n\n # do something\n\n</code></pre>\n\n<p>write:</p>\n\n<pre><code>if x:\n\n # do something\n\n</code></pre>\n\n<p>For comparing against <code>None</code>, <code>is None</code> is preferred over <code>== None</code>.</p>\n\n<blockquote>\n\n <p>I've always liked to use 'is' because\n\n I find it more aesthetically pleasing\n\n and pythonic (which is how I fell into\n\n this trap...), but I wonder if it's\n\n intended to just be reserved for when\n\n you care about finding two objects\n\n with the same id.</p>\n\n</blockquote>\n\n<p>Yes, that's exactly what it's for.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	705
What is the difference between 'SAME' and 'VALID' padding in tf.nn.max_pool of tensorflow?	<p>If you like ascii art:</p>\n\n<ul>\n\n<li><p><code>"VALID"</code> = without padding:</p>\n\n<pre><code> inputs: 1 2 3 4 5 6 7 8 9 10 11 (12 13)\n\n |________________| dropped\n\n |_________________|\n\n</code></pre></li>\n\n<li><p><code>"SAME"</code> = with zero padding:</p>\n\n<pre><code> pad| |pad\n\n inputs: 0 |1 2 3 4 5 6 7 8 9 10 11 12 13|0 0\n\n |________________|\n\n |_________________|\n\n |________________|\n\n</code></pre></li>\n\n</ul>\n\n<p>In this example:</p>\n\n<ul>\n\n<li>Input width = 13</li>\n\n<li>Filter width = 6</li>\n\n<li>Stride = 5</li>\n\n</ul>\n\n<p>Notes:</p>\n\n<ul>\n\n<li><code>"VALID"</code> only ever drops the right-most columns (or bottom-most rows).</li>\n\n<li><code>"SAME"</code> tries to pad evenly left and right, but if the amount of columns to be added is odd, it will add the extra column to the right, as is the case in this example (the same logic applies vertically: there may be an extra row of zeros at the bottom).</li>\n\n</ul>\n\n<p><strong>Edit</strong>:</p>\n\n<p>About the name:</p>\n\n<ul>\n\n<li>With <code>"SAME"</code> padding, if you use a stride of 1, the layer's outputs will have the <strong>same</strong> spatial dimensions as its inputs.</li>\n\n<li>With <code>"VALID"</code> padding, there's no "made-up" padding inputs. The layer only uses <strong>valid</strong> input data.</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	706
How do I append one string to another in Python?	<p>If you only have one reference to a string and you concatenate another string to the end, CPython now special cases this and tries to extend the string in place.</p>\n\n<p>The end result is that the operation is amortized O(n).</p>\n\n<p>e.g.</p>\n\n<pre><code>s = ""\n\nfor i in range(n):\n\n s+=str(i)\n\n</code></pre>\n\n<p>used to be O(n^2), but now it is O(n).</p>\n\n<p>From the source (bytesobject.c):</p>\n\n<pre class="lang-c prettyprint-override"><code>void\n\nPyBytes_ConcatAndDel(register PyObject **pv, register PyObject *w)\n\n{\n\n PyBytes_Concat(pv, w);\n\n Py_XDECREF(w);\n\n}\n\n/* The following function breaks the notion that strings are immutable:\n\n it changes the size of a string. We get away with this only if there\n\n is only one module referencing the object. You can also think of it\n\n as creating a new string object and destroying the old one, only\n\n more efficiently. In any case, don't use this if the string may\n\n already be known to some other part of the code...\n\n Note that if there's not enough memory to resize the string, the original\n\n string object at *pv is deallocated, *pv is set to NULL, an "out of\n\n memory" exception is set, and -1 is returned. Else (on success) 0 is\n\n returned, and the value in *pv may or may not be the same as on input.\n\n As always, an extra byte is allocated for a trailing \0 byte (newsize\n\n does *not* include that), and a trailing \0 byte is stored.\n\n*/\n\nint\n\n_PyBytes_Resize(PyObject **pv, Py_ssize_t newsize)\n\n{\n\n register PyObject *v;\n\n register PyBytesObject *sv;\n\n v = *pv;\n\n if (!PyBytes_Check(v) || Py_REFCNT(v) != 1 || newsize < 0) {\n\n *pv = 0;\n\n Py_DECREF(v);\n\n PyErr_BadInternalCall();\n\n return -1;\n\n }\n\n /* XXX UNREF/NEWREF interface should be more symmetrical */\n\n _Py_DEC_REFTOTAL;\n\n _Py_ForgetReference(v);\n\n *pv = (PyObject *)\n\n PyObject_REALLOC((char *)v, PyBytesObject_SIZE + newsize);\n\n if (*pv == NULL) {\n\n PyObject_Del(v);\n\n PyErr_NoMemory();\n\n return -1;\n\n }\n\n _Py_NewReference(*pv);\n\n sv = (PyBytesObject *) *pv;\n\n Py_SIZE(sv) = newsize;\n\n sv->ob_sval[newsize] = '\0';\n\n sv->ob_shash = -1; /* invalidate cached hash value */\n\n return 0;\n\n}\n\n</code></pre>\n\n<p>It's easy enough to verify empirically.</p>\n\n<pre>\n\n$ python -m timeit -s"s=''" "for i in xrange(10):s+='a'"\n\n1000000 loops, best of 3: 1.85 usec per loop\n\n$ python -m timeit -s"s=''" "for i in xrange(100):s+='a'"\n\n10000 loops, best of 3: 16.8 usec per loop\n\n$ python -m timeit -s"s=''" "for i in xrange(1000):s+='a'"\n\n10000 loops, best of 3: 158 usec per loop\n\n$ python -m timeit -s"s=''" "for i in xrange(10000):s+='a'"\n\n1000 loops, best of 3: 1.71 msec per loop\n\n$ python -m timeit -s"s=''" "for i in xrange(100000):s+='a'"\n\n10 loops, best of 3: 14.6 msec per loop\n\n$ python -m timeit -s"s=''" "for i in xrange(1000000):s+='a'"\n\n10 loops, best of 3: 173 msec per loop\n\n</pre>\n\n<p><strong>It's important</strong> however to note that this optimisation isn't part of the Python spec. It's only in the cPython implementation as far as I know. The same empirical testing on pypy or jython for example might show the older O(n**2) performance .</p>\n\n<pre>\n\n$ pypy -m timeit -s"s=''" "for i in xrange(10):s+='a'"\n\n10000 loops, best of 3: 90.8 usec per loop\n\n$ pypy -m timeit -s"s=''" "for i in xrange(100):s+='a'"\n\n1000 loops, best of 3: 896 usec per loop\n\n$ pypy -m timeit -s"s=''" "for i in xrange(1000):s+='a'"\n\n100 loops, best of 3: 9.03 msec per loop\n\n$ pypy -m timeit -s"s=''" "for i in xrange(10000):s+='a'"\n\n10 loops, best of 3: 89.5 msec per loop\n\n</pre>\n\n<p>So far so good, but then,</p>\n\n<pre>\n\n$ pypy -m timeit -s"s=''" "for i in xrange(100000):s+='a'"\n\n10 loops, best of 3: 12.8 sec per loop\n\n</pre>\n\n<p>ouch even worse than quadratic. So pypy is doing something that works well with short strings, but performs poorly for larger strings.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	707
Getting a list of all subdirectories in the current directory	<p>Do you mean immediate subdirectories, or every directory right down the tree? </p>\n\n<p>Either way, you could use <a href="http://docs.python.org/library/os.html#os.walk" rel="noreferrer"><code>os.walk</code></a> to do this:</p>\n\n<pre><code>os.walk(directory)\n\n</code></pre>\n\n<p>will yield a tuple for each subdirectory. Ths first entry in the 3-tuple is a directory name, so</p>\n\n<pre><code>[x[0] for x in os.walk(directory)]\n\n</code></pre>\n\n<p>should give you all of the subdirectories, recursively.</p>\n\n<p>Note that the second entry in the tuple is the list of child directories of the entry in the first position, so you could use this instead, but it's not likely to save you much.</p>\n\n<p>However, you could use it just to give you the immediate child directories:</p>\n\n<pre><code>next(os.walk('.'))[1]\n\n</code></pre>\n\n<p>Or see the other solutions already posted, using <a href="http://docs.python.org/library/os.html#os.listdir" rel="noreferrer"><code>os.listdir</code></a> and <a href="http://docs.python.org/library/os.path.html#os.path.isdir" rel="noreferrer"><code>os.path.isdir</code></a>, including those at "<a href="https://stackoverflow.com/questions/800197/get-all-of-the-immediate-subdirectories-in-python">How to get all of the immediate subdirectories in Python</a>".</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	708
How to clone or copy a list?	<p>Felix already provided an excellent answer, but I thought I'd do a speed comparison of the various methods:</p>\n\n<ol>\n\n<li>10.59 sec (105.9us/itn) - <a href="http://docs.python.org/library/copy.html#copy.deepcopy" rel="noreferrer"><code>copy.deepcopy(old_list)</code></a></li>\n\n<li>10.16 sec (101.6us/itn) - pure python <code>Copy()</code> method copying classes with deepcopy</li>\n\n<li>1.488 sec (14.88us/itn) - pure python <code>Copy()</code> method not copying classes (only dicts/lists/tuples)</li>\n\n<li>0.325 sec (3.25us/itn) - <code>for item in old_list: new_list.append(item)</code></li>\n\n<li>0.217 sec (2.17us/itn) - <code>[i for i in old_list]</code> (a <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a>)</li>\n\n<li>0.186 sec (1.86us/itn) - <a href="http://docs.python.org/library/copy.html#copy.copy" rel="noreferrer"><code>copy.copy(old_list)</code></a></li>\n\n<li>0.075 sec (0.75us/itn) - <code>list(old_list)</code></li>\n\n<li>0.053 sec (0.53us/itn) - <code>new_list = []; new_list.extend(old_list)</code></li>\n\n<li>0.039 sec (0.39us/itn) - <code>old_list[:]</code> (<a href="http://docs.python.org/tutorial/introduction.html#lists" rel="noreferrer">list slicing</a>)</li>\n\n</ol>\n\n<p>So the fastest is list slicing. But be aware that <code>copy.copy()</code>, <code>list[:]</code> and <code>list(list)</code>, unlike <code>copy.deepcopy()</code> and the python version don't copy any lists, dictionaries and class instances in the list, so if the originals change, they will change in the copied list too and vice versa.</p>\n\n<p>(Here's the script if anyone's interested or wants to raise any issues:)</p>\n\n<pre><code>from copy import deepcopy\n\nclass old_class:\n\n def __init__(self):\n\n self.blah = 'blah'\n\nclass new_class(object):\n\n def __init__(self):\n\n self.blah = 'blah'\n\ndignore = {str: None, unicode: None, int: None, type(None): None}\n\ndef Copy(obj, use_deepcopy=True):\n\n t = type(obj)\n\n if t in (list, tuple):\n\n if t == tuple:\n\n # Convert to a list if a tuple to \n\n # allow assigning to when copying\n\n is_tuple = True\n\n obj = list(obj)\n\n else: \n\n # Otherwise just do a quick slice copy\n\n obj = obj[:]\n\n is_tuple = False\n\n # Copy each item recursively\n\n for x in xrange(len(obj)):\n\n if type(obj[x]) in dignore:\n\n continue\n\n obj[x] = Copy(obj[x], use_deepcopy)\n\n if is_tuple: \n\n # Convert back into a tuple again\n\n obj = tuple(obj)\n\n elif t == dict: \n\n # Use the fast shallow dict copy() method and copy any \n\n # values which aren't immutable (like lists, dicts etc)\n\n obj = obj.copy()\n\n for k in obj:\n\n if type(obj[k]) in dignore:\n\n continue\n\n obj[k] = Copy(obj[k], use_deepcopy)\n\n elif t in dignore: \n\n # Numeric or string/unicode? \n\n # It's immutable, so ignore it!\n\n pass \n\n elif use_deepcopy: \n\n obj = deepcopy(obj)\n\n return obj\n\nif __name__ == '__main__':\n\n import copy\n\n from time import time\n\n num_times = 100000\n\n L = [None, 'blah', 1, 543.4532, \n\n ['foo'], ('bar',), {'blah': 'blah'},\n\n old_class(), new_class()]\n\n t = time()\n\n for i in xrange(num_times):\n\n Copy(L)\n\n print 'Custom Copy:', time()-t\n\n t = time()\n\n for i in xrange(num_times):\n\n Copy(L, use_deepcopy=False)\n\n print 'Custom Copy Only Copying Lists/Tuples/Dicts (no classes):', time()-t\n\n t = time()\n\n for i in xrange(num_times):\n\n copy.copy(L)\n\n print 'copy.copy:', time()-t\n\n t = time()\n\n for i in xrange(num_times):\n\n copy.deepcopy(L)\n\n print 'copy.deepcopy:', time()-t\n\n t = time()\n\n for i in xrange(num_times):\n\n L[:]\n\n print 'list slicing [:]:', time()-t\n\n t = time()\n\n for i in xrange(num_times):\n\n list(L)\n\n print 'list(L):', time()-t\n\n t = time()\n\n for i in xrange(num_times):\n\n [i for i in L]\n\n print 'list expression(L):', time()-t\n\n t = time()\n\n for i in xrange(num_times):\n\n a = []\n\n a.extend(L)\n\n print 'list extend:', time()-t\n\n t = time()\n\n for i in xrange(num_times):\n\n a = []\n\n for y in L:\n\n a.append(y)\n\n print 'list append:', time()-t\n\n t = time()\n\n for i in xrange(num_times):\n\n a = []\n\n a.extend(i for i in L)\n\n print 'generator expression extend:', time()-t\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	709
Find full path of the Python interpreter?	<p><code>sys.executable</code> contains full path of the currently running Python interpreter.</p>\n\n<pre><code>import sys\n\nprint(sys.executable)\n\n</code></pre>\n\n<p>which is now <a href="http://docs.python.org/library/sys.html" rel="noreferrer">documented here</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	710
Can I get JSON to load into an OrderedDict?	<p>Yes, you can. By specifying the <code>object_pairs_hook</code> argument to <a href="http://docs.python.org/library/json.html#encoders-and-decoders" rel="noreferrer">JSONDecoder</a>. In fact, this is the exact example given in the documentation.</p>\n\n<pre><code>>>> json.JSONDecoder(object_pairs_hook=collections.OrderedDict).decode('{"foo":1, "bar": 2}')\n\nOrderedDict([('foo', 1), ('bar', 2)])\n\n>>> \n\n</code></pre>\n\n<p>You can pass this parameter to <code>json.loads</code> (if you don't need a Decoder instance for other purposes) like so:</p>\n\n<pre><code>>>> import json\n\n>>> from collections import OrderedDict\n\n>>> data = json.loads('{"foo":1, "bar": 2}', object_pairs_hook=OrderedDict)\n\n>>> print json.dumps(data, indent=4)\n\n{\n\n "foo": 1,\n\n "bar": 2\n\n}\n\n>>> \n\n</code></pre>\n\n<p>Using <code>json.load</code> is done in the same way:</p>\n\n<pre><code>>>> data = json.load(open('config.json'), object_pairs_hook=OrderedDict)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	711
Find index of last occurrence of a substring in a string	<p>Use <a href="http://docs.python.org/py3k/library/stdtypes.html#str.rfind"><code>.rfind()</code></a>:</p>\n\n<pre><code>>>> s = 'hello'\n\n>>> s.rfind('l')\n\n3\n\n</code></pre>\n\n<p>Also don't use <code>str</code> as variable name or you'll shadow the built-in <a href="http://docs.python.org/py3k/library/functions.html#str"><code>str()</code></a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	712
Get key by value in dictionary	<pre><code>mydict = {'george': 16, 'amber': 19}\n\nprint mydict.keys()[mydict.values().index(16)] # Prints george\n\n</code></pre>\n\n<p>Or in Python 3.x:</p>\n\n<pre><code>mydict = {'george': 16, 'amber': 19}\n\nprint(list(mydict.keys())[list(mydict.values()).index(16)]) # Prints george\n\n</code></pre>\n\n<p>Basically, it separates the dictionary's values in a list, finds the position of the value you have, and gets the key at that position.</p>\n\n<p>More about <code>keys()</code> and <code>.values()</code> in Python 3: <a href="https://stackoverflow.com/questions/16228248/python-simplest-way-to-get-list-of-values-from-dict">How can I get list of values from dict?</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	713
Set value for particular cell in pandas DataFrame using index	<p><a href="https://stackoverflow.com/a/24517695/190597">RukTech's answer</a>, <code>df.set_value('C', 'x', 10)</code>, is far and away faster than the options I've suggested below. However, it has been <a href="https://github.com/pandas-dev/pandas/issues/15269" rel="noreferrer"><strong>slated for deprecation</strong></a>.</p>\n\n<p>Going forward, the <a href="https://github.com/pandas-dev/pandas/issues/15269#issuecomment-276382712" rel="noreferrer">recommended method is <code>.iat/.at</code></a>.</p>\n\n<hr>\n\n<p><strong>Why <code>df.xs('C')['x']=10</code> does not work:</strong></p>\n\n<p><code>df.xs('C')</code> by default, returns a new dataframe <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.xs.html#pandas.DataFrame.xsY" rel="noreferrer">with a copy</a> of the data, so </p>\n\n<pre><code>df.xs('C')['x']=10\n\n</code></pre>\n\n<p>modifies this new dataframe only.</p>\n\n<p><code>df['x']</code> returns a view of the <code>df</code> dataframe, so </p>\n\n<pre><code>df['x']['C'] = 10\n\n</code></pre>\n\n<p>modifies <code>df</code> itself.</p>\n\n<p><strong>Warning</strong>: It is sometimes difficult to predict if an operation returns a copy or a view. For this reason the <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#returning-a-view-versus-a-copy" rel="noreferrer">docs recommend avoiding assignments with "chained indexing"</a>. </p>\n\n<hr>\n\n<p>So the recommended alternative is</p>\n\n<pre><code>df.at['C', 'x'] = 10\n\n</code></pre>\n\n<p>which <em>does</em> modify <code>df</code>.</p>\n\n<hr>\n\n<pre><code>In [18]: %timeit df.set_value('C', 'x', 10)\n\n100000 loops, best of 3: 2.9 Âµs per loop\n\nIn [20]: %timeit df['x']['C'] = 10\n\n100000 loops, best of 3: 6.31 Âµs per loop\n\nIn [81]: %timeit df.at['C', 'x'] = 10\n\n100000 loops, best of 3: 9.2 Âµs per loop\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	714
How can I safely create a nested directory?	<p>Using try except and the right error code from errno module gets rid of the race condition and is cross-platform:</p>\n\n<pre><code>import os\n\nimport errno\n\ndef make_sure_path_exists(path):\n\n try:\n\n os.makedirs(path)\n\n except OSError as exception:\n\n if exception.errno != errno.EEXIST:\n\n raise\n\n</code></pre>\n\n<p>In other words, we try to create the directories, but if they already exist we ignore the error. On the other hand, any other error gets reported. For example, if you create dir 'a' beforehand and remove all permissions from it, you will get an <code>OSError</code> raised with <code>errno.EACCES</code> (Permission denied, error 13).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	715
Importing modules from parent folder	<p>You could use relative imports (python >= 2.5):</p>\n\n<pre><code>from ... import nib\n\n</code></pre>\n\n<p><a href="http://docs.python.org/2/whatsnew/2.5.html#pep-328-absolute-and-relative-imports" rel="noreferrer">(Whatâs New in Python 2.5) PEP 328: Absolute and Relative Imports</a></p>\n\n<p><strong>EDIT</strong>: added another dot '.' to go up two packages</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	716
How to make an unaware datetime timezone aware in python	<p>In general, to make a naive datetime timezone-aware, use the <a href="http://pytz.sourceforge.net/#localized-times-and-date-arithmetic" rel="noreferrer">localize method</a>:</p>\n\n<pre><code>import datetime\n\nimport pytz\n\nunaware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0)\n\naware = datetime.datetime(2011, 8, 15, 8, 15, 12, 0, pytz.UTC)\n\nnow_aware = pytz.utc.localize(unaware)\n\nassert aware == now_aware\n\n</code></pre>\n\n<p>For the UTC timezone, it is not really necessary to use <code>localize</code> since there is no daylight savings time calculation to handle:</p>\n\n<pre><code>now_aware = unaware.replace(tzinfo=pytz.UTC)\n\n</code></pre>\n\n<p>works. (<code>.replace</code> returns a new datetime; it does not modify <code>unaware</code>.)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	717
How do I get indices of N maximum values in a NumPy array?	<p>Newer NumPy versions (1.8 and up) have a function called <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.argpartition.html" rel="noreferrer"><code>argpartition</code></a> for this. To get the indices of the four largest elements, do</p>\n\n<pre><code>>>> a = np.array([9, 4, 4, 3, 3, 9, 0, 4, 6, 0])\n\n>>> a\n\narray([9, 4, 4, 3, 3, 9, 0, 4, 6, 0])\n\n>>> ind = np.argpartition(a, -4)[-4:]\n\n>>> ind\n\narray([1, 5, 8, 0])\n\n>>> a[ind]\n\narray([4, 9, 6, 9])\n\n</code></pre>\n\n<p>Unlike <code>argsort</code>, this function runs in linear time in the worst case, but the returned indices are not sorted, as can be seen from the result of evaluating <code>a[ind]</code>. If you need that too, sort them afterwards:</p>\n\n<pre><code>>>> ind[np.argsort(a[ind])]\n\narray([1, 8, 5, 0])\n\n</code></pre>\n\n<p>To get the top-<em>k</em> elements in sorted order in this way takes O(<em>n</em> + <em>k</em> log <em>k</em>) time.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	718
In Python, when to use a Dictionary, List or Set?	<p>A <code>list</code> keeps order, <code>dict</code> and <code>set</code> don't: when you care about order, therefore, you must use <code>list</code> (if your choice of containers is limited to these three, of course;-).</p>\n\n<p><code>dict</code> associates with each key a value, while <code>list</code> and <code>set</code> just contain values: very different use cases, obviously.</p>\n\n<p><code>set</code> requires items to be hashable, <code>list</code> doesn't: if you have non-hashable items, therefore, you cannot use <code>set</code> and must instead use <code>list</code>.</p>\n\n<p><code>set</code> forbids duplicates, <code>list</code> does not: also a crucial distinction. (A "multiset", which maps duplicates into a different count for items present more than once, can be found in <code>collections.Counter</code> -- you could build one as a <code>dict</code>, if for some weird reason you couldn't import <code>collections</code>, or, in pre-2.7 Python as a <code>collections.defaultdict(int)</code>, using the items as keys and the associated value as the count).</p>\n\n<p>Checking for membership of a value in a <code>set</code> (or <code>dict</code>, for keys) is blazingly fast (taking about a constant, short time), while in a list it takes time proportional to the list's length in the average and worst cases. So, if you have hashable items, don't care either way about order or duplicates, and want speedy membership checking, <code>set</code> is better than <code>list</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	719
How do I find out my python path using python?	<p>You would probably also want this:</p>\n\n<pre><code>import sys\n\nprint(sys.path)\n\n</code></pre>\n\n<p>Or as a one liner from the terminal:</p>\n\n<pre><code>python -c "import sys; print(' '.join(sys.path))"\n\n</code></pre>\n\n<hr>\n\n<p><strong>Caveat</strong>: If you have multiple versions of Python installed you should use a corresponding command <code>python2</code> or <code>python3</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	720
Why is __init__() always called after __new__()?	<blockquote>\n\n <p>Use <strong><code>__new__</code></strong> when you need to control\n\n the creation of a new instance. </p>\n\n <p>Use\n\n <strong><code>__init__</code></strong> when you need to control initialization of a new instance.</p>\n\n <p><strong><code>__new__</code></strong> is the first step of instance creation. It's called first, and is\n\n responsible for returning a new\n\n instance of your class. </p>\n\n <p>In contrast,\n\n <strong><code>__init__</code></strong> doesn't return anything; it's only responsible for initializing the\n\n instance after it's been created.</p>\n\n <p>In general, you shouldn't need to\n\n override <strong><code>__new__</code></strong> unless you're\n\n subclassing an immutable type like\n\n str, int, unicode or tuple.</p>\n\n</blockquote>\n\n<p>From April 2008 post: <a href="http://mail.python.org/pipermail/tutor/2008-April/061426.html" rel="noreferrer">When to use <code>__new__</code> vs. <code>__init__</code>?</a> on mail.python.org.</p>\n\n<p>You should consider that what you are trying to do is usually done with a <a href="http://en.wikipedia.org/wiki/Factory_object" rel="noreferrer">Factory</a> and that's the best way to do it. Using <strong><code>__new__</code></strong> is not a good clean solution so please consider the usage of a factory. Here you have <a href="http://code.activestate.com/recipes/86900/" rel="noreferrer">a good factory example</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	721
How do I do a case-insensitive string comparison?	<p>Assuming ASCII strings:</p>\n\n<pre><code>string1 = 'Hello'\n\nstring2 = 'hello'\n\nif string1.lower() == string2.lower():\n\n print("The strings are the same (case insensitive)")\n\nelse:\n\n print("The strings are NOT the same (case insensitive)")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	722
What does "SyntaxError: Missing parentheses in call to 'print'" mean in Python?	<p>This error message means that you are attempting to use Python 3 to follow an example or run a program that uses the Python 2 <code>print</code> statement:</p>\n\n<p><s></p>\n\n<pre><code>print "Hello, World!"\n\n</code></pre>\n\n<p></s></p>\n\n<p>The statement above does not work in Python 3. In Python 3 you need to add parentheses around the value to be printed:</p>\n\n<pre><code>print("Hello, World!")\n\n</code></pre>\n\n<hr>\n\n<p><em>âSyntaxError: Missing parentheses in call to 'print'â</em> is a new error message that was added in Python 3.4.2 primarily to help users that are trying to follow a Python 2 tutorial while running Python 3.</p>\n\n<p>In Python 3, printing values changed from being a distinct statement to being an ordinary function call, so it now needs parentheses:</p>\n\n<pre><code>>>> print("Hello, World!")\n\nHello, World!\n\n</code></pre>\n\n<p>In earlier versions of Python 3, the interpreter just reports a generic syntax error, without providing any useful hints as to what might be going wrong:</p>\n\n<pre><code>>>> print "Hello, World!"\n\n File "<stdin>", line 1\n\n print "Hello, World!"\n\n ^\n\nSyntaxError: invalid syntax\n\n</code></pre>\n\n<p>As for <em>why</em> <code>print</code> became an ordinary function in Python 3, that didn't relate to the basic form of the statement, but rather to how you did more complicated things like printing multiple items to stderr with a trailing space rather than ending the line.</p>\n\n<p>In Python 2:</p>\n\n<pre><code>>>> import sys\n\n>>> print >> sys.stderr, 1, 2, 3,; print >> sys.stderr, 4, 5, 6\n\n1 2 3 4 5 6\n\n</code></pre>\n\n<p>In Python 3:</p>\n\n<pre><code>>>> import sys\n\n>>> print(1, 2, 3, file=sys.stderr, end=" "); print(4, 5, 6, file=sys.stderr)\n\n1 2 3 4 5 6\n\n</code></pre>\n\n<hr>\n\n<p>Starting with the Python 3.6.3 release in September 2017, some error messages related to the Python 2.x print syntax have been updated to recommend their Python 3.x counterparts:</p>\n\n<pre><code>>>> print "Hello!"\n\n File "<stdin>", line 1\n\n print "Hello!"\n\n ^\n\nSyntaxError: Missing parentheses in call to 'print'. Did you mean print("Hello!")?\n\n</code></pre>\n\n<p>Since the "Missing parentheses in call to print" case is a compile time syntax error and hence has access to the raw source code, it's able to include the full text on the rest of the line in the suggested replacement. However, it doesn't currently try to work out the appropriate quotes to place around that expression (that's not impossible, just sufficiently complicated that it hasn't been done).</p>\n\n<p>The <code>TypeError</code> raised for the right shift operator has also been customised:</p>\n\n<pre><code>>>> print >> sys.stderr\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: unsupported operand type(s) for >>: 'builtin_function_or_method' and '_io.TextIOWrapper'. Did you mean "print(<message>, file=<output_stream>)"?\n\n</code></pre>\n\n<p>Since this error is raised when the code runs, rather than when it is compiled, it doesn't have access to the raw source code, and hence uses meta-variables (<code><message></code> and <code><output_stream></code>) in the suggested replacement expression instead of whatever the user actually typed. Unlike the syntax error case, it's straightforward to place quotes around the Python expression in the custom right shift error message.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	723
"Unicode Error "unicodeescape" codec can't decode bytes... Cannot open text files in Python 3	<p>The problem is with the string</p>\n\n<pre><code>"C:\Users\Eric\Desktop\beeline.txt"\n\n</code></pre>\n\n<p>Here, <code>\U</code> in <code>"C:\Users</code>... starts an eight-character Unicode escape, such as <code>\U00014321</code>. In your code, the escape is followed by the character 's', which is invalid.</p>\n\n<p>You either need to duplicate all backslashes:</p>\n\n<pre><code>"C:\\Users\\Eric\\Desktop\\beeline.txt"\n\n</code></pre>\n\n<p>Or prefix the string with <code>r</code> (to produce a raw string):</p>\n\n<pre><code>r"C:\Users\Eric\Desktop\beeline.txt"\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	724
Is there a built-in function to print all the current properties and values of an object?	<p>You are really mixing together two different things.</p>\n\n<p>Use <a href="https://docs.python.org/3/library/functions.html#dir" rel="noreferrer"><code>dir()</code></a>, <a href="https://docs.python.org/3/library/functions.html#vars" rel="noreferrer"><code>vars()</code></a> or the <a href="https://docs.python.org/3/library/inspect.html" rel="noreferrer"><code>inspect</code></a> module to get what you are interested in (I use <code>__builtins__</code> as an example; you can use any object instead).</p>\n\n<pre><code>>>> l = dir(__builtins__)\n\n>>> d = __builtins__.__dict__\n\n</code></pre>\n\n<p>Print that dictionary however fancy you like:</p>\n\n<pre><code>>>> print l\n\n['ArithmeticError', 'AssertionError', 'AttributeError',...\n\n</code></pre>\n\n<p>or</p>\n\n<pre><code>>>> from pprint import pprint\n\n>>> pprint(l)\n\n['ArithmeticError',\n\n 'AssertionError',\n\n 'AttributeError',\n\n 'BaseException',\n\n 'DeprecationWarning',\n\n...\n\n>>> pprint(d, indent=2)\n\n{ 'ArithmeticError': <type 'exceptions.ArithmeticError'>,\n\n 'AssertionError': <type 'exceptions.AssertionError'>,\n\n 'AttributeError': <type 'exceptions.AttributeError'>,\n\n...\n\n '_': [ 'ArithmeticError',\n\n 'AssertionError',\n\n 'AttributeError',\n\n 'BaseException',\n\n 'DeprecationWarning',\n\n...\n\n</code></pre>\n\n<p>Pretty printing is also available in the interactive debugger as a command:</p>\n\n<pre><code>(Pdb) pp vars()\n\n{'__builtins__': {'ArithmeticError': <type 'exceptions.ArithmeticError'>,\n\n 'AssertionError': <type 'exceptions.AssertionError'>,\n\n 'AttributeError': <type 'exceptions.AttributeError'>,\n\n 'BaseException': <type 'exceptions.BaseException'>,\n\n 'BufferError': <type 'exceptions.BufferError'>,\n\n ...\n\n 'zip': <built-in function zip>},\n\n '__file__': 'pass.py',\n\n '__name__': '__main__'}\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	725
Get the key corresponding to the minimum value within a dictionary	<p>Best: <code>min(d, key=d.get)</code> -- no reason to interpose a useless <code>lambda</code> indirection layer or extract items or keys!</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	726
Access an arbitrary element in a dictionary in Python	<p>On Python 3, non-destructively and iteratively:</p>\n\n<pre><code>next(iter(mydict.values()))\n\n</code></pre>\n\n<p>On Python 2, non-destructively and iteratively:</p>\n\n<pre><code>mydict.itervalues().next()\n\n</code></pre>\n\n<p>If you want it to work in both Python 2 and 3, you can use the <code>six</code> package:</p>\n\n<pre><code>six.next(six.itervalues(mydict))\n\n</code></pre>\n\n<p>though at this point it is quite cryptic and I'd rather prefer your code.</p>\n\n<p>If you want to remove any item, do:</p>\n\n<pre><code>key, value = mydict.popitem()\n\n</code></pre>\n\n<p>Note that "first" may not be an appropriate term here because <code>dict</code> is not an ordered type in Python < 3.6. Python 3.6+ <code>dicts</code> are ordered.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	727
How can I get the named parameters from a URL using Flask?	<p>Use <a href="http://flask.pocoo.org/docs/api/#flask.Request.args" rel="noreferrer"><code>request.args</code></a> to get parsed contents of query string:</p>\n\n<pre><code>from flask import request\n\n@app.route(...)\n\ndef login():\n\n username = request.args.get('username')\n\n password = request.args.get('password')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	728
How does collections.defaultdict work?	<p>Usually, a Python dictionary throws a <code>KeyError</code> if you try to get an item with a key that is not currently in the dictionary. The <code>defaultdict</code> in contrast will simply create any items that you try to access (provided of course they do not exist yet). To create such a "default" item, it calls the function object that you pass to the constructor (more precisely, it's an arbitrary "callable" object, which includes function and type objects). For the first example, default items are created using <code>int()</code>, which will return the integer object <code>0</code>. For the second example, default items are created using <code>list()</code>, which returns a new empty list object.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	729
Django datetime issues (default=datetime.now())	<p>it looks like <code>datetime.now()</code> is being evaluated when the model is defined, and not each time you add a record.</p>\n\n<p>Django has a feature to accomplish what you are trying to do already:</p>\n\n<pre><code>date = models.DateTimeField(auto_now_add=True, blank=True)\n\n</code></pre>\n\n<p>or</p>\n\n<pre><code>date = models.DateTimeField(default=datetime.now, blank=True)\n\n</code></pre>\n\n<p>The difference between the second example and what you currently have is the lack of parentheses. By passing <code>datetime.now</code> without the parentheses, you are passing the actual function, which will be called each time a record is added. If you pass it <code>datetime.now()</code>, then you are just evaluating the function and passing it the return value.</p>\n\n<p>More information is available at Django's <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#datetimefield" rel="noreferrer">model field reference</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	730
Split by comma and strip whitespace in Python	<p>Use list comprehension -- simpler, and just as easy to read as a <code>for</code> loop.</p>\n\n<pre><code>my_string = "blah, lots , of , spaces, here "\n\nresult = [x.strip() for x in my_string.split(',')]\n\n# result is ["blah", "lots", "of", "spaces", "here"]\n\n</code></pre>\n\n<p><strong>See:</strong> <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">Python docs on List Comprehension</a><br>\n\n<a href="https://stackoverflow.com/questions/501308/problem-in-understanding-python-list-comprehensions/501323#501323">A good 2 second explanation of list comprehension.</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	731
Ignore python multiple return value	<p>You can use <code>x = func()[0]</code> to return the first value, <code>x = func()[1]</code> to return the second, and so on.</p>\n\n<p>If you want to get multiple values at a time, use something like <code>x, y = func()[2:4]</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	732
Why use pip over easy_install?	<p>From Ian Bicking's own <a href="https://pip.readthedocs.org/en/1.1/other-tools.html#pip-compared-to-easy-install" rel="noreferrer">introduction to pip</a>:</p>\n\n<blockquote>\n\n<p>pip was originally written to improve on easy_install in the following ways</p>\n\n<ul>\n\n<li>All packages are downloaded before installation. Partially-completed installation doesnât occur as a result.</li>\n\n<li>Care is taken to present useful output on the console.</li>\n\n<li>The reasons for actions are kept track of. For instance, if a package is being installed, pip keeps track of why that package was required.</li>\n\n<li>Error messages should be useful.</li>\n\n<li>The code is relatively concise and cohesive, making it easier to use programmatically.</li>\n\n<li>Packages donât have to be installed as egg archives, they can be installed flat (while keeping the egg metadata).</li>\n\n<li>Native support for other version control systems (Git, Mercurial and Bazaar)</li>\n\n<li>Uninstallation of packages.</li>\n\n<li>Simple to define fixed sets of requirements and reliably reproduce a set of packages.</li>\n\n</ul>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	733
Python: How to ignore an exception and proceed?	<pre><code>except:\n\n pass\n\n</code></pre>\n\n<p><a href="https://docs.python.org/3.7/tutorial/controlflow.html#pass-statements" rel="noreferrer">Python docs for the pass statement</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	734
How to check if a column exists in Pandas	<p>This will work:</p>\n\n<pre><code>if 'A' in df:\n\n</code></pre>\n\n<p>But for clarity, I'd probably write it as:</p>\n\n<pre><code>if 'A' in df.columns:\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	735
How to print the full traceback without halting the program?	<p>Some other answer have already pointed out the <a href="http://docs.python.org/3/library/traceback.html">traceback</a> module.</p>\n\n<p>Please notice that with <code>print_exc</code>, in some corner cases, you will not obtain what you would expect. In Python 2.x:</p>\n\n<pre><code>import traceback\n\ntry:\n\n raise TypeError("Oups!")\n\nexcept Exception, err:\n\n try:\n\n raise TypeError("Again !?!")\n\n except:\n\n pass\n\n traceback.print_exc()\n\n</code></pre>\n\n<p>...will display the traceback of the <em>last</em> exception:</p>\n\n<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):\n\n File "e.py", line 7, in <module>\n\n raise TypeError("Again !?!")\n\nTypeError: Again !?!\n\n</code></pre>\n\n<p><strong>If you really need to access the original <em>traceback</em></strong> one solution is to cache the <em>exception infos</em> as returned from <a href="https://docs.python.org/2/library/sys.html#sys.exc_info"><code>exc_info</code></a> in a local variable and display it using <a href="https://docs.python.org/2/library/traceback.html#traceback.print_exception"><code>print_exception</code></a>:</p>\n\n<pre><code>import traceback\n\nimport sys\n\ntry:\n\n raise TypeError("Oups!")\n\nexcept Exception, err:\n\n try:\n\n exc_info = sys.exc_info()\n\n # do you usefull stuff here\n\n # (potentially raising an exception)\n\n try:\n\n raise TypeError("Again !?!")\n\n except:\n\n pass\n\n # end of useful stuff\n\n finally:\n\n # Display the *original* exception\n\n traceback.print_exception(*exc_info)\n\n del exc_info\n\n</code></pre>\n\n<p>Producing:</p>\n\n<pre class="lang-none prettyprint-override"><code>Traceback (most recent call last):\n\n File "t.py", line 6, in <module>\n\n raise TypeError("Oups!")\n\nTypeError: Oups!\n\n</code></pre>\n\n<p>Few pitfalls with this though:</p>\n\n<ul>\n\n<li><p>From the doc of <a href="https://docs.python.org/2/library/sys.html#sys.exc_info"><code>sys_info</code></a>:</p>\n\n<blockquote>\n\n <p>Assigning the traceback return value to a local variable in a function that is handling an exception will cause a <strong>circular reference</strong>. This will prevent anything referenced by a local variable in the same function or by the traceback from being garbage collected. [...] <strong>If you do need the traceback, make sure to delete it after use</strong> (best done with a try ... finally statement)</p>\n\n</blockquote></li>\n\n<li><p>but, from the same doc:</p>\n\n<blockquote>\n\n <p><strong>Beginning with Python 2.2, such cycles are automatically reclaimed</strong> when garbage collection is enabled and they become unreachable, but it remains more efficient to avoid creating cycles.</p>\n\n</blockquote></li>\n\n</ul>\n\n<hr>\n\n<p>On the other hand, by allowing you to access the traceback <em>associated with</em> an exception, Python 3 produce a less surprising result:</p>\n\n<pre><code>import traceback\n\ntry:\n\n raise TypeError("Oups!")\n\nexcept Exception as err:\n\n try:\n\n raise TypeError("Again !?!")\n\n except:\n\n pass\n\n traceback.print_tb(err.__traceback__)\n\n</code></pre>\n\n<p>... will display:</p>\n\n<pre class="lang-none prettyprint-override"><code> File "e3.py", line 4, in <module>\n\n raise TypeError("Oups!")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	736
How do I install pip on macOS or OS X?	<blockquote>\n\n <p>â¡ï¸ <strong>TL;DR</strong> â One line solution.</p>\n\n</blockquote>\n\n<p>All you have to do is:</p>\n\n<pre><code>sudo easy_install pip\n\n</code></pre>\n\n<blockquote>\n\n <p><strong>2019</strong>: â ï¸<code>easy_install</code> has been <a href="https://setuptools.readthedocs.io/en/latest/easy_install.html" rel="noreferrer">deprecated</a>. Check <strong>Method #2</strong> below for preferred installation!</p>\n\n</blockquote>\n\n<p><em>I made a gif, coz. why not?</em></p>\n\n<p><a href="https://ahmadawais.com/install-pip-macos-os-x-python/" rel="noreferrer"><img src="https://on.ahmda.ws/rsgI/c" alt="Install PIP on Mac"></a></p>\n\n<p><strong>Details:</strong></p>\n\n<blockquote>\n\n <p>â¡ï¸ OK, I read the solutions given above, but here's an <strong>EASY</strong> solution to install <code>pip</code>. </p>\n\n</blockquote>\n\n<p>MacOS comes with <code>Python</code> installed. But to make sure that you have <code>Python</code> installed open the terminal and run the following command.</p>\n\n<pre><code>python --version\n\n</code></pre>\n\n<p>If this command returns a version number that means <code>Python</code> exists. Which also means that you already have access to <code>easy_install</code> considering you are using <code>macOS/OSX</code>.</p>\n\n<p>â¹ï¸ Now, all you have to do is run the following command.</p>\n\n<pre><code>sudo easy_install pip\n\n</code></pre>\n\n<p>After that, <code>pip</code> will be installed and you'll be able to use it for installing other packages.</p>\n\n<p>Let me know if you have any problems installing <code>pip</code> this way.</p>\n\n<p>Cheers! </p>\n\n<p>P.S. I ended up blogging a post about it. <a href="https://ahmadawais.com/install-pip-macos-os-x-python/" rel="noreferrer">QuickTip: How Do I Install pip on macOS or OS X?</a></p>\n\n<hr>\n\n<blockquote>\n\n <p>â <strong>UPDATE (Jan 2019): METHOD #2: Two line solution â</strong></p>\n\n</blockquote>\n\n<p><code>easy_install</code> has been <a href="https://setuptools.readthedocs.io/en/latest/easy_install.html" rel="noreferrer">deprecated</a>. Please use <a href="https://pip.pypa.io/en/stable/installing/#installing-with-get-pip-py" rel="noreferrer"><code>get-pip.py</code></a> instead.</p>\n\n<p>First of all download the <code>get-pip</code> file</p>\n\n<pre><code>curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n\n</code></pre>\n\n<p>Now run this file to install <code>pip</code></p>\n\n<pre><code>python get-pip.py\n\n</code></pre>\n\n<p>That should do it. </p>\n\n<p>Another gif you said? Here ya go!</p>\n\n<p><a href="https://i.stack.imgur.com/UXG0G.gif" rel="noreferrer"><img src="https://i.stack.imgur.com/UXG0G.gif" alt="Manual install of pip"></a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	737
list comprehension vs. lambda + filter	<p>It is strange how much beauty varies for different people. I find the list comprehension much clearer than <code>filter</code>+<code>lambda</code>, but use whichever you find easier.</p>\n\n<p>There are two things that may slow down your use of <code>filter</code>.</p>\n\n<p>The first is the function call overhead: as soon as you use a Python function (whether created by <code>def</code> or <code>lambda</code>) it is likely that filter will be slower than the list comprehension. It almost certainly is not enough to matter, and you shouldn't think much about performance until you've timed your code and found it to be a bottleneck, but the difference will be there.</p>\n\n<p>The other overhead that might apply is that the lambda is being forced to access a scoped variable (<code>value</code>). That is slower than accessing a local variable and in Python 2.x the list comprehension only accesses local variables. If you are using Python 3.x the list comprehension runs in a separate function so it will also be accessing <code>value</code> through a closure and this difference won't apply.</p>\n\n<p>The other option to consider is to use a generator instead of a list comprehension:</p>\n\n<pre><code>def filterbyvalue(seq, value):\n\n for el in seq:\n\n if el.attribute==value: yield el\n\n</code></pre>\n\n<p>Then in your main code (which is where readability really matters) you've replaced both list comprehension and filter with a hopefully meaningful function name.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	738
Where does pip install its packages?	<p><code>pip show <package name></code> will provide the location for Windows and macOS, and I'm guessing any system. :)</p>\n\n<p>For example:</p>\n\n<pre><code>> pip show cvxopt\n\nName: cvxopt\n\nVersion: 1.2.0\n\n...\n\nLocation: /usr/local/lib/python2.7/site-packages\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	739
Printing Lists as Tabular Data	<p>There are some light and useful python packages for this purpose:</p>\n\n<p><strong>1. tabulate</strong>: <a href="https://pypi.python.org/pypi/tabulate" rel="noreferrer">https://pypi.python.org/pypi/tabulate</a></p>\n\n<pre class="lang-py prettyprint-override"><code>from tabulate import tabulate\n\nprint(tabulate([['Alice', 24], ['Bob', 19]], headers=['Name', 'Age']))\n\n</code></pre>\n\n<pre><code>Name Age\n\n------ -----\n\nAlice 24\n\nBob 19\n\n</code></pre>\n\n<p>tabulate has many options to specify headers and table format.</p>\n\n<pre class="lang-py prettyprint-override"><code>print(tabulate([['Alice', 24], ['Bob', 19]], headers=['Name', 'Age'], tablefmt='orgtbl'))\n\n</code></pre>\n\n<pre><code>| Name | Age |\n\n|--------+-------|\n\n| Alice | 24 |\n\n| Bob | 19 |\n\n</code></pre>\n\n<p><strong>2. PrettyTable</strong>: <a href="https://pypi.python.org/pypi/PrettyTable" rel="noreferrer">https://pypi.python.org/pypi/PrettyTable</a></p>\n\n<pre class="lang-py prettyprint-override"><code>from prettytable import PrettyTable\n\nt = PrettyTable(['Name', 'Age'])\n\nt.add_row(['Alice', 24])\n\nt.add_row(['Bob', 19])\n\nprint(t)\n\n</code></pre>\n\n<pre><code>+-------+-----+\n\n| Name | Age |\n\n+-------+-----+\n\n| Alice | 24 |\n\n| Bob | 19 |\n\n+-------+-----+\n\n</code></pre>\n\n<p>PrettyTable has options to read data from csv, html, sql database. Also you are able to select subset of data, sort table and change table styles.</p>\n\n<p><strong>3. texttable</strong>: <a href="https://pypi.python.org/pypi/texttable" rel="noreferrer">https://pypi.python.org/pypi/texttable</a></p>\n\n<pre class="lang-py prettyprint-override"><code>from texttable import Texttable\n\nt = Texttable()\n\nt.add_rows([['Name', 'Age'], ['Alice', 24], ['Bob', 19]])\n\nprint(t.draw())\n\n</code></pre>\n\n<pre><code>+-------+-----+\n\n| Name | Age |\n\n+=======+=====+\n\n| Alice | 24 |\n\n+-------+-----+\n\n| Bob | 19 |\n\n+-------+-----+\n\n</code></pre>\n\n<p>with texttable you can control horizontal/vertical align, border style and data types.</p>\n\n<p><strong>4. termtables</strong>: <a href="https://github.com/nschloe/termtables" rel="noreferrer">https://github.com/nschloe/termtables</a></p>\n\n<pre class="lang-py prettyprint-override"><code>import termtables as tt\n\nstring = tt.to_string(\n\n [["Alice", 24], ["Bob", 19]],\n\n header=["Name", "Age"],\n\n style=tt.styles.ascii_thin_double,\n\n # alignment="ll",\n\n # padding=(0, 1),\n\n)\n\nprint(string)\n\n</code></pre>\n\n<pre><code>+-------+-----+\n\n| Name | Age |\n\n+=======+=====+\n\n| Alice | 24 |\n\n+-------+-----+\n\n| Bob | 19 |\n\n+-------+-----+\n\n</code></pre>\n\n<p>with texttable you can control horizontal/vertical align, border style and data types.</p>\n\n<p>Other options:</p>\n\n<ul>\n\n<li><a href="https://github.com/Robpol86/terminaltables" rel="noreferrer">terminaltables</a> Easily draw tables in terminal/console applications from a list of lists of strings. Supports multi-line rows.</li>\n\n<li><a href="https://pypi.python.org/pypi/asciitable/0.8.0" rel="noreferrer">asciitable</a> Asciitable can read and write a wide range of ASCII table formats via built-in Extension Reader Classes.</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	740
Limiting floats to two decimal points	<p>There are new format specifications, <a href="http://docs.python.org/library/string.html#format-specification-mini-language" rel="noreferrer"><strong>String Format Specification Mini-Language</strong></a>:</p>\n\n<p>You can do the same as:</p>\n\n<pre><code>"{:.2f}".format(13.949999999999999)\n\n</code></pre>\n\n<p><strong>Note 1:</strong> the above returns a string. In order to get as float, simply wrap with <code>float(...)</code>:</p>\n\n<pre><code>float("{:.2f}".format(13.949999999999999))\n\n</code></pre>\n\n<p><strong>Note 2:</strong> wrapping with <code>float()</code> doesn't change anything:</p>\n\n<pre><code>>>> x = 13.949999999999999999\n\n>>> x\n\n13.95\n\n>>> g = float("{:.2f}".format(x))\n\n>>> g\n\n13.95\n\n>>> x == g\n\nTrue\n\n>>> h = round(x, 2)\n\n>>> h\n\n13.95\n\n>>> x == h\n\nTrue\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	741
How can I check if a key exists in a dictionary?	<pre><code>if key in array:\n\n # do something\n\n</code></pre>\n\n<p>Associative arrays are called dictionaries in Python and you can learn more about them in <a href="http://docs.python.org/library/stdtypes.html#dict" rel="noreferrer">the stdtypes documentation</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	742
Why are Python's 'private' methods not actually private?	<p>The name scrambling is used to ensure that subclasses don't accidentally override the private methods and attributes of their superclasses. It's not designed to prevent deliberate access from outside.</p>\n\n<p>For example:</p>\n\n<pre><code>>>> class Foo(object):\n\n... def __init__(self):\n\n... self.__baz = 42\n\n... def foo(self):\n\n... print self.__baz\n\n... \n\n>>> class Bar(Foo):\n\n... def __init__(self):\n\n... super(Bar, self).__init__()\n\n... self.__baz = 21\n\n... def bar(self):\n\n... print self.__baz\n\n...\n\n>>> x = Bar()\n\n>>> x.foo()\n\n42\n\n>>> x.bar()\n\n21\n\n>>> print x.__dict__\n\n{'_Bar__baz': 21, '_Foo__baz': 42}\n\n</code></pre>\n\n<p>Of course, it breaks down if two different classes have the same name.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	743
How do I specify that the return type of a method is the same as the class itself?	<p><strong>TL;DR</strong>: if you are using Python 4.0 it just works. As of today (2019) in 3.7+ you must turn this feature on using a future statement (<code>from __future__ import annotations</code>) - for Python 3.6 or below use a string. </p>\n\n<p>I guess you got this exception:</p>\n\n<pre><code>NameError: name 'Position' is not defined\n\n</code></pre>\n\n<p>This is because <code>Position</code> must be defined before you can use it in an annotation unless you are using Python 4.</p>\n\n<h1>Python 3.7+: <code>from __future__ import annotations</code></h1>\n\n<p>Python 3.7 introduces <a href="https://www.python.org/dev/peps/pep-0563/" rel="noreferrer">PEP 563: postponed evaluation of annotations</a>. A module that uses the future statement <code>from __future__ import annotations</code> will store annotations as strings automatically:</p>\n\n<pre><code>from __future__ import annotations\n\nclass Position:\n\n def __add__(self, other: Position) -> Position:\n\n ...\n\n</code></pre>\n\n<p>This is scheduled to become the default in Python 4.0. Since Python still is a dynamically typed language so no type checking is done at runtime, typing annotations should have no performance impact, right? Wrong! Before python 3.7 the typing module used to be <a href="https://www.python.org/dev/peps/pep-0560/#performance" rel="noreferrer">one of the slowest python modules in core</a> so <strong>if you <code>import typing</code> you will see <a href="https://docs.python.org/3.7/whatsnew/3.7.html#pep-560-core-support-for-typing-module-and-generic-types" rel="noreferrer">up to 7 times increase in performance</a> when you upgrade to 3.7.</strong></p>\n\n<h1>Python <3.7: use a string</h1>\n\n<p><a href="https://www.python.org/dev/peps/pep-0484/#forward-references" rel="noreferrer">According to PEP 484</a>, you should use a string instead of the class itself:</p>\n\n<pre><code>class Position:\n\n ...\n\n def __add__(self, other: 'Position') -> 'Position':\n\n ...\n\n</code></pre>\n\n<p>If you use the Django framework this may be familiar as Django models also use strings for forward references (foreign key definitions where the foreign model is <code>self</code> or is not declared yet). This should work with Pycharm and other tools.</p>\n\n<h1>Sources</h1>\n\n<p>The relevant parts of <a href="https://www.python.org/dev/peps/pep-0484/#forward-references" rel="noreferrer">PEP 484</a> and <a href="https://www.python.org/dev/peps/pep-0563/" rel="noreferrer">PEP 563</a>, to spare you the trip:</p>\n\n<blockquote>\n\n <h1>Forward references</h1>\n\n <p>When a type hint contains names that have not been defined yet, that definition may be expressed as a string literal, to be resolved later.</p>\n\n <p>A situation where this occurs commonly is the definition of a container class, where the class being defined occurs in the signature of some of the methods. For example, the following code (the start of a simple binary tree implementation) does not work:</p>\n\n</blockquote>\n\n<pre><code>class Tree:\n\n def __init__(self, left: Tree, right: Tree):\n\n self.left = left\n\n self.right = right\n\n</code></pre>\n\n<blockquote>\n\n <p>To address this, we write:</p>\n\n</blockquote>\n\n<pre><code>class Tree:\n\n def __init__(self, left: 'Tree', right: 'Tree'):\n\n self.left = left\n\n self.right = right\n\n</code></pre>\n\n<blockquote>\n\n <p>The string literal should contain a valid Python expression (i.e., compile(lit, '', 'eval') should be a valid code object) and it should evaluate without errors once the module has been fully loaded. The local and global namespace in which it is evaluated should be the same namespaces in which default arguments to the same function would be evaluated.</p>\n\n</blockquote>\n\n<p>and PEP 563:</p>\n\n<blockquote>\n\n <p>In Python 4.0, function and variable annotations will no longer be evaluated at definition time. Instead, a string form will be preserved in the respective <code>__annotations__</code> dictionary. Static type checkers will see no difference in behavior, whereas tools using annotations at runtime will have to perform postponed evaluation.</p>\n\n <p>...</p>\n\n <p>The functionality described above can be enabled starting from Python 3.7 using the following special import:</p>\n\n</blockquote>\n\n<pre><code>from __future__ import annotations\n\n</code></pre>\n\n<h1>Things that you may be tempted to do instead</h1>\n\n<h2>A. Define a dummy <code>Position</code></h2>\n\n<p>Before the class definition, place a dummy definition:</p>\n\n<pre><code>class Position(object):\n\n pass\n\nclass Position(object):\n\n ...\n\n</code></pre>\n\n<p>This will get rid of the <code>NameError</code> and may even look OK:</p>\n\n<pre><code>>>> Position.__add__.__annotations__\n\n{'other': __main__.Position, 'return': __main__.Position}\n\n</code></pre>\n\n<p>But is it?</p>\n\n<pre><code>>>> for k, v in Position.__add__.__annotations__.items():\n\n... print(k, 'is Position:', v is Position) \n\nreturn is Position: False\n\nother is Position: False\n\n</code></pre>\n\n<h1>B. Monkey-patch in order to add the annotations:</h1>\n\n<p>You may want to try some Python meta programming magic and write a decorator\n\nto monkey-patch the class definition in order to add annotations:</p>\n\n<pre><code>class Position:\n\n ...\n\n def __add__(self, other):\n\n return self.__class__(self.x + other.x, self.y + other.y)\n\n</code></pre>\n\n<p>The decorator should be responsible for the equivalent of this:</p>\n\n<pre><code>Position.__add__.__annotations__['return'] = Position\n\nPosition.__add__.__annotations__['other'] = Position\n\n</code></pre>\n\n<p>At least it seems right:</p>\n\n<pre><code>>>> for k, v in Position.__add__.__annotations__.items():\n\n... print(k, 'is Position:', v is Position) \n\nreturn is Position: True\n\nother is Position: True\n\n</code></pre>\n\n<p>Probably too much trouble.</p>\n\n<h1>Conclusion</h1>\n\n<p>If you are using 3.6 or below use a string literal containing the class name, in 3.7 use <code>from __future__ import annotations</code> and it will just work. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	744
How can I check the syntax of Python script without executing it?	<p>You can check the syntax by compiling it:</p>\n\n<pre><code>python -m py_compile script.py\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	745
How to extract the substring between two markers?	<p>Using regular expressions - <a href="http://docs.python.org/2/library/re.html" rel="noreferrer">documentation</a> for further reference</p>\n\n<pre><code>import re\n\ntext = 'gfgfdAAA1234ZZZuijjk'\n\nm = re.search('AAA(.+?)ZZZ', text)\n\nif m:\n\n found = m.group(1)\n\n# found: 1234\n\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>import re\n\ntext = 'gfgfdAAA1234ZZZuijjk'\n\ntry:\n\n found = re.search('AAA(.+?)ZZZ', text).group(1)\n\nexcept AttributeError:\n\n # AAA, ZZZ not found in the original string\n\n found = '' # apply your error handling\n\n# found: 1234\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	746
Why does python use 'else' after for and while loops?	<p>A common construct is to run a loop until something is found and then to break out of the loop. The problem is that if I break out of the loop or the loop ends I need to determine which case happened. One method is to create a flag or store variable that will let me do a second test to see how the loop was exited.</p>\n\n<p>For example assume that I need to search through a list and process each item until a flag item is found and then stop processing. If the flag item is missing then an exception needs to be raised.</p>\n\n<p>Using the Python <code>for</code>...<code>else</code> construct you have</p>\n\n<pre><code>for i in mylist:\n\n if i == theflag:\n\n break\n\n process(i)\n\nelse:\n\n raise ValueError("List argument missing terminal flag.")\n\n</code></pre>\n\n<p>Compare this to a method that does not use this syntactic sugar:</p>\n\n<pre><code>flagfound = False\n\nfor i in mylist:\n\n if i == theflag:\n\n flagfound = True\n\n break\n\n process(i)\n\nif not flagfound:\n\n raise ValueError("List argument missing terminal flag.")\n\n</code></pre>\n\n<p>In the first case the <code>raise</code> is bound tightly to the for loop it works with. In the second the binding is not as strong and errors may be introduced during maintenance.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	747
How to remove items from a list while iterating?	<p>The answers suggesting list comprehensions are ALMOST correct -- except that they build a completely new list and then give it the same name the old list as, they do NOT modify the old list in place. That's different from what you'd be doing by selective removal, as in <a href="https://stackoverflow.com/a/1207427/3064538">@Lennart's suggestion</a> -- it's faster, but if your list is accessed via multiple references the fact that you're just reseating one of the references and NOT altering the list object itself can lead to subtle, disastrous bugs.</p>\n\n<p>Fortunately, it's extremely easy to get both the speed of list comprehensions AND the required semantics of in-place alteration -- just code:</p>\n\n<pre><code>somelist[:] = [tup for tup in somelist if determine(tup)]\n\n</code></pre>\n\n<p>Note the subtle difference with other answers: this one is NOT assigning to a barename - it's assigning to a list slice that just happens to be the entire list, thereby replacing the list <em>contents</em> <strong>within the same Python list object</strong>, rather than just reseating one reference (from previous list object to new list object) like the other answers.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	748
Changing the "tick frequency" on x or y axis in matplotlib?	<p>You could explicitly set where you want to tick marks with <code>plt.xticks</code>:</p>\n\n<pre><code>plt.xticks(np.arange(min(x), max(x)+1, 1.0))\n\n</code></pre>\n\n<hr>\n\n<p>For example,</p>\n\n<pre><code>import numpy as np\n\nimport matplotlib.pyplot as plt\n\nx = [0,5,9,10,15]\n\ny = [0,1,2,3,4]\n\nplt.plot(x,y)\n\nplt.xticks(np.arange(min(x), max(x)+1, 1.0))\n\nplt.show()\n\n</code></pre>\n\n<hr>\n\n<p>(<code>np.arange</code> was used rather than Python's <code>range</code> function just in case <code>min(x)</code> and <code>max(x)</code> are floats instead of ints.) </p>\n\n<hr>\n\n<p>The <code>plt.plot</code> (or <code>ax.plot</code>) function will automatically set default <code>x</code> and <code>y</code> limits. If you wish to keep those limits, and just change the stepsize of the tick marks, then you could use <code>ax.get_xlim()</code> to discover what limits Matplotlib has already set. </p>\n\n<pre><code>start, end = ax.get_xlim()\n\nax.xaxis.set_ticks(np.arange(start, end, stepsize))\n\n</code></pre>\n\n<p>The default tick formatter should do a decent job rounding the tick values to a sensible number of significant digits. However, if you wish to have more control over the format, you can define your own formatter. For example,</p>\n\n<pre><code>ax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))\n\n</code></pre>\n\n<p>Here's a runnable example:</p>\n\n<pre><code>import numpy as np\n\nimport matplotlib.pyplot as plt\n\nimport matplotlib.ticker as ticker\n\nx = [0,5,9,10,15]\n\ny = [0,1,2,3,4]\n\nfig, ax = plt.subplots()\n\nax.plot(x,y)\n\nstart, end = ax.get_xlim()\n\nax.xaxis.set_ticks(np.arange(start, end, 0.712123))\n\nax.xaxis.set_major_formatter(ticker.FormatStrFormatter('%0.1f'))\n\nplt.show()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	749
Add one row to pandas DataFrame	<p>You can use <code>df.loc[i]</code>, where the row with index <code>i</code> will be what you specify it to be in the dataframe.</p>\n\n<pre><code>>>> import pandas as pd\n\n>>> from numpy.random import randint\n\n>>> df = pd.DataFrame(columns=['lib', 'qty1', 'qty2'])\n\n>>> for i in range(5):\n\n>>> df.loc[i] = ['name' + str(i)] + list(randint(10, size=2))\n\n>>> df\n\n lib qty1 qty2\n\n0 name0 3 3\n\n1 name1 2 4\n\n2 name2 2 8\n\n3 name3 2 1\n\n4 name4 9 6\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	750
What __init__ and self do on Python?	<p>In this code:</p>\n\n<pre><code>class A(object):\n\n def __init__(self):\n\n self.x = 'Hello'\n\n def method_a(self, foo):\n\n print self.x + ' ' + foo\n\n</code></pre>\n\n<p>... the <code>self</code> variable represents the instance of the object itself. Most object-oriented languages pass this as a hidden parameter to the methods defined on an object; Python does not. You have to declare it explicitly. When you create an instance of the <code>A</code> class and call its methods, it will be passed automatically, as in ...</p>\n\n<pre><code>a = A() # We do not pass any argument to the __init__ method\n\na.method_a('Sailor!') # We only pass a single argument\n\n</code></pre>\n\n<p>The <code>__init__</code> method is roughly what represents a constructor in Python. When you call <code>A()</code> Python creates an object for you, and passes it as the first parameter to the <code>__init__</code> method. Any additional parameters (e.g., <code>A(24, 'Hello')</code>) will also get passed as arguments--in this case causing an exception to be raised, since the constructor isn't expecting them.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	751
Installing PIL with pip	<ol>\n\n<li>Install Xcode and Xcode Command Line Tools as mentioned.</li>\n\n<li>Use Pillow instead, as PIL is basically dead. Pillow is a maintained fork of PIL.</li>\n\n</ol>\n\n<p><a href="https://pypi.python.org/pypi/Pillow/2.2.1" rel="noreferrer">https://pypi.python.org/pypi/Pillow/2.2.1</a></p>\n\n<pre><code>pip install Pillow\n\n</code></pre>\n\n<p>If you have both Pythons installed and want to install this for Python3:</p>\n\n<pre><code>python3 -m pip install Pillow\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	752
Python date string to date object	<p>You can use <a href="http://docs.python.org/library/datetime.html#strftime-and-strptime-behavior" rel="noreferrer"><code>strptime</code></a> in the <a href="http://docs.python.org/library/datetime.html" rel="noreferrer"><code>datetime</code></a> package of Python:</p>\n\n<pre><code>>>> import datetime\n\n>>> datetime.datetime.strptime('24052010', "%d%m%Y").date()\n\ndatetime.date(2010, 5, 24)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	753
Convert a list of characters into a string	<p>Use the <code>join</code> method of the empty string to join all of the strings together with the empty string in between, like so:</p>\n\n<pre><code>>>> a = ['a', 'b', 'c', 'd']\n\n>>> ''.join(a)\n\n'abcd'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	754
Printing Python version in output	<p>Try</p>\n\n<pre><code>import sys\n\nprint(sys.version)\n\n</code></pre>\n\n<p>This prints the full version information string. If you only want the python version number, then <a href="https://stackoverflow.com/questions/1252163/printing-python-version-in-output/1252175#1252175">Bastien LÃ©onard's solution</a> is the best. You might want to examine the full string and see if you need it or portions of it.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	755
Get loop count inside a Python FOR loop	<p>The pythonic way is to use <a href="http://docs.python.org/library/functions.html#enumerate" rel="noreferrer"><code>enumerate</code></a>:</p>\n\n<pre><code>for idx,item in enumerate(list):\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	756
Does reading an entire file leave the file handle open?	<p>The answer to that question depends somewhat on the particular Python implementation. </p>\n\n<p>To understand what this is all about, pay particular attention to the actual <code>file</code> object. In your code, that object is mentioned only once, in an expression, and becomes inaccessible immediately after the <code>read()</code> call returns.</p>\n\n<p>This means that the file object is garbage. The only remaining question is "When will the garbage collector collect the file object?".</p>\n\n<p>in CPython, which uses a reference counter, this kind of garbage is noticed immediately, and so it will be collected immediately. This is not generally true of other python implementations.</p>\n\n<p>A better solution, to make sure that the file is closed, is this pattern:</p>\n\n<pre><code>with open('Path/to/file', 'r') as content_file:\n\n content = content_file.read()\n\n</code></pre>\n\n<p>which will always close the file immediately after the block ends; even if an exception occurs.</p>\n\n<p>Edit: To put a finer point on it:</p>\n\n<p>Other than <code>file.__exit__()</code>, which is "automatically" called in a <code>with</code> context manager setting, the only other way that <code>file.close()</code> is automatically called (that is, other than explicitly calling it yourself,) is via <code>file.__del__()</code>. This leads us to the question of when does <code>__del__()</code> get called?</p>\n\n<blockquote>\n\n <p>A correctly-written program cannot assume that finalizers will ever run at any point prior to program termination.</p>\n\n</blockquote>\n\n<p>-- <a href="https://devblogs.microsoft.com/oldnewthing/20100809-00/?p=13203" rel="noreferrer">https://devblogs.microsoft.com/oldnewthing/20100809-00/?p=13203</a></p>\n\n<p>In particular:</p>\n\n<blockquote>\n\n <p>Objects are never explicitly destroyed; however, when they become unreachable they may be garbage-collected. <strong>An implementation is allowed to postpone garbage collection or omit it altogether</strong> â it is a matter of implementation quality how garbage collection is implemented, as long as no objects are collected that are still reachable.</p>\n\n <p>[...]</p>\n\n <p>CPython currently uses a reference-counting scheme with (optional) delayed detection of cyclically linked garbage, which collects most objects as soon as they become unreachable, but is not guaranteed to collect garbage containing circular references.</p>\n\n</blockquote>\n\n<p>-- <a href="https://docs.python.org/3.5/reference/datamodel.html#objects-values-and-types" rel="noreferrer">https://docs.python.org/3.5/reference/datamodel.html#objects-values-and-types</a></p>\n\n<p>(Emphasis mine)</p>\n\n<p>but as it suggests, other implementations may have other behavior. As an example, PyPy <a href="https://pypy.readthedocs.org/en/release-2.4.x/garbage_collection.html" rel="noreferrer">has <em>6</em> different garbage collection implementations</a>!</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	757
How to read a file line-by-line into a list?	<p>This is more explicit than necessary, but does what you want.</p>\n\n<pre class="lang-py prettyprint-override"><code>with open("file.txt") as file_in:\n\n lines = []\n\n for line in file_in:\n\n lines.append(line)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	758
What is the common header format of Python files?	<p>Its all metadata for the <code>Foobar</code> module.</p>\n\n<p>The first one is the <code>docstring</code> of the module, that is already explained in <a href="https://stackoverflow.com/questions/1523427/python-what-is-the-common-header-format/1523435#1523435">Peter's answer</a>.</p>\n\n<blockquote>\n\n<h2><a href="http://web.archive.org/web/20111010053227/http://jaynes.colorado.edu/PythonGuidelines.html#module_formatting" rel="noreferrer">How do I organize my modules (source files)? (Archive)</a></h2>\n\n<p><strong>The first line of each file shoud be <code>#!/usr/bin/env python</code>.</strong> This makes it possible to run the file as a script invoking the interpreter implicitly, e.g. in a CGI context.</p>\n\n<p><em><strong>Next should be the docstring with a description.</strong></em> If the description is long, the first line should be a short summary that makes sense on its own, separated from the rest by a newline.</p>\n\n<p><strong>All code, including import statements, should follow the docstring.</strong> Otherwise, the docstring will not be recognized by the interpreter, and you will not have access to it in interactive sessions (i.e. through <code>obj.__doc__</code>) or when generating documentation with automated tools.</p>\n\n<p><strong>Import built-in modules first, followed by third-party modules, followed by any changes to the path and your own modules.</strong> Especially, additions to the path and names of your modules are likely to change rapidly: keeping them in one place makes them easier to find.</p>\n\n<p><strong>Next should be authorship information.</strong> This information should follow this format:</p>\n\n<pre><code>__author__ = "Rob Knight, Gavin Huttley, and Peter Maxwell"\n\n__copyright__ = "Copyright 2007, The Cogent Project"\n\n__credits__ = ["Rob Knight", "Peter Maxwell", "Gavin Huttley",\n\n "Matthew Wakefield"]\n\n__license__ = "GPL"\n\n__version__ = "1.0.1"\n\n__maintainer__ = "Rob Knight"\n\n__email__ = "rob@spot.colorado.edu"\n\n__status__ = "Production"\n\n</code></pre>\n\n<p>Status should typically be one of "Prototype", "Development", or "Production". <code>__maintainer__</code> should be the person who will fix bugs and make improvements if imported. <code>__credits__</code> differs from <code>__author__</code> in that <code>__credits__</code> includes people who reported bug fixes, made suggestions, etc. but did not actually write the code.</p>\n\n</blockquote>\n\n<p><a href="http://epydoc.sourceforge.net/manual-fields.html#module-metadata-variables" rel="noreferrer">Here</a> you have more information, listing <code>__author__</code>, <code>__authors__</code>, <code>__contact__</code>, <code>__copyright__</code>, <code>__license__</code>, <code>__deprecated__</code>, <code>__date__</code> and <code>__version__</code> as recognized metadata.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	759
How to rename a file using Python	<p>Use <a href="http://docs.python.org/library/os.html#os.rename" rel="noreferrer"><code>os.rename</code></a>:</p>\n\n<pre><code>import os\n\nos.rename('a.txt', 'b.kml')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	760
How to disable python warnings	<p>Did you look at the <a href="http://docs.python.org/2/library/warnings.html#temporarily-suppressing-warnings" rel="noreferrer">suppress warnings</a> section of the python docs?</p>\n\n<blockquote>\n\n <p>If you are using code that you know will raise a warning, such as a deprecated function, but do not want to see the warning, then it is possible to suppress the warning using the catch_warnings context manager:</p>\n\n</blockquote>\n\n<pre><code>import warnings\n\ndef fxn():\n\n warnings.warn("deprecated", DeprecationWarning)\n\nwith warnings.catch_warnings():\n\n warnings.simplefilter("ignore")\n\n fxn()\n\n</code></pre>\n\n<p>I don't condone it, but you could just <strong>suppress all warnings</strong> with this:</p>\n\n<pre><code>import warnings\n\nwarnings.filterwarnings("ignore")\n\n</code></pre>\n\n<p>Ex:</p>\n\n<pre><code>>>> import warnings\n\n>>> def f():\n\n... print('before')\n\n... warnings.warn('you are warned!')\n\n... print('after')\n\n>>> f()\n\nbefore\n\n__main__:3: UserWarning: you are warned!\n\nafter\n\n>>> warnings.filterwarnings("ignore")\n\n>>> f()\n\nbefore\n\nafter\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	761
Truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all()	<p>The <code>or</code> and <code>and</code> python statements require <code>truth</code>-values. For <code>pandas</code> these are considered ambiguous so you should use "bitwise" <code>|</code> (or) or <code>&</code> (and) operations:</p>\n\n<pre><code>result = result[(result['var']>0.25) | (result['var']<-0.25)]\n\n</code></pre>\n\n<p>These are overloaded for these kind of datastructures to yield the element-wise <code>or</code> (or <code>and</code>).</p>\n\n<hr>\n\n<p>Just to add some more explanation to this statement:</p>\n\n<p>The exception is thrown when you want to get the <code>bool</code> of a <code>pandas.Series</code>:</p>\n\n<pre><code>>>> import pandas as pd\n\n>>> x = pd.Series([1])\n\n>>> bool(x)\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\n</code></pre>\n\n<p>What you hit was a place where the operator <strong>implicitly</strong> converted the operands to <code>bool</code> (you used <code>or</code> but it also happens for <code>and</code>, <code>if</code> and <code>while</code>):</p>\n\n<pre><code>>>> x or x\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\n>>> x and x\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\n>>> if x:\n\n... print('fun')\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\n>>> while x:\n\n... print('fun')\n\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n\n</code></pre>\n\n<p>Besides these 4 statements there are several python functions that hide some <code>bool</code> calls (like <code>any</code>, <code>all</code>, <code>filter</code>, ...) these are normally not problematic with <code>pandas.Series</code> but for completeness I wanted to mention these.</p>\n\n<hr>\n\n<p>In your case the exception isn't really helpful, because it doesn't mention the <strong>right alternatives</strong>. For <code>and</code> and <code>or</code> you can use (if you want element-wise comparisons):</p>\n\n<ul>\n\n<li><p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_or.html"><code>numpy.logical_or</code></a>:</p>\n\n<pre><code>>>> import numpy as np\n\n>>> np.logical_or(x, y)\n\n</code></pre>\n\n<p>or simply the <code>|</code> operator:</p>\n\n<pre><code>>>> x | y\n\n</code></pre></li>\n\n<li><p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.logical_and.html"><code>numpy.logical_and</code></a>:</p>\n\n<pre><code>>>> np.logical_and(x, y)\n\n</code></pre>\n\n<p>or simply the <code>&</code> operator:</p>\n\n<pre><code>>>> x & y\n\n</code></pre></li>\n\n</ul>\n\n<p>If you're using the operators then make sure you set your parenthesis correctly because of <a href="https://docs.python.org/reference/expressions.html#operator-precedence">the operator precedence</a>.</p>\n\n<p>There are <a href="https://docs.scipy.org/doc/numpy/reference/routines.logic.html">several logical numpy functions</a> which <em>should</em> work on <code>pandas.Series</code>.</p>\n\n<hr>\n\n<p>The alternatives mentioned in the Exception are more suited if you encountered it when doing <code>if</code> or <code>while</code>. I'll shortly explain each of these:</p>\n\n<ul>\n\n<li><p>If you want to check if your Series is <strong>empty</strong>:</p>\n\n<pre><code>>>> x = pd.Series([])\n\n>>> x.empty\n\nTrue\n\n>>> x = pd.Series([1])\n\n>>> x.empty\n\nFalse\n\n</code></pre>\n\n<p>Python normally interprets the <code>len</code>gth of containers (like <code>list</code>, <code>tuple</code>, ...) as truth-value if it has no explicit boolean interpretation. So if you want the python-like check, you could do: <code>if x.size</code> or <code>if not x.empty</code> instead of <code>if x</code>.</p></li>\n\n<li><p>If your <code>Series</code> contains <strong>one and only one</strong> boolean value:</p>\n\n<pre><code>>>> x = pd.Series([100])\n\n>>> (x > 50).bool()\n\nTrue\n\n>>> (x < 50).bool()\n\nFalse\n\n</code></pre></li>\n\n<li><p>If you want to check the <strong>first and only item</strong> of your Series (like <code>.bool()</code> but works even for not boolean contents):</p>\n\n<pre><code>>>> x = pd.Series([100])\n\n>>> x.item()\n\n100\n\n</code></pre></li>\n\n<li><p>If you want to check if <strong>all</strong> or <strong>any</strong> item is not-zero, not-empty or not-False:</p>\n\n<pre><code>>>> x = pd.Series([0, 1, 2])\n\n>>> x.all() # because one element is zero\n\nFalse\n\n>>> x.any() # because one (or more) elements are non-zero\n\nTrue\n\n</code></pre></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	762
Best way to convert string to bytes in Python 3?	<p>If you look at the docs for <code>bytes</code>, it points you to <a href="https://docs.python.org/3/library/functions.html#func-bytearray" rel="noreferrer"><code>bytearray</code></a>:</p>\n\n<blockquote>\n\n<p>bytearray([source[, encoding[, errors]]])</p>\n\n<p>Return a new array of bytes. The bytearray type is a mutable sequence of integers in the range 0 <= x < 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Byte Array Methods.</p>\n\n<p>The optional source parameter can be used to initialize the array in a few different ways:</p>\n\n<p><strong>If it is a string, you must also give the encoding (and optionally, errors) parameters; bytearray() then converts the string to bytes using str.encode().</strong></p>\n\n<p><strong>If it is an integer, the array will have that size and will be initialized with null bytes.</strong></p>\n\n<p><strong>If it is an object conforming to the buffer interface, a read-only buffer of the object will be used to initialize the bytes array.</strong></p>\n\n<p><strong>If it is an iterable, it must be an iterable of integers in the range 0 <= x < 256, which are used as the initial contents of the array.</strong></p>\n\n<p><strong>Without an argument, an array of size 0 is created.</strong></p>\n\n</blockquote>\n\n<p>So <code>bytes</code> can do much more than just encode a string. It's Pythonic that it would allow you to call the constructor with any type of source parameter that makes sense.</p>\n\n<p>For encoding a string, I think that <code>some_string.encode(encoding)</code> is more Pythonic than using the constructor, because it is the most self documenting -- "take this string and encode it with this encoding" is clearer than <code>bytes(some_string, encoding)</code> -- there is no explicit verb when you use the constructor.</p>\n\n<p><strong>Edit:</strong> I checked the Python source. If you pass a unicode string to <code>bytes</code> using CPython, it calls <a href="http://hg.python.org/cpython/file/5a12416890c0/Objects/unicodeobject.c#l2328" rel="noreferrer">PyUnicode_AsEncodedString</a>, which is the implementation of <code>encode</code>; so you're just skipping a level of indirection if you call <code>encode</code> yourself.</p>\n\n<p>Also, see Serdalis' comment -- <code>unicode_string.encode(encoding)</code> is also more Pythonic because its inverse is <code>byte_string.decode(encoding)</code> and symmetry is nice.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	763
How to check if any value is NaN in a Pandas DataFrame	<p><a href="https://stackoverflow.com/users/1567452/jwilner">jwilner</a>'s response is spot on. I was exploring to see if there's a faster option, since in my experience, summing flat arrays is (strangely) faster than counting. This code seems faster:</p>\n\n<pre><code>df.isnull().values.any()\n\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>In [2]: df = pd.DataFrame(np.random.randn(1000,1000))\n\nIn [3]: df[df > 0.9] = pd.np.nan\n\nIn [4]: %timeit df.isnull().any().any()\n\n100 loops, best of 3: 14.7 ms per loop\n\nIn [5]: %timeit df.isnull().values.sum()\n\n100 loops, best of 3: 2.15 ms per loop\n\nIn [6]: %timeit df.isnull().sum().sum()\n\n100 loops, best of 3: 18 ms per loop\n\nIn [7]: %timeit df.isnull().values.any()\n\n1000 loops, best of 3: 948 Âµs per loop\n\n</code></pre>\n\n<p><code>df.isnull().sum().sum()</code> is a bit slower, but of course, has additional information -- the number of <code>NaNs</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	764
Constructing pandas DataFrame from values in variables gives "ValueError: If using all scalar values, you must pass an index"	<p>The error message says that if you're passing scalar values, you have to pass an index. So you can either not use scalar values for the columns -- e.g. use a list:</p>\n\n<pre><code>>>> df = pd.DataFrame({'A': [a], 'B': [b]})\n\n>>> df\n\n A B\n\n0 2 3\n\n</code></pre>\n\n<p>or use scalar values and pass an index:</p>\n\n<pre><code>>>> df = pd.DataFrame({'A': a, 'B': b}, index=[0])\n\n>>> df\n\n A B\n\n0 2 3\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	765
How to set Python's default version to 3.x on OS X?	<p>Changing the default python executable's version system-wide could break some applications that depend on python2.</p>\n\n<p>However, you can alias the commands in most shells, Since the default shells in macOS (bash in 10.14 and below; zsh in 10.15) share a similar syntax. You could put \n\n alias python='python3'\n\nin your <code>~/.profile</code>, and then source <code>~/.profile</code> in your <code>~/.bash_profile</code> and/or your<code>~/.zsh_profile</code> with a line like:</p>\n\n<pre><code>[ -e ~/.profile ] && . ~/.profile\n\n</code></pre>\n\n<p>This way, your alias will work across shells.</p>\n\n<p>With this, <code>python</code> command now invokes <code>python3</code>. If you want to invoke the "original" python (that refers to <em>python2</em>) on occasion, you can use <code>command python</code>, which will leaving the alias untouched, and works in all shells.</p>\n\n<p>If you launch interpreters more often <em>(I do)</em>, you can always create more aliases to add as well, i.e.:</p>\n\n<pre><code>alias 2='python2'\n\nalias 3='python3'\n\n</code></pre>\n\n<hr>\n\n<p>Tip: For scripts, instead of using a shebang like:</p>\n\n<pre><code>#!/usr/bin/env python\n\n</code></pre>\n\n<p>use:</p>\n\n<pre><code>#!/usr/bin/env python3\n\n</code></pre>\n\n<p>This way, the system will use python3 for running python <strong><em>executables</em></strong>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	766
How do I get a Cron like scheduler in Python?	<p>If you're looking for something lightweight checkout <a href="https://github.com/dbader/schedule">schedule</a>:</p>\n\n<pre><code>import schedule\n\nimport time\n\ndef job():\n\n print("I'm working...")\n\nschedule.every(10).minutes.do(job)\n\nschedule.every().hour.do(job)\n\nschedule.every().day.at("10:30").do(job)\n\nwhile 1:\n\n schedule.run_pending()\n\n time.sleep(1)\n\n</code></pre>\n\n<p><em>Disclosure</em>: I'm the author of that library.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	767
Python string.replace regular expression	<p><code>str.replace()</code> <sup><a href="https://docs.python.org/2/library/stdtypes.html#str.replace" rel="noreferrer">v2</a>|<a href="https://docs.python.org/3/library/stdtypes.html#str.replace" rel="noreferrer">v3</a></sup> does not recognize regular expressions. </p>\n\n<p>To perform a substitution using a regular expression, use <code>re.sub()</code> <sup><a href="https://docs.python.org/2/library/re.html#re.sub" rel="noreferrer">v2</a>|<a href="https://docs.python.org/3/library/re.html#re.sub" rel="noreferrer">v3</a></sup>.</p>\n\n<p>For example:</p>\n\n<pre><code>import re\n\nline = re.sub(\n\n r"(?i)^.*interfaceOpDataFile.*$", \n\n "interfaceOpDataFile %s" % fileIn, \n\n line\n\n )\n\n</code></pre>\n\n<p>In a loop, it would be better to compile the regular expression first:</p>\n\n<pre><code>import re\n\nregex = re.compile(r"^.*interfaceOpDataFile.*$", re.IGNORECASE)\n\nfor line in some_file:\n\n line = regex.sub("interfaceOpDataFile %s" % fileIn, line)\n\n # do something with the updated line\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	768
How do I disable log messages from the Requests library?	<p>I found out how to configure <em>requests</em>'s logging level, it's done via the standard <a href="http://docs.python.org/library/logging.html" rel="noreferrer">logging</a> module. I decided to configure it to not log messages unless they are at least warnings:</p>\n\n<pre><code>import logging\n\nlogging.getLogger("requests").setLevel(logging.WARNING)\n\n</code></pre>\n\n<p>If you wish to apply this setting for the urllib3 library (typically used by requests) too, add the following:</p>\n\n<pre><code>logging.getLogger("urllib3").setLevel(logging.WARNING)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	769
In practice, what are the main uses for the new "yield from" syntax in Python 3.3?	<p>Let's get one thing out of the way first. The explanation that <code>yield from g</code> is equivalent to <code>for v in g: yield v</code> <strong>does not even begin to do justice</strong> to what <code>yield from</code> is all about. Because, let's face it, if all <code>yield from</code> does is expand the <code>for</code> loop, then it does not warrant adding <code>yield from</code> to the language and preclude a whole bunch of new features from being implemented in Python 2.x.</p>\n\n<p>What <code>yield from</code> does is it <strong><em>establishes a transparent bidirectional connection between the caller and the sub-generator</em></strong>:</p>\n\n<ul>\n\n<li><p>The connection is "transparent" in the sense that it will propagate everything correctly too, not just the elements being generated (e.g. exceptions are propagated).</p></li>\n\n<li><p>The connection is "bidirectional" in the sense that data can be both sent <em>from</em> and <em>to</em> a generator.</p></li>\n\n</ul>\n\n<p>(<em>If we were talking about TCP, <code>yield from g</code> might mean "now temporarily disconnect my client's socket and reconnect it to this other server socket".</em>)</p>\n\n<p>BTW, if you are not sure what <em>sending data to a generator</em> even means, you need to drop everything and read about <em>coroutines</em> firstâthey're very useful (contrast them with <em>subroutines</em>), but unfortunately lesser-known in Python. <a href="http://dabeaz.com/coroutines/" rel="noreferrer">Dave Beazley's Curious Course on Coroutines</a> is an excellent start. <a href="http://dabeaz.com/coroutines/Coroutines.pdf" rel="noreferrer">Read slides 24-33</a> for a quick primer.</p>\n\n<h2>Reading data from a generator using yield from</h2>\n\n<pre><code>def reader():\n\n """A generator that fakes a read from a file, socket, etc."""\n\n for i in range(4):\n\n yield '<< %s' % i\n\ndef reader_wrapper(g):\n\n # Manually iterate over data produced by reader\n\n for v in g:\n\n yield v\n\nwrap = reader_wrapper(reader())\n\nfor i in wrap:\n\n print(i)\n\n# Result\n\n<< 0\n\n<< 1\n\n<< 2\n\n<< 3\n\n</code></pre>\n\n<p>Instead of manually iterating over <code>reader()</code>, we can just <code>yield from</code> it.</p>\n\n<pre><code>def reader_wrapper(g):\n\n yield from g\n\n</code></pre>\n\n<p>That works, and we eliminated one line of code. And probably the intent is a little bit clearer (or not). But nothing life changing.</p>\n\n<h2>Sending data to a generator (coroutine) using yield from - Part 1</h2>\n\n<p>Now let's do something more interesting. Let's create a coroutine called <code>writer</code> that accepts data sent to it and writes to a socket, fd, etc.</p>\n\n<pre><code>def writer():\n\n """A coroutine that writes data *sent* to it to fd, socket, etc."""\n\n while True:\n\n w = (yield)\n\n print('>> ', w)\n\n</code></pre>\n\n<p>Now the question is, how should the wrapper function handle sending data to the writer, so that any data that is sent to the wrapper is <em>transparently</em> sent to the <code>writer()</code>?</p>\n\n<pre><code>def writer_wrapper(coro):\n\n # TBD\n\n pass\n\nw = writer()\n\nwrap = writer_wrapper(w)\n\nwrap.send(None) # "prime" the coroutine\n\nfor i in range(4):\n\n wrap.send(i)\n\n# Expected result\n\n>> 0\n\n>> 1\n\n>> 2\n\n>> 3\n\n</code></pre>\n\n<p>The wrapper needs to <em>accept</em> the data that is sent to it (obviously) and should also handle the <code>StopIteration</code> when the for loop is exhausted. Evidently just doing <code>for x in coro: yield x</code> won't do. Here is a version that works.</p>\n\n<pre><code>def writer_wrapper(coro):\n\n coro.send(None) # prime the coro\n\n while True:\n\n try:\n\n x = (yield) # Capture the value that's sent\n\n coro.send(x) # and pass it to the writer\n\n except StopIteration:\n\n pass\n\n</code></pre>\n\n<p>Or, we could do this.</p>\n\n<pre><code>def writer_wrapper(coro):\n\n yield from coro\n\n</code></pre>\n\n<p>That saves 6 lines of code, make it much much more readable and it just works. Magic!</p>\n\n<h2>Sending data to a generator yield from - Part 2 - Exception handling</h2>\n\n<p>Let's make it more complicated. What if our writer needs to handle exceptions? Let's say the <code>writer</code> handles a <code>SpamException</code> and it prints <code>***</code> if it encounters one.</p>\n\n<pre><code>class SpamException(Exception):\n\n pass\n\ndef writer():\n\n while True:\n\n try:\n\n w = (yield)\n\n except SpamException:\n\n print('***')\n\n else:\n\n print('>> ', w)\n\n</code></pre>\n\n<p>What if we don't change <code>writer_wrapper</code>? Does it work? Let's try</p>\n\n<pre><code># writer_wrapper same as above\n\nw = writer()\n\nwrap = writer_wrapper(w)\n\nwrap.send(None) # "prime" the coroutine\n\nfor i in [0, 1, 2, 'spam', 4]:\n\n if i == 'spam':\n\n wrap.throw(SpamException)\n\n else:\n\n wrap.send(i)\n\n# Expected Result\n\n>> 0\n\n>> 1\n\n>> 2\n\n***\n\n>> 4\n\n# Actual Result\n\n>> 0\n\n>> 1\n\n>> 2\n\nTraceback (most recent call last):\n\n ... redacted ...\n\n File ... in writer_wrapper\n\n x = (yield)\n\n__main__.SpamException\n\n</code></pre>\n\n<p>Um, it's not working because <code>x = (yield)</code> just raises the exception and everything comes to a crashing halt. Let's make it work, but manually handling exceptions and sending them or throwing them into the sub-generator (<code>writer</code>)</p>\n\n<pre><code>def writer_wrapper(coro):\n\n """Works. Manually catches exceptions and throws them"""\n\n coro.send(None) # prime the coro\n\n while True:\n\n try:\n\n try:\n\n x = (yield)\n\n except Exception as e: # This catches the SpamException\n\n coro.throw(e)\n\n else:\n\n coro.send(x)\n\n except StopIteration:\n\n pass\n\n</code></pre>\n\n<p>This works.</p>\n\n<pre><code># Result\n\n>> 0\n\n>> 1\n\n>> 2\n\n***\n\n>> 4\n\n</code></pre>\n\n<p>But so does this!</p>\n\n<pre><code>def writer_wrapper(coro):\n\n yield from coro\n\n</code></pre>\n\n<p>The <code>yield from</code> transparently handles sending the values or throwing values into the sub-generator.</p>\n\n<p>This still does not cover all the corner cases though. What happens if the outer generator is closed? What about the case when the sub-generator returns a value (yes, in Python 3.3+, generators can return values), how should the return value be propagated? <a href="https://www.python.org/dev/peps/pep-0380/#formal-semantics" rel="noreferrer">That <code>yield from</code> transparently handles all the corner cases is really impressive</a>. <code>yield from</code> just magically works and handles all those cases.</p>\n\n<p>I personally feel <code>yield from</code> is a poor keyword choice because it does not make the <em>two-way</em> nature apparent. There were other keywords proposed (like <code>delegate</code> but were rejected because adding a new keyword to the language is much more difficult than combining existing ones.</p>\n\n<p>In summary, it's best to think of <code>yield from</code> as a <strong><code>transparent two way channel</code></strong> between the caller and the sub-generator.</p>\n\n<p>References:</p>\n\n<ol>\n\n<li><a href="http://www.python.org/dev/peps/pep-0380/" rel="noreferrer">PEP 380</a> - Syntax for delegating to a sub-generator (Ewing) [v3.3, 2009-02-13]</li>\n\n<li><a href="http://www.python.org/dev/peps/pep-0342/" rel="noreferrer">PEP 342</a> -\n\nCoroutines via Enhanced Generators (GvR, Eby) [v2.5, 2005-05-10]</li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	770
Add list to set?	<p>Use <a href="https://docs.python.org/3/library/stdtypes.html#frozenset.update" rel="noreferrer"><code>set.update()</code></a> or <code>|=</code></p>\n\n<pre><code>>>> a = set('abc')\n\n>>> l = ['d', 'e']\n\n>>> a.update(l)\n\n>>> a\n\n{'e', 'b', 'c', 'd', 'a'}\n\n>>> l = ['f', 'g']\n\n>>> a |= set(l)\n\n>>> a\n\n{'e', 'b', 'f', 'c', 'd', 'g', 'a'}\n\n</code></pre>\n\n<p>edit: If you want to add the list itself and not its members, then you must use a tuple, unfortunately. Set members must be <a href="https://stackoverflow.com/questions/14535730/what-do-you-mean-by-hashable-in-python">hashable</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	771
Finding the average of a list	<p>On Python 3.4+ you can use <a href="https://docs.python.org/library/statistics.html#statistics.mean" rel="noreferrer"><code>statistics.mean()</code></a></p>\n\n<pre><code>l = [15, 18, 2, 36, 12, 78, 5, 6, 9]\n\nimport statistics\n\nstatistics.mean(l) # 20.11111111111111\n\n</code></pre>\n\n<p>On older versions of Python you can do</p>\n\n<pre><code>sum(l) / len(l)\n\n</code></pre>\n\n<p>On Python 2 you need to convert <code>len</code> to a float to get float division</p>\n\n<pre><code>sum(l) / float(len(l))\n\n</code></pre>\n\n<p>There is no need to use <code>reduce</code>. It is much slower and was <a href="https://www.artima.com/weblogs/viewpost.jsp?thread=98196" rel="noreferrer">removed</a> in Python 3.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	772
ISO time (ISO 8601) in Python	<p>Local to ISO 8601:</p>\n\n<pre><code>import datetime\n\ndatetime.datetime.now().isoformat()\n\n>>> 2020-03-20T14:28:23.382748\n\n</code></pre>\n\n<p>UTC to ISO 8601:</p>\n\n<pre><code>import datetime\n\ndatetime.datetime.utcnow().isoformat()\n\n>>> 2020-03-20T01:30:08.180856\n\n</code></pre>\n\n<p>Local to ISO 8601 without microsecond:</p>\n\n<pre><code>import datetime\n\ndatetime.datetime.now().replace(microsecond=0).isoformat()\n\n>>> 2020-03-20T14:30:43\n\n</code></pre>\n\n<p>UTC to ISO 8601 with TimeZone information (Python 3):</p>\n\n<pre><code>import datetime\n\ndatetime.datetime.utcnow().replace(tzinfo=datetime.timezone.utc).isoformat()\n\n>>> 2020-03-20T01:31:12.467113+00:00\n\n</code></pre>\n\n<p>UTC to ISO 8601 with Local TimeZone information without microsecond (Python 3):</p>\n\n<pre><code>import datetime\n\ndatetime.datetime.now().astimezone().replace(microsecond=0).isoformat()\n\n>>> 2020-03-20T14:31:43+13:00\n\n</code></pre>\n\n<p>Local to ISO 8601 with TimeZone information (Python 3):</p>\n\n<pre><code>import datetime\n\ndatetime.datetime.now().astimezone().isoformat()\n\n>>> 2020-03-20T14:32:16.458361+13:00\n\n</code></pre>\n\n<p><strong>Notice there is a bug when using <code>astimezone()</code> on utc time. This gives an incorrect result:</strong></p>\n\n<pre><code>datetime.datetime.utcnow().astimezone().isoformat() #Incorrect result\n\n</code></pre>\n\n<p>For Python 2, see and use <a href="https://pypi.python.org/pypi/pytz/" rel="noreferrer" title="pytz">pytz</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	773
Split Strings into words with multiple word boundary delimiters	<p><a href="http://docs.python.org/library/re.html#re.split" rel="noreferrer">re.split()</a></p>\n\n<blockquote>\n\n<p>re.split(pattern, string[, maxsplit=0])</p>\n\n<p>Split string by the occurrences of pattern. If capturing parentheses are used in pattern, then the text of all groups in the pattern are also returned as part of the resulting list. If maxsplit is nonzero, at most maxsplit splits occur, and the remainder of the string is returned as the final element of the list. (Incompatibility note: in the original Python 1.5 release, maxsplit was ignored. This has been fixed in later releases.)</p>\n\n</blockquote>\n\n<pre><code>>>> re.split('\W+', 'Words, words, words.')\n\n['Words', 'words', 'words', '']\n\n>>> re.split('(\W+)', 'Words, words, words.')\n\n['Words', ', ', 'words', ', ', 'words', '.', '']\n\n>>> re.split('\W+', 'Words, words, words.', 1)\n\n['Words', 'words, words.']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	774
About catching ANY exception	<p>You can but you probably shouldn't:</p>\n\n<pre><code>try:\n\n do_something()\n\nexcept:\n\n print "Caught it!"\n\n</code></pre>\n\n<p>However, this will also catch exceptions like <code>KeyboardInterrupt</code> and you usually don't want that, do you? Unless you re-raise the exception right away - see the following example <a href="http://docs.python.org/tutorial/errors.html" rel="noreferrer">from the docs</a>:</p>\n\n<pre><code>try:\n\n f = open('myfile.txt')\n\n s = f.readline()\n\n i = int(s.strip())\n\nexcept IOError as (errno, strerror):\n\n print "I/O error({0}): {1}".format(errno, strerror)\n\nexcept ValueError:\n\n print "Could not convert data to an integer."\n\nexcept:\n\n print "Unexpected error:", sys.exc_info()[0]\n\n raise\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	775
defaultdict of defaultdict?	<p>Yes like this:</p>\n\n<pre><code>defaultdict(lambda: defaultdict(int))\n\n</code></pre>\n\n<p>The argument of a <code>defaultdict</code> (in this case is <code>lambda: defaultdict(int)</code>) will be called when you try to access a key that doesn't exist. The return value of it will be set as the new value of this key, which means in our case the value of <code>d[Key_doesnt_exist]</code> will be <code>defaultdict(int)</code>.</p>\n\n<p>If you try to access a key from this last defaultdict i.e. <code>d[Key_doesnt_exist][Key_doesnt_exist]</code> it will return 0, which is the return value of the argument of the last defaultdict i.e. <code>int()</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	776
Can someone explain __all__ in Python?	<p>It's a list of public objects of that module, as interpreted by <code>import *</code>. It overrides the default of hiding everything that begins with an underscore.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	777
In Python, how do I determine if an object is iterable?	<h2>Duck typing</h2>\n\n<pre><code>try:\n\n iterator = iter(theElement)\n\nexcept TypeError:\n\n # not iterable\n\nelse:\n\n # iterable\n\n# for obj in iterator:\n\n# pass\n\n</code></pre>\n\n<h2>Type checking</h2>\n\n<p>Use the <a href="https://docs.python.org/library/abc.html" rel="noreferrer">Abstract Base Classes</a>. They need at least Python 2.6 and work only for new-style classes.</p>\n\n<pre><code>from collections.abc import Iterable # import directly from collections for Python < 3.3\n\nif isinstance(theElement, Iterable):\n\n # iterable\n\nelse:\n\n # not iterable\n\n</code></pre>\n\n<p>However, <code>iter()</code> is a bit more reliable as described <a href="https://docs.python.org/library/collections.abc.html#collections.abc.Iterable" rel="noreferrer">by the documentation</a>:</p>\n\n<blockquote>\n\n <p>Checking <code>isinstance(obj, Iterable)</code> detects classes that are\n\n registered as Iterable or that have an <code>__iter__()</code> method, but\n\n it does not detect classes that iterate with the <code>__getitem__()</code>\n\n method. The only reliable way to determine whether an object\n\n is iterable is to call <code>iter(obj)</code>.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	778
ImportError: No module named sklearn.cross_validation	<p>It must relate to the renaming and deprecation of <code>cross_validation</code> sub-module to <code>model_selection</code>. Try substituting <code>cross_validation</code> to <code>model_selection</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	779
What does -1 mean in numpy reshape?	<p>The criterion to satisfy for providing the new shape is that <em>'The new shape should be compatible with the original shape'</em></p>\n\n<p>numpy allow us to give one of new shape parameter as -1 (eg: (2,-1) or (-1,3) but not (-1, -1)). It simply means that it is an unknown dimension and we want numpy to figure it out. And numpy will figure this by looking at the <em>'length of the array and remaining dimensions'</em> and making sure it satisfies the above mentioned criteria</p>\n\n<p>Now see the example.</p>\n\n<pre><code>z = np.array([[1, 2, 3, 4],\n\n [5, 6, 7, 8],\n\n [9, 10, 11, 12]])\n\nz.shape\n\n(3, 4)\n\n</code></pre>\n\n<p>Now trying to reshape with (-1) . Result new shape is (12,) and is compatible with original shape (3,4) </p>\n\n<pre><code>z.reshape(-1)\n\narray([ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\n</code></pre>\n\n<p>Now trying to reshape with (-1, 1) . We have provided column as 1 but rows as unknown . So we get result new shape as (12, 1).again compatible with original shape(3,4) </p>\n\n<pre><code>z.reshape(-1,1)\n\narray([[ 1],\n\n [ 2],\n\n [ 3],\n\n [ 4],\n\n [ 5],\n\n [ 6],\n\n [ 7],\n\n [ 8],\n\n [ 9],\n\n [10],\n\n [11],\n\n [12]])\n\n</code></pre>\n\n<p>The above is consistent with <code>numpy</code> advice/error message, to use <code>reshape(-1,1)</code> for a single feature; i.e. single column</p>\n\n<blockquote>\n\n <p>Reshape your data using <code>array.reshape(-1, 1)</code> if your data has a <strong>single feature</strong></p>\n\n</blockquote>\n\n<p>New shape as (-1, 2). row unknown, column 2. we get result new shape as (6, 2)</p>\n\n<pre><code>z.reshape(-1, 2)\n\narray([[ 1, 2],\n\n [ 3, 4],\n\n [ 5, 6],\n\n [ 7, 8],\n\n [ 9, 10],\n\n [11, 12]])\n\n</code></pre>\n\n<p>Now trying to keep column as unknown. New shape as (1,-1). i.e, row is 1, column unknown. we get result new shape as (1, 12)</p>\n\n<pre><code>z.reshape(1,-1)\n\narray([[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]])\n\n</code></pre>\n\n<p>The above is consistent with <code>numpy</code> advice/error message, to use <code>reshape(1,-1)</code> for a single sample; i.e. single row</p>\n\n<blockquote>\n\n <p>Reshape your data using <code>array.reshape(1, -1)</code> if it contains a <strong>single sample</strong></p>\n\n</blockquote>\n\n<p>New shape (2, -1). Row 2, column unknown. we get result new shape as (2,6)</p>\n\n<pre><code>z.reshape(2, -1)\n\narray([[ 1, 2, 3, 4, 5, 6],\n\n [ 7, 8, 9, 10, 11, 12]])\n\n</code></pre>\n\n<p>New shape as (3, -1). Row 3, column unknown. we get result new shape as (3,4)</p>\n\n<pre><code>z.reshape(3, -1)\n\narray([[ 1, 2, 3, 4],\n\n [ 5, 6, 7, 8],\n\n [ 9, 10, 11, 12]])\n\n</code></pre>\n\n<p>And finally, if we try to provide both dimension as unknown i.e new shape as (-1,-1). It will throw an error</p>\n\n<pre><code>z.reshape(-1, -1)\n\nValueError: can only specify one unknown dimension\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	780
Why does comparing strings using either '==' or 'is' sometimes produce a different result?	<p>Other answers here are correct: <code>is</code> is used for <em>identity</em> comparison, while <code>==</code> is used for <em>equality</em> comparison. Since what you care about is equality (the two strings should contain the same characters), in this case the <code>is</code> operator is simply wrong and you should be using <code>==</code> instead.</p>\n\n<p>The reason <code>is</code> works interactively is that (most) string literals are <a href="https://en.wikipedia.org/wiki/String_interning" rel="noreferrer">interned</a> by default. From Wikipedia:</p>\n\n<blockquote>\n\n <p>Interned strings speed up string\n\n comparisons, which are sometimes a\n\n performance bottleneck in applications\n\n (such as compilers and dynamic\n\n programming language runtimes) that\n\n rely heavily on hash tables with\n\n string keys. Without interning,\n\n checking that two different strings\n\n are equal involves examining every\n\n character of both strings. This is\n\n slow for several reasons: it is\n\n inherently O(n) in the length of the\n\n strings; it typically requires reads\n\n from several regions of memory, which\n\n take time; and the reads fills up the\n\n processor cache, meaning there is less\n\n cache available for other needs. With\n\n interned strings, a simple object\n\n identity test suffices after the\n\n original intern operation; this is\n\n typically implemented as a pointer\n\n equality test, normally just a single\n\n machine instruction with no memory\n\n reference at all.</p>\n\n</blockquote>\n\n<p>So, when you have two string literals (words that are literally typed into your program source code, surrounded by quotation marks) in your program that have the same value, the Python compiler will automatically intern the strings, making them both stored at the same memory location. (Note that this doesn't <em>always</em> happen, and the rules for when this happens are quite convoluted, so please don't rely on this behavior in production code!)</p>\n\n<p>Since in your interactive session both strings are actually stored in the same memory location, they have the same <em>identity</em>, so the <code>is</code> operator works as expected. But if you construct a string by some other method (even if that string contains <em>exactly</em> the same characters), then the string may be <em>equal</em>, but it is not <em>the same string</em> -- that is, it has a different <em>identity</em>, because it is stored in a different place in memory.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	781
Convert a Unicode string to a string in Python (containing extra symbols)	<p>See <a href="https://docs.python.org/library/unicodedata.html#unicodedata.normalize" rel="nofollow noreferrer"><code>unicodedata.normalize</code></a></p>\n\n<pre><code>title = u"KlÃ¼ft skrÃ¤ms infÃ¶r pÃ¥ fÃ©dÃ©ral Ã©lectoral groÃe"\n\nimport unicodedata\n\nunicodedata.normalize('NFKD', title).encode('ascii', 'ignore')\n\n'Kluft skrams infor pa federal electoral groe'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	782
How can I see normal print output created during pytest run?	<p>The <a href="https://docs.pytest.org/en/latest/capture.html#setting-capturing-methods-or-disabling-capturing" rel="noreferrer"><code>-s</code> switch</a> disables per-test capturing.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	783
How to empty a list?	<p>This actually removes the contents from the list, but doesn't replace the old label with a new empty list:</p>\n\n<pre><code>del lst[:]\n\n</code></pre>\n\n<p>Here's an example:</p>\n\n<pre><code>lst1 = [1, 2, 3]\n\nlst2 = lst1\n\ndel lst1[:]\n\nprint(lst2)\n\n</code></pre>\n\n<p>For the sake of completeness, the slice assignment has the same effect:</p>\n\n<pre><code>lst[:] = []\n\n</code></pre>\n\n<p>It can also be used to shrink a part of the list while replacing a part at the same time (but that is out of the scope of the question).</p>\n\n<p>Note that doing <code>lst = []</code> does not empty the list, just creates a new object and binds it to the variable <code>lst</code>, but the old list will still have the same elements, and effect will be apparent if it had other variable bindings.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	784
NameError: global name 'xrange' is not defined in Python 3	<p>You are trying to run a Python 2 codebase with Python 3. <a href="https://docs.python.org/2/library/functions.html#xrange" rel="noreferrer"><code>xrange()</code></a> was renamed to <a href="https://docs.python.org/3/library/functions.html#func-range" rel="noreferrer"><code>range()</code></a> in Python 3.</p>\n\n<p>Run the game with Python 2 instead. Don't try to port it unless you know what you are doing, most likely there will be more problems beyond <code>xrange()</code> vs. <code>range()</code>.</p>\n\n<p>For the record, what you are seeing is not a syntax error but a runtime exception instead.</p>\n\n<hr>\n\n<p>If you do know what your are doing and are actively making a Python 2 codebase compatible with Python 3, you can bridge the code by adding the global name to your module as an alias for <code>range</code>. (Take into account that you <em>may</em> have to update any existing <code>range()</code> use in the Python 2 codebase with <code>list(range(...))</code> to ensure you still get a list object in Python 3):</p>\n\n<pre><code>try:\n\n # Python 2\n\n xrange\n\nexcept NameError:\n\n # Python 3, xrange is now named range\n\n xrange = range\n\n# Python 2 code that uses xrange(...) unchanged, and any\n\n# range(...) replaced with list(range(...))\n\n</code></pre>\n\n<p>or replace all uses of <code>xrange(...)</code> with <code>range(...)</code> in the codebase and then use a different shim to make the Python 3 syntax compatible with Python 2:</p>\n\n<pre><code>try:\n\n # Python 2 forward compatibility\n\n range = xrange\n\nexcept NameError:\n\n pass\n\n# Python 2 code transformed from range(...) -> list(range(...)) and\n\n# xrange(...) -> range(...).\n\n</code></pre>\n\n<p>The latter is preferable for codebases that want to aim to be Python 3 compatible <em>only</em> in the long run, it is easier to then just use Python 3 syntax whenever possible.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	785
How can I tell if a string repeats itself in Python?	<p>Here's a concise solution which avoids regular expressions and slow in-Python loops:</p>\n\n<pre><code>def principal_period(s):\n\n i = (s+s).find(s, 1, -1)\n\n return None if i == -1 else s[:i]\n\n</code></pre>\n\n<p>See the <a href="https://stackoverflow.com/a/29482936/2447250">Community Wiki answer</a> started by @davidism for benchmark results. In summary,</p>\n\n<blockquote>\n\n <p>David Zhang's solution is the clear winner, outperforming all others by at least 5x for the large example set.</p>\n\n</blockquote>\n\n<p>(That answer's words, not mine.)</p>\n\n<p>This is based on the observation that a string is periodic if and only if it is equal to a nontrivial rotation of itself. Kudos to @AleksiTorhamo for realizing that we can then recover the principal period from the index of the first occurrence of <code>s</code> in <code>(s+s)[1:-1]</code>, and for informing me of the optional <code>start</code> and <code>end</code> arguments of Python's <code>string.find</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	786
how to check if a file is a directory or regular file in python?	<pre><code>os.path.isfile("bob.txt") # Does bob.txt exist? Is it a file, or a directory?\n\nos.path.isdir("bob")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	787
How do I install the yaml package for Python?	<p>You could try the search feature in pip, </p>\n\n<pre><code>$ pip search yaml\n\n</code></pre>\n\n<p>which looks for packages in PyPI with yaml in the short description. That reveals various packages, including PyYaml, yamltools, and PySyck, among others (Note that <a href="http://pyyaml.org/wiki/PySyck" rel="noreferrer">PySyck docs</a> recommend using PyYaml, since syck is out of date). Now you know a specific package name, you can install it:</p>\n\n<pre><code>$ pip install pyyaml\n\n</code></pre>\n\n<p>If you want to install python yaml system-wide in linux, you can also use a package manager, like <code>aptitude</code> or <code>yum</code>:</p>\n\n<pre><code>$ sudo apt-get install python-yaml\n\n$ sudo yum install python-yaml\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	788
How to input a regex in string.replace?	<p>This tested snippet should do it:</p>\n\n<pre class="lang-py prettyprint-override"><code>import re\n\nline = re.sub(r"</?\[\d+>", "", line)\n\n</code></pre>\n\n<p><strong>Edit:</strong> Here's a commented version explaining how it works:</p>\n\n<pre><code>line = re.sub(r"""\n\n (?x) # Use free-spacing mode.\n\n < # Match a literal '<'\n\n /? # Optionally match a '/'\n\n \[ # Match a literal '['\n\n \d+ # Match one or more digits\n\n > # Match a literal '>'\n\n """, "", line)\n\n</code></pre>\n\n<p>Regexes are <em>fun!</em> But I would strongly recommend spending an hour or two studying the basics. For starters, you need to learn which characters are special: <em>"metacharacters"</em> which need to be escaped (i.e. with a backslash placed in front - and the rules are different inside and outside character classes.) There is an excellent online tutorial at: <a href="http://www.regular-expressions.info/" rel="noreferrer">www.regular-expressions.info</a>. The time you spend there will pay for itself many times over. Happy regexing!</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	789
How to get MD5 sum of a string using python?	<p>You can do the following:</p>\n\n<p><strong>Python 2.x</strong></p>\n\n<pre><code>import hashlib\n\nprint hashlib.md5("whatever your string is").hexdigest()\n\n</code></pre>\n\n<hr>\n\n<p><strong>Python 3.x</strong></p>\n\n<pre><code>import hashlib\n\nprint(hashlib.md5("whatever your string is".encode('utf-8')).hexdigest())\n\n</code></pre>\n\n<hr>\n\n<p>However in this case you're probably better off using this helpful Python module for interacting with the Flickr API:</p>\n\n<ul>\n\n<li><a href="http://stuvel.eu/flickrapi">http://stuvel.eu/flickrapi</a></li>\n\n</ul>\n\n<p>... which will deal with the authentication for you.</p>\n\n<p>Official documentation of <a href="https://docs.python.org/2/library/hashlib.html#module-hashlib">hashlib</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	790
How to fix: "UnicodeDecodeError: 'ascii' codec can't decode byte"	<h1>tl;dr / quick fix</h1>\n\n<ul>\n\n<li>Don't decode/encode willy nilly</li>\n\n<li>Don't assume your strings are UTF-8 encoded</li>\n\n<li>Try to convert strings to Unicode strings as soon as possible in your code</li>\n\n<li>Fix your locale: <a href="https://stackoverflow.com/questions/51026315/how-to-solve-unicodedecodeerror-in-python-3-6/51027262#51027262">How to solve UnicodeDecodeError in Python 3.6?</a></li>\n\n<li>Don't be tempted to use quick <code>reload</code> hacks</li>\n\n</ul>\n\n<h1>Unicode Zen in Python 2.x - The Long Version</h1>\n\n<p>Without seeing the source it's difficult to know the root cause, so I'll have to speak generally.</p>\n\n<p><code>UnicodeDecodeError: 'ascii' codec can't decode byte</code> generally happens when you try to convert a Python 2.x <code>str</code> that contains non-ASCII to a Unicode string without specifying the encoding of the original string.</p>\n\n<p>In brief, Unicode strings are an entirely separate type of Python string that does not contain any encoding. They only hold Unicode <strong>point codes</strong> and therefore can hold any Unicode point from across the entire spectrum. Strings contain encoded text, beit UTF-8, UTF-16, ISO-8895-1, GBK, Big5 etc. <strong>Strings are decoded to Unicode</strong> and <strong>Unicodes are encoded to strings</strong>. Files and text data are always transferred in encoded strings.</p>\n\n<p>The Markdown module authors probably use <code>unicode()</code> (where the exception is thrown) as a quality gate to the rest of the code - it will convert ASCII or re-wrap existing Unicodes strings to a new Unicode string. The Markdown authors can't know the encoding of the incoming string so will rely on you to decode strings to Unicode strings before passing to Markdown.</p>\n\n<p>Unicode strings can be declared in your code using the <code>u</code> prefix to strings. E.g.</p>\n\n<pre><code>>>> my_u = u'my Ã¼nicÃ´dÃ© strÄ¯ng'\n\n>>> type(my_u)\n\n<type 'unicode'>\n\n</code></pre>\n\n<p>Unicode strings may also come from file, databases and network modules. When this happens, you don't need to worry about the encoding.</p>\n\n<h1>Gotchas</h1>\n\n<p>Conversion from <code>str</code> to Unicode can happen even when you don't explicitly call <code>unicode()</code>.</p>\n\n<p>The following scenarios cause <code>UnicodeDecodeError</code> exceptions:</p>\n\n<pre class="lang-python prettyprint-override"><code># Explicit conversion without encoding\n\nunicode('â¬')\n\n# New style format string into Unicode string\n\n# Python will try to convert value string to Unicode first\n\nu"The currency is: {}".format('â¬')\n\n# Old style format string into Unicode string\n\n# Python will try to convert value string to Unicode first\n\nu'The currency is: %s' % 'â¬'\n\n# Append string to Unicode\n\n# Python will try to convert string to Unicode first\n\nu'The currency is: ' + 'â¬' \n\n</code></pre>\n\n<h2>Examples</h2>\n\n<p>In the following diagram, you can see how the word <code>cafÃ©</code> has been encoded in either "UTF-8" or "Cp1252" encoding depending on the terminal type. In both examples, <code>caf</code> is just regular ascii. In UTF-8, <code>Ã©</code> is encoded using two bytes. In "Cp1252", Ã© is 0xE9 (which is also happens to be the Unicode point value (it's no coincidence)). The correct <code>decode()</code> is invoked and conversion to a Python Unicode is successfull:\n\n<a href="https://i.stack.imgur.com/uUUBd.jpg" rel="noreferrer"><img src="https://i.stack.imgur.com/uUUBd.jpg" alt="Diagram of a string being converted to a Python Unicode string"></a></p>\n\n<p>In this diagram, <code>decode()</code> is called with <code>ascii</code> (which is the same as calling <code>unicode()</code> without an encoding given). As ASCII can't contain bytes greater than <code>0x7F</code>, this will throw a <code>UnicodeDecodeError</code> exception:</p>\n\n<p><a href="https://i.stack.imgur.com/oyk7O.jpg" rel="noreferrer"><img src="https://i.stack.imgur.com/oyk7O.jpg" alt="Diagram of a string being converted to a Python Unicode string with the wrong encoding"></a></p>\n\n<h1>The Unicode Sandwich</h1>\n\n<p>It's good practice to form a Unicode sandwich in your code, where you decode all incoming data to Unicode strings, work with Unicodes, then encode to <code>str</code>s on the way out. This saves you from worrying about the encoding of strings in the middle of your code.</p>\n\n<h2>Input / Decode</h2>\n\n<h3>Source code</h3>\n\n<p>If you need to bake non-ASCII into your source code, just create Unicode strings by prefixing the string with a <code>u</code>. E.g.</p>\n\n<pre><code>u'ZÃ¼rich'\n\n</code></pre>\n\n<p>To allow Python to decode your source code, you will need to add an encoding header to match the actual encoding of your file. For example, if your file was encoded as 'UTF-8', you would use:</p>\n\n<pre><code># encoding: utf-8\n\n</code></pre>\n\n<p>This is only necessary when you have non-ASCII in your <strong>source code</strong>.</p>\n\n<h3>Files</h3>\n\n<p>Usually non-ASCII data is received from a file. The <code>io</code> module provides a TextWrapper that decodes your file on the fly, using a given <code>encoding</code>. You must use the correct encoding for the file - it can't be easily guessed. For example, for a UTF-8 file:</p>\n\n<pre><code>import io\n\nwith io.open("my_utf8_file.txt", "r", encoding="utf-8") as my_file:\n\n my_unicode_string = my_file.read() \n\n</code></pre>\n\n<p><code>my_unicode_string</code> would then be suitable for passing to Markdown. If a <code>UnicodeDecodeError</code> from the <code>read()</code> line, then you've probably used the wrong encoding value.</p>\n\n<h3>CSV Files</h3>\n\n<p>The Python 2.7 CSV module does not support non-ASCII characters ð©. Help is at hand, however, with <a href="https://pypi.python.org/pypi/backports.csv" rel="noreferrer">https://pypi.python.org/pypi/backports.csv</a>.</p>\n\n<p>Use it like above but pass the opened file to it:</p>\n\n<pre><code>from backports import csv\n\nimport io\n\nwith io.open("my_utf8_file.txt", "r", encoding="utf-8") as my_file:\n\n for row in csv.reader(my_file):\n\n yield row\n\n</code></pre>\n\n<h3>Databases</h3>\n\n<p>Most Python database drivers can return data in Unicode, but usually require a little configuration. Always use Unicode strings for SQL queries.</p>\n\nMySQL\n\n<p>In the connection string add:</p>\n\n<pre><code>charset='utf8',\n\nuse_unicode=True\n\n</code></pre>\n\n<p>E.g.</p>\n\n<pre><code>>>> db = MySQLdb.connect(host="localhost", user='root', passwd='passwd', db='sandbox', use_unicode=True, charset="utf8")\n\n</code></pre>\n\nPostgreSQL\n\n<p>Add:</p>\n\n<pre><code>psycopg2.extensions.register_type(psycopg2.extensions.UNICODE)\n\npsycopg2.extensions.register_type(psycopg2.extensions.UNICODEARRAY)\n\n</code></pre>\n\n<h3>HTTP</h3>\n\n<p>Web pages can be encoded in just about any encoding. The <code>Content-type</code> header should contain a <code>charset</code> field to hint at the encoding. The content can then be decoded manually against this value. Alternatively, <a href="https://requests.readthedocs.io/" rel="noreferrer" title="Python-Requests">Python-Requests</a> returns Unicodes in <code>response.text</code>.</p>\n\n<h3>Manually</h3>\n\n<p>If you must decode strings manually, you can simply do <code>my_string.decode(encoding)</code>, where <code>encoding</code> is the appropriate encoding. Python 2.x supported codecs are given here: <a href="https://docs.python.org/2/library/codecs.html#standard-encodings" rel="noreferrer" title="Standard Encodings">Standard Encodings</a>. Again, if you get <code>UnicodeDecodeError</code> then you've probably got the wrong encoding.</p>\n\n<h2>The meat of the sandwich</h2>\n\n<p>Work with Unicodes as you would normal strs.</p>\n\n<h2>Output</h2>\n\n<h3>stdout / printing</h3>\n\n<p><code>print</code> writes through the stdout stream. Python tries to configure an encoder on stdout so that Unicodes are encoded to the console's encoding. For example, if a Linux shell's <code>locale</code> is <code>en_GB.UTF-8</code>, the output will be encoded to <code>UTF-8</code>. On Windows, you will be limited to an 8bit code page.</p>\n\n<p>An incorrectly configured console, such as corrupt locale, can lead to unexpected print errors. <code>PYTHONIOENCODING</code> environment variable can force the encoding for stdout. </p>\n\n<h3>Files</h3>\n\n<p>Just like input, <code>io.open</code> can be used to transparently convert Unicodes to encoded byte strings.</p>\n\n<h3>Database</h3>\n\n<p>The same configuration for reading will allow Unicodes to be written directly.</p>\n\n<h1>Python 3</h1>\n\n<p>Python 3 is no more Unicode capable than Python 2.x is, however it is slightly less confused on the topic. E.g the regular <code>str</code> is now a Unicode string and the old <code>str</code> is now <code>bytes</code>. </p>\n\n<p>The default encoding is UTF-8, so if you <code>.decode()</code> a byte string without giving an encoding, Python 3 uses UTF-8 encoding. This probably fixes 50% of people's Unicode problems.</p>\n\n<p>Further, <code>open()</code> operates in text mode by default, so returns decoded <code>str</code> (Unicode ones). The encoding is derived from your locale, which tends to be UTF-8 on Un*x systems or an 8-bit code page, such as windows-1251, on Windows boxes.</p>\n\n<h1>Why you shouldn't use <code>sys.setdefaultencoding('utf8')</code></h1>\n\n<p>It's a nasty hack (there's a reason you have to use <code>reload</code>) that will only mask problems and hinder your migration to Python 3.x. Understand the problem, fix the root cause and enjoy Unicode zen.\n\nSee <a href="https://stackoverflow.com/questions/3828723/why-should-we-not-use-sys-setdefaultencodingutf-8-in-a-py-script/34378962#34378962">Why should we NOT use sys.setdefaultencoding("utf-8") in a py script?</a> for further details</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	791
Test if a variable is a list or tuple	<pre><code>if type(x) is list:\n\n print 'a list'\n\nelif type(x) is tuple:\n\n print 'a tuple'\n\nelse:\n\n print 'neither a tuple or a list'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	792
Python strftime - date without leading 0?	<p>Actually I had the same problem and I realized that, if you add a hyphen between the <code>%</code> and the letter, you can remove the leading zero.</p>\n\n<p>For example <code>%Y/%-m/%-d</code>.</p>\n\n<p>This only works on Unix (Linux, OS X), not Windows (including Cygwin). On Windows, you would use <code>#</code>, e.g. <code>%Y/%#m/%#d</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	793
Delete a dictionary item if the key exists	<p>You can use <a href="http://docs.python.org/3/library/stdtypes.html#dict.pop" rel="noreferrer"> <code>dict.pop</code></a>:</p>\n\n<pre><code> mydict.pop("key", None)\n\n</code></pre>\n\n<p>Note that if the second argument, i.e. <code>None</code> is not given, <code>KeyError</code> is raised if the key is not in the dictionary. Providing the second argument prevents the conditional exception.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	794
Convert base-2 binary number string to int	<p>You use the built-in <code>int</code> function, and pass it the base of the input number, i.e. <code>2</code> for a binary number:</p>\n\n<pre><code>>>> int('11111111', 2)\n\n255\n\n</code></pre>\n\n<p>Here is documentation for <a href="https://docs.python.org/2/library/functions.html#int" rel="noreferrer">python2</a>, and for <a href="https://docs.python.org/3.6/library/functions.html#int" rel="noreferrer">python3</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	795
Case insensitive regular expression without re.compile?	<p>Pass <code>re.IGNORECASE</code> to the <code>flags</code> param of <a href="https://docs.python.org/library/re.html#re.search" rel="noreferrer"><code>search</code></a>, <a href="https://docs.python.org/library/re.html#re.match" rel="noreferrer"><code>match</code></a>, or <a href="https://docs.python.org/library/re.html#re.sub" rel="noreferrer"><code>sub</code></a>:</p>\n\n<pre><code>re.search('test', 'TeSt', re.IGNORECASE)\n\nre.match('test', 'TeSt', re.IGNORECASE)\n\nre.sub('test', 'xxxx', 'Testing', flags=re.IGNORECASE)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	796
Run function from the command line	<p>With the <code>-c</code> <em>(command)</em> argument (assuming your file is named <code>foo.py</code>):</p>\n\n<pre><code>$ python -c 'import foo; print foo.hello()'\n\n</code></pre>\n\n<p>Alternatively, if you don't care about namespace pollution:</p>\n\n<pre><code>$ python -c 'from foo import *; print hello()'\n\n</code></pre>\n\n<p>And the middle ground:</p>\n\n<pre><code>$ python -c 'from foo import hello; print hello()'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	797
Converting Python dict to kwargs?	<p>Use the <a href="http://docs.python.org/tutorial/controlflow.html#unpacking-argument-lists" rel="noreferrer">double-star</a> (aka <a href="https://stackoverflow.com/questions/2322355/proper-name-for-python-operator/2322384#2322384">double-splat?</a>) operator:</p>\n\n<pre><code>func(**{'type':'Event'})\n\n</code></pre>\n\n<p>is equivalent to</p>\n\n<pre><code>func(type='Event')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	798
Adding 5 days to a date in Python	<p>The previous answers are correct but it's generally a better practice to do:</p>\n\n<pre><code>import datetime\n\n</code></pre>\n\n<p>Then you'll have, using <a href="https://docs.python.org/2/library/datetime.html#datetime.timedelta" rel="noreferrer"><code>datetime.timedelta</code></a>:</p>\n\n<pre><code>date_1 = datetime.datetime.strptime(start_date, "%m/%d/%y")\n\nend_date = date_1 + datetime.timedelta(days=10)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	799
TypeError: 'module' object is not callable	<p><code>socket</code> is a module, containing the class <code>socket</code>.</p>\n\n<p>You need to do <code>socket.socket(...)</code> or <code>from socket import socket</code>:</p>\n\n<pre><code>>>> import socket\n\n>>> socket\n\n<module 'socket' from 'C:\Python27\lib\socket.pyc'>\n\n>>> socket.socket\n\n<class 'socket._socketobject'>\n\n>>>\n\n>>> from socket import socket\n\n>>> socket\n\n<class 'socket._socketobject'>\n\n</code></pre>\n\n<p>This is what the error message means:<br>\n\nIt says <code>module object is not callable</code>, because your code is calling a <em>module</em> object. A module object is the type of thing you get when you import a module. What you were trying to do is to call a <em>class</em> object within the module object that happens to have the same name as the module that contains it.</p>\n\n<p>Here is a way to logically break down this sort of error:</p>\n\n<ul>\n\n<li>"<code>module object is not callable</code>. Python is telling me my code trying to call something that cannot be called. What is my code trying to call?"</li>\n\n<li>"The code is trying to call on <code>socket</code>. That should be callable! Is the variable <code>socket</code> is what I think it is?`</li>\n\n<li>I should print out what socket is and check <code>print socket</code></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	800
Call a function from another file in Python	<p>There isn't any need to add <code>file.py</code> while importing. Just write <code>from file import function</code>, and then call the function using <code>function(a, b)</code>. The reason why this may not work, is because <code>file</code> is one of Python's core modules, so I suggest you change the name of your file.</p>\n\n<p>Note that if you're trying to import functions from <code>a.py</code> to a file called <code>b.py</code>, you will need to make sure that <code>a.py</code> and <code>b.py</code> are in the same directory.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	801
How do I get the path and name of the file that is currently executing?	<pre><code>__file__\n\n</code></pre>\n\n<p>as others have said. You may also want to use <a href="https://docs.python.org/3/library/os.path.html#os.path.realpath" rel="noreferrer">os.path.realpath</a> to eliminate symlinks:</p>\n\n<pre><code>import os\n\nos.path.realpath(__file__)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	802
What does the "yield" keyword do?	<p>Think of it this way:</p>\n\n<p>An iterator is just a fancy sounding term for an object that has a <code>next()</code> method. So a yield-ed function ends up being something like this:</p>\n\n<p>Original version:</p>\n\n<pre><code>def some_function():\n\n for i in xrange(4):\n\n yield i\n\nfor i in some_function():\n\n print i\n\n</code></pre>\n\n<p>This is basically what the Python interpreter does with the above code:</p>\n\n<pre><code>class it:\n\n def __init__(self):\n\n # Start at -1 so that we get 0 when we add 1 below.\n\n self.count = -1\n\n # The __iter__ method will be called once by the 'for' loop.\n\n # The rest of the magic happens on the object returned by this method.\n\n # In this case it is the object itself.\n\n def __iter__(self):\n\n return self\n\n # The next method will be called repeatedly by the 'for' loop\n\n # until it raises StopIteration.\n\n def next(self):\n\n self.count += 1\n\n if self.count < 4:\n\n return self.count\n\n else:\n\n # A StopIteration exception is raised\n\n # to signal that the iterator is done.\n\n # This is caught implicitly by the 'for' loop.\n\n raise StopIteration\n\ndef some_func():\n\n return it()\n\nfor i in some_func():\n\n print i\n\n</code></pre>\n\n<p>For more insight as to what's happening behind the scenes, the <code>for</code> loop can be rewritten to this:</p>\n\n<pre><code>iterator = some_func()\n\ntry:\n\n while 1:\n\n print iterator.next()\n\nexcept StopIteration:\n\n pass\n\n</code></pre>\n\n<p>Does that make more sense or just confuse you more? :)</p>\n\n<p>I should note that this <em>is</em> an oversimplification for illustrative purposes. :)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	803
Finding the index of an item in a list	<p>The majority of answers explain how to find <strong>a single index</strong>, but their methods do not return multiple indexes if the item is in the list multiple times. Use <a href="https://docs.python.org/library/functions.html#enumerate" rel="noreferrer"><code>enumerate()</code></a>:</p>\n\n<pre><code>for i, j in enumerate(['foo', 'bar', 'baz']):\n\n if j == 'bar':\n\n print(i)\n\n</code></pre>\n\n<p>The <code>index()</code> function only returns the first occurrence, while <code>enumerate()</code> returns all occurrences.</p>\n\n<p>As a list comprehension:</p>\n\n<pre><code>[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'bar']\n\n</code></pre>\n\n<hr>\n\n<p>Here's also another small solution with <a href="http://docs.python.org/library/itertools.html#itertools.count" rel="noreferrer"><code>itertools.count()</code></a> (which is pretty much the same approach as enumerate):</p>\n\n<pre><code>from itertools import izip as zip, count # izip for maximum efficiency\n\n[i for i, j in zip(count(), ['foo', 'bar', 'baz']) if j == 'bar']\n\n</code></pre>\n\n<p>This is more efficient for larger lists than using <code>enumerate()</code>:</p>\n\n<pre><code>$ python -m timeit -s "from itertools import izip as zip, count" "[i for i, j in zip(count(), ['foo', 'bar', 'baz']*500) if j == 'bar']"\n\n10000 loops, best of 3: 174 usec per loop\n\n$ python -m timeit "[i for i, j in enumerate(['foo', 'bar', 'baz']*500) if j == 'bar']"\n\n10000 loops, best of 3: 196 usec per loop\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	804
What does the Ellipsis object do?	<p>This came up in another <a href="https://stackoverflow.com/questions/752602/slicing-in-python-expressions-documentation">question</a> recently. I'll elaborate on my <a href="https://stackoverflow.com/questions/752602/slicing-in-python-expressions-documentation/753260#753260">answer</a> from there:</p>\n\n<p><a href="http://docs.python.org/dev/library/constants.html#Ellipsis" rel="noreferrer">Ellipsis</a> is an object that can appear in slice notation. For example:</p>\n\n<pre><code>myList[1:2, ..., 0]\n\n</code></pre>\n\n<p>Its interpretation is purely up to whatever implements the <code>__getitem__</code> function and sees <code>Ellipsis</code> objects there, but its main (and intended) use is in the <a href="http://www.numpy.org/" rel="noreferrer">numpy</a> third-party library, which adds a multidimensional array type. Since there are more than one dimensions, slicing becomes more complex than just a start and stop index; it is useful to be able to slice in multiple dimensions as well. E.g., given a 4x4 array, the top left area would be defined by the slice <code>[:2,:2]</code>:</p>\n\n<pre><code>>>> a\n\narray([[ 1, 2, 3, 4],\n\n [ 5, 6, 7, 8],\n\n [ 9, 10, 11, 12],\n\n [13, 14, 15, 16]])\n\n>>> a[:2,:2] # top left\n\narray([[1, 2],\n\n [5, 6]])\n\n</code></pre>\n\n<p>Extending this further, Ellipsis is used here to indicate a placeholder for the rest of the array dimensions not specified. Think of it as indicating the full slice <code>[:]</code> for all the dimensions in the gap it is placed, so for a 3d array, <code>a[...,0]</code> is the same as <code>a[:,:,0]</code> and for 4d, <code>a[:,:,:,0]</code>, similarly, <code>a[0,...,0]</code> is <code>a[0,:,:,0]</code> (with however many colons in the middle make up the full number of dimensions in the array).</p>\n\n<p>Interestingly, in python3, the Ellipsis literal (<code>...</code>) is usable outside the slice syntax, so you can actually write: </p>\n\n<pre><code>>>> ...\n\nEllipsis\n\n</code></pre>\n\n<p>Other than the various numeric types, no, I don't think it's used. As far as I'm aware, it was added purely for numpy use and has no core support other than providing the object and corresponding syntax. The object being there didn't require this, but the literal "..." support for slices did.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	805
Get key by value in dictionary	<p>There is none. <code>dict</code> is not intended to be used this way.</p>\n\n<pre><code>dictionary = {'george': 16, 'amber': 19}\n\nsearch_age = input("Provide age")\n\nfor name, age in dictionary.items(): # for name, age in dictionary.iteritems(): (for Python 2.x)\n\n if age == search_age:\n\n print(name)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	806
What does numpy.random.seed(0) do?	<p><code>np.random.seed(0)</code> makes the random numbers predictable</p>\n\n<pre><code>>>> numpy.random.seed(0) ; numpy.random.rand(4)\n\narray([ 0.55, 0.72, 0.6 , 0.54])\n\n>>> numpy.random.seed(0) ; numpy.random.rand(4)\n\narray([ 0.55, 0.72, 0.6 , 0.54])\n\n</code></pre>\n\n<p>With the seed reset (every time), the <em>same</em> set of numbers will appear every time.</p>\n\n<p>If the random seed is not reset, <em>different</em> numbers appear with every invocation:</p>\n\n<pre><code>>>> numpy.random.rand(4)\n\narray([ 0.42, 0.65, 0.44, 0.89])\n\n>>> numpy.random.rand(4)\n\narray([ 0.96, 0.38, 0.79, 0.53])\n\n</code></pre>\n\n<p>(pseudo-)random numbers work by starting with a number (the seed), multiplying it by a large number, adding an offset, then taking modulo of that sum. The resulting number is then used as the seed to generate the next "random" number. When you set the seed (every time), it does the same thing every time, giving you the same numbers.</p>\n\n<p>If you want seemingly random numbers, do not set the seed. If you have code that uses random numbers that you want to debug, however, it can be very helpful to set the seed before each run so that the code does the same thing every time you run it.</p>\n\n<p>To get the most random numbers for each run, call <code>numpy.random.seed()</code>. <a href="https://docs.scipy.org/doc/numpy-1.3.x/reference/generated/numpy.random.seed.html" rel="noreferrer">This</a> will cause numpy to set the seed to a random number obtained from <code>/dev/urandom</code> or its Windows analog or, if neither of those is available, it will use the clock.</p>\n\n<p>For more information on using seeds to generate pseudo-random numbers, see <a href="https://en.wikipedia.org/wiki/Random_number_generation#Computational_methods" rel="noreferrer">wikipedia</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	807
What's the difference between a Python module and a Python package?	<p>Any Python file is a <a href="http://docs.python.org/tutorial/modules.html">module</a>, its name being the file's base name without the <code>.py</code> extension. A <a href="http://docs.python.org/tutorial/modules.html#packages">package</a> is a collection of Python modules: while a module is a single Python file, a package is a directory of Python modules containing an additional <code>__init__.py</code> file, to distinguish a package from a directory that just happens to contain a bunch of Python scripts. Packages can be nested to any depth, provided that the corresponding directories contain their own <code>__init__.py</code> file.</p>\n\n<p>The distinction between module and package seems to hold just at the file system level. When you import a module or a package, the corresponding object created by Python is always of type <code>module</code>. Note, however, when you import a package, only variables/functions/classes in the <code>__init__.py</code> file of that package are directly visible, <em>not</em> sub-packages or modules. As an example, consider the <code>xml</code> package in the Python standard library: its <code>xml</code> directory contains an <code>__init__.py</code> file and four sub-directories; the sub-directory <code>etree</code> contains an <code>__init__.py</code> file and, among others, an <code>ElementTree.py</code> file. See what happens when you try to interactively import package/modules:</p>\n\n<pre><code>>>> import xml\n\n>>> type(xml)\n\n<type 'module'>\n\n>>> xml.etree.ElementTree\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nAttributeError: 'module' object has no attribute 'etree'\n\n>>> import xml.etree\n\n>>> type(xml.etree)\n\n<type 'module'>\n\n>>> xml.etree.ElementTree\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nAttributeError: 'module' object has no attribute 'ElementTree'\n\n>>> import xml.etree.ElementTree\n\n>>> type(xml.etree.ElementTree)\n\n<type 'module'>\n\n>>> xml.etree.ElementTree.parse\n\n<function parse at 0x00B135B0>\n\n</code></pre>\n\n<p>In Python there also are built-in modules, such as <code>sys</code>, that are written in C, but I don't think you meant to consider those in your question.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	808
How to urlencode a querystring in Python?	<p>You need to pass your parameters into <a href="http://docs.python.org/2/library/urllib.html#urllib.urlencode" rel="noreferrer"><code>urlencode()</code></a> as either a mapping (dict), or a sequence of 2-tuples, like:</p>\n\n<pre><code>>>> import urllib\n\n>>> f = { 'eventName' : 'myEvent', 'eventDescription' : 'cool event'}\n\n>>> urllib.urlencode(f)\n\n'eventName=myEvent&eventDescription=cool+event'\n\n</code></pre>\n\n<p><strong>Python 3 or above</strong></p>\n\n<p>Use:</p>\n\n<pre><code>>>> urllib.parse.urlencode(f)\n\neventName=myEvent&eventDescription=cool+event\n\n</code></pre>\n\n<p>Note that this does <em>not</em> do url encoding in the commonly used sense (look at the output). For that use <code>urllib.parse.quote_plus</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	809
correct way to define class variables in Python	<p>Neither way is necessarily correct or incorrect, they are just two different kinds of class elements:</p>\n\n<ul>\n\n<li>Elements outside the <code>__init__</code> method are static elements; they belong to the class.</li>\n\n<li>Elements inside the <code>__init__</code> method are elements of the object (<code>self</code>); they don't belong to the class.</li>\n\n</ul>\n\n<p>You'll see it more clearly with some code:</p>\n\n<pre><code>class MyClass:\n\n static_elem = 123\n\n def __init__(self):\n\n self.object_elem = 456\n\nc1 = MyClass()\n\nc2 = MyClass()\n\n# Initial values of both elements\n\n>>> print c1.static_elem, c1.object_elem \n\n123 456\n\n>>> print c2.static_elem, c2.object_elem\n\n123 456\n\n# Nothing new so far ...\n\n# Let's try changing the static element\n\nMyClass.static_elem = 999\n\n>>> print c1.static_elem, c1.object_elem\n\n999 456\n\n>>> print c2.static_elem, c2.object_elem\n\n999 456\n\n# Now, let's try changing the object element\n\nc1.object_elem = 888\n\n>>> print c1.static_elem, c1.object_elem\n\n999 888\n\n>>> print c2.static_elem, c2.object_elem\n\n999 456\n\n</code></pre>\n\n<p>As you can see, when we changed the class element, it changed for both objects. But, when we changed the object element, the other object remained unchanged.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	810
Print multiple arguments in Python	<p>There are many ways to do this. To fix your current code using <code>%</code>-formatting, you need to pass in a tuple:</p>\n\n<ol>\n\n<li><p>Pass it as a tuple:</p>\n\n<pre><code>print("Total score for %s is %s" % (name, score))\n\n</code></pre></li>\n\n</ol>\n\n<p>A tuple with a single element looks like <code>('this',)</code>.</p>\n\n<p>Here are some other common ways of doing it:</p>\n\n<ol start="2">\n\n<li><p>Pass it as a dictionary:</p>\n\n<pre><code>print("Total score for %(n)s is %(s)s" % {'n': name, 's': score})\n\n</code></pre></li>\n\n</ol>\n\n<p>There's also new-style string formatting, which might be a little easier to read:</p>\n\n<ol start="3">\n\n<li><p>Use new-style string formatting:</p>\n\n<pre><code>print("Total score for {} is {}".format(name, score))\n\n</code></pre></li>\n\n<li><p>Use new-style string formatting with numbers (useful for reordering or printing the same one multiple times):</p>\n\n<pre><code>print("Total score for {0} is {1}".format(name, score))\n\n</code></pre></li>\n\n<li><p>Use new-style string formatting with explicit names:</p>\n\n<pre><code>print("Total score for {n} is {s}".format(n=name, s=score))\n\n</code></pre></li>\n\n<li><p>Concatenate strings:</p>\n\n<pre><code>print("Total score for " + str(name) + " is " + str(score))\n\n</code></pre></li>\n\n</ol>\n\n<p>The clearest two, in my opinion:</p>\n\n<ol start="7">\n\n<li><p>Just pass the values as parameters:</p>\n\n<pre><code>print("Total score for", name, "is", score)\n\n</code></pre>\n\n<p>If you don't want spaces to be inserted automatically by <code>print</code> in the above example, change the <code>sep</code> parameter:</p>\n\n<pre><code>print("Total score for ", name, " is ", score, sep='')\n\n</code></pre>\n\n<p>If you're using Python 2, won't be able to use the last two because <code>print</code> isn't a function in Python 2. You can, however, import this behavior from <code>__future__</code>:</p>\n\n<pre><code>from __future__ import print_function\n\n</code></pre></li>\n\n<li><p>Use the new <code>f</code>-string formatting in Python 3.6:</p>\n\n<pre><code>print(f'Total score for {name} is {score}')\n\n</code></pre></li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	811
List of lists changes reflected across sublists unexpectedly	<p>When you write <code>[x]*3</code> you get, essentially, the list <code>[x, x, x]</code>. That is, a list with 3 references to the same <code>x</code>. When you then modify this single <code>x</code> it is visible via all three references to it:</p>\n\n<pre><code>x = [1] * 4\n\nl = [x] * 3\n\nprint(f"id(x): {id(x)}")\n\n# id(x): 140560897920048\n\nprint(\n\n f"id(l[0]): {id(l[0])} "\n\n f"id(l[1]): {id(l[1])} "\n\n f"id(l[2]): {id(l[2])}"\n\n)\n\n# id(l[0]): 140560897920048\n\n# id(l[1]): 140560897920048\n\n# id(l[2]): 140560897920048\n\nx[0] = 42\n\nprint(f"x: {x}")\n\n# x: [42, 1, 1, 1]\n\nprint(f"l: {l}")\n\n# l: [[42, 1, 1, 1], [42, 1, 1, 1], [42, 1, 1, 1]]\n\n</code></pre>\n\n<p>To fix it, you need to make sure that you create a new list at each position. One way to do it is</p>\n\n<pre><code>[[1]*4 for _ in range(3)]\n\n</code></pre>\n\n<p>which will reevaluate <code>[1]*4</code> each time instead of evaluating it once and making 3 references to 1 list.</p>\n\n<hr>\n\n<p>You might wonder why <code>*</code> can't make independent objects the way the list comprehension does. That's because the multiplication operator <code>*</code> operates on objects, without seeing expressions. When you use <code>*</code> to multiply <code>[[1] * 4]</code> by 3, <code>*</code> only sees the 1-element list <code>[[1] * 4]</code> evaluates to, not the <code>[[1] * 4</code> expression text. <code>*</code> has no idea how to make copies of that element, no idea how to reevaluate <code>[[1] * 4]</code>, and no idea you even want copies, and in general, there might not even be a way to copy the element.</p>\n\n<p>The only option <code>*</code> has is to make new references to the existing sublist instead of trying to make new sublists. Anything else would be inconsistent or require major redesigning of fundamental language design decisions.</p>\n\n<p>In contrast, a list comprehension reevaluates the element expression on every iteration. <code>[[1] * 4 for n in range(3)]</code> reevaluates <code>[1] * 4</code> every time for the same reason <code>[x**2 for x in range(3)]</code> reevaluates <code>x**2</code> every time. Every evaluation of <code>[1] * 4</code> generates a new list, so the list comprehension does what you wanted.</p>\n\n<p>Incidentally, <code>[1] * 4</code> also doesn't copy the elements of <code>[1]</code>, but that doesn't matter, since integers are immutable. You can't do something like <code>1.value = 2</code> and turn a 1 into a 2.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	812
How to make a class JSON serializable	<p>Do you have an idea about the expected output? For example, will this do?</p>\n\n<pre><code>>>> f = FileItem("/foo/bar")\n\n>>> magic(f)\n\n'{"fname": "/foo/bar"}'\n\n</code></pre>\n\n<p>In that case you can merely call <code>json.dumps(f.__dict__)</code>. </p>\n\n<p>If you want more customized output then you will have to subclass <a href="https://docs.python.org/library/json.html#json.JSONEncoder" rel="noreferrer"><code>JSONEncoder</code></a> and implement your own custom serialization. </p>\n\n<p>For a trivial example, see below.</p>\n\n<pre><code>>>> from json import JSONEncoder\n\n>>> class MyEncoder(JSONEncoder):\n\n def default(self, o):\n\n return o.__dict__ \n\n>>> MyEncoder().encode(f)\n\n'{"fname": "/foo/bar"}'\n\n</code></pre>\n\n<p>Then you pass this class into the <a href="https://docs.python.org/library/json.html#json.dumps" rel="noreferrer"><code>json.dumps()</code></a> method as <code>cls</code> kwarg:</p>\n\n<pre><code>json.dumps(cls=MyEncoder)\n\n</code></pre>\n\n<p>If you also want to decode then you'll have to supply a custom <code>object_hook</code> to the <a href="https://docs.python.org/library/json.html#json.JSONDecoder" rel="noreferrer"><code>JSONDecoder</code></a> class. For example:</p>\n\n<pre><code>>>> def from_json(json_object):\n\n if 'fname' in json_object:\n\n return FileItem(json_object['fname'])\n\n>>> f = JSONDecoder(object_hook = from_json).decode('{"fname": "/foo/bar"}')\n\n>>> f\n\n<__main__.FileItem object at 0x9337fac>\n\n>>> \n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	813
How do I remove a substring from the end of a string in Python?	<p><a href="https://docs.python.org/library/stdtypes.html#str.strip" rel="noreferrer"><code>strip</code></a> doesn't mean "remove this substring". <code>x.strip(y)</code> treats <code>y</code> as a set of characters and strips any characters in that set from the ends of <code>x</code>.</p>\n\n<p>Instead, you could use <a href="https://docs.python.org/library/stdtypes.html#str.endswith" rel="noreferrer"><code>endswith</code></a> and slicing:</p>\n\n<pre><code>url = 'abcdc.com'\n\nif url.endswith('.com'):\n\n url = url[:-4]\n\n</code></pre>\n\n<p>Or using <a href="https://docs.python.org/library/re.html" rel="noreferrer">regular expressions</a>:</p>\n\n<pre><code>import re\n\nurl = 'abcdc.com'\n\nurl = re.sub('\.com$', '', url)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	814
Selecting a row of pandas series/dataframe by integer index	<p>echoing @HYRY, see the new docs in 0.11</p>\n\n<p><a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html" rel="noreferrer">http://pandas.pydata.org/pandas-docs/stable/indexing.html</a></p>\n\n<p>Here we have new operators, <code>.iloc</code> to explicity support only integer indexing, and <code>.loc</code> to explicity support only label indexing</p>\n\n<p>e.g. imagine this scenario</p>\n\n<pre><code>In [1]: df = pd.DataFrame(np.random.rand(5,2),index=range(0,10,2),columns=list('AB'))\n\nIn [2]: df\n\nOut[2]: \n\n A B\n\n0 1.068932 -0.794307\n\n2 -0.470056 1.192211\n\n4 -0.284561 0.756029\n\n6 1.037563 -0.267820\n\n8 -0.538478 -0.800654\n\nIn [5]: df.iloc[[2]]\n\nOut[5]: \n\n A B\n\n4 -0.284561 0.756029\n\nIn [6]: df.loc[[2]]\n\nOut[6]: \n\n A B\n\n2 -0.470056 1.192211\n\n</code></pre>\n\n<p><code>[]</code> slices the rows (by label location) only</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	815
Is it possible to make abstract classes in Python?	<p>Use the <a href="http://docs.python.org/library/abc.html" rel="noreferrer"><code>abc</code></a> module to create abstract classes. Use the <a href="https://docs.python.org/library/abc.html#abc.abstractmethod" rel="noreferrer"><code>abstractmethod</code></a> decorator to declare a method abstract, and declare a class abstract using one of three ways, depending upon your Python version.</p>\n\n<p>In Python 3.4 and above, you can inherit from <a href="https://docs.python.org/3/library/abc.html#abc.ABC" rel="noreferrer"><code>ABC</code></a>. In earlier versions of Python, you need to specify your class's metaclass as <a href="https://docs.python.org/library/abc.html#abc.ABCMeta" rel="noreferrer"><code>ABCMeta</code></a>. Specifying the metaclass has different syntax in Python 3 and Python 2. The three possibilities are shown below:</p>\n\n<pre><code># Python 3.4+\n\nfrom abc import ABC, abstractmethod\n\nclass Abstract(ABC):\n\n @abstractmethod\n\n def foo(self):\n\n pass\n\n</code></pre>\n\n<pre><code># Python 3.0+\n\nfrom abc import ABCMeta, abstractmethod\n\nclass Abstract(metaclass=ABCMeta):\n\n @abstractmethod\n\n def foo(self):\n\n pass\n\n</code></pre>\n\n<pre><code># Python 2\n\nfrom abc import ABCMeta, abstractmethod\n\nclass Abstract:\n\n __metaclass__ = ABCMeta\n\n @abstractmethod\n\n def foo(self):\n\n pass\n\n</code></pre>\n\n<p>Whichever way you use, you won't be able to instantiate an abstract class that has abstract methods, but will be able to instantiate a subclass that provides concrete definitions of those methods:</p>\n\n<pre class="lang-none prettyprint-override"><code>>>> Abstract()\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: Can't instantiate abstract class Abstract with abstract methods foo\n\n>>> class StillAbstract(Abstract):\n\n... pass\n\n... \n\n>>> StillAbstract()\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nTypeError: Can't instantiate abstract class StillAbstract with abstract methods foo\n\n>>> class Concrete(Abstract):\n\n... def foo(self):\n\n... print('Hello, World')\n\n... \n\n>>> Concrete()\n\n<__main__.Concrete object at 0x7fc935d28898>\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	816
Print a list in reverse order with range()?	<p>use <code>reversed()</code> function:</p>\n\n<pre><code>reversed(range(10))\n\n</code></pre>\n\n<p>It's much more meaningful. </p>\n\n<p><strong>Update:</strong></p>\n\n<p>If you want it to be a list (as btk pointed out):</p>\n\n<pre><code>list(reversed(range(10)))\n\n</code></pre>\n\n<p>Update:</p>\n\n<p>If you want to use only <code>range</code> to achieve the same result, you can use all its parameters. <code>range(start, stop, step)</code></p>\n\n<p>For example, to generate a list <code>[5,4,3,2,1,0]</code>, you can use the following:</p>\n\n<pre><code>range(5, -1, -1)\n\n</code></pre>\n\n<p>It may be less intuitive but as the comments mention, this is more efficient and the right usage of range for reversed list.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	817
TypeError: a bytes-like object is required, not 'str' when writing to a file in Python3	<p>You opened the file in binary mode:</p>\n\n<pre><code>with open(fname, 'rb') as f:\n\n</code></pre>\n\n<p>This means that all data read from the file is returned as <code>bytes</code> objects, not <code>str</code>. You cannot then use a string in a containment test:</p>\n\n<pre><code>if 'some-pattern' in tmp: continue\n\n</code></pre>\n\n<p>You'd have to use a <code>bytes</code> object to test against <code>tmp</code> instead:</p>\n\n<pre><code>if b'some-pattern' in tmp: continue\n\n</code></pre>\n\n<p>or open the file as a textfile instead by replacing the <code>'rb'</code> mode with <code>'r'</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	818
What is the difference between old style and new style classes in Python?	<p>From <em><a href="http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes" rel="noreferrer">New-style and classic classes</a></em>:</p>\n\n<blockquote>\n\n <p><strong>Up to Python 2.1, old-style classes were the only flavour available to the user.</strong></p>\n\n <p>The concept of (old-style) class is unrelated to the concept of type:\n\n if <code>x</code> is an instance of an old-style class, then <code>x.__class__</code>\n\n designates the class of <code>x</code>, but <code>type(x)</code> is always <code><type\n\n 'instance'></code>. </p>\n\n <p>This reflects the fact that all old-style instances, independently of\n\n their class, are implemented with a single built-in type, called\n\n instance.</p>\n\n <p><strong>New-style classes were introduced in Python 2.2 to unify the concepts of class and type</strong>. \n\n A new-style class is simply a user-defined type, no more, no less.</p>\n\n <p>If x is an instance of a new-style class, then <code>type(x)</code> is typically\n\n the same as <code>x.__class__</code> (although this is not guaranteed â a\n\n new-style class instance is permitted to override the value returned\n\n for <code>x.__class__</code>).</p>\n\n <p><strong>The major motivation for introducing new-style classes is to provide a unified object model with a full meta-model</strong>. </p>\n\n <p>It also has a number of immediate benefits, like the ability to\n\n subclass most built-in types, or the introduction of "descriptors",\n\n which enable computed properties.</p>\n\n <p><strong>For compatibility reasons, classes are still old-style by default</strong>. </p>\n\n <p>New-style classes are created by specifying another new-style class\n\n (i.e. a type) as a parent class, or the "top-level type" object if no\n\n other parent is needed. </p>\n\n <p>The behaviour of new-style classes differs from that of old-style\n\n classes in a number of important details in addition to what type\n\n returns. </p>\n\n <p>Some of these changes are fundamental to the new object model, like\n\n the way special methods are invoked. Others are "fixes" that could not\n\n be implemented before for compatibility concerns, like the method\n\n resolution order in case of multiple inheritance.</p>\n\n <p><strong>Python 3 only has new-style classes</strong>. </p>\n\n <p>No matter if you subclass from <code>object</code> or not, classes are new-style\n\n in Python 3.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	819
How do you split a list into evenly sized chunks?	<p>If you want something super simple:</p>\n\n<pre><code>def chunks(l, n):\n\n n = max(1, n)\n\n return (l[i:i+n] for i in range(0, len(l), n))\n\n</code></pre>\n\n<p>Use <code>xrange()</code> instead of <code>range()</code> in the case of Python 2.x</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	820
How to pretty-print a numpy.array without scientific notation and with given precision?	<p>You can use <code>set_printoptions</code> to set the precision of the output:</p>\n\n<pre><code>import numpy as np\n\nx=np.random.random(10)\n\nprint(x)\n\n# [ 0.07837821 0.48002108 0.41274116 0.82993414 0.77610352 0.1023732\n\n# 0.51303098 0.4617183 0.33487207 0.71162095]\n\nnp.set_printoptions(precision=3)\n\nprint(x)\n\n# [ 0.078 0.48 0.413 0.83 0.776 0.102 0.513 0.462 0.335 0.712]\n\n</code></pre>\n\n<p>And <code>suppress</code> suppresses the use of scientific notation for small numbers:</p>\n\n<pre><code>y=np.array([1.5e-10,1.5,1500])\n\nprint(y)\n\n# [ 1.500e-10 1.500e+00 1.500e+03]\n\nnp.set_printoptions(suppress=True)\n\nprint(y)\n\n# [ 0. 1.5 1500. ]\n\n</code></pre>\n\n<p>See the <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.set_printoptions.html" rel="noreferrer">docs for set_printoptions</a> for other options.</p>\n\n<hr>\n\n<p><strong>To apply print options locally</strong>, using NumPy 1.15.0 or later, you could use the <a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.printoptions.html" rel="noreferrer">numpy.printoptions</a> context manager. \n\nFor example, inside the <code>with-suite</code> <code>precision=3</code> and <code>suppress=True</code> are set:</p>\n\n<pre><code>x = np.random.random(10)\n\nwith np.printoptions(precision=3, suppress=True):\n\n print(x)\n\n # [ 0.073 0.461 0.689 0.754 0.624 0.901 0.049 0.582 0.557 0.348]\n\n</code></pre>\n\n<p>But outside the <code>with-suite</code> the print options are back to default settings:</p>\n\n<pre><code>print(x) \n\n# [ 0.07334334 0.46132615 0.68935231 0.75379645 0.62424021 0.90115836\n\n# 0.04879837 0.58207504 0.55694118 0.34768638]\n\n</code></pre>\n\n<p>If you are using an earlier version of NumPy, you can create the context manager\n\nyourself. For example,</p>\n\n<pre><code>import numpy as np\n\nimport contextlib\n\n@contextlib.contextmanager\n\ndef printoptions(*args, **kwargs):\n\n original = np.get_printoptions()\n\n np.set_printoptions(*args, **kwargs)\n\n try:\n\n yield\n\n finally: \n\n np.set_printoptions(**original)\n\nx = np.random.random(10)\n\nwith printoptions(precision=3, suppress=True):\n\n print(x)\n\n # [ 0.073 0.461 0.689 0.754 0.624 0.901 0.049 0.582 0.557 0.348]\n\n</code></pre>\n\n<hr>\n\n<p><strong>To prevent zeros from being stripped from the end of floats:</strong></p>\n\n<p><code>np.set_printoptions</code> now has a <code>formatter</code> parameter which allows you to specify a format function for each type.</p>\n\n<pre><code>np.set_printoptions(formatter={'float': '{: 0.3f}'.format})\n\nprint(x)\n\n</code></pre>\n\n<p>which prints</p>\n\n<pre><code>[ 0.078 0.480 0.413 0.830 0.776 0.102 0.513 0.462 0.335 0.712]\n\n</code></pre>\n\n<p>instead of </p>\n\n<pre><code>[ 0.078 0.48 0.413 0.83 0.776 0.102 0.513 0.462 0.335 0.712]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	821
How to read a file without newlines?	<p>You can read the whole file and split lines using <a href="https://docs.python.org/library/stdtypes.html#str.splitlines" rel="noreferrer"><code>str.splitlines</code></a>:</p>\n\n<pre><code>temp = file.read().splitlines()\n\n</code></pre>\n\n<p>Or you can strip the newline by hand:</p>\n\n<pre><code>temp = [line[:-1] for line in file]\n\n</code></pre>\n\n<p><strong>Note:</strong> this last solution only works if the file ends with a newline, otherwise the last line will lose a character.</p>\n\n<p>This assumption is true in most cases (especially for files created by text editors, which often <em>do</em> add an ending newline anyway).</p>\n\n<p>If you want to avoid this you can add a newline at the end of file:</p>\n\n<pre><code>with open(the_file, 'r+') as f:\n\n f.seek(-1, 2) # go at the end of the file\n\n if f.read(1) != ' ':\n\n # add missing newline if not already present\n\n f.write(' ')\n\n f.flush()\n\n f.seek(0)\n\n lines = [line[:-1] for line in f]\n\n</code></pre>\n\n<p>Or a simpler alternative is to <code>strip</code> the newline instead:</p>\n\n<pre><code>[line.rstrip(' ') for line in file]\n\n</code></pre>\n\n<p>Or even, although pretty unreadable:</p>\n\n<pre><code>[line[:-(line[-1] == ' ') or len(line)+1] for line in file]\n\n</code></pre>\n\n<p>Which exploits the fact that the return value of <code>or</code> isn't a boolean, but the object that was evaluated true or false.</p>\n\n<hr>\n\n<p>The <code>readlines</code> method is actually equivalent to:</p>\n\n<pre><code>def readlines(self):\n\n lines = []\n\n for line in iter(self.readline, ''):\n\n lines.append(line)\n\n return lines\n\n# or equivalently\n\ndef readlines(self):\n\n lines = []\n\n while True:\n\n line = self.readline()\n\n if not line:\n\n break\n\n lines.append(line)\n\n return lines\n\n</code></pre>\n\n<p>Since <code>readline()</code> keeps the newline also <code>readlines()</code> keeps it.</p>\n\n<p><strong>Note:</strong> for symmetry to <code>readlines()</code> the <a href="https://docs.python.org/library/io.html#io.IOBase.writelines" rel="noreferrer"><code>writelines()</code></a> method does <em>not</em> add ending newlines, so <code>f2.writelines(f.readlines())</code> produces an exact copy of <code>f</code> in <code>f2</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	822
"ERROR:root:code for hash md5 was not found" when using any hg mercurial commands	<p>Running <code>brew reinstall python@2</code> didn't work for my existing Python 2.7 virtual environments. Inside them there were still <code>ERROR:root:code for hash sha1 was not found</code> errors.</p>\n\n<p>I encountered this problem after I ran <code>brew upgrade openssl</code>. And here's the fix:</p>\n\n<pre><code>$ ls /usr/local/Cellar/openssl\n\n</code></pre>\n\n<p>...which shows</p>\n\n<pre><code>1.0.2t\n\n</code></pre>\n\n<p>According to the existing version, run:</p>\n\n<pre><code>$ brew switch openssl 1.0.2t\n\n</code></pre>\n\n<p>...which shows</p>\n\n<pre><code>Cleaning /usr/local/Cellar/openssl/1.0.2t\n\nOpt link created for /usr/local/Cellar/openssl/1.0.2t\n\n</code></pre>\n\n<p>After that, run the following command in a Python 2.7 virtualenv:</p>\n\n<pre><code>(my-venv) $ python -c "import hashlib;m=hashlib.md5();print(m.hexdigest())"\n\n</code></pre>\n\n<p>...which shows</p>\n\n<pre><code>d41d8cd98f00b204e9800998ecf8427e\n\n</code></pre>\n\n<p>No more errors.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	823
Random string generation with upper case letters and digits	<p>This Stack Overflow quesion is the current top Google result for "random string Python". The current top answer is:</p>\n\n<pre><code>''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n\n</code></pre>\n\n<p>This is an excellent method, but the <a href="http://en.wikipedia.org/wiki/Pseudorandom_number_generator" rel="noreferrer">PRNG</a> in random is not cryptographically secure. I assume many people researching this question will want to generate random strings for encryption or passwords. You can do this securely by making a small change in the above code:</p>\n\n<pre><code>''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\n\n</code></pre>\n\n<p>Using <code>random.SystemRandom()</code> instead of just random uses /dev/urandom on *nix machines and <code>CryptGenRandom()</code> in Windows. These are cryptographically secure PRNGs. Using <code>random.choice</code> instead of <code>random.SystemRandom().choice</code> in an application that requires a secure PRNG could be potentially devastating, and given the popularity of this question, I bet that mistake has been made many times already.</p>\n\n<p>If you're using python3.6 or above, you can use the new <a href="https://docs.python.org/3/library/secrets.html" rel="noreferrer">secrets</a> module as mentioned in <a href="https://stackoverflow.com/a/41464693/7851470">MSeifert's answer</a>:</p>\n\n<pre><code>''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n\n</code></pre>\n\n<p>The module docs also discuss convenient ways to <a href="https://docs.python.org/3/library/secrets.html#generating-tokens" rel="noreferrer">generate secure tokens</a> and <a href="https://docs.python.org/3/library/secrets.html#recipes-and-best-practices" rel="noreferrer">best practices</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	824
Split string every nth character?	<pre><code>>>> line = '1234567890'\n\n>>> n = 2\n\n>>> [line[i:i+n] for i in range(0, len(line), n)]\n\n['12', '34', '56', '78', '90']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	825
Reverse Y-Axis in PyPlot	<p>There is a new API that makes this even simpler.</p>\n\n<pre><code>plt.gca().invert_xaxis()\n\n</code></pre>\n\n<p>and/or</p>\n\n<pre><code>plt.gca().invert_yaxis()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	826
find first sequence item that matches a criterion	<p>If you don't have any other indexes or sorted information for your objects, then you will have to iterate until such an object is found:</p>\n\n<pre><code>next(obj for obj in objs if obj.val==5)\n\n</code></pre>\n\n<p>This is however faster than a complete list comprehension. Compare these two:</p>\n\n<pre><code>[i for i in xrange(100000) if i == 1000][0]\n\nnext(i for i in xrange(100000) if i == 1000)\n\n</code></pre>\n\n<p>The first one needs 5.75ms, the second one 58.3Âµs (100 times faster because the loop 100 times shorter).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	827
django order_by query set, ascending and descending	<pre><code>Reserved.objects.filter(client=client_id).order_by('-check_in')\n\n</code></pre>\n\n<p>Notice the <code>-</code> before <code>check_in</code>.</p>\n\n<p><a href="https://docs.djangoproject.com/en/dev/ref/models/querysets/#order-by" rel="noreferrer" title="Documentation">Django Documentation</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	828
How to retrieve an element from a set without removing it?	<p>Two options that don't require copying the whole set:</p>\n\n<pre><code>for e in s:\n\n break\n\n# e is now an element from s\n\n</code></pre>\n\n<p>Or...</p>\n\n<pre><code>e = next(iter(s))\n\n</code></pre>\n\n<p>But in general, sets don't support indexing or slicing.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	829
How to get current time in python and break up into year, month, day, hour, minute?	<p>The <a href="https://docs.python.org/2/library/datetime.html#datetime.datetime.now" rel="noreferrer"><code>datetime</code></a> module is your friend:</p>\n\n<pre><code>import datetime\n\nnow = datetime.datetime.now()\n\nprint now.year, now.month, now.day, now.hour, now.minute, now.second\n\n# 2015 5 6 8 53 40\n\n</code></pre>\n\n<p>You don't need separate variables, the attributes on the returned <code>datetime</code> object have all you need.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	830
Iterating through a range of dates in Python	<p>Why are there two nested iterations? For me it produces the same list of data with only one iteration:</p>\n\n<pre><code>for single_date in (start_date + timedelta(n) for n in range(day_count)):\n\n print ...\n\n</code></pre>\n\n<p>And no list gets stored, only one generator is iterated over. Also the "if" in the generator seems to be unnecessary.</p>\n\n<p>After all, a linear sequence should only require one iterator, not two.</p>\n\n<h2>Update after discussion with John Machin:</h2>\n\n<p>Maybe the most elegant solution is using a generator function to completely hide/abstract the iteration over the range of dates:</p>\n\n<pre><code>from datetime import timedelta, date\n\ndef daterange(start_date, end_date):\n\n for n in range(int((end_date - start_date).days)):\n\n yield start_date + timedelta(n)\n\nstart_date = date(2013, 1, 1)\n\nend_date = date(2015, 6, 2)\n\nfor single_date in daterange(start_date, end_date):\n\n print(single_date.strftime("%Y-%m-%d"))\n\n</code></pre>\n\n<p>NB: For consistency with the built-in <code>range()</code> function this iteration stops <strong>before</strong> reaching the <code>end_date</code>. So for inclusive iteration use the next day, as you would with <code>range()</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	831
How to dynamically build a JSON object with Python?	<p>You build the object <strong>before</strong> encoding it to a JSON string:</p>\n\n<pre><code>import json\n\ndata = {}\n\ndata['key'] = 'value'\n\njson_data = json.dumps(data)\n\n</code></pre>\n\n<p>JSON is a <em>serialization</em> format, textual data <em>representing</em> a structure. It is not, itself, that structure.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	832
How to read/process command line arguments?	<pre><code>import sys\n\nprint(" ".join(sys.argv))\n\n</code></pre>\n\n<p><a href="https://docs.python.org/3/library/sys.html#sys.argv" rel="noreferrer"><code>sys.argv</code></a> is a list that contains all the arguments passed to the script on the command line.</p>\n\n<p>Basically,</p>\n\n<pre><code>import sys\n\nprint(sys.argv[1:])\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	833
Install a Python package into a different directory using pip?	<p>The <a href="https://pip.pypa.io/en/latest/reference/pip_install/#cmdoption-t" rel="noreferrer">--target</a> switch is the thing you're looking for:</p>\n\n<pre class="lang-py prettyprint-override"><code>pip install --target=d:\somewhere\other han he\default package_name\n\n</code></pre>\n\n<p>But you still need to add <code>d:\somewhere\other han he\default</code> to <code>PYTHONPATH</code> to actually use them from that location.</p>\n\n<blockquote>\n\n <p><strong>-t, --target <dir></strong><br>\n\n Install packages into <dir>. By default this will not replace existing files/folders in <dir>.<br>\n\n Use --upgrade to replace existing packages in <dir> with new versions.</p>\n\n</blockquote>\n\n<hr>\n\n<p>Upgrade pip if target switch is not available:</p>\n\n<p>On Linux or OS X:</p>\n\n<pre><code>pip install -U pip\n\n</code></pre>\n\n<p>On Windows (this works around <a href="https://github.com/pypa/pip/issues/1299" rel="noreferrer">an issue</a>):</p>\n\n<pre><code>python -m pip install -U pip\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	834
How do I find the duplicates in a list and create another list with them?	<p>To remove duplicates use <code>set(a)</code>. To print duplicates, something like:</p>\n\n<pre><code>a = [1,2,3,2,1,5,6,5,5,5]\n\nimport collections\n\nprint([item for item, count in collections.Counter(a).items() if count > 1])\n\n## [1, 2, 5]\n\n</code></pre>\n\n<p>Note that <code>Counter</code> is not particularly efficient (<a href="https://stackoverflow.com/a/25706298/989121">timings</a>) and probably overkill here. <code>set</code> will perform better. This code computes a list of unique elements in the source order:</p>\n\n<pre><code>seen = set()\n\nuniq = []\n\nfor x in a:\n\n if x not in seen:\n\n uniq.append(x)\n\n seen.add(x)\n\n</code></pre>\n\n<p>or, more concisely:</p>\n\n<pre><code>seen = set()\n\nuniq = [x for x in a if x not in seen and not seen.add(x)] \n\n</code></pre>\n\n<p>I don't recommend the latter style, because it is not obvious what <code>not seen.add(x)</code> is doing (the set <code>add()</code> method always returns <code>None</code>, hence the need for <code>not</code>).</p>\n\n<p>To compute the list of duplicated elements without libraries:</p>\n\n<pre><code>seen = {}\n\ndupes = []\n\nfor x in a:\n\n if x not in seen:\n\n seen[x] = 1\n\n else:\n\n if seen[x] == 1:\n\n dupes.append(x)\n\n seen[x] += 1\n\n</code></pre>\n\n<p>If list elements are not hashable, you cannot use sets/dicts and have to resort to a quadratic time solution (compare each with each). For example:</p>\n\n<pre><code>a = [[1], [2], [3], [1], [5], [3]]\n\nno_dupes = [x for n, x in enumerate(a) if x not in a[:n]]\n\nprint no_dupes # [[1], [2], [3], [5]]\n\ndupes = [x for n, x in enumerate(a) if x in a[:n]]\n\nprint dupes # [[1], [3]]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	835
InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately	<p><a href="https://urllib3.readthedocs.org/en/latest/security.html#pyopenssl">The docs give a fair indicator of what's required.</a>, however <code>requests</code> allow us to skip a few steps:</p>\n\n<p>You only need to install the <code>security</code> <a href="https://github.com/kennethreitz/requests/blob/5a799dd0f505e6c6c2ff67e227f6a3d25c086342/setup.py#L71">package extras</a> (thanks @admdrew for pointing it out)</p>\n\n<pre><code>$ pip install requests[security]\n\n</code></pre>\n\n<p>or, install them directly:</p>\n\n<pre><code>$ pip install pyopenssl ndg-httpsclient pyasn1\n\n</code></pre>\n\n<p><a href="https://github.com/kennethreitz/requests/blob/a57c87a459d51c5b17d20285109e901b8aa95752/requests/__init__.py#L54">Requests will then automatically inject <code>pyopenssl</code> into <code>urllib3</code></a></p>\n\n<hr>\n\n<p>If you're on ubuntu, you may run into trouble installing <code>pyopenssl</code>, you'll need these dependencies:</p>\n\n<pre><code>$ apt-get install libffi-dev libssl-dev\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	836
How to print to stderr in Python?	<pre><code>import sys\n\nsys.stderr.write()\n\n</code></pre>\n\n<p>Is my choice, just more readable and saying exactly what you intend to do and portable across versions. </p>\n\n<p>Edit: being 'pythonic' is a third thought to me over readability and performance... with these two things in mind, with python 80% of your code will be pythonic. list comprehension being the 'big thing' that isn't used as often (readability).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	837
How to get the filename without the extension from a path in Python?	<p>You can make your own with:</p>\n\n<pre><code>>>> import os\n\n>>> base=os.path.basename('/root/dir/sub/file.ext')\n\n>>> base\n\n'file.ext'\n\n>>> os.path.splitext(base)\n\n('file', '.ext')\n\n>>> os.path.splitext(base)[0]\n\n'file'\n\n</code></pre>\n\n<p>Important note: If there is more than one <code>.</code> in the filename, only the last one is removed. For example:</p>\n\n<pre><code>/root/dir/sub/file.ext.zip -> file.ext\n\n/root/dir/sub/file.ext.tar.gz -> file.ext.tar\n\n</code></pre>\n\n<p>See below for other answers that address that.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	838
How to perform OR condition in django queryset?	<pre><code>from django.db.models import Q\n\nUser.objects.filter(Q(income__gte=5000) | Q(income__isnull=True))\n\n</code></pre>\n\n<p><a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects" rel="noreferrer">via Documentation</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	839
How do I make python wait for a pressed key?	<p>In <strong>Python 3</strong> use <code>input()</code>:</p>\n\n<pre><code>input("Press Enter to continue...")\n\n</code></pre>\n\n<p>In <strong>Python 2</strong> use <code>raw_input()</code>: </p>\n\n<pre><code>raw_input("Press Enter to continue...")\n\n</code></pre>\n\n<p>This only waits for the user to press enter though. </p>\n\n<p>One might want to use <strong>msvcrt</strong> ((Windows/DOS only) The <em>msvcrt</em> module gives you access to a number of functions in the Microsoft Visual C/C++ Runtime Library (MSVCRT)):</p>\n\n<pre><code>import msvcrt as m\n\ndef wait():\n\n m.getch()\n\n</code></pre>\n\n<p>This should wait for a key press.</p>\n\n<p>Additional info:</p>\n\n<p>in Python 3 <code>raw_input()</code> does not exist</p>\n\n<p>In Python 2 <code>input(prompt)</code> is equivalent to <code>eval(raw_input(prompt))</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	840
What are the differences between Perl, Python, AWK and sed?	<p>In order of appearance, the languages are <code>sed</code>, <code>awk</code>, <code>perl</code>, <code>python</code>.</p>\n\n<p>The <code>sed</code> program is a stream editor and is designed to apply the actions from a script to each line (or, more generally, to specified ranges of lines) of the input file or files. Its language is based on <code>ed</code>, the Unix editor, and although it has conditionals and so on, it is hard to work with for complex tasks. You can work minor miracles with it - but at a cost to the hair on your head. However, it is probably the fastest of the programs when attempting tasks within its remit. (It has the least powerful regular expressions of the programs discussed - adequate for many purposes, but certainly not PCRE - Perl-Compatible Regular Expressions)</p>\n\n<p>The <code>awk</code> program (name from the initials of its authors - Aho, Weinberger, and Kernighan) is a tool initially for formatting reports. It can be used as a souped-up <code>sed</code>; in its more recent versions, it is computationally complete. It uses an interesting idea - the program is based on 'patterns matched' and 'actions taken when the pattern matches'. The patterns are fairly powerful (Extended Regular Expressions). The language for the actions is similar to C. One of the key features of <code>awk</code> is that it splits the input automatically into records and each record into fields.</p>\n\n<p>Perl was written in part as an awk-killer and sed-killer. Two of the programs provided with it are <code>a2p</code> and <code>s2p</code> for converting <code>awk</code> scripts and <code>sed</code> scripts into Perl. Perl is one of the earliest of the next generation of scripting languages (Tcl/Tk can probably claim primacy). It has powerful integrated regular expression handling with a vastly more powerful language. It provides access to almost all system calls and has the extensibility of the CPAN modules. (Neither <code>awk</code> nor <code>sed</code> is extensible.) One of Perl's mottos is "TMTOWTDI - There's more than one way to do it" (pronounced "tim-toady"). Perl has 'objects', but it is more of an add-on than a fundamental part of the language.</p>\n\n<p>Python was written last, and probably in part as a reaction to Perl. It has some interesting syntactic ideas (indenting to indicate levels - no braces or equivalents). It is more fundamentally object-oriented than Perl; it is just as extensible as Perl.</p>\n\n<p>OK - when to use each?</p>\n\n<ul>\n\n<li>Sed - when you need to do simple text transforms on files.</li>\n\n<li>Awk - when you only need simple formatting and summarisation or transformation of data.</li>\n\n<li>Perl - for almost any task, but especially when the task needs complex regular expressions.</li>\n\n<li>Python - for the same tasks that you could use Perl for.</li>\n\n</ul>\n\n<p>I'm not aware of anything that Perl can do that Python can't, nor vice versa. The choice between the two would depend on other factors. I learned Perl before there was a Python, so I tend to use it. Python has less accreted syntax and is generally somewhat simpler to learn. Perl 6, when it becomes available, will be a fascinating development.</p>\n\n<p>(Note that the 'overviews' of Perl and Python, in particular, are woefully incomplete; whole books could be written on the topic.)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	841
How to add pandas data to an existing csv file?	<p>You can specify a python write mode in the pandas <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html" rel="noreferrer"><code>to_csv</code></a> function. For append it is 'a'.</p>\n\n<p>In your case:</p>\n\n<pre><code>df.to_csv('my_csv.csv', mode='a', header=False)\n\n</code></pre>\n\n<p>The default mode is 'w'.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	842
How to find all occurrences of an element in a list?	<p>You can use a list comprehension:</p>\n\n<pre><code>indices = [i for i, x in enumerate(my_list) if x == "whatever"]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	843
Difference between Python's Generators and Iterators	<p><code>iterator</code> is a more general concept: any object whose class has a <code>next</code> method (<code>__next__</code> in Python 3) and an <code>__iter__</code> method that does <code>return self</code>.</p>\n\n<p>Every generator is an iterator, but not vice versa. A generator is built by calling a function that has one or more <code>yield</code> expressions (<code>yield</code> statements, in Python 2.5 and earlier), and is an object that meets the previous paragraph's definition of an <code>iterator</code>.</p>\n\n<p>You may want to use a custom iterator, rather than a generator, when you need a class with somewhat complex state-maintaining behavior, or want to expose other methods besides <code>next</code> (and <code>__iter__</code> and <code>__init__</code>). Most often, a generator (sometimes, for sufficiently simple needs, a generator <em>expression</em>) is sufficient, and it's simpler to code because state maintenance (within reasonable limits) is basically "done for you" by the frame getting suspended and resumed.</p>\n\n<p>For example, a generator such as:</p>\n\n<pre><code>def squares(start, stop):\n\n for i in range(start, stop):\n\n yield i * i\n\ngenerator = squares(a, b)\n\n</code></pre>\n\n<p>or the equivalent generator expression (genexp)</p>\n\n<pre><code>generator = (i*i for i in range(a, b))\n\n</code></pre>\n\n<p>would take more code to build as a custom iterator:</p>\n\n<pre><code>class Squares(object):\n\n def __init__(self, start, stop):\n\n self.start = start\n\n self.stop = stop\n\n def __iter__(self): return self\n\n def next(self): # __next__ in Python 3\n\n if self.start >= self.stop:\n\n raise StopIteration\n\n current = self.start * self.start\n\n self.start += 1\n\n return current\n\niterator = Squares(a, b)\n\n</code></pre>\n\n<p>But, of course, with class <code>Squares</code> you could easily offer extra methods, i.e.</p>\n\n<pre><code> def current(self):\n\n return self.start\n\n</code></pre>\n\n<p>if you have any actual need for such extra functionality in your application.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	844
How can I find all matches to a regular expression in Python?	<p>Use <code>re.findall</code> or <code>re.finditer</code> instead.</p>\n\n<p><a href="http://docs.python.org/library/re.html#re.findall" rel="noreferrer"><code>re.findall(pattern, string)</code></a> returns a list of matching strings.</p>\n\n<p><a href="http://docs.python.org/library/re.html#re.finditer" rel="noreferrer"><code>re.finditer(pattern, string)</code></a> returns an iterator over <a href="https://docs.python.org/3/library/re.html#match-objects" rel="noreferrer"><code>MatchObject</code></a> objects.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>re.findall( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')\n\n# Output: ['cats', 'dogs']\n\n[x.group() for x in re.finditer( r'all (.*?) are', 'all cats are smarter than dogs, all dogs are dumber than cats')]\n\n# Output: ['all cats are', 'all dogs are']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	845
Reading JSON from a file?	<p>The <a href="http://docs.python.org/3/library/json.html#json.load" rel="noreferrer"><code>json.load()</code> method</a> (without "s" in "load") can read a file directly:</p>\n\n<pre><code>import json\n\nwith open('strings.json') as f:\n\n d = json.load(f)\n\n print(d)\n\n</code></pre>\n\n<p>You were using the <a href="http://docs.python.org/3/library/json.html#json.loads" rel="noreferrer"><code>json.loads()</code> method</a>, which is used for <em>string</em> arguments only. </p>\n\n<p>Edit:\n\nThe new message is a totally different problem. In that case, there is some invalid json in that file. For that, I would recommend running the file through a <a href="http://jsonlint.com/" rel="noreferrer">json validator</a>.</p>\n\n<p>There are also solutions for fixing json like for example <a href="https://stackoverflow.com/questions/18514910/how-do-i-automatically-fix-an-invalid-json-string">How do I automatically fix an invalid JSON string?</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	846
Difference between numpy.array shape (R, 1) and (R,)	<h3>1. The meaning of shapes in NumPy</h3>\n\n<p>You write, "I know literally it's list of numbers and list of lists where all list contains only a number" but that's a bit of an unhelpful way to think about it.</p>\n\n<p>The best way to think about NumPy arrays is that they consist of two parts, a <em>data buffer</em> which is just a block of raw elements, and a <em>view</em> which describes how to interpret the data buffer.</p>\n\n<p>For example, if we create an array of 12 integers:</p>\n\n<pre><code>>>> a = numpy.arange(12)\n\n>>> a\n\narray([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\n</code></pre>\n\n<p>Then <code>a</code> consists of a data buffer, arranged something like this:</p>\n\n<pre><code>ââââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ\n\nâ 0 â 1 â 2 â 3 â 4 â 5 â 6 â 7 â 8 â 9 â 10 â 11 â\n\nââââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ\n\n</code></pre>\n\n<p>and a view which describes how to interpret the data:</p>\n\n<pre><code>>>> a.flags\n\n C_CONTIGUOUS : True\n\n F_CONTIGUOUS : True\n\n OWNDATA : True\n\n WRITEABLE : True\n\n ALIGNED : True\n\n UPDATEIFCOPY : False\n\n>>> a.dtype\n\ndtype('int64')\n\n>>> a.itemsize\n\n8\n\n>>> a.strides\n\n(8,)\n\n>>> a.shape\n\n(12,)\n\n</code></pre>\n\n<p>Here the <em>shape</em> <code>(12,)</code> means the array is indexed by a single index which runs from 0Â toÂ 11. Conceptually, if we label this single index <code>i</code>, the array <code>a</code> looks like this:</p>\n\n<pre><code>i= 0 1 2 3 4 5 6 7 8 9 10 11\n\nââââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ\n\nâ 0 â 1 â 2 â 3 â 4 â 5 â 6 â 7 â 8 â 9 â 10 â 11 â\n\nââââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ\n\n</code></pre>\n\n<p>If we <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html" rel="noreferrer">reshape</a> an array, this doesn't change the data buffer. Instead, it creates a new view that describes a different way to interpret the data. So after:</p>\n\n<pre><code>>>> b = a.reshape((3, 4))\n\n</code></pre>\n\n<p>the array <code>b</code> has the same data buffer as <code>a</code>, but now it is indexed by <em>two</em> indices which run from 0Â toÂ 2 and 0Â toÂ 3 respectively. If we label the two indices <code>i</code> and <code>j</code>, the array <code>b</code> looks like this:</p>\n\n<pre><code>i= 0 0 0 0 1 1 1 1 2 2 2 2\n\nj= 0 1 2 3 0 1 2 3 0 1 2 3\n\nââââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ\n\nâ 0 â 1 â 2 â 3 â 4 â 5 â 6 â 7 â 8 â 9 â 10 â 11 â\n\nââââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ\n\n</code></pre>\n\n<p>which means that:</p>\n\n<pre><code>>>> b[2,1]\n\n9\n\n</code></pre>\n\n<p>You can see that the second index changes quickly and the first index changes slowly. If you prefer this to be the other way round, you can specify the <code>order</code> parameter:</p>\n\n<pre><code>>>> c = a.reshape((3, 4), order='F')\n\n</code></pre>\n\n<p>which results in an array indexed like this:</p>\n\n<pre><code>i= 0 1 2 0 1 2 0 1 2 0 1 2\n\nj= 0 0 0 1 1 1 2 2 2 3 3 3\n\nââââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ\n\nâ 0 â 1 â 2 â 3 â 4 â 5 â 6 â 7 â 8 â 9 â 10 â 11 â\n\nââââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ\n\n</code></pre>\n\n<p>which means that:</p>\n\n<pre><code>>>> c[2,1]\n\n5\n\n</code></pre>\n\n<p>It should now be clear what it means for an array to have a shape with one or more dimensions of sizeÂ 1. After:</p>\n\n<pre><code>>>> d = a.reshape((12, 1))\n\n</code></pre>\n\n<p>the array <code>d</code> is indexed by two indices, the first of which runs from 0Â toÂ 11, and the second index is alwaysÂ 0:</p>\n\n<pre><code>i= 0 1 2 3 4 5 6 7 8 9 10 11\n\nj= 0 0 0 0 0 0 0 0 0 0 0 0\n\nââââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ\n\nâ 0 â 1 â 2 â 3 â 4 â 5 â 6 â 7 â 8 â 9 â 10 â 11 â\n\nââââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ\n\n</code></pre>\n\n<p>and so:</p>\n\n<pre><code>>>> d[10,0]\n\n10\n\n</code></pre>\n\n<p>A dimension of lengthÂ 1 is "free" (in some sense), so there's nothing stopping you from going to town:</p>\n\n<pre><code>>>> e = a.reshape((1, 2, 1, 6, 1))\n\n</code></pre>\n\n<p>giving an array indexed like this:</p>\n\n<pre><code>i= 0 0 0 0 0 0 0 0 0 0 0 0\n\nj= 0 0 0 0 0 0 1 1 1 1 1 1\n\nk= 0 0 0 0 0 0 0 0 0 0 0 0\n\nl= 0 1 2 3 4 5 0 1 2 3 4 5\n\nm= 0 0 0 0 0 0 0 0 0 0 0 0\n\nââââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ¬âââââ\n\nâ 0 â 1 â 2 â 3 â 4 â 5 â 6 â 7 â 8 â 9 â 10 â 11 â\n\nââââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ´âââââ\n\n</code></pre>\n\n<p>and so:</p>\n\n<pre><code>>>> e[0,1,0,0,0]\n\n6\n\n</code></pre>\n\n<p>See the <a href="http://docs.scipy.org/doc/numpy/reference/internals.html" rel="noreferrer">NumPy internals documentation</a> for more details about how arrays are implemented.</p>\n\n<h3>2. What to do?</h3>\n\n<p>Since <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.reshape.html" rel="noreferrer"><code>numpy.reshape</code></a> just creates a new view, you shouldn't be scared about using it whenever necessary. It's the right tool to use when you want to index an array in a different way.</p>\n\n<p>However, in a long computation it's usually possible to arrange to construct arrays with the "right" shape in the first place, and so minimize the number of reshapes and transposes. But without seeing the actual context that led to the need for a reshape, it's hard to say what should be changed.</p>\n\n<p>The example in your question is:</p>\n\n<pre><code>numpy.dot(M[:,0], numpy.ones((1, R)))\n\n</code></pre>\n\n<p>but this is not realistic. First, this expression:</p>\n\n<pre><code>M[:,0].sum()\n\n</code></pre>\n\n<p>computes the result more simply. Second, is there really something special about column 0? Perhaps what you actually need is:</p>\n\n<pre><code>M.sum(axis=0)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	847
How can I get the source code of a Python function?	<p>If the function is from a source file available on the filesystem, then <a href="https://docs.python.org/3/library/inspect.html#inspect.getsource" rel="noreferrer"><code>inspect.getsource(foo)</code></a> might be of help:</p>\n\n<p>If <code>foo</code> is defined as:</p>\n\n<pre><code>def foo(arg1,arg2): \n\n #do something with args \n\n a = arg1 + arg2 \n\n return a \n\n</code></pre>\n\n<p>Then: </p>\n\n<pre><code>import inspect\n\nlines = inspect.getsource(foo)\n\nprint(lines)\n\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>def foo(arg1,arg2): \n\n #do something with args \n\n a = arg1 + arg2 \n\n return a \n\n</code></pre>\n\n<p>But I believe that if the function is compiled from a string, stream or imported from a compiled file, then you cannot retrieve its source code.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	848
Is there a simple way to remove multiple spaces in a string?	<p><code>foo</code> is your string:</p>\n\n<pre><code>" ".join(foo.split())\n\n</code></pre>\n\n<p>Be warned though this removes "all whitespace characters (space, tab, newline, return, formfeed)" (thanks to <a href="https://stackoverflow.com/users/1380151/hhsaffar">hhsaffar</a>, see comments). I.e., <code>"this is a test "</code> will effectively end up as <code>"this is a test"</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	849
Calling a function of a module by using its name (a string)	<pre><code>locals()["myfunction"]()\n\n</code></pre>\n\n<p>or</p>\n\n<pre><code>globals()["myfunction"]()\n\n</code></pre>\n\n<p><a href="http://docs.python.org/library/functions.html#locals" rel="noreferrer">locals</a> returns a dictionary with a current local symbol table. <a href="http://docs.python.org/library/functions.html#globals" rel="noreferrer">globals</a> returns a dictionary with global symbol table.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	850
Combine two columns of text in dataframe in pandas/python	<p>if both columns are strings, you can concatenate them directly:</p>\n\n<pre><code>df["period"] = df["Year"] + df["quarter"]\n\n</code></pre>\n\n<p>If one (or both) of the columns are not string typed, you should convert it (them) first,</p>\n\n<pre><code>df["period"] = df["Year"].astype(str) + df["quarter"]\n\n</code></pre>\n\n<h3><strong>Beware of NaNs when doing this!</strong></h3>\n\n<hr>\n\n<p>If you need to join multiple string columns, you can use <code>agg</code>:</p>\n\n<pre><code>df['period'] = df[['Year', 'quarter', ...]].agg('-'.join, axis=1)\n\n</code></pre>\n\n<p>Where "-" is the separator.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	851
Find the similarity metric between two strings	<p>There is a built in.</p>\n\n<pre><code>from difflib import SequenceMatcher\n\ndef similar(a, b):\n\n return SequenceMatcher(None, a, b).ratio()\n\n</code></pre>\n\n<p>Using it:</p>\n\n<pre><code>>>> similar("Apple","Appel")\n\n0.8\n\n>>> similar("Apple","Mango")\n\n0.0\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	852
How to change legend size with matplotlib.pyplot	<p>You can set an individual font size for the legend by adjusting the <code>prop</code> keyword. </p>\n\n<pre><code>plot.legend(loc=2, prop={'size': 6})\n\n</code></pre>\n\n<p>This takes a dictionary of keywords corresponding to <code>matplotlib.font_manager.FontProperties</code> properties. See the <a href="http://matplotlib.sourceforge.net/api/pyplot_api.html#matplotlib.pyplot.legend" rel="noreferrer">documentation for legend</a>:</p>\n\n<blockquote>\n\n <p>Keyword arguments:</p>\n\n<pre><code>prop: [ None | FontProperties | dict ]\n\n A matplotlib.font_manager.FontProperties instance. If prop is a \n\n dictionary, a new instance will be created with prop. If None, use\n\n rc settings.\n\n</code></pre>\n\n</blockquote>\n\n<p>It is also possible, as of version <a href="http://matplotlib.org/api/legend_api.html#matplotlib.legend.Legend" rel="noreferrer">1.2.1</a>, to use the keyword <code>fontsize</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	853
Understanding slice notation	<p>The <a href="http://docs.python.org/tutorial/introduction.html#strings" rel="noreferrer">Python tutorial</a> talks about it (scroll down a bit until you get to the part about slicing).</p>\n\n<p>The ASCII art diagram is helpful too for remembering how slices work:</p>\n\n<pre><code> +---+---+---+---+---+---+\n\n | P | y | t | h | o | n |\n\n +---+---+---+---+---+---+\n\n 0 1 2 3 4 5 6\n\n-6 -5 -4 -3 -2 -1\n\n</code></pre>\n\n<blockquote>\n\n <p>One way to remember how slices work is to think of the indices as pointing <em>between</em> characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of <em>n</em> characters has index <em>n</em>.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	854
How do I find the location of my Python site-packages directory?	<p>There are two types of site-packages directories, <em>global</em> and <em>per user</em>.</p>\n\n<ol>\n\n<li><p><strong>Global</strong> site-packages ("<a href="https://stackoverflow.com/questions/9387928/whats-the-difference-between-dist-packages-and-site-packages">dist-packages</a>") directories are listed in <code>sys.path</code> when you run:</p>\n\n<pre><code>python -m site\n\n</code></pre>\n\n<p>For a more concise list run <code>getsitepackages</code> from the <a href="https://docs.python.org/3/library/site.html#site.getsitepackages" rel="noreferrer">site module</a> in Python code:</p>\n\n<pre><code>python -c 'import site; print(site.getsitepackages())'\n\n</code></pre>\n\n<p><em>Note:</em> With virtualenvs <a href="https://github.com/pypa/virtualenv/issues/228" rel="noreferrer">getsitepackages is not available</a>, <code>sys.path</code> from above will list the virtualenv's site-packages directory correctly, though. In Python 3, you may use the <a href="https://docs.python.org/3/library/sysconfig.html#using-sysconfig-as-a-script" rel="noreferrer">sysconfig module</a> instead:</p>\n\n<pre><code>python3 -c 'import sysconfig; print(sysconfig.get_paths()["purelib"])'\n\n</code></pre></li>\n\n<li><p>The <strong>per user</strong> site-packages directory (<a href="https://www.python.org/dev/peps/pep-0370/" rel="noreferrer">PEP 370</a>) is where Python installs your local packages:</p>\n\n<pre><code>python -m site --user-site\n\n</code></pre>\n\n<p>If this points to a non-existing directory check the exit status of Python and see <code>python -m site --help</code> for explanations.</p>\n\n<p><em>Hint:</em> Running <code>pip list --user</code> or <code>pip freeze --user</code> gives you a list of all installed <em>per user</em> site-packages.</p></li>\n\n</ol>\n\n<hr>\n\n<h2>Practical Tips</h2>\n\n<ul>\n\n<li><p><code><package>.__path__</code> lets you identify the location(s) of a specific package: (<a href="https://stackoverflow.com/questions/2699287/what-is-path-useful-for">details</a>)</p>\n\n<pre><code>$ python -c "import setuptools as _; print(_.__path__)"\n\n['/usr/lib/python2.7/dist-packages/setuptools']\n\n</code></pre></li>\n\n<li><p><code><module>.__file__</code> lets you identify the location of a specific module: (<a href="https://softwareengineering.stackexchange.com/questions/111871/module-vs-package">difference</a>)</p>\n\n<pre><code>$ python3 -c "import os as _; print(_.__file__)"\n\n/usr/lib/python3.6/os.py\n\n</code></pre></li>\n\n<li><p>Run <code>pip show <package></code> to show Debian-style package information:</p>\n\n<pre><code>$ pip show pytest\n\nName: pytest\n\nVersion: 3.8.2\n\nSummary: pytest: simple powerful testing with Python\n\nHome-page: https://docs.pytest.org/en/latest/\n\nAuthor: Holger Krekel, Bruno Oliveira, Ronny Pfannschmidt, Floris Bruynooghe, Brianna Laugher, Florian Bruhin and others\n\nAuthor-email: None\n\nLicense: MIT license\n\nLocation: /home/peter/.local/lib/python3.4/site-packages\n\nRequires: more-itertools, atomicwrites, setuptools, attrs, pathlib2, six, py, pluggy\n\n</code></pre></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	855
Relative imports in Python 3	<blockquote>\n\n <p>unfortunately, this module needs to be inside the package, and it also\n\n needs to be runnable as a script, sometimes. Any idea how I could\n\n achieve that?</p>\n\n</blockquote>\n\n<p>It's quite common to have a layout like this...</p>\n\n<pre><code>main.py\n\nmypackage/\n\n __init__.py\n\n mymodule.py\n\n myothermodule.py\n\n</code></pre>\n\n<p>...with a <code>mymodule.py</code> like this...</p>\n\n<pre><code>#!/usr/bin/env python3\n\n# Exported function\n\ndef as_int(a):\n\n return int(a)\n\n# Test function for module \n\ndef _test():\n\n assert as_int('1') == 1\n\nif __name__ == '__main__':\n\n _test()\n\n</code></pre>\n\n<p>...a <code>myothermodule.py</code> like this...</p>\n\n<pre><code>#!/usr/bin/env python3\n\nfrom .mymodule import as_int\n\n# Exported function\n\ndef add(a, b):\n\n return as_int(a) + as_int(b)\n\n# Test function for module \n\ndef _test():\n\n assert add('1', '1') == 2\n\nif __name__ == '__main__':\n\n _test()\n\n</code></pre>\n\n<p>...and a <code>main.py</code> like this...</p>\n\n<pre><code>#!/usr/bin/env python3\n\nfrom mypackage.myothermodule import add\n\ndef main():\n\n print(add('1', '1'))\n\nif __name__ == '__main__':\n\n main()\n\n</code></pre>\n\n<p>...which works fine when you run <code>main.py</code> or <code>mypackage/mymodule.py</code>, but fails with <code>mypackage/myothermodule.py</code>, due to the relative import...</p>\n\n<pre><code>from .mymodule import as_int\n\n</code></pre>\n\n<p>The way you're supposed to run it is...</p>\n\n<pre><code>python3 -m mypackage.myothermodule\n\n</code></pre>\n\n<p>...but it's somewhat verbose, and doesn't mix well with a shebang line like <code>#!/usr/bin/env python3</code>.</p>\n\n<p>The simplest fix for this case, assuming the name <code>mymodule</code> is globally unique, would be to avoid using relative imports, and just use...</p>\n\n<pre><code>from mymodule import as_int\n\n</code></pre>\n\n<p>...although, if it's not unique, or your package structure is more complex, you'll need to include the directory containing your package directory in <code>PYTHONPATH</code>, and do it like this...</p>\n\n<pre><code>from mypackage.mymodule import as_int\n\n</code></pre>\n\n<p>...or if you want it to work "out of the box", you can frob the <code>PYTHONPATH</code> in code first with this...</p>\n\n<pre><code>import sys\n\nimport os\n\nPACKAGE_PARENT = '..'\n\nSCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(__file__))))\n\nsys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))\n\nfrom mypackage.mymodule import as_int\n\n</code></pre>\n\n<p>It's kind of a pain, but there's a clue as to why in <a href="http://mail.python.org/pipermail/python-3000/2007-April/006793.html" rel="noreferrer">an email</a> written by a certain Guido van Rossum...</p>\n\n<blockquote>\n\n <p>I'm -1 on this and on any other proposed twiddlings of the <code>__main__</code>\n\n machinery. The only use case seems to be running scripts that happen\n\n to be living inside a module's directory, which I've always seen as an\n\n antipattern. To make me change my mind you'd have to convince me that\n\n it isn't.</p>\n\n</blockquote>\n\n<p>Whether running scripts inside a package is an antipattern or not is subjective, but personally I find it really useful in a package I have which contains some custom wxPython widgets, so I can run the script for any of the source files to display a <code>wx.Frame</code> containing only that widget for testing purposes.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	856
How can I filter a Django query with a list of values?	<p>From the <a href="https://docs.djangoproject.com/en/dev/topics/db/queries/#the-pk-lookup-shortcut" rel="noreferrer">Django documentation</a>:</p>\n\n<pre><code>Blog.objects.filter(pk__in=[1, 4, 7])\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	857
Python argparse command line flags without arguments	<p>As you have it, the argument w is expecting a value after -w on the command line. If you are just looking to flip a switch by setting a variable <code>True</code> or <code>False</code>, have a look at <a href="http://docs.python.org/dev/library/argparse.html#action" rel="noreferrer">http://docs.python.org/dev/library/argparse.html#action</a> (specifically store_true and store_false)</p>\n\n<pre><code>import argparse\n\nparser = argparse.ArgumentParser()\n\nparser.add_argument('-w', action='store_true')\n\n</code></pre>\n\n<p>where <code>action='store_true'</code> implies <code>default=False</code>.</p>\n\n<p>Conversely, you could have<code>action='store_false'</code>, which implies <code>default=True</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	858
What is `related_name` used for in Django?	<p>The <code>related_name</code> attribute specifies the name of the reverse relation from the <code>User</code> model back to your model.</p>\n\n<p>If you don't specify a <code>related_name</code>, Django automatically creates one using the name of your model with the suffix <code>_set</code>, for instance <code>User.map_set.all()</code>. </p>\n\n<p>If you <em>do</em> specify, e.g. <code>related_name=maps</code> on the <code>User</code> model, <code>User.map_set</code> will still work, but the <code>User.maps.</code> syntax is obviously a bit cleaner and less clunky; so for example, if you had a user object <code>current_user</code>, you could use <code>current_user.maps.all()</code> to get all instances of your <code>Map</code> model that have a relation to <code>current_user</code>. </p>\n\n<p>The <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects" rel="noreferrer">Django documentation</a> has more details.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	859
SQLAlchemy: What's the difference between flush() and commit()?	<p>A Session object is basically an ongoing transaction of changes to a database (update, insert, delete). These operations aren't persisted to the database until they are committed (if your program aborts for some reason in mid-session transaction, any uncommitted changes within are lost).</p>\n\n<p>The session object registers transaction operations with <code>session.add()</code>, but doesn't yet communicate them to the database until <code>session.flush()</code> is called. </p>\n\n<p><code>session.flush()</code> communicates a series of operations to the database (insert, update, delete). The database maintains them as pending operations in a transaction. The changes aren't persisted permanently to disk, or visible to other transactions until the database receives a COMMIT for the current transaction (which is what <code>session.commit()</code> does).</p>\n\n<p><code>session.commit()</code> commits (persists) those changes to the database.</p>\n\n<p><code>flush()</code> is <em>always</em> called as part of a call to <code>commit()</code> (<a href="http://docs.sqlalchemy.org/en/latest/orm/session_basics.html#committing" rel="noreferrer">1</a>).</p>\n\n<p>When you use a Session object to query the database, the query will return results both from the database and from the flushed parts of the uncommitted transaction it holds. By default, Session objects <code>autoflush</code> their operations, but this can be disabled.</p>\n\n<p>Hopefully this example will make this clearer:</p>\n\n<pre><code>#---\n\ns = Session()\n\ns.add(Foo('A')) # The Foo('A') object has been added to the session.\n\n # It has not been committed to the database yet,\n\n # but is returned as part of a query.\n\nprint 1, s.query(Foo).all()\n\ns.commit()\n\n#---\n\ns2 = Session()\n\ns2.autoflush = False\n\ns2.add(Foo('B'))\n\nprint 2, s2.query(Foo).all() # The Foo('B') object is *not* returned\n\n # as part of this query because it hasn't\n\n # been flushed yet.\n\ns2.flush() # Now, Foo('B') is in the same state as\n\n # Foo('A') was above.\n\nprint 3, s2.query(Foo).all() \n\ns2.rollback() # Foo('B') has not been committed, and rolling\n\n # back the session's transaction removes it\n\n # from the session.\n\nprint 4, s2.query(Foo).all()\n\n#---\n\nOutput:\n\n1 [<Foo('A')>]\n\n2 [<Foo('A')>]\n\n3 [<Foo('A')>, <Foo('B')>]\n\n4 [<Foo('A')>]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	860
Python class inherits object	<p><strong>Python 3</strong></p>\n\n<ul>\n\n<li><code>class MyClass(object):</code> = New-style class</li>\n\n<li><code>class MyClass:</code> = New-style class (implicitly inherits from <code>object</code>)</li>\n\n</ul>\n\n<p><strong>Python 2</strong></p>\n\n<ul>\n\n<li><code>class MyClass(object):</code> = New-style class</li>\n\n<li><code>class MyClass:</code> = <em>OLD-STYLE CLASS</em></li>\n\n</ul>\n\n<hr>\n\n<p><strong>Explanation</strong>:</p>\n\n<p>When defining base classes in Python 3.x, youâre allowed to drop the <code>object</code> from the definition. However, this can open the door for a seriously hard to track problemâ¦</p>\n\n<p>Python introduced new-style classes back in Python 2.2, and by now old-style classes are really quite old. Discussion of old-style classes is <a href="http://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes" rel="nofollow noreferrer">buried in the 2.x docs</a>, and non-existent in the 3.x docs.</p>\n\n<p>The problem is, <strong>the syntax for old-style classes in Python 2.x is the same as the alternative syntax for new-style classes in Python 3.x</strong>. Python 2.x is still very widely used (e.g. GAE, Web2Py), and any code (or coder) unwittingly bringing 3.x-style class definitions into 2.x code is going to end up with some seriously outdated base objects. And because old-style classes arenât on anyoneâs radar, they likely wonât know what hit them.</p>\n\n<p>So just spell it out the long way and save some 2.x developer the tears.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	861
Convert a number range to another range, maintaining ratio	<pre><code>NewValue = (((OldValue - OldMin) * (NewMax - NewMin)) / (OldMax - OldMin)) + NewMin\n\n</code></pre>\n\n<p>Or a little more readable: </p>\n\n<pre><code>OldRange = (OldMax - OldMin) \n\nNewRange = (NewMax - NewMin) \n\nNewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin\n\n</code></pre>\n\n<p>Or if you want to protect for the case where the old range is 0 (<em>OldMin = OldMax</em>):</p>\n\n<pre><code>OldRange = (OldMax - OldMin)\n\nif (OldRange == 0)\n\n NewValue = NewMin\n\nelse\n\n{\n\n NewRange = (NewMax - NewMin) \n\n NewValue = (((OldValue - OldMin) * NewRange) / OldRange) + NewMin\n\n}\n\n</code></pre>\n\n<p>Note that in this case we're forced to pick one of the possible new range values arbitrarily. Depending on context, sensible choices could be: <code>NewMin</code> (<em>see sample</em>), <code>NewMax</code> or <code>(NewMin + NewMax) / 2</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	862
Import a file from a subdirectory?	<p>Take a look at the Packages documentation (Section 6.4) here: <a href="http://docs.python.org/tutorial/modules.html" rel="noreferrer">http://docs.python.org/tutorial/modules.html</a></p>\n\n<p>In short, you need to put a blank file named </p>\n\n<pre><code>__init__.py\n\n</code></pre>\n\n<p>in the "lib" directory.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	863
Converting dictionary to JSON	<p><code>json.dumps()</code> converts a dictionary to <code>str</code> object, not a <code>json(dict)</code> object! So you have to load your <code>str</code> into a <code>dict</code> to use it by using <a href="https://docs.python.org/2/library/json.html#json.loads" rel="noreferrer"><strong><code>json.loads()</code></strong></a> method</p>\n\n<p>See <code>json.dumps()</code> as a save method and <code>json.loads()</code> as a retrieve method.</p>\n\n<p>This is the code sample which might help you understand it more:</p>\n\n<pre><code>import json\n\nr = {'is_claimed': 'True', 'rating': 3.5}\n\nr = json.dumps(r)\n\nloaded_r = json.loads(r)\n\nloaded_r['rating'] #Output 3.5\n\ntype(r) #Output str\n\ntype(loaded_r) #Output dict\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	864
Python 3: ImportError "No Module named Setuptools"	<p>Your <code>setup.py</code> file needs <code>setuptools</code>. Some Python packages used to use <code>distutils</code> for distribution, but most now use <code>setuptools</code>, a more complete package. <a href="https://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-and-setuptools">Here</a> is a question about the differences between them.</p>\n\n<p>To install <code>setuptools</code> on Debian:</p>\n\n<pre><code>sudo apt-get install python3-setuptools\n\n</code></pre>\n\n<p>For an older version of Python (Python 2.x):</p>\n\n<pre><code>sudo apt-get install python-setuptools\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	865
Get lengths of a list in a jinja2 template	<pre><code><span>You have {{products|length}} products</span>\n\n</code></pre>\n\n<p>You can also use this syntax in expressions like</p>\n\n<pre><code>{% if products|length > 1 %}\n\n</code></pre>\n\n<p>jinja2's builtin filters are documented <a href="http://jinja.pocoo.org/docs/templates/#builtin-filters" rel="noreferrer">here</a>; and specifically, as you've already found, <a href="http://jinja.pocoo.org/docs/templates/#length" rel="noreferrer"><code>length</code></a> (and its synonym <code>count</code>) is documented to:</p>\n\n<blockquote>\n\n <p>Return the number of items of a sequence or mapping.</p>\n\n</blockquote>\n\n<p>So, again as you've found, <code>{{products|count}}</code> (or equivalently <code>{{products|length}}</code>) in your template will give the "number of products" ("length of list")</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	866
Join a list of items with different types as string in Python	<p>Calling <code>str(...)</code> is the Pythonic way to convert something to a string.</p>\n\n<p>You might want to consider why you want a list of strings. You could instead keep it as a list of integers and only convert the integers to strings when you need to display them. For example, if you have a list of integers then you can convert them one by one in a for-loop and join them with <code>,</code>:</p>\n\n<pre><code>print(','.join(str(x) for x in list_of_ints))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	867
Changing one character in a string	<p>Don't modify strings.</p>\n\n<p>Work with them as lists; turn them into strings only when needed.</p>\n\n<pre><code>>>> s = list("Hello zorld")\n\n>>> s\n\n['H', 'e', 'l', 'l', 'o', ' ', 'z', 'o', 'r', 'l', 'd']\n\n>>> s[6] = 'W'\n\n>>> s\n\n['H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\n\n>>> "".join(s)\n\n'Hello World'\n\n</code></pre>\n\n<p>Python strings are immutable (i.e. they can't be modified). There are <a href="http://effbot.org/pyfaq/why-are-python-strings-immutable.htm" rel="noreferrer">a lot</a> of reasons for this. Use lists until you have no choice, only then turn them into strings.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	868
Difference between map, applymap and apply methods in Pandas	<p>Straight from Wes McKinney's <a href="http://shop.oreilly.com/product/0636920023784.do" rel="noreferrer">Python for Data Analysis</a> book, pg. 132 (I highly recommended this book):</p>\n\n<blockquote>\n\n <p>Another frequent operation is applying a function on 1D arrays to each column or row. DataFrameâs apply method does exactly this:</p>\n\n</blockquote>\n\n<pre><code>In [116]: frame = DataFrame(np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'])\n\nIn [117]: frame\n\nOut[117]: \n\n b d e\n\nUtah -0.029638 1.081563 1.280300\n\nOhio 0.647747 0.831136 -1.549481\n\nTexas 0.513416 -0.884417 0.195343\n\nOregon -0.485454 -0.477388 -0.309548\n\nIn [118]: f = lambda x: x.max() - x.min()\n\nIn [119]: frame.apply(f)\n\nOut[119]: \n\nb 1.133201\n\nd 1.965980\n\ne 2.829781\n\ndtype: float64\n\n</code></pre>\n\n<blockquote>\n\n <p>Many of the most common array statistics (like sum and mean) are DataFrame methods,\n\n so using apply is not necessary.</p>\n\n <p>Element-wise Python functions can be used, too. Suppose you wanted to compute a formatted string from each floating point value in frame. You can do this with applymap:</p>\n\n</blockquote>\n\n<pre><code>In [120]: format = lambda x: '%.2f' % x\n\nIn [121]: frame.applymap(format)\n\nOut[121]: \n\n b d e\n\nUtah -0.03 1.08 1.28\n\nOhio 0.65 0.83 -1.55\n\nTexas 0.51 -0.88 0.20\n\nOregon -0.49 -0.48 -0.31\n\n</code></pre>\n\n<blockquote>\n\n <p>The reason for the name applymap is that Series has a map method for applying an element-wise function:</p>\n\n</blockquote>\n\n<pre><code>In [122]: frame['e'].map(format)\n\nOut[122]: \n\nUtah 1.28\n\nOhio -1.55\n\nTexas 0.20\n\nOregon -0.31\n\nName: e, dtype: object\n\n</code></pre>\n\n<p>Summing up, <code>apply</code> works on a row / column basis of a DataFrame, <code>applymap</code> works element-wise on a DataFrame, and <code>map</code> works element-wise on a Series.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	869
Is there a simple way to remove multiple spaces in a string?	<pre><code>>>> import re\n\n>>> re.sub(' +', ' ', 'The quick brown fox')\n\n'The quick brown fox'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	870
Directory-tree listing in Python	<p>You can use</p>\n\n<pre><code>os.listdir(path)\n\n</code></pre>\n\n<p>For reference and more os functions look here:</p>\n\n<ul>\n\n<li>Python 2 docs: <a href="https://docs.python.org/2/library/os.html#os.listdir" rel="noreferrer">https://docs.python.org/2/library/os.html#os.listdir</a></li>\n\n<li>Python 3 docs: <a href="https://docs.python.org/3/library/os.html#os.listdir" rel="noreferrer">https://docs.python.org/3/library/os.html#os.listdir</a></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	871
Pandas Merging 101	<p>This post aims to give readers a primer on SQL-flavoured merging with pandas, how to use it, and when not to use it.</p>\n\n<p>In particular, here's what this post will go through:</p>\n\n<ul>\n\n<li><p>The basics - types of joins (LEFT, RIGHT, OUTER, INNER)</p>\n\n<ul>\n\n<li>merging with different column names</li>\n\n<li>avoiding duplicate merge key column in output </li>\n\n</ul></li>\n\n<li>Merging with index under different conditions \n\n<ul>\n\n<li>effectively using your named index</li>\n\n<li>merge key as the index of one and column of another</li>\n\n</ul></li>\n\n<li>Multiway merges on columns and indexes (unique and non-unique)</li>\n\n<li>Notable alternatives to <code>merge</code> and <code>join</code></li>\n\n</ul>\n\n<p>What this post will not go through:</p>\n\n<ul>\n\n<li>Performance-related discussions and timings (for now). Mostly notable mentions of better alternatives, wherever appropriate.</li>\n\n<li>Handling suffixes, removing extra columns, renaming outputs, and other specific use cases. There are other (read: better) posts that deal with that, so figure it out!</li>\n\n</ul>\n\n<blockquote>\n\n <p><strong>Note</strong><br>\n\n Most examples default to INNER JOIN operations while demonstrating various features, unless otherwise specified. </p>\n\n <p>Furthermore, all the DataFrames here can be copied and replicated so\n\n you can play with them. Also, see <a href="https://stackoverflow.com/questions/31610889/how-to-copy-paste-dataframe-from-stackoverflow-into-python">this\n\n post</a>\n\n on how to read DataFrames from your clipboard.</p>\n\n <p>Lastly, all visual representation of JOIN operations have been hand-drawn using Google Drawings. Inspiration from <a href="https://stackoverflow.com/a/55858991/4909087">here</a>.</p>\n\n</blockquote>\n\n<h1>Enough Talk, just show me how to use <code>merge</code>!</h1>\n\n<p><strong>Setup</strong> </p>\n\n<pre><code>np.random.seed(0)\n\nleft = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'value': np.random.randn(4)}) \n\nright = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'value': np.random.randn(4)})\n\nleft\n\n key value\n\n0 A 1.764052\n\n1 B 0.400157\n\n2 C 0.978738\n\n3 D 2.240893\n\nright\n\n key value\n\n0 B 1.867558\n\n1 D -0.977278\n\n2 E 0.950088\n\n3 F -0.151357\n\n</code></pre>\n\n<p>For the sake of simplicity, the key column has the same name (for now).</p>\n\n<p>An <strong>INNER JOIN</strong> is represented by </p>\n\n<p><img src="https://i.stack.imgur.com/YvuOa.png" width="500"/></p>\n\n<blockquote>\n\n <p><strong>Note</strong><br>\n\n This, along with the forthcoming figures all follow this convention:</p>\n\n <ul>\n\n <li><strong>blue</strong> indicates rows that are present in the merge result</li>\n\n <li><strong>red</strong> indicates rows that are excluded from the result (i.e., removed)</li>\n\n <li><strong>green</strong> indicates missing values that are replaced with NaNs in the result</li>\n\n </ul>\n\n</blockquote>\n\n<p>To perform an INNER JOIN, call <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.merge.html" rel="noreferrer"><code>merge</code></a> on the left DataFrame, specifying the right DataFrame and the join key (at the very least) as arguments. </p>\n\n<pre><code>left.merge(right, on='key')\n\n# Or, if you want to be explicit\n\n# left.merge(right, on='key', how='inner')\n\n key value_x value_y\n\n0 B 0.400157 1.867558\n\n1 D 2.240893 -0.977278\n\n</code></pre>\n\n<p>This returns only rows from <code>left</code> and <code>right</code> which share a common key (in this example, "B" and "D). </p>\n\n<p>A <strong>LEFT OUTER JOIN</strong>, or LEFT JOIN is represented by </p>\n\n<p><img src="https://i.stack.imgur.com/BECid.png" width="500" /></p>\n\n<p>This can be performed by specifying <code>how='left'</code>. </p>\n\n<pre><code>left.merge(right, on='key', how='left')\n\n key value_x value_y\n\n0 A 1.764052 NaN\n\n1 B 0.400157 1.867558\n\n2 C 0.978738 NaN\n\n3 D 2.240893 -0.977278\n\n</code></pre>\n\n<p>Carefully note the placement of NaNs here. If you specify <code>how='left'</code>, then only keys from <code>left</code> are used, and missing data from <code>right</code> is replaced by NaN.</p>\n\n<p>And similarly, for a <strong>RIGHT OUTER JOIN</strong>, or RIGHT JOIN which is...</p>\n\n<p><img src="https://i.stack.imgur.com/8w1US.png" width="500" /></p>\n\n<p>...specify <code>how='right'</code>:</p>\n\n<pre><code>left.merge(right, on='key', how='right')\n\n key value_x value_y\n\n0 B 0.400157 1.867558\n\n1 D 2.240893 -0.977278\n\n2 E NaN 0.950088\n\n3 F NaN -0.151357\n\n</code></pre>\n\n<p>Here, keys from <code>right</code> are used, and missing data from <code>left</code> is replaced by NaN.</p>\n\n<p>Finally, for the <strong>FULL OUTER JOIN</strong>, given by</p>\n\n<p><img src="https://i.stack.imgur.com/euLoe.png" width="500" /></p>\n\n<p>specify <code>how='outer'</code>.</p>\n\n<pre><code>left.merge(right, on='key', how='outer')\n\n key value_x value_y\n\n0 A 1.764052 NaN\n\n1 B 0.400157 1.867558\n\n2 C 0.978738 NaN\n\n3 D 2.240893 -0.977278\n\n4 E NaN 0.950088\n\n5 F NaN -0.151357\n\n</code></pre>\n\n<p>This uses the keys from both frames, and NaNs are inserted for missing rows in both. </p>\n\n<p>The documentation summarises these various merges nicely:</p>\n\n<p><a href="https://i.stack.imgur.com/5qDIy.png" rel="noreferrer"><img src="https://i.stack.imgur.com/5qDIy.png" alt="enter image description here"></a></p>\n\n<h3><strong>Other JOINs - LEFT-Excluding, RIGHT-Excluding, and FULL-Excluding/ANTI JOINs</strong></h3>\n\n<p>If you need <strong>LEFT-Excluding JOINs</strong> and <strong>RIGHT-Excluding JOINs</strong> in two steps.</p>\n\n<p>For LEFT-Excluding JOIN, represented as</p>\n\n<p><img src="https://i.stack.imgur.com/bXWIV.png" width="500"/></p>\n\n<p>Start by performing a LEFT OUTER JOIN and then filtering (excluding!) rows coming from <code>left</code> only,</p>\n\n<pre><code>(left.merge(right, on='key', how='left', indicator=True)\n\n .query('_merge == "left_only"')\n\n .drop('_merge', 1))\n\n key value_x value_y\n\n0 A 1.764052 NaN\n\n2 C 0.978738 NaN\n\n</code></pre>\n\n<p>Where,</p>\n\n<pre><code>left.merge(right, on='key', how='left', <b>indicator=True</b>)\n\n key value_x value_y _merge\n\n0 A 1.764052 NaN left_only\n\n1 B 0.400157 1.867558 both\n\n2 C 0.978738 NaN left_only\n\n3 D 2.240893 -0.977278 both</code></pre>\n\n<p>And similarly, for a RIGHT-Excluding JOIN, </p>\n\n<p><img src="https://i.stack.imgur.com/Z0br2.png" width="500"/></p>\n\n<pre><code>(left.merge(right, on='key', how='right', <b>indicator=True</b>)\n\n .query('_merge == "right_only"')\n\n .drop('_merge', 1))\n\n key value_x value_y\n\n2 E NaN 0.950088\n\n3 F NaN -0.151357</code></pre>\n\n<p>Lastly, if you are required to do a merge that only retains keys from the left or right, but not both (IOW, performing an <strong>ANTI-JOIN</strong>), </p>\n\n<p><img src="https://i.stack.imgur.com/PWMYd.png" width="500"/></p>\n\n<p>You can do this in similar fashionâ</p>\n\n<pre><code>(left.merge(right, on='key', how='outer', indicator=True)\n\n .query('_merge != "both"')\n\n .drop('_merge', 1))\n\n key value_x value_y\n\n0 A 1.764052 NaN\n\n2 C 0.978738 NaN\n\n4 E NaN 0.950088\n\n5 F NaN -0.151357\n\n</code></pre>\n\n<h3><strong>Different names for key columns</strong></h3>\n\n<p>If the key columns are named differentlyâfor example, <code>left</code> has <code>keyLeft</code>, and <code>right</code> has <code>keyRight</code> instead of <code>key</code>âthen you will have to specify <code>left_on</code> and <code>right_on</code> as arguments instead of <code>on</code>:</p>\n\n<pre><code>left2 = left.rename({'key':'keyLeft'}, axis=1)\n\nright2 = right.rename({'key':'keyRight'}, axis=1)\n\nleft2\n\n keyLeft value\n\n0 A 1.764052\n\n1 B 0.400157\n\n2 C 0.978738\n\n3 D 2.240893\n\nright2\n\n keyRight value\n\n0 B 1.867558\n\n1 D -0.977278\n\n2 E 0.950088\n\n3 F -0.151357\n\n</code></pre>\n\n<p></p>\n\n<pre><code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')\n\n keyLeft value_x keyRight value_y\n\n0 B 0.400157 B 1.867558\n\n1 D 2.240893 D -0.977278\n\n</code></pre>\n\n<h3><strong>Avoiding duplicate key column in output</strong></h3>\n\n<p>When merging on <code>keyLeft</code> from <code>left</code> and <code>keyRight</code> from <code>right</code>, if you only want either of the <code>keyLeft</code> or <code>keyRight</code> (but not both) in the output, you can start by setting the index as a preliminary step.</p>\n\n<pre><code>left3 = left2.set_index('keyLeft')\n\nleft3.merge(right2, left_index=True, right_on='keyRight')\n\n value_x keyRight value_y\n\n0 0.400157 B 1.867558\n\n1 2.240893 D -0.977278\n\n</code></pre>\n\n<p>Contrast this with the output of the command just before (thst is, the output of <code>left2.merge(right2, left_on='keyLeft', right_on='keyRight', how='inner')</code>), you'll notice <code>keyLeft</code> is missing. You can figure out what column to keep based on which frame's index is set as the key. This may matter when, say, performing some OUTER JOIN operation. </p>\n\n<h3><strong>Merging only a single column from one of the <code>DataFrames</code></strong></h3>\n\n<p>For example, consider</p>\n\n<pre><code>right3 = right.assign(newcol=np.arange(len(right)))\n\nright3\n\n key value newcol\n\n0 B 1.867558 0\n\n1 D -0.977278 1\n\n2 E 0.950088 2\n\n3 F -0.151357 3\n\n</code></pre>\n\n<p>If you are required to merge only "new_val" (without any of the other columns), you can usually just subset columns before merging:</p>\n\n<pre><code>left.merge(right3[['key', 'newcol']], on='key')\n\n key value newcol\n\n0 B 0.400157 0\n\n1 D 2.240893 1\n\n</code></pre>\n\n<p>If you're doing a LEFT OUTER JOIN, a more performant solution would involve <code>map</code>:</p>\n\n<pre><code># left['newcol'] = left['key'].map(right3.set_index('key')['newcol']))\n\nleft.assign(newcol=left['key'].map(right3.set_index('key')['newcol']))\n\n key value newcol\n\n0 A 1.764052 NaN\n\n1 B 0.400157 0.0\n\n2 C 0.978738 NaN\n\n3 D 2.240893 1.0\n\n</code></pre>\n\n<p>As mentioned, this is similar to, but faster than</p>\n\n<pre><code>left.merge(right3[['key', 'newcol']], on='key', how='left')\n\n key value newcol\n\n0 A 1.764052 NaN\n\n1 B 0.400157 0.0\n\n2 C 0.978738 NaN\n\n3 D 2.240893 1.0\n\n</code></pre>\n\n<h3><strong>Merging on multiple columns</strong></h3>\n\n<p>To join on more than one column, specify a list for <code>on</code> (or <code>left_on</code> and <code>right_on</code>, as appropriate).</p>\n\n<pre><code>left.merge(right, on=['key1', 'key2'] ...)\n\n</code></pre>\n\n<p>Or, in the event the names are different,</p>\n\n<pre><code>left.merge(right, left_on=['lkey1', 'lkey2'], right_on=['rkey1', 'rkey2'])\n\n</code></pre>\n\n<h3><strong>Other useful <code>merge*</code> operations and functions</strong></h3>\n\n<ul>\n\n<li><strong>Merging a DataFrame with Series on index</strong>: See <a href="https://stackoverflow.com/a/40762674/4909087">this answer</a>.</li>\n\n<li><p>Besides <code>merge</code>, <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.update.html" rel="noreferrer"><code>DataFrame.update</code></a> and <a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.combine_first.html" rel="noreferrer"><code>DataFrame.combine_first</code></a> are also used in certain cases to update one DataFrame with another.</p></li>\n\n<li><p><a href="http://pandas.pydata.org/pandas-docs/version/0.19.0/generated/pandas.merge_ordered.html" rel="noreferrer"><code>pd.merge_ordered</code></a> is a useful function for ordered JOINs.</p></li>\n\n<li><p><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.merge_asof.html" rel="noreferrer"><code>pd.merge_asof</code></a> (read: merge_asOf) is useful for <em>approximate</em> joins.</p></li>\n\n</ul>\n\n<p><strong>This section only covers the very basics, and is designed to only whet your appetite. For more examples and cases, see the <a href="https://pandas.pydata.org/pandas-docs/stable/merging.html" rel="noreferrer">documentation on <code>merge</code>, <code>join</code>, and <code>concat</code></a> as well as the links to the function specs.</strong></p>\n\n<hr>\n\n<h1>Index-based *-JOIN (+ index-column <code>merge</code>s)</h1>\n\n<p><strong>Setup</strong></p>\n\n<pre><code>np.random.seed([3, 14])\n\nleft = pd.DataFrame({'value': np.random.randn(4)}, index=['A', 'B', 'C', 'D']) \n\nright = pd.DataFrame({'value': np.random.randn(4)}, index=['B', 'D', 'E', 'F'])\n\nleft.index.name = right.index.name = 'idxkey'\n\nleft\n\n value\n\nidxkey \n\nA -0.602923\n\nB -0.402655\n\nC 0.302329\n\nD -0.524349\n\nright\n\n value\n\nidxkey \n\nB 0.543843\n\nD 0.013135\n\nE -0.326498\n\nF 1.385076\n\n</code></pre>\n\n<p>Typically, a merge on index would look like this:</p>\n\n<pre><code>left.merge(right, left_index=True, right_index=True)\n\n value_x value_y\n\nidxkey \n\nB -0.402655 0.543843\n\nD -0.524349 0.013135\n\n</code></pre>\n\n<h3><strong>Support for index names</strong></h3>\n\n<p>If your index is named, then v0.23 users can also specify the level name to <code>on</code> (or <code>left_on</code> and <code>right_on</code> as necessary).</p>\n\n<pre><code>left.merge(right, on='idxkey')\n\n value_x value_y\n\nidxkey \n\nB -0.402655 0.543843\n\nD -0.524349 0.013135\n\n</code></pre>\n\n<h3><strong>Merging on index of one, column(s) of another</strong></h3>\n\n<p>It is possible (and quite simple) to use the index of one, and the column of another, to perform a merge. For example,</p>\n\n<pre><code>left.merge(right, left_on='key1', right_index=True)\n\n</code></pre>\n\n<p>Or vice versa (<code>right_on=...</code> and <code>left_index=True</code>). </p>\n\n<pre><code>right2 = right.reset_index().rename({'idxkey' : 'colkey'}, axis=1)\n\nright2\n\n colkey value\n\n0 B 0.543843\n\n1 D 0.013135\n\n2 E -0.326498\n\n3 F 1.385076\n\nleft.merge(right2, left_index=True, right_on='colkey')\n\n value_x colkey value_y\n\n0 -0.402655 B 0.543843\n\n1 -0.524349 D 0.013135\n\n</code></pre>\n\n<p>In this special case, the index for <code>left</code> is named, so you can also use the index name with <code>left_on</code>, like this:</p>\n\n<pre><code>left.merge(right2, left_on='idxkey', right_on='colkey')\n\n value_x colkey value_y\n\n0 -0.402655 B 0.543843\n\n1 -0.524349 D 0.013135\n\n</code></pre>\n\n<p><strong><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.join.html" rel="noreferrer"><code>DataFrame.join</code></a></strong><br>\n\nBesides these, there is another succinct option. You can use <code>DataFrame.join</code> which defaults to joins on the index. <code>DataFrame.join</code> does a LEFT OUTER JOIN by default, so <code>how='inner'</code> is necessary here.</p>\n\n<pre><code>left.join(right, how='inner', lsuffix='_x', rsuffix='_y')\n\n value_x value_y\n\nidxkey \n\nB -0.402655 0.543843\n\nD -0.524349 0.013135\n\n</code></pre>\n\n<p>Note that I needed to specify the <code>lsuffix</code> and <code>rsuffix</code> arguments since <code>join</code> would otherwise error out:</p>\n\n<pre><code>left.join(right)\n\nValueError: columns overlap but no suffix specified: Index(['value'], dtype='object')\n\n</code></pre>\n\n<p>Since the column names are the same. This would not be a problem if they were differently named.</p>\n\n<pre><code>left.rename(columns={'value':'leftvalue'}).join(right, how='inner')\n\n leftvalue value\n\nidxkey \n\nB -0.402655 0.543843\n\nD -0.524349 0.013135\n\n</code></pre>\n\n<p><strong><a href="https://pandas.pydata.org/pandas-docs/stable/generated/pandas.concat.html" rel="noreferrer"><code>pd.concat</code></a></strong><br>\n\nLastly, as an alternative for index-based joins, you can use <code>pd.concat</code>:</p>\n\n<pre><code>pd.concat([left, right], axis=1, sort=False, join='inner')\n\n value value\n\nidxkey \n\nB -0.402655 0.543843\n\nD -0.524349 0.013135\n\n</code></pre>\n\n<p>Omit <code>join='inner'</code> if you need a FULL OUTER JOIN (the default):</p>\n\n<pre><code>pd.concat([left, right], axis=1, sort=False)\n\n value value\n\nA -0.602923 NaN\n\nB -0.402655 0.543843\n\nC 0.302329 NaN\n\nD -0.524349 0.013135\n\nE NaN -0.326498\n\nF NaN 1.385076\n\n</code></pre>\n\n<p>For more information, see <a href="https://stackoverflow.com/questions/49620538/what-are-the-levels-keys-and-names-arguments-for-in-pandas-concat-functio/49620539#49620539">this canonical post on <code>pd.concat</code> by @piRSquared</a>.</p>\n\n<hr>\n\n<h1>Generalizing: <code>merge</code>ing multiple DataFrames</h1>\n\n<p>Oftentimes, the situation arises when multiple DataFrames are to be merged together. Naively, this can be done by chaining <code>merge</code> calls:</p>\n\n<pre><code>df1.merge(df2, ...).merge(df3, ...)\n\n</code></pre>\n\n<p>However, this quickly gets out of hand for many DataFrames. Furthermore, it may be necessary to generalise for an unknown number of DataFrames. </p>\n\n<p>Here I introduce <code>pd.concat</code> for multi-way joins on <em>unique</em> keys, and <code>DataFrame.join</code> for multi-way joins on <em>non-unique</em> keys. First, the setup.</p>\n\n<pre><code># Setup.\n\nnp.random.seed(0)\n\nA = pd.DataFrame({'key': ['A', 'B', 'C', 'D'], 'valueA': np.random.randn(4)}) \n\nB = pd.DataFrame({'key': ['B', 'D', 'E', 'F'], 'valueB': np.random.randn(4)})\n\nC = pd.DataFrame({'key': ['D', 'E', 'J', 'C'], 'valueC': np.ones(4)})\n\ndfs = [A, B, C] \n\n# Note, the "key" column values are unique, so the index is unique.\n\nA2 = A.set_index('key')\n\nB2 = B.set_index('key')\n\nC2 = C.set_index('key')\n\ndfs2 = [A2, B2, C2]\n\n</code></pre>\n\n<h3><strong>Multiway merge on unique keys (or index)</strong></h3>\n\n<p>If your keys (here, the key could either be a column or an index) are unique, then you can use <code>pd.concat</code>. Note that <strong><code>pd.concat</code> joins DataFrames on the index</strong>.</p>\n\n<pre><code># merge on `key` column, you'll need to set the index before concatenating\n\npd.concat([\n\n df.set_index('key') for df in dfs], axis=1, join='inner'\n\n).reset_index()\n\n key valueA valueB valueC\n\n0 D 2.240893 -0.977278 1.0\n\n# merge on `key` index\n\npd.concat(dfs2, axis=1, sort=False, join='inner')\n\n valueA valueB valueC\n\nkey \n\nD 2.240893 -0.977278 1.0\n\n</code></pre>\n\n<p>Omit <code>join='inner'</code> for a FULL OUTER JOIN. Note that you cannot specify LEFT or RIGHT OUTER joins (if you need these, use <code>join</code>, described below).</p>\n\n<h3><strong>Multiway merge on keys with duplicates</strong></h3>\n\n<p><code>concat</code> is fast, but has its shortcomings. It cannot handle duplicates.</p>\n\n<pre><code>A3 = pd.DataFrame({'key': ['A', 'B', 'C', 'D', 'D'], 'valueA': np.random.randn(5)})\n\n</code></pre>\n\n<p></p>\n\n<pre><code>pd.concat([df.set_index('key') for df in [A3, B, C]], axis=1, join='inner')\n\nValueError: Shape of passed values is (3, 4), indices imply (3, 2)\n\n</code></pre>\n\n<p>In this situation, we can use <code>join</code> since it can handle non-unique keys (note that <code>join</code> joins DataFrames on their index; it calls <code>merge</code> under the hood and does a LEFT OUTER JOIN unless otherwise specified).</p>\n\n<pre><code># join on `key` column, set as the index first\n\n# For inner join. For left join, omit the "how" argument.\n\nA.set_index('key').join(\n\n [df.set_index('key') for df in (B, C)], how='inner').reset_index()\n\n key valueA valueB valueC\n\n0 D 2.240893 -0.977278 1.0\n\n# join on `key` index\n\nA3.set_index('key').join([B2, C2], how='inner')\n\n valueA valueB valueC\n\nkey \n\nD 1.454274 -0.977278 1.0\n\nD 0.761038 -0.977278 1.0\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	872
Why does Python code run faster in a function?	<p>You might ask <em>why</em> it is faster to store local variables than globals. This is a CPython implementation detail.</p>\n\n<p>Remember that CPython is compiled to bytecode, which the interpreter runs. When a function is compiled, the local variables are stored in a fixed-size array (<em>not</em> a <code>dict</code>) and variable names are assigned to indexes. This is possible because you can't dynamically add local variables to a function. Then retrieving a local variable is literally a pointer lookup into the list and a refcount increase on the <code>PyObject</code> which is trivial.</p>\n\n<p>Contrast this to a global lookup (<code>LOAD_GLOBAL</code>), which is a true <code>dict</code> search involving a hash and so on. Incidentally, this is why you need to specify <code>global i</code> if you want it to be global: if you ever assign to a variable inside a scope, the compiler will issue <code>STORE_FAST</code>s for its access unless you tell it not to.</p>\n\n<p>By the way, global lookups are still pretty optimised. Attribute lookups <code>foo.bar</code> are the <em>really</em> slow ones!</p>\n\n<p>Here is small <a href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Local_Variables" rel="noreferrer">illustration</a> on local variable efficiency.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	873
How to debug in Django, the good way?	<p>There are a bunch of ways to do it, but the most straightforward is to simply \n\nuse the <a href="https://docs.python.org/2/library/pdb.html" rel="noreferrer">Python debugger</a>. Just add following line in to a Django view function:</p>\n\n<pre><code>import pdb; pdb.set_trace()\n\n</code></pre>\n\n<p>or </p>\n\n<pre><code>breakpoint() #from Python3.7\n\n</code></pre>\n\n<p>If you try to load that page in your browser, the browser will hang and you get a prompt to carry on debugging on actual executing code.</p>\n\n<p>However there are other options (I am not recommending them):</p>\n\n<pre><code>* return HttpResponse({variable to inspect})\n\n* print {variable to inspect}\n\n* raise Exception({variable to inspect})\n\n</code></pre>\n\n<p>But the Python Debugger (pdb) is highly recommended for all types of Python code. If you are already into pdb, you'd also want to have a look at <a href="http://pypi.python.org/pypi/ipdb/" rel="noreferrer"><strong>IPDB</strong></a> that uses <a href="http://ipython.org/" rel="noreferrer"><strong>ipython</strong></a> for debugging.</p>\n\n<p>Some more useful extension to pdb are</p>\n\n<p><a href="https://pypi.python.org/pypi/pdbpp/" rel="noreferrer"><strong>pdb++</strong></a>, suggested by <a href="https://stackoverflow.com/users/5792269/antash">Antash</a>.</p>\n\n<p><a href="https://pypi.python.org/pypi/pudb" rel="noreferrer"><strong>pudb</strong></a>, suggested by <a href="https://stackoverflow.com/users/5081188/patdujour">PatDuJour</a>.</p>\n\n<p><a href="https://mike.tig.as/blog/2010/09/14/pdb/" rel="noreferrer"><strong>Using the Python debugger in Django</strong></a>, suggested by <a href="https://stackoverflow.com/users/884640/seafangs">Seafangs</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	874
Django Server Error: port is already in use	<p>A more simple solution just type <code>sudo fuser -k 8000/tcp</code>.\n\nThis should kill all the processes associated with port 8000.</p>\n\n<p>EDIT:</p>\n\n<p>For osx users you can use <code>sudo lsof -t -i tcp:8000 | xargs kill -9</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	875
How do I do a case-insensitive string comparison?	<p>Comparing strings in a case insensitive way seems trivial, but it's not. I will be using Python 3, since Python 2 is underdeveloped here.</p>\n\n<p>The first thing to note is that case-removing conversions in Unicode aren't trivial. There is text for which <code>text.lower() != text.upper().lower()</code>, such as <code>"Ã"</code>:</p>\n\n<pre><code>"Ã".lower()\n\n#>>> 'Ã'\n\n"Ã".upper().lower()\n\n#>>> 'ss'\n\n</code></pre>\n\n<p>But let's say you wanted to caselessly compare <code>"BUSSE"</code> and <code>"BuÃe"</code>. Heck, you probably also want to compare <code>"BUSSE"</code> and <code>"BUáºE"</code> equal - that's the newer capital form. The recommended way is to use <a href="https://docs.python.org/3/library/stdtypes.html#str.casefold" rel="noreferrer"><code>casefold</code></a>:</p>\n\n<blockquote>\n\n <p>str.<strong>casefold</strong>()</p>\n\n <p>Return a casefolded copy of the string. Casefolded strings may be used for\n\n caseless matching.</p>\n\n <p>Casefolding is similar to lowercasing but more aggressive because it is\n\n intended to remove all case distinctions in a string. [...]</p>\n\n</blockquote>\n\n<p>Do not just use <code>lower</code>. If <code>casefold</code> is not available, doing <code>.upper().lower()</code> helps (but only somewhat).</p>\n\n<p>Then you should consider accents. If your font renderer is good, you probably think <code>"Ãª" == "eÌ"</code> - but it doesn't:</p>\n\n<pre><code>"Ãª" == "eÌ"\n\n#>>> False\n\n</code></pre>\n\n<p>This is because the accent on the latter is a combining character.</p>\n\n<pre><code>import unicodedata\n\n[unicodedata.name(char) for char in "Ãª"]\n\n#>>> ['LATIN SMALL LETTER E WITH CIRCUMFLEX']\n\n[unicodedata.name(char) for char in "eÌ"]\n\n#>>> ['LATIN SMALL LETTER E', 'COMBINING CIRCUMFLEX ACCENT']\n\n</code></pre>\n\n<p>The simplest way to deal with this is <a href="https://docs.python.org/library/unicodedata.html#unicodedata.normalize" rel="noreferrer"><code>unicodedata.normalize</code></a>. You probably want to use <a href="http://www.unicode.org/reports/tr15/#Normalization_Forms_Table" rel="noreferrer"><strong>NFKD</strong> normalization</a>, but feel free to check the documentation. Then one does</p>\n\n<pre><code>unicodedata.normalize("NFKD", "Ãª") == unicodedata.normalize("NFKD", "eÌ")\n\n#>>> True\n\n</code></pre>\n\n<p>To finish up, here this is expressed in functions:</p>\n\n<pre><code>import unicodedata\n\ndef normalize_caseless(text):\n\n return unicodedata.normalize("NFKD", text.casefold())\n\ndef caseless_equal(left, right):\n\n return normalize_caseless(left) == normalize_caseless(right)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	876
How do I change the figure size with subplots?	<p>If you already have the figure object use:</p>\n\n<pre><code>f.set_figheight(15)\n\nf.set_figwidth(15)\n\n</code></pre>\n\n<p>But if you use the .subplots() command (as in the examples you're showing) to create a new figure you can also use:</p>\n\n<pre><code>f, axs = plt.subplots(2,2,figsize=(15,15))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	877
namedtuple and default values for optional keyword arguments	<h2>Python 3.7</h2>\n\n<p>Use the <em>defaults</em> parameter.</p>\n\n<pre><code>>>> from collections import namedtuple\n\n>>> fields = ('val', 'left', 'right')\n\n>>> Node = namedtuple('Node', fields, defaults=(None,) * len(fields))\n\n>>> Node()\n\nNode(val=None, left=None, right=None)\n\n</code></pre>\n\n<p>Or better yet, use the new <a href="https://docs.python.org/3/library/dataclasses.html" rel="noreferrer">dataclasses</a> library, which is much nicer than namedtuple.</p>\n\n<pre><code>>>> from dataclasses import dataclass\n\n>>> from typing import Any\n\n>>> @dataclass\n\n... class Node:\n\n... val: Any = None\n\n... left: 'Node' = None\n\n... right: 'Node' = None\n\n>>> Node()\n\nNode(val=None, left=None, right=None)\n\n</code></pre>\n\n<h2>Before Python 3.7</h2>\n\n<p>Set <code>Node.__new__.__defaults__</code> to the default values.</p>\n\n<pre><code>>>> from collections import namedtuple\n\n>>> Node = namedtuple('Node', 'val left right')\n\n>>> Node.__new__.__defaults__ = (None,) * len(Node._fields)\n\n>>> Node()\n\nNode(val=None, left=None, right=None)\n\n</code></pre>\n\n<h2>Before Python 2.6</h2>\n\n<p>Set <code>Node.__new__.func_defaults</code> to the default values.</p>\n\n<pre><code>>>> from collections import namedtuple\n\n>>> Node = namedtuple('Node', 'val left right')\n\n>>> Node.__new__.func_defaults = (None,) * len(Node._fields)\n\n>>> Node()\n\nNode(val=None, left=None, right=None)\n\n</code></pre>\n\n<h2>Order</h2>\n\n<p>In all versions of Python, if you set fewer default values than exist in the namedtuple, the defaults are applied to the rightmost parameters. This allows you to keep some arguments as required arguments.</p>\n\n<pre><code>>>> Node.__new__.__defaults__ = (1,2)\n\n>>> Node()\n\nTraceback (most recent call last):\n\n ...\n\nTypeError: __new__() missing 1 required positional argument: 'val'\n\n>>> Node(3)\n\nNode(val=3, left=1, right=2)\n\n</code></pre>\n\n<h2>Wrapper for Python 2.6 to 3.6</h2>\n\n<p>Here's a wrapper for you, which even lets you (optionally) set the default values to something other than <code>None</code>. This does not support required arguments.</p>\n\n<pre><code>import collections\n\ndef namedtuple_with_defaults(typename, field_names, default_values=()):\n\n T = collections.namedtuple(typename, field_names)\n\n T.__new__.__defaults__ = (None,) * len(T._fields)\n\n if isinstance(default_values, collections.Mapping):\n\n prototype = T(**default_values)\n\n else:\n\n prototype = T(*default_values)\n\n T.__new__.__defaults__ = tuple(prototype)\n\n return T\n\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>>>> Node = namedtuple_with_defaults('Node', 'val left right')\n\n>>> Node()\n\nNode(val=None, left=None, right=None)\n\n>>> Node = namedtuple_with_defaults('Node', 'val left right', [1, 2, 3])\n\n>>> Node()\n\nNode(val=1, left=2, right=3)\n\n>>> Node = namedtuple_with_defaults('Node', 'val left right', {'right':7})\n\n>>> Node()\n\nNode(val=None, left=None, right=7)\n\n>>> Node(4)\n\nNode(val=4, left=None, right=7)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	878
Reloading submodules in IPython	<p>IPython comes with some <a href="http://ipython.readthedocs.io/en/stable/config/extensions/autoreload.html" rel="noreferrer">automatic reloading</a> magic:</p>\n\n<pre><code>%load_ext autoreload\n\n%autoreload 2\n\n</code></pre>\n\n<p>It will reload all changed modules every time before executing a new line. The way this works is slightly different than <code>dreload</code>. Some caveats apply, type <code>%autoreload?</code> to see what can go wrong.</p>\n\n<hr>\n\n<p>If you want to always enable this settings, modify your IPython configuration file <code>~/.ipython/profile_default/ipython_config.py</code>[1] and appending:</p>\n\n<pre><code>c.InteractiveShellApp.extensions = ['autoreload'] \n\nc.InteractiveShellApp.exec_lines = ['%autoreload 2']\n\n</code></pre>\n\n<p><em>Credit to @Kos via a comment below.</em></p>\n\n<p>[1]\n\nIf you don't have the file <code>~/.ipython/profile_default/ipython_config.py</code>, you need to call <code>ipython profile create</code> first. Or the file may be located at <code>$IPYTHONDIR</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	879
How to create a zip archive of a directory in Python?	<p>As others have pointed out, you should use <a href="http://docs.python.org/library/zipfile.html" rel="noreferrer">zipfile</a>. The documentation tells you what functions are available, but doesn't really explain how you can use them to zip an entire directory. I think it's easiest to explain with some example code:</p>\n\n<pre><code>#!/usr/bin/env python\n\nimport os\n\nimport zipfile\n\ndef zipdir(path, ziph):\n\n # ziph is zipfile handle\n\n for root, dirs, files in os.walk(path):\n\n for file in files:\n\n ziph.write(os.path.join(root, file))\n\nif __name__ == '__main__':\n\n zipf = zipfile.ZipFile('Python.zip', 'w', zipfile.ZIP_DEFLATED)\n\n zipdir('tmp/', zipf)\n\n zipf.close()\n\n</code></pre>\n\n<p>Adapted from: <a href="http://www.devshed.com/c/a/Python/Python-UnZipped/" rel="noreferrer">http://www.devshed.com/c/a/Python/Python-UnZipped/</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	880
How to crop an image in OpenCV using Python	<p>It's very simple. Use numpy slicing.</p>\n\n<pre><code>import cv2\n\nimg = cv2.imread("lenna.png")\n\ncrop_img = img[y:y+h, x:x+w]\n\ncv2.imshow("cropped", crop_img)\n\ncv2.waitKey(0)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	881
Passing a dictionary to a function as keyword parameters	<p>Figured it out for myself in the end. It is simple, I was just missing the ** operator to unpack the dictionary</p>\n\n<p>So my example becomes:</p>\n\n<pre><code>d = dict(p1=1, p2=2)\n\ndef f2(p1,p2):\n\n print p1, p2\n\nf2(**d)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	882
Converting a Pandas GroupBy output from Series to DataFrame	<p><code>g1</code> here <em>is</em> a DataFrame. It has a hierarchical index, though:</p>\n\n<pre><code>In [19]: type(g1)\n\nOut[19]: pandas.core.frame.DataFrame\n\nIn [20]: g1.index\n\nOut[20]: \n\nMultiIndex([('Alice', 'Seattle'), ('Bob', 'Seattle'), ('Mallory', 'Portland'),\n\n ('Mallory', 'Seattle')], dtype=object)\n\n</code></pre>\n\n<p>Perhaps you want something like this?</p>\n\n<pre><code>In [21]: g1.add_suffix('_Count').reset_index()\n\nOut[21]: \n\n Name City City_Count Name_Count\n\n0 Alice Seattle 1 1\n\n1 Bob Seattle 2 2\n\n2 Mallory Portland 2 2\n\n3 Mallory Seattle 1 1\n\n</code></pre>\n\n<p>Or something like:</p>\n\n<pre><code>In [36]: DataFrame({'count' : df1.groupby( [ "Name", "City"] ).size()}).reset_index()\n\nOut[36]: \n\n Name City count\n\n0 Alice Seattle 1\n\n1 Bob Seattle 2\n\n2 Mallory Portland 2\n\n3 Mallory Seattle 1\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	883
How to count the frequency of the elements in an unordered list?	<p>In Python 2.7 (or newer), you can use <a href="https://docs.python.org/2/library/collections.html#collections.Counter" rel="noreferrer"><code>collections.Counter</code></a>:</p>\n\n<pre><code>import collections\n\na = [1,1,1,1,2,2,2,2,3,3,4,5,5]\n\ncounter=collections.Counter(a)\n\nprint(counter)\n\n# Counter({1: 4, 2: 4, 3: 2, 5: 2, 4: 1})\n\nprint(counter.values())\n\n# [4, 4, 2, 1, 2]\n\nprint(counter.keys())\n\n# [1, 2, 3, 4, 5]\n\nprint(counter.most_common(3))\n\n# [(1, 4), (2, 4), (3, 2)]\n\n</code></pre>\n\n<p>If you are using Python 2.6 or older, you can download it <a href="http://code.activestate.com/recipes/576611/" rel="noreferrer">here</a>. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	884
What exactly are iterator, iterable, and iteration?	<p><strong>Iteration</strong> is a general term for taking each item of something, one after another. Any time you use a loop, explicit or implicit, to go over a group of items, that is iteration.</p>\n\n<p>In Python, <strong>iterable</strong> and <strong>iterator</strong> have specific meanings.</p>\n\n<p>An <strong>iterable</strong> is an object that has an <code>__iter__</code> method which returns an <strong>iterator</strong>, or which defines a <code>__getitem__</code> method that can take sequential indexes starting from zero (and raises an <code>IndexError</code> when the indexes are no longer valid). So an <strong>iterable</strong> is an object that you can get an <strong>iterator</strong> from.</p>\n\n<p>An <strong>iterator</strong> is an object with a <code>next</code> (Python 2) or <code>__next__</code> (Python 3) method. </p>\n\n<p>Whenever you use a <code>for</code> loop, or <code>map</code>, or a list comprehension, etc. in Python, the <code>next</code> method is called automatically to get each item from the <strong>iterator</strong>, thus going through the process of <strong>iteration</strong>.</p>\n\n<p>A good place to start learning would be the <a href="https://docs.python.org/3/tutorial/classes.html#iterators">iterators section of the tutorial</a> and the <a href="https://docs.python.org/dev/library/stdtypes.html#iterator-types">iterator types section of the standard types page</a>. After you understand the basics, try the <a href="https://docs.python.org/dev/howto/functional.html#iterators">iterators section of the Functional Programming HOWTO</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	885
Append integer to beginning of list in Python	<pre><code>>>> a = 5\n\n>>> li = [1, 2, 3]\n\n>>> [a] + li # Don't use 'list' as variable name.\n\n[5, 1, 2, 3]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	886
Simple Digit Recognition OCR in OpenCV-Python	<p>Well, I decided to workout myself on my question to solve above problem. What I wanted is to implement a simpl OCR using KNearest or SVM features in OpenCV. And below is what I did and how. ( it is just for learning how to use KNearest for simple OCR purposes).</p>\n\n<p><strong>1)</strong> My first question was about letter_recognition.data file that comes with OpenCV samples. I wanted to know what is inside that file.</p>\n\n<p>It contains a letter, along with 16 features of that letter.</p>\n\n<p>And <a href="https://stackoverflow.com/questions/1270798/how-to-create-data-fom-image-like-letter-image-recognition-dataset-from-uci"><code>this SOF</code></a> helped me to find it. These 16 features are explained in the paper<a href="http://cns-classes.bu.edu/cn550/Readings/frey-slate-91.pdf" rel="noreferrer"><strong><code>Letter Recognition Using Holland-Style Adaptive Classifiers</code></strong></a>.\n\n( Although I didn't understand some of the features at end)</p>\n\n<p><strong>2)</strong> Since I knew, without understanding all those features, it is difficult to do that method. I tried some other papers, but all were a little difficult for a beginner.</p>\n\n<p><code>So I just decided to take all the pixel values as my features.</code> (I was not worried about accuracy or performance, I just wanted it to work, at least with the least accuracy)</p>\n\n<p>I took below image for my training data:</p>\n\n<p><img src="https://i.stack.imgur.com/IwQY6.png" alt="enter image description here"></p>\n\n<p>( I know the amount of training data is less. But, since all letters are of same font and size, I decided to try on this).</p>\n\n<p><strong>To prepare the data for training, I made a small code in OpenCV. It does following things:</strong></p>\n\n<ol>\n\n<li>It loads the image.</li>\n\n<li>Selects the digits ( obviously by contour finding and applying constraints on area and height of letters to avoid false detections).</li>\n\n<li>Draws the bounding rectangle around one letter and wait for <code>key press manually</code>. This time we <strong>press the digit key ourselves</strong> corresponding to the letter in box.</li>\n\n<li>Once corresponding digit key is pressed, it resizes this box to 10x10 and saves 100 pixel values in an array (here, samples) and corresponding manually entered digit in another array(here, responses).</li>\n\n<li>Then save both the arrays in separate txt files.</li>\n\n</ol>\n\n<p>At the end of manual classification of digits, all the digits in the train data( train.png) are labeled manually by ourselves, image will look like below:</p>\n\n<p><img src="https://i.stack.imgur.com/jyAhT.png" alt="enter image description here"></p>\n\n<p>Below is the code I used for above purpose ( of course, not so clean):</p>\n\n<pre><code>import sys\n\nimport numpy as np\n\nimport cv2\n\nim = cv2.imread('pitrain.png')\n\nim3 = im.copy()\n\ngray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\n\nblur = cv2.GaussianBlur(gray,(5,5),0)\n\nthresh = cv2.adaptiveThreshold(blur,255,1,1,11,2)\n\n################# Now finding Contours ###################\n\ncontours,hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\n\nsamples = np.empty((0,100))\n\nresponses = []\n\nkeys = [i for i in range(48,58)]\n\nfor cnt in contours:\n\n if cv2.contourArea(cnt)>50:\n\n [x,y,w,h] = cv2.boundingRect(cnt)\n\n if h>28:\n\n cv2.rectangle(im,(x,y),(x+w,y+h),(0,0,255),2)\n\n roi = thresh[y:y+h,x:x+w]\n\n roismall = cv2.resize(roi,(10,10))\n\n cv2.imshow('norm',im)\n\n key = cv2.waitKey(0)\n\n if key == 27: # (escape to quit)\n\n sys.exit()\n\n elif key in keys:\n\n responses.append(int(chr(key)))\n\n sample = roismall.reshape((1,100))\n\n samples = np.append(samples,sample,0)\n\nresponses = np.array(responses,np.float32)\n\nresponses = responses.reshape((responses.size,1))\n\nprint "training complete"\n\nnp.savetxt('generalsamples.data',samples)\n\nnp.savetxt('generalresponses.data',responses)\n\n</code></pre>\n\n<hr>\n\n<p><strong>Now we enter in to training and testing part.</strong></p>\n\n<p>For testing part I used below image, which has same type of letters I used to train.</p>\n\n<p><img src="https://i.stack.imgur.com/dPaE8.png" alt="enter image description here"></p>\n\n<p><strong>For training we do as follows</strong>:</p>\n\n<ol>\n\n<li>Load the txt files we already saved earlier</li>\n\n<li>create a instance of classifier we are using ( here, it is KNearest)</li>\n\n<li>Then we use KNearest.train function to train the data</li>\n\n</ol>\n\n<p><strong>For testing purposes, we do as follows:</strong></p>\n\n<ol>\n\n<li>We load the image used for testing</li>\n\n<li>process the image as earlier and extract each digit using contour methods</li>\n\n<li>Draw bounding box for it, then resize to 10x10, and store its pixel values in an array as done earlier. </li>\n\n<li>Then we use KNearest.find_nearest() function to find the nearest item to the one we gave. ( If lucky, it recognises the correct digit.)</li>\n\n</ol>\n\n<p>I included last two steps ( training and testing) in single code below:</p>\n\n<pre><code>import cv2\n\nimport numpy as np\n\n####### training part ############### \n\nsamples = np.loadtxt('generalsamples.data',np.float32)\n\nresponses = np.loadtxt('generalresponses.data',np.float32)\n\nresponses = responses.reshape((responses.size,1))\n\nmodel = cv2.KNearest()\n\nmodel.train(samples,responses)\n\n############################# testing part #########################\n\nim = cv2.imread('pi.png')\n\nout = np.zeros(im.shape,np.uint8)\n\ngray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)\n\nthresh = cv2.adaptiveThreshold(gray,255,1,1,11,2)\n\ncontours,hierarchy = cv2.findContours(thresh,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\n\nfor cnt in contours:\n\n if cv2.contourArea(cnt)>50:\n\n [x,y,w,h] = cv2.boundingRect(cnt)\n\n if h>28:\n\n cv2.rectangle(im,(x,y),(x+w,y+h),(0,255,0),2)\n\n roi = thresh[y:y+h,x:x+w]\n\n roismall = cv2.resize(roi,(10,10))\n\n roismall = roismall.reshape((1,100))\n\n roismall = np.float32(roismall)\n\n retval, results, neigh_resp, dists = model.find_nearest(roismall, k = 1)\n\n string = str(int((results[0][0])))\n\n cv2.putText(out,string,(x,y+h),0,1,(0,255,0))\n\ncv2.imshow('im',im)\n\ncv2.imshow('out',out)\n\ncv2.waitKey(0)\n\n</code></pre>\n\n<p>And it worked, below is the result I got:</p>\n\n<p><img src="https://i.stack.imgur.com/xS3gF.png" alt="enter image description here"></p>\n\n<hr>\n\n<p>Here it worked with 100% accuracy. I assume this is because all the digits are of same kind and same size.</p>\n\n<p>But any way, this is a good start to go for beginners ( I hope so).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	887
Difference between __str__ and __repr__?	<p>My rule of thumb: <code>__repr__</code> is for developers, <code>__str__</code> is for customers.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	888
Manually raising (throwing) an exception in Python	<blockquote>\n\n <p><strong>DON'T DO THIS</strong>. Raising a bare <code>Exception</code> is absolutely <strong>not</strong> the right thing to do; see <a href="https://stackoverflow.com/a/24065533">Aaron Hall's excellent answer</a> instead.</p>\n\n</blockquote>\n\n<p>Can't get much more pythonic than this:</p>\n\n<pre><code>raise Exception("I know python!")\n\n</code></pre>\n\n<p>See <a href="http://docs.python.org/reference/simple_stmts.html#the-raise-statement" rel="nofollow noreferrer">the raise statement docs</a> for python if you'd like more info.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	889
What is the Python equivalent for a case/switch statement?	<p>While the <a href="http://docs.python.org/tutorial/controlflow.html" rel="noreferrer">official docs</a> are happy not to provide switch, I have seen a <a href="http://bytebaker.com/2008/11/03/switch-case-statement-in-python/" rel="noreferrer">solution using dictionaries</a>.</p>\n\n<p>For example:</p>\n\n<pre><code># define the function blocks\n\ndef zero():\n\n print "You typed zero. "\n\ndef sqr():\n\n print "n is a perfect square "\n\ndef even():\n\n print "n is an even number "\n\ndef prime():\n\n print "n is a prime number "\n\n# map the inputs to the function blocks\n\noptions = {0 : zero,\n\n 1 : sqr,\n\n 4 : sqr,\n\n 9 : sqr,\n\n 2 : even,\n\n 3 : prime,\n\n 5 : prime,\n\n 7 : prime,\n\n}\n\n</code></pre>\n\n<p>Then the equivalent switch block is invoked:</p>\n\n<pre><code>options[num]()\n\n</code></pre>\n\n<p>This begins to fall apart if you heavily depend on fall through.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	890
What is a Python egg?	<blockquote>\n\n <p><em>Note: <a href="https://packaging.python.org/discussions/wheel-vs-egg/" rel="noreferrer">Egg packaging has been superseded by Wheel packaging.</em></a></p>\n\n</blockquote>\n\n<p>Same concept as a <code>.jar</code> file in Java, it is a <code>.zip</code> file with some metadata files renamed <code>.egg</code>, for distributing code as bundles.</p>\n\n<p><a href="http://svn.python.org/projects/sandbox/trunk/setuptools/doc/formats.txt" rel="noreferrer">Specifically: The Internal Structure of Python Eggs</a></p>\n\n<blockquote>\n\n <p>A "Python egg" is a logical structure embodying the release of a\n\n specific version of a Python project, comprising its code, resources,\n\n and metadata. There are multiple formats that can be used to\n\n physically encode a Python egg, and others can be developed. However,\n\n a key principle of Python eggs is that they should be discoverable and\n\n importable. That is, it should be possible for a Python application to\n\n easily and efficiently find out what eggs are present on a system, and\n\n to ensure that the desired eggs' contents are importable.</p>\n\n <p>The <code>.egg</code> format is well-suited to distribution and the easy\n\n uninstallation or upgrades of code, since the project is essentially\n\n self-contained within a single directory or file, unmingled with any\n\n other projects' code or resources. It also makes it possible to have\n\n multiple versions of a project simultaneously installed, such that\n\n individual programs can select the versions they wish to use.</p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	891
What is monkey patching?	<p>No, it's not like any of those things. It's simply the dynamic replacement of attributes at runtime.</p>\n\n<p>For instance, consider a class that has a method <code>get_data</code>. This method does an external lookup (on a database or web API, for example), and various other methods in the class call it. However, in a unit test, you don't want to depend on the external data source - so you dynamically replace the <code>get_data</code> method with a stub that returns some fixed data.</p>\n\n<p>Because Python classes are mutable, and methods are just attributes of the class, you can do this as much as you like - and, in fact, you can even replace classes and functions in a module in exactly the same way.</p>\n\n<p>But, as a <a href="https://stackoverflow.com/users/2810305/lutz-prechelt">commenter</a> pointed out, use caution when monkeypatching: </p>\n\n<ol>\n\n<li><p>If anything else besides your test logic calls <code>get_data</code> as well, it will also call your monkey-patched replacement rather than the original -- which can be good or bad. Just beware. </p></li>\n\n<li><p>If some variable or attribute exists that also points to the <code>get_data</code> function by the time you replace it, this alias will not change its meaning and will continue to point to the original <code>get_data</code>. (Why? Python just rebinds the name <code>get_data</code> in your class to some other function object; other name bindings are not impacted at all.) </p></li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	892
How can I convert a character to a integer in Python, and viceversa?	<p>Use <a href="http://docs.python.org/library/functions.html#chr" rel="noreferrer"><code>chr()</code></a> and <a href="http://docs.python.org/library/functions.html#ord" rel="noreferrer"><code>ord()</code></a>:</p>\n\n<pre><code>>>> chr(97)\n\n'a'\n\n>>> ord('a')\n\n97\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	893
Get all object attributes in Python?	<p>Use the built-in function <a href="http://docs.python.org/library/functions.html#dir" rel="noreferrer"><code>dir()</code></a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	894
Is there a NumPy function to return the first index of something in an array?	<p>Yes, here is the answer given a NumPy array, <code>array</code>, and a value, <code>item</code>, to search for:</p>\n\n<pre><code>itemindex = numpy.where(array==item)\n\n</code></pre>\n\n<p>The result is a tuple with first all the row indices, then all the column indices.</p>\n\n<p>For example, if an array is two dimensions and it contained your item at two locations then</p>\n\n<pre><code>array[itemindex[0][0]][itemindex[1][0]]\n\n</code></pre>\n\n<p>would be equal to your item and so would</p>\n\n<pre><code>array[itemindex[0][1]][itemindex[1][1]]\n\n</code></pre>\n\n<p><a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html" rel="noreferrer">numpy.where</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	895
Finding what methods a Python object has	<p><strong>For many objects</strong>, you can use this code, replacing 'object' with the object you're interested in:</p>\n\n<pre><code>object_methods = [method_name for method_name in dir(object)\n\n if callable(getattr(object, method_name))]\n\n</code></pre>\n\n<p>I discovered it at <a href="https://web.archive.org/web/20180901124519/http://www.diveintopython.net/power_of_introspection/index.html" rel="noreferrer">diveintopython.net</a> (Now archived). Hopefully, that should provide some further detail!</p>\n\n<p><strong>If you get an <code>AttributeError</code>, you can use this instead</strong>:</p>\n\n<p><code>getattr(</code> is intolerant of pandas style python3.6 abstract virtual sub-classes. This code does the same as above and ignores exceptions.</p>\n\n<pre><code>import pandas as pd \n\ndf = pd.DataFrame([[10, 20, 30], [100, 200, 300]], \n\n columns=['foo', 'bar', 'baz']) \n\ndef get_methods(object, spacing=20): \n\n methodList = [] \n\n for method_name in dir(object): \n\n try: \n\n if callable(getattr(object, method_name)): \n\n methodList.append(str(method_name)) \n\n except: \n\n methodList.append(str(method_name)) \n\n processFunc = (lambda s: ' '.join(s.split())) or (lambda s: s) \n\n for method in methodList: \n\n try: \n\n print(str(method.ljust(spacing)) + ' ' + \n\n processFunc(str(getattr(object, method).__doc__)[0:90])) \n\n except: \n\n print(method.ljust(spacing) + ' ' + ' getattr() failed') \n\nget_methods(df['foo']) \n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	896
Why do some functions have underscores "__" before and after the function name?	<p>From the <a href="https://www.python.org/dev/peps/pep-0008/" rel="noreferrer">Python PEP 8 -- Style Guide for Python Code</a>:</p>\n\n<blockquote>\n\n <h3><a href="https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles" rel="noreferrer">Descriptive: Naming Styles</a></h3>\n\n <p>The following special forms using leading or trailing underscores are\n\n recognized (these can generally be combined with any case convention):</p>\n\n <ul>\n\n <li><p><code>_single_leading_underscore</code>: weak "internal use" indicator. E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p></li>\n\n <li><p><code>single_trailing_underscore_</code>: used by convention to avoid conflicts with Python keyword, e.g.</p>\n\n <p><code>Tkinter.Toplevel(master, class_='ClassName')</code></p></li>\n\n <li><p><code>__double_leading_underscore</code>: when naming a class attribute, invokes name mangling (inside class FooBar, <code>__boo</code> becomes <code>_FooBar__boo</code>; see below). </p></li>\n\n <li><p><code>__double_leading_and_trailing_underscore__</code>: "magic" objects or attributes that live in user-controlled namespaces. E.g. <code>__init__</code>,\n\n <code>__import__</code> or <code>__file__</code>. Never invent such names; only use them as documented.</p></li>\n\n </ul>\n\n</blockquote>\n\n<p>Note that names with double leading and trailing underscores are essentially reserved for Python itself: "Never invent such names; only use them as documented".</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	897
Convert Django Model object to dict with all of the fields intact	<p>There are many ways to convert an instance to a dictionary, with varying degrees of corner case handling and closeness to the desired result.</p>\n\n<hr>\n\n<h2>1. <code>instance.__dict__</code></h2>\n\n<pre><code>instance.__dict__\n\n</code></pre>\n\n<p>which returns</p>\n\n<pre><code>{'_foreign_key_cache': <OtherModel: OtherModel object>,\n\n '_state': <django.db.models.base.ModelState at 0x7ff0993f6908>,\n\n 'auto_now_add': datetime.datetime(2018, 12, 20, 21, 34, 29, 494827, tzinfo=<UTC>),\n\n 'foreign_key_id': 2,\n\n 'id': 1,\n\n 'normal_value': 1,\n\n 'readonly_value': 2}\n\n</code></pre>\n\n<p>This is by far the simplest, but is missing <code>many_to_many</code>, <code>foreign_key</code> is misnamed, and it has two unwanted extra things in it.</p>\n\n<hr>\n\n<h2>2. <code>model_to_dict</code></h2>\n\n<pre><code>from django.forms.models import model_to_dict\n\nmodel_to_dict(instance)\n\n</code></pre>\n\n<p>which returns</p>\n\n<pre><code>{'foreign_key': 2,\n\n 'id': 1,\n\n 'many_to_many': [<OtherModel: OtherModel object>],\n\n 'normal_value': 1}\n\n</code></pre>\n\n<p>This is the only one with <code>many_to_many</code>, but is missing the uneditable fields.</p>\n\n<hr>\n\n<h2>3. <code>model_to_dict(..., fields=...)</code></h2>\n\n<pre><code>from django.forms.models import model_to_dict\n\nmodel_to_dict(instance, fields=[field.name for field in instance._meta.fields])\n\n</code></pre>\n\n<p>which returns</p>\n\n<pre><code>{'foreign_key': 2, 'id': 1, 'normal_value': 1}\n\n</code></pre>\n\n<p>This is strictly worse than the standard <code>model_to_dict</code> invocation.</p>\n\n<hr>\n\n<h2>4. <code>query_set.values()</code></h2>\n\n<pre><code>SomeModel.objects.filter(id=instance.id).values()[0]\n\n</code></pre>\n\n<p>which returns</p>\n\n<pre><code>{'auto_now_add': datetime.datetime(2018, 12, 20, 21, 34, 29, 494827, tzinfo=<UTC>),\n\n 'foreign_key_id': 2,\n\n 'id': 1,\n\n 'normal_value': 1,\n\n 'readonly_value': 2}\n\n</code></pre>\n\n<p>This is the same output as <code>instance.__dict__</code> but without the extra fields.\n\n<code>foreign_key_id</code> is still wrong and <code>many_to_many</code> is still missing.</p>\n\n<hr>\n\n<h2>5. Custom Function</h2>\n\n<p>The code for django's <code>model_to_dict</code> had most of the answer. It explicitly removed non-editable fields, so removing that check and getting the ids of foreign keys for many to many fields results in the following code which behaves as desired:</p>\n\n<pre><code>from itertools import chain\n\ndef to_dict(instance):\n\n opts = instance._meta\n\n data = {}\n\n for f in chain(opts.concrete_fields, opts.private_fields):\n\n data[f.name] = f.value_from_object(instance)\n\n for f in opts.many_to_many:\n\n data[f.name] = [i.id for i in f.value_from_object(instance)]\n\n return data\n\n</code></pre>\n\n<p>While this is the most complicated option, calling <code>to_dict(instance)</code> gives us exactly the desired result:</p>\n\n<pre><code>{'auto_now_add': datetime.datetime(2018, 12, 20, 21, 34, 29, 494827, tzinfo=<UTC>),\n\n 'foreign_key': 2,\n\n 'id': 1,\n\n 'many_to_many': [2],\n\n 'normal_value': 1,\n\n 'readonly_value': 2}\n\n</code></pre>\n\n<hr>\n\n<h2>6. Use Serializers</h2>\n\n<p><a href="https://www.django-rest-framework.org/" rel="noreferrer">Django Rest Framework</a>'s ModelSerialzer allows you to build a serializer automatically from a model.</p>\n\n<pre><code>from rest_framework import serializers\n\nclass SomeModelSerializer(serializers.ModelSerializer):\n\n class Meta:\n\n model = SomeModel\n\n fields = "__all__"\n\nSomeModelSerializer(instance).data\n\n</code></pre>\n\n<p>returns</p>\n\n<pre><code>{'auto_now_add': '2018-12-20T21:34:29.494827Z',\n\n 'foreign_key': 2,\n\n 'id': 1,\n\n 'many_to_many': [2],\n\n 'normal_value': 1,\n\n 'readonly_value': 2}\n\n</code></pre>\n\n<p>This is almost as good as the custom function, but auto_now_add is a string instead of a datetime object.</p>\n\n<hr>\n\n<h2>Bonus Round: better model printing</h2>\n\n<p>If you want a django model that has a better python command-line display, have your models child-class the following:</p>\n\n<pre><code>from django.db import models\n\nfrom itertools import chain\n\nclass PrintableModel(models.Model):\n\n def __repr__(self):\n\n return str(self.to_dict())\n\n def to_dict(instance):\n\n opts = instance._meta\n\n data = {}\n\n for f in chain(opts.concrete_fields, opts.private_fields):\n\n data[f.name] = f.value_from_object(instance)\n\n for f in opts.many_to_many:\n\n data[f.name] = [i.id for i in f.value_from_object(instance)]\n\n return data\n\n class Meta:\n\n abstract = True\n\n</code></pre>\n\n<p>So, for example, if we define our models as such:</p>\n\n<pre><code>class OtherModel(PrintableModel): pass\n\nclass SomeModel(PrintableModel):\n\n normal_value = models.IntegerField()\n\n readonly_value = models.IntegerField(editable=False)\n\n auto_now_add = models.DateTimeField(auto_now_add=True)\n\n foreign_key = models.ForeignKey(OtherModel, related_name="ref1")\n\n many_to_many = models.ManyToManyField(OtherModel, related_name="ref2")\n\n</code></pre>\n\n<p>Calling <code>SomeModel.objects.first()</code> now gives output like this:</p>\n\n<pre><code>{'auto_now_add': datetime.datetime(2018, 12, 20, 21, 34, 29, 494827, tzinfo=<UTC>),\n\n 'foreign_key': 2,\n\n 'id': 1,\n\n 'many_to_many': [2],\n\n 'normal_value': 1,\n\n 'readonly_value': 2}\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	898
What is the difference between pip and conda?	<p>Quoting from the <a href="http://web.archive.org/web/20170415041123/www.continuum.io/blog/developer-blog/python-packages-and-environments-conda" rel="noreferrer">Conda blog</a>:</p>\n\n<blockquote>\n\n <p>Having been involved in the python world for so long, we are all aware of pip, easy_install, and virtualenv, but these tools did not meet all of our specific requirements. The main problem is that they are focused around Python, neglecting non-Python library dependencies, such as HDF5, MKL, LLVM, etc., which do not have a setup.py in their source code and also do not install files into Pythonâs site-packages directory.</p>\n\n</blockquote>\n\n<p>So Conda is a packaging tool and installer that aims to do more than what <code>pip</code> does; handle library dependencies <em>outside</em> of the Python packages as well as the Python packages themselves. Conda also creates a virtual environment, like <code>virtualenv</code> does.</p>\n\n<p>As such, Conda should be compared to <a href="http://www.buildout.org/en/latest/" rel="noreferrer">Buildout</a> perhaps, another tool that lets you handle both Python and non-Python installation tasks.</p>\n\n<p>Because Conda introduces a new packaging format, you cannot use <code>pip</code> and Conda interchangeably; <code>pip</code> cannot install the Conda package format. You can use the two tools side by side (by installing <code>pip</code> with <code>conda install pip</code>) but they do not interoperate either.</p>\n\n<p>Since writing this answer, Anaconda has published a <a href="https://www.anaconda.com/understanding-conda-and-pip/" rel="noreferrer">new page on <em>Understanding Conda and Pip</em></a>, which echoes this as well:</p>\n\n<blockquote>\n\n <p>This highlights a key difference between conda and pip. Pip installs Python packages whereas conda installs packages which may contain software written in any language. For example, before using pip, a Python interpreter must be installed via a system package manager or by downloading and running an installer. Conda on the other hand can install Python packages as well as the Python interpreter directly.</p>\n\n</blockquote>\n\n<p>and further on</p>\n\n<blockquote>\n\n <p>Occasionally a package is needed which is not available as a conda package but is available on PyPI and can be installed with pip. In these cases, it makes sense to try to use both conda and pip. </p>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	899
Splitting on first occurrence	<p>From <a href="http://docs.python.org/library/stdtypes.html#str.split" rel="noreferrer">the docs</a>:</p>\n\n<blockquote>\n\n<p><code>str.split([<i>sep</i>[, <i>maxsplit</i>]])</code></p>\n\n<p>Return a list of the words in the string, using <em>sep</em> as the delimiter string. If <em>maxsplit</em> is given, at most <em>maxsplit</em> splits are done (thus, the list will have at most <code>maxsplit+1</code> elements).</p>\n\n</blockquote>\n\n<pre><code>s.split('mango', 1)[1]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	900
What is __pycache__?	<p>When you run a program in python, the interpreter compiles it to bytecode first (this is an oversimplification) and stores it in the <code>__pycache__</code> folder. If you look in there you will find a bunch of files sharing the names of the .py files in your project's folder, only their extensions will be either .pyc or .pyo. These are bytecode-compiled and optimized bytecode-compiled versions of your program's files, respectively.</p>\n\n<p>As a programmer, you can largely just ignore it... All it does is make your program start a little faster. When your scripts change, they will be recompiled, and if you delete the files or the whole folder and run your program again, they will reappear (unless you specifically suppress that behavior)</p>\n\n<p>If you are using cpython (which is the most common, as it's the reference implementation) and you don't want that folder, then you can suppress it by starting the interpreter with the -B flag, for example </p>\n\n<pre><code>python -B foo.py\n\n</code></pre>\n\n<p>Another option, as noted by tcaswell, is to set the environment variable <code>PYTHONDONTWRITEBYTECODE</code> to any value (according to python's man page, any "non-empty string").</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	901
How to find all occurrences of a substring?	<p>There is no simple built-in string function that does what you're looking for, but you could use the more powerful <a href="http://www.regular-expressions.info/" rel="noreferrer">regular expressions</a>:</p>\n\n<pre><code>import re\n\n[m.start() for m in re.finditer('test', 'test test test test')]\n\n#[0, 5, 10, 15]\n\n</code></pre>\n\n<p>If you want to find overlapping matches, <a href="http://www.regular-expressions.info/lookaround.html" rel="noreferrer">lookahead</a> will do that:</p>\n\n<pre><code>[m.start() for m in re.finditer('(?=tt)', 'ttt')]\n\n#[0, 1]\n\n</code></pre>\n\n<p>If you want a reverse find-all without overlaps, you can combine positive and negative lookahead into an expression like this:</p>\n\n<pre><code>search = 'tt'\n\n[m.start() for m in re.finditer('(?=%s)(?!.{1,%d}%s)' % (search, len(search)-1, search), 'ttt')]\n\n#[1]\n\n</code></pre>\n\n<p><a href="http://docs.python.org/library/re.html#re.finditer" rel="noreferrer"><code>re.finditer</code></a> returns a <a href="http://wiki.python.org/moin/Generators" rel="noreferrer">generator</a>, so you could change the <code>[]</code> in the above to <code>()</code> to get a generator instead of a list which will be more efficient if you're only iterating through the results once.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	902
Reusable library to get human readable version of file size?	<p>Addressing the above "too small a task to require a library" issue by a straightforward implementation:</p>\n\n<pre><code>def sizeof_fmt(num, suffix='B'):\n\n for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:\n\n if abs(num) < 1024.0:\n\n return "%3.1f%s%s" % (num, unit, suffix)\n\n num /= 1024.0\n\n return "%.1f%s%s" % (num, 'Yi', suffix)\n\n</code></pre>\n\n<p>Supports:</p>\n\n<ul>\n\n<li>all currently known <a href="https://en.wikipedia.org/wiki/Binary_prefix#Specific_units_of_IEC_60027-2_A.2_and_ISO.2FIEC_80000" rel="noreferrer">binary prefixes</a></li>\n\n<li>negative and positive numbers</li>\n\n<li>numbers larger than 1000 Yobibytes</li>\n\n<li>arbitrary units (maybe you like to count in Gibibits!)</li>\n\n</ul>\n\n<p>Example:</p>\n\n<pre><code>>>> sizeof_fmt(168963795964)\n\n'157.4GiB'\n\n</code></pre>\n\n<p>by <a href="https://web.archive.org/web/20111010015624/http://blogmag.net/blog/read/38/Print_human_readable_file_size" rel="noreferrer">Fred Cirera</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	903
Single quotes vs. double quotes in Python	<p>I like to use double quotes around strings that are used for interpolation or that are natural language messages, and single quotes for small symbol-like strings, but will break the rules if the strings contain quotes, or if I forget. I use triple double quotes for docstrings and raw string literals for regular expressions even if they aren't needed.</p>\n\n<p>For example:</p>\n\n<pre><code>LIGHT_MESSAGES = {\n\n 'English': "There are %(number_of_lights)s lights.",\n\n 'Pirate': "Arr! Thar be %(number_of_lights)s lights."\n\n}\n\ndef lights_message(language, number_of_lights):\n\n """Return a language-appropriate string reporting the light count."""\n\n return LIGHT_MESSAGES[language] % locals()\n\ndef is_pirate(message):\n\n """Return True if the given message sounds piratical."""\n\n return re.search(r"(?i)(arr|avast|yohoho)!", message) is not None\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	904
What's the difference between eval, exec, and compile?	<h1>The short answer, or TL;DR</h1>\n\n<p>Basically, <a href="https://docs.python.org/3/library/functions.html#eval" rel="noreferrer"><code>eval</code></a> is used to <strong>eval</strong>uate a single dynamically generated Python expression, and <a href="https://docs.python.org/3/library/functions.html#exec" rel="noreferrer"><code>exec</code></a> is used to <strong>exec</strong>ute dynamically generated Python code only for its side effects.</p>\n\n<p><code>eval</code> and <code>exec</code> have these two differences:</p>\n\n<ol>\n\n<li><p><code>eval</code> accepts only a <strong>single expression</strong>, <code>exec</code> can take a code block that has Python statements: loops, <code>try: except:</code>, <code>class</code> and function/method <code>def</code>initions and so on. </p>\n\n<p>An expression in Python is whatever you can have as the value in a variable assignment:</p>\n\n<pre><code>a_variable = (anything you can put within these parentheses is an expression)\n\n</code></pre></li>\n\n<li><p><code>eval</code> <strong>returns the value</strong> of the given expression, whereas <code>exec</code> ignores the return value from its code, and always returns <code>None</code> (in Python 2 it is a statement and cannot be used as an expression, so it really does not return anything).</p></li>\n\n</ol>\n\n<p>In versions 1.0 - 2.7, <code>exec</code> was a statement, because CPython needed to produce a different kind of code object for functions that used <code>exec</code> for its side effects inside the function. </p>\n\n<p>In Python 3, <code>exec</code> is a function; its use has no effect on the compiled bytecode of the function where it is used.</p>\n\n<hr>\n\n<p>Thus basically:</p>\n\n<pre><code>>>> a = 5\n\n>>> eval('37 + a') # it is an expression\n\n42\n\n>>> exec('37 + a') # it is an expression statement; value is ignored (None is returned)\n\n>>> exec('a = 47') # modify a global variable as a side effect\n\n>>> a\n\n47\n\n>>> eval('a = 47') # you cannot evaluate a statement\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "<string>", line 1\n\n a = 47\n\n ^\n\nSyntaxError: invalid syntax\n\n</code></pre>\n\n<hr>\n\n<p>The <code>compile</code> in <code>'exec'</code> mode compiles any number of statements into a bytecode that implicitly always returns <code>None</code>, whereas in <code>'eval'</code> mode it compiles a <em>single</em> expression into bytecode that <em>returns</em> the value of that expression. </p>\n\n<pre><code>>>> eval(compile('42', '<string>', 'exec')) # code returns None\n\n>>> eval(compile('42', '<string>', 'eval')) # code returns 42\n\n42\n\n>>> exec(compile('42', '<string>', 'eval')) # code returns 42,\n\n>>> # but ignored by exec\n\n</code></pre>\n\n<p>In the <code>'eval'</code> mode (and thus with the <code>eval</code> function if a string is passed in), the <code>compile</code> raises an exception if the source code contains statements or anything else beyond a single expression:</p>\n\n<pre><code>>>> compile('for i in range(3): print(i)', '<string>', 'eval')\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "<string>", line 1\n\n for i in range(3): print(i)\n\n ^\n\nSyntaxError: invalid syntax\n\n</code></pre>\n\n<hr>\n\n<p>Actually the statement <em>"eval accepts only a single expression"</em> applies only when a string (which contains Python <em>source code</em>) is passed to <code>eval</code>. Then it is internally compiled to bytecode using <a href="https://docs.python.org/3/library/functions.html#compile" rel="noreferrer"><code>compile(source, '<string>', 'eval')</code></a> This is where the difference really comes from.</p>\n\n<p>If a <code>code</code> object (which contains Python <em>bytecode</em>) is passed to <code>exec</code> or <code>eval</code>, <em>they behave identically</em>, excepting for the fact that <code>exec</code> ignores the return value, still returning <code>None</code> always. So it is possible use <code>eval</code> to execute something that has statements, if you just <code>compile</code>d it into bytecode before instead of passing it as a string:</p>\n\n<pre><code>>>> eval(compile('if 1: print("Hello")', '<string>', 'exec'))\n\nHello\n\n>>>\n\n</code></pre>\n\n<p>works without problems, even though the compiled code contains statements. It still returns <code>None</code>, because that is the return value of the code object returned from <code>compile</code>.</p>\n\n<p>In the <code>'eval'</code> mode (and thus with the <code>eval</code> function if a string is passed in), the <code>compile</code> raises an exception if the source code contains statements or anything else beyond a single expression:</p>\n\n<pre><code>>>> compile('for i in range(3): print(i)', '<string>'. 'eval')\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "<string>", line 1\n\n for i in range(3): print(i)\n\n ^\n\nSyntaxError: invalid syntax\n\n</code></pre>\n\n<h1>The longer answer, a.k.a the gory details</h1>\n\n<h2><code>exec</code> and <code>eval</code></h2>\n\n<p>The <a href="https://docs.python.org/3/library/functions.html#exec" rel="noreferrer"><code>exec</code></a> function (which was <a href="https://docs.python.org/2/reference/simple_stmts.html#exec" rel="noreferrer">a statement in Python 2</a>) is used for executing a dynamically created statement or program:</p>\n\n<pre><code>>>> program = '''\n\nfor i in range(3):\n\n print("Python is cool")\n\n'''\n\n>>> exec(program)\n\nPython is cool\n\nPython is cool\n\nPython is cool\n\n>>> \n\n</code></pre>\n\n<p>The <a href="https://docs.python.org/3/library/functions.html#eval" rel="noreferrer"><code>eval</code></a> function does the same for a <a href="https://docs.python.org/3/reference/expressions.html" rel="noreferrer">single expression</a>, <em>and</em> returns the value of the expression:</p>\n\n<pre><code>>>> a = 2\n\n>>> my_calculation = '42 * a'\n\n>>> result = eval(my_calculation)\n\n>>> result\n\n84\n\n</code></pre>\n\n<p><code>exec</code> and <code>eval</code> both accept the program/expression to be run either as a <code>str</code>, <code>unicode</code> or <code>bytes</code> object containing source code, or as a <em><code>code</code> object</em> which contains Python bytecode. </p>\n\n<p>If a <code>str</code>/<code>unicode</code>/<code>bytes</code> containing source code was passed to <code>exec</code>, it behaves equivalently to:</p>\n\n<pre><code>exec(compile(source, '<string>', 'exec'))\n\n</code></pre>\n\n<p>and <code>eval</code> similarly behaves equivalent to:</p>\n\n<pre><code>eval(compile(source, '<string>', 'eval'))\n\n</code></pre>\n\n<hr>\n\n<p>Since all expressions can be used as statements in Python (these are called the <code>Expr</code> nodes in the Python <a href="https://docs.python.org/3/library/ast.html#abstract-grammar" rel="noreferrer">abstract grammar</a>; the opposite is not true), you can always use <code>exec</code> if you do not need the return value. That is to say, you can use either <code>eval('my_func(42)')</code> or <code>exec('my_func(42)')</code>, the difference being that <code>eval</code> returns the value returned by <code>my_func</code>, and <code>exec</code> discards it:</p>\n\n<pre><code>>>> def my_func(arg):\n\n... print("Called with %d" % arg)\n\n... return arg * 2\n\n... \n\n>>> exec('my_func(42)')\n\nCalled with 42\n\n>>> eval('my_func(42)')\n\nCalled with 42\n\n84\n\n>>> \n\n</code></pre>\n\n<p>Of the 2, only <code>exec</code> accepts source code that contains statements, like <code>def</code>, <code>for</code>, <code>while</code>, <code>import</code>, or <code>class</code>, the assignment statement (a.k.a <code>a = 42</code>), or entire programs:</p>\n\n<pre><code>>>> exec('for i in range(3): print(i)')\n\n0\n\n1\n\n2\n\n>>> eval('for i in range(3): print(i)')\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "<string>", line 1\n\n for i in range(3): print(i)\n\n ^\n\nSyntaxError: invalid syntax\n\n</code></pre>\n\n<hr>\n\n<p>Both <code>exec</code> and <code>eval</code> accept 2 additional positional arguments - <code>globals</code> and <code>locals</code> - which are the global and local variable scopes that the code sees. These default to the <code>globals()</code> and <code>locals()</code> within the scope that called <code>exec</code> or <code>eval</code>, but any dictionary can be used for <code>globals</code> and any <code>mapping</code> for <code>locals</code> (including <code>dict</code> of course). These can be used not only to restrict/modify the variables that the code sees, but are often also used for capturing the variables that the <code>exec</code>uted code creates:</p>\n\n<pre><code>>>> g = dict()\n\n>>> l = dict()\n\n>>> exec('global a; a, b = 123, 42', g, l)\n\n>>> g['a']\n\n123\n\n>>> l\n\n{'b': 42}\n\n</code></pre>\n\n<p>(If you display the value of the entire <code>g</code>, it would be much longer, because <code>exec</code> and <code>eval</code> add the built-ins module as <code>__builtins__</code> to the globals automatically if it is missing).</p>\n\n<p>In Python 2, the official syntax for the <code>exec</code> statement is actually <code>exec code in globals, locals</code>, as in</p>\n\n<pre><code>>>> exec 'global a; a, b = 123, 42' in g, l\n\n</code></pre>\n\n<p>However the alternate syntax <code>exec(code, globals, locals)</code> has always been accepted too (see below).</p>\n\n<h2><code>compile</code></h2>\n\n<p>The <a href="https://docs.python.org/3/library/functions.html#compile" rel="noreferrer"><code>compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)</code></a> built-in can be used to speed up repeated invocations of the same code with <code>exec</code> or <code>eval</code> by compiling the source into a <code>code</code> object beforehand. The <code>mode</code> parameter controls the kind of code fragment the <code>compile</code> function accepts and the kind of bytecode it produces. The choices are <code>'eval'</code>, <code>'exec'</code> and <code>'single'</code>:</p>\n\n<ul>\n\n<li><p><code>'eval'</code> mode expects a single expression, and will produce bytecode that when run will return the value of <strong>that expression</strong>:</p>\n\n<pre><code>>>> dis.dis(compile('a + b', '<string>', 'eval'))\n\n 1 0 LOAD_NAME 0 (a)\n\n 3 LOAD_NAME 1 (b)\n\n 6 BINARY_ADD\n\n 7 RETURN_VALUE\n\n</code></pre></li>\n\n<li><p><code>'exec'</code> accepts any kinds of python constructs from single expressions to whole modules of code, and executes them as if they were module top-level statements. The code object returns <code>None</code>:</p>\n\n<pre><code>>>> dis.dis(compile('a + b', '<string>', 'exec'))\n\n 1 0 LOAD_NAME 0 (a)\n\n 3 LOAD_NAME 1 (b)\n\n 6 BINARY_ADD\n\n 7 POP_TOP <- discard result\n\n 8 LOAD_CONST 0 (None) <- load None on stack\n\n 11 RETURN_VALUE <- return top of stack\n\n</code></pre></li>\n\n<li><p><code>'single'</code> is a limited form of <code>'exec'</code> which accepts a source code containing a <strong>single</strong> statement (or multiple statements separated by <code>;</code>) if the last statement is an expression statement, the resulting bytecode also <em>prints the <code>repr</code> of the value of that expression to the standard output(!)</em>.</p>\n\n<p>An <code>if</code>-<code>elif</code>-<code>else</code> chain, a loop with <code>else</code>, and <code>try</code> with its <code>except</code>, <code>else</code> and <code>finally</code> blocks is considered a single statement.</p>\n\n<p>A source fragment containing 2 top-level statements is an error for the <code>'single'</code>, except in Python 2 there is <em>a bug</em> that sometimes allows multiple toplevel statements in the code; only the first is compiled; the rest are ignored:</p>\n\n<p>In Python 2.7.8:</p>\n\n<pre><code>>>> exec(compile('a = 5 a = 6', '<string>', 'single'))\n\n>>> a\n\n5\n\n</code></pre>\n\n<p>And in Python 3.4.2:</p>\n\n<pre><code>>>> exec(compile('a = 5 a = 6', '<string>', 'single'))\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "<string>", line 1\n\n a = 5\n\n ^\n\nSyntaxError: multiple statements found while compiling a single statement\n\n</code></pre>\n\n<p>This is very useful for making interactive Python shells. However, the value of the expression is <em>not returned</em>, even if you <code>eval</code> the resulting code.</p></li>\n\n</ul>\n\n<p>Thus greatest distinction of <code>exec</code> and <code>eval</code> actually comes from the <code>compile</code> function and its modes.</p>\n\n<hr>\n\n<p>In addition to compiling source code to bytecode, <code>compile</code> supports compiling <a href="https://docs.python.org/3/library/ast.html#abstract-grammar" rel="noreferrer"><em>abstract syntax trees</em></a> (parse trees of Python code) into <code>code</code> objects; and source code into abstract syntax trees (the <code>ast.parse</code> is written in Python and just calls <code>compile(source, filename, mode, PyCF_ONLY_AST)</code>); these are used for example for modifying source code on the fly, and also for dynamic code creation, as it is often easier to handle the code as a tree of nodes instead of lines of text in complex cases.</p>\n\n<hr>\n\n<p>While <code>eval</code> only allows you to evaluate a string that contains a single expression, you can <code>eval</code> a whole statement, or even a whole module that has been <code>compile</code>d into bytecode; that is, with Python 2, <code>print</code> is a statement, and cannot be <code>eval</code>led directly:</p>\n\n<pre><code>>>> eval('for i in range(3): print("Python is cool")')\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\n File "<string>", line 1\n\n for i in range(3): print("Python is cool")\n\n ^\n\nSyntaxError: invalid syntax\n\n</code></pre>\n\n<p><code>compile</code> it with <code>'exec'</code> mode into a <code>code</code> object and you can <strong><code>eval</code> it</strong>; the <code>eval</code> function will return <code>None</code>.</p>\n\n<pre><code>>>> code = compile('for i in range(3): print("Python is cool")',\n\n 'foo.py', 'exec')\n\n>>> eval(code)\n\nPython is cool\n\nPython is cool\n\nPython is cool\n\n</code></pre>\n\n<p>If one looks into <a href="https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l805" rel="noreferrer"><code>eval</code></a> and <a href="https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l882" rel="noreferrer"><code>exec</code></a> source code in CPython 3, this is very evident; they both call <code>PyEval_EvalCode</code> with same arguments, the only difference being that <a href="https://hg.python.org/cpython/file/ec6ed10d611e/Python/bltinmodule.c#l903" rel="noreferrer"><code>exec</code> explicitly returns <code>None</code></a>.</p>\n\n<h2>Syntax differences of <code>exec</code> between Python 2 and Python 3</h2>\n\n<p>One of the major differences in Python <strong>2</strong> is that <code>exec</code> is a statement and <code>eval</code> is a built-in function (both are built-in functions in Python 3).\n\nIt is a well-known fact that the official syntax of <code>exec</code> in Python 2 is <code>exec code [in globals[, locals]]</code>.</p>\n\n<p>Unlike majority of the Python 2-to-3 <a href="http://python3porting.com/differences.html#exec" rel="noreferrer">porting</a> <a href="http://python-future.org/reference.html?highlight=exec#future.utils.exec_" rel="noreferrer">guides</a> <a href="http://docs.pythonsprints.com/python3_porting/py-porting.html#exec-statement" rel="noreferrer">seem</a> <a href="http://nedbatchelder.com/blog/200910/running_the_same_code_on_python_2x_and_3x.html" rel="noreferrer">to suggest</a>, the <code>exec</code> statement in CPython 2 can be also used with syntax that <em>looks</em> <strong>exactly</strong> like the <code>exec</code> function invocation in Python 3. The reason is that Python 0.9.9 had the <code>exec(code, globals, locals)</code> built-in function! And that built-in function was replaced with <code>exec</code> statement <a href="https://hg.python.org/cpython/file/fccd415e2eb8/Python/ceval.c" rel="noreferrer">somewhere before Python 1.0 release</a>.</p>\n\n<p>Since it was desirable to not break backwards compatibility with Python 0.9.9, <a href="https://hg.python.org/cpython/file/fccd415e2eb8/Python/ceval.c#l2521" rel="noreferrer">Guido van Rossum added a compatibility hack in 1993</a>: if the <code>code</code> was a tuple of length 2 or 3, and <code>globals</code> and <code>locals</code> were not passed into the <code>exec</code> statement otherwise, the <code>code</code> would be interpreted as if the 2nd and 3rd element of the tuple were the <code>globals</code> and <code>locals</code> respectively. The compatibility hack was not mentioned even in <a href="https://docs.python.org/release/1.4/ref/ref6.html#HDR10" rel="noreferrer">Python 1.4 documentation (the earliest available version online)</a>; and thus was not known to many writers of the porting guides and tools, until it was <a href="https://docs.python.org/2/reference/simple_stmts.html#the-exec-statement" rel="noreferrer">documented</a> again <a href="https://mail.python.org/pipermail/python-dev/2012-November/122651.html" rel="noreferrer">in November 2012</a>:</p>\n\n<blockquote>\n\n <p>The first expression may also be a tuple of length 2 or 3. In this case, the optional parts must be omitted. The form <code>exec(expr, globals)</code> is equivalent to <code>exec expr in globals</code>, while the form <code>exec(expr, globals, locals)</code> is equivalent to <code>exec expr in globals, locals</code>. The tuple form of <code>exec</code> provides compatibility with Python 3, where <code>exec</code> is a function rather than a statement.</p>\n\n</blockquote>\n\n<p>Yes, in CPython 2.7 that it is handily referred to as being a forward-compatibility option (why confuse people over that there is a backward compatibility option at all), \n\nwhen it actually had been there for <em>backward-compatibility for two decades</em>.</p>\n\n<p>Thus while <code>exec</code> is a statement in Python 1 and Python 2, and a built-in function in Python 3 and Python 0.9.9,</p>\n\n<pre><code>>>> exec("print(a)", globals(), {'a': 42})\n\n42\n\n</code></pre>\n\n<p>has had identical behaviour in possibly every widely released Python version ever; and works in Jython 2.5.2, PyPy 2.3.1 (Python 2.7.6) and IronPython 2.6.1 too (kudos to them following the undocumented behaviour of CPython closely).</p>\n\n<p>What you cannot do in Pythons 1.0 - 2.7 with its compatibility hack, is to store the return value of <code>exec</code> into a variable:</p>\n\n<pre><code>Python 2.7.11+ (default, Apr 17 2016, 14:00:29) \n\n[GCC 5.3.1 20160413] on linux2\n\nType "help", "copyright", "credits" or "license" for more information.\n\n>>> a = exec('print(42)')\n\n File "<stdin>", line 1\n\n a = exec('print(42)')\n\n ^\n\nSyntaxError: invalid syntax\n\n</code></pre>\n\n<p>(which wouldn't be useful in Python 3 either, as <code>exec</code> always returns <code>None</code>), or pass a reference to <code>exec</code>:</p>\n\n<pre><code>>>> call_later(exec, 'print(42)', delay=1000)\n\n File "<stdin>", line 1\n\n call_later(exec, 'print(42)', delay=1000)\n\n ^\n\nSyntaxError: invalid syntax\n\n</code></pre>\n\n<p>Which a pattern that someone might actually have used, though unlikely; </p>\n\n<p>Or use it in a list comprehension:</p>\n\n<pre><code>>>> [exec(i) for i in ['print(42)', 'print(foo)']\n\n File "<stdin>", line 1\n\n [exec(i) for i in ['print(42)', 'print(foo)']\n\n ^\n\nSyntaxError: invalid syntax\n\n</code></pre>\n\n<p>which is abuse of list comprehensions (use a <code>for</code> loop instead!).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	905
Python list of dictionaries search	<p>You can use a <a href="http://www.python.org/dev/peps/pep-0289/" rel="noreferrer">generator expression</a>:</p>\n\n<pre><code>>>> dicts = [\n\n... { "name": "Tom", "age": 10 },\n\n... { "name": "Mark", "age": 5 },\n\n... { "name": "Pam", "age": 7 },\n\n... { "name": "Dick", "age": 12 }\n\n... ]\n\n>>> next(item for item in dicts if item["name"] == "Pam")\n\n{'age': 7, 'name': 'Pam'}\n\n</code></pre>\n\n<p>If you need to handle the item not being there, then you can do what user <a href="https://stackoverflow.com/users/277250/matt">Matt</a> <a href="https://stackoverflow.com/questions/8653516/python-list-of-dictionaries-search#comment18634157_8653568">suggested in his comment</a> and provide a default using a slightly different API:</p>\n\n<pre><code>next((item for item in dicts if item["name"] == "Pam"), None)\n\n</code></pre>\n\n<p>And to find the index of the item, rather than the item itself, you can <a href="https://docs.python.org/3/library/functions.html#enumerate" rel="noreferrer">enumerate()</a> the list:</p>\n\n<pre><code>next((i for i, item in enumerate(dicts) if item["name"] == "Pam"), None)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	906
How to install Python MySQLdb module using pip?	<p>It's easy to do, but hard to remember the correct spelling:</p>\n\n<pre><code>pip install mysqlclient\n\n</code></pre>\n\n<p>If you need 1.2.x versions (legacy Python only), use <code>pip install MySQL-python</code></p>\n\n<p>Note: Some dependencies might have to be in place when running the above command. Some hints on how to install these on various platforms:</p>\n\n<h2>Ubuntu 14, Ubuntu 16, Debian 8.6 (jessie)</h2>\n\n<pre><code>sudo apt-get install python-pip python-dev libmysqlclient-dev\n\n</code></pre>\n\n<h2>Fedora 24:</h2>\n\n<pre><code>sudo dnf install python python-devel mysql-devel redhat-rpm-config gcc\n\n</code></pre>\n\n<h2>Mac OS</h2>\n\n<pre><code>brew install mysql-connector-c\n\n</code></pre>\n\n<p>if that fails, try</p>\n\n<pre><code>brew install mysql\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	907
How to test if a dictionary contains a specific key?	<pre><code>'a' in x\n\n</code></pre>\n\n<p>and a quick search reveals some nice information about it: <a href="http://docs.python.org/3/tutorial/datastructures.html#dictionaries" rel="noreferrer">http://docs.python.org/3/tutorial/datastructures.html#dictionaries</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	908
Are dictionaries ordered in Python 3.6+?	<blockquote>\n\n <p><strong>Are dictionaries ordered in Python 3.6+?</strong></p>\n\n</blockquote>\n\n<p>They are <strong>insertion ordered</strong><sup><strong>[1]</strong></sup>. As of Python 3.6, for the CPython implementation of Python, dictionaries <em>remember the order of items inserted</em>. <em>This is considered an implementation detail in Python 3.6</em>; you need to use <code>OrderedDict</code> if you want insertion ordering that's <em>guaranteed</em> across other implementations of Python (and other ordered behavior<sup><strong>[1]</strong></sup>).</p>\n\n<p><strong>As of Python 3.7</strong>, this is no longer an implementation detail and instead becomes a language feature. <a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html" rel="noreferrer">From a python-dev message by GvR</a>:</p>\n\n<blockquote>\n\n <p>Make it so. "Dict keeps insertion order" is the ruling. Thanks!</p>\n\n</blockquote>\n\n<p>This simply means that <em>you can depend on it</em>. Other implementations of Python must also offer an insertion ordered dictionary if they wish to be a conforming implementation of Python 3.7.</p>\n\n<hr>\n\n<blockquote>\n\n <p><strong>How does the Python <code>3.6</code> dictionary implementation perform better<sup>[2]</sup> than the older one while preserving element order?</strong></p>\n\n</blockquote>\n\n<p>Essentially, by <em>keeping two arrays</em>. </p>\n\n<ul>\n\n<li><p>The first array, <a href="https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L551" rel="noreferrer"><code>dk_entries</code></a>, holds the entries (<a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L4" rel="noreferrer">of type <code>PyDictKeyEntry</code></a>) for the dictionary in the order that they were inserted. Preserving order is achieved by this being an append only array where new items are always inserted at the end (insertion order).</p></li>\n\n<li><p>The second, <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L70" rel="noreferrer"><code>dk_indices</code></a>, holds the indices for the <code>dk_entries</code> array (that is, values that indicate the position of the corresponding entry in <code>dk_entries</code>). This array acts as the hash table. When a key is hashed it leads to one of the indices stored in <code>dk_indices</code> and the corresponding entry is fetched by indexing <code>dk_entries</code>. Since only indices are kept, the type of this array depends on the overall size of the dictionary (ranging from type <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L64" rel="noreferrer"><code>int8_t</code></a>(<code>1</code> byte) to <a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L66" rel="noreferrer"><code>int32_t</code></a>/<a href="https://github.com/python/cpython/blob/c30098c8c6014f3340a369a31df9c74bdbacc269/Objects/dict-common.h#L68" rel="noreferrer"><code>int64_t</code></a> (<code>4</code>/<code>8</code> bytes) on <code>32</code>/<code>64</code> bit builds) </p></li>\n\n</ul>\n\n<p>In the previous implementation, a sparse array of type <code>PyDictKeyEntry</code> and size <code>dk_size</code> had to be allocated; unfortunately, it also resulted in a lot of empty space since that array was not allowed to be more than <code>2/3 * dk_size</code> full <a href="https://github.com/python/cpython/blob/474ef63e38726d4bcde14f6104984a742c6cb747/Objects/dictobject.c#L375" rel="noreferrer">for performance reasons</a>. (and the empty space <em>still</em> had <code>PyDictKeyEntry</code> size!). </p>\n\n<p>This is not the case now since only the <em>required</em> entries are stored (those that have been inserted) and a sparse array of type <code>intX_t</code> (<code>X</code> depending on dict size) <code>2/3 * dk_size</code>s full is kept. The empty space changed from type <code>PyDictKeyEntry</code> to <code>intX_t</code>. </p>\n\n<p>So, obviously, creating a sparse array of type <code>PyDictKeyEntry</code> is much more memory demanding than a sparse array for storing <code>int</code>s.</p>\n\n<p>You can see the full conversation <a href="https://mail.python.org/pipermail/python-dev/2016-September/146327.html" rel="noreferrer">on Python-Dev</a> regarding this feature if interested, it is a good read.</p>\n\n<hr>\n\n<p><a href="https://mail.python.org/pipermail/python-dev/2012-December/123028.html" rel="noreferrer">In the original proposal made by Raymond Hettinger</a>, a visualization of the data structures used can be seen which captures the gist of the idea.</p>\n\n<blockquote>\n\n <p>For example, the dictionary:</p>\n\n<pre><code>d = {'timmy': 'red', 'barry': 'green', 'guido': 'blue'}\n\n</code></pre>\n\n <p>is currently stored as [keyhash, key, value]:</p>\n\n<pre><code>entries = [['--', '--', '--'],\n\n [-8522787127447073495, 'barry', 'green'],\n\n ['--', '--', '--'],\n\n ['--', '--', '--'],\n\n ['--', '--', '--'],\n\n [-9092791511155847987, 'timmy', 'red'],\n\n ['--', '--', '--'],\n\n [-6480567542315338377, 'guido', 'blue']]\n\n</code></pre>\n\n <p>Instead, the data should be organized as follows:</p>\n\n<pre><code>indices = [None, 1, None, None, None, 0, None, 2]\n\nentries = [[-9092791511155847987, 'timmy', 'red'],\n\n [-8522787127447073495, 'barry', 'green'],\n\n [-6480567542315338377, 'guido', 'blue']]\n\n</code></pre>\n\n</blockquote>\n\n<p>As you can visually now see, in the original proposal, a lot of space is essentially empty to reduce collisions and make look-ups faster. With the new approach, you reduce the memory required by moving the sparseness where it's really required, in the indices.</p>\n\n<hr>\n\n<p><sub>\n\n[1]: I say "insertion ordered" and not "ordered" since, with the existence of OrderedDict, "ordered" suggests further behavior that the <code>dict</code> object <em>doesn't provide</em>. OrderedDicts are reversible, provide order sensitive methods and, mainly, provide an order-sensive equality tests (<code>==</code>, <code>!=</code>). <code>dict</code>s currently don't offer any of those behaviors/methods.\n\n</sub></p>\n\n<hr>\n\n<p><sub>\n\n[2]: The new dictionary implementations performs better <strong>memory wise</strong> by being designed more compactly; that's the main benefit here. Speed wise, the difference isn't so drastic, there's places where the new dict might introduce slight regressions (<a href="http://bugs.python.org/msg275587" rel="noreferrer">key-lookups, for example</a>) while in others (iteration and resizing come to mind) a performance boost should be present. \n\n</sub></p>\n\n<p><sub>\n\nOverall, the performance of the dictionary, especially in real-life situations, improves due to the compactness introduced.<br>\n\n</sub></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	909
Empty set literal?	<p>No, there's no literal syntax for the empty set. You have to write <a href="https://docs.python.org/3/library/stdtypes.html#set" rel="noreferrer"><code>set()</code></a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	910
finding and replacing elements in a list	<p>Try using a <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">list comprehension</a> and the <a href="http://en.wikipedia.org/wiki/Ternary_operation#Python" rel="noreferrer">ternary operator</a>.</p>\n\n<pre><code>>>> a=[1,2,3,1,3,2,1,1]\n\n>>> [4 if x==1 else x for x in a]\n\n[4, 2, 3, 4, 3, 2, 4, 4]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	911
Decode HTML entities in Python string?	<h3>Python 3.4+</h3>\n\n<p>Use <a href="https://docs.python.org/3/library/html.html#html.unescape" rel="noreferrer"><code>html.unescape()</code></a>:</p>\n\n<pre><code>import html\n\nprint(html.unescape('&pound;682m'))\n\n</code></pre>\n\n<p>FYI <code>html.parser.HTMLParser.unescape</code> is deprecated, and <a href="https://github.com/python/cpython/blob/3.5/Lib/html/parser.py#L466-L470" rel="noreferrer">was supposed to be removed in 3.5</a>, although it was left in by mistake. It will be removed from the language soon.</p>\n\n<hr>\n\n<h3>Python 2.6-3.3</h3>\n\n<p>You can use <code>HTMLParser.unescape()</code> from the standard library:</p>\n\n<ul>\n\n<li>For Python 2.6-2.7 it's in <a href="https://docs.python.org/2/library/htmlparser.html" rel="noreferrer"><code>HTMLParser</code></a></li>\n\n<li>For Python 3 it's in <a href="https://docs.python.org/3/library/html.parser.html" rel="noreferrer"><code>html.parser</code></a></li>\n\n</ul>\n\n<pre><code>>>> try:\n\n... # Python 2.6-2.7 \n\n... from HTMLParser import HTMLParser\n\n... except ImportError:\n\n... # Python 3\n\n... from html.parser import HTMLParser\n\n... \n\n>>> h = HTMLParser()\n\n>>> print(h.unescape('&pound;682m'))\n\nÂ£682m\n\n</code></pre>\n\n<p>You can also use the <a href="https://pythonhosted.org/six/" rel="noreferrer"><code>six</code></a> compatibility library to simplify the import:</p>\n\n<pre><code>>>> from six.moves.html_parser import HTMLParser\n\n>>> h = HTMLParser()\n\n>>> print(h.unescape('&pound;682m'))\n\nÂ£682m\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	912
Python Pandas Error tokenizing data	<p>you could also try;</p>\n\n<pre><code>data = pd.read_csv('file1.csv', error_bad_lines=False)\n\n</code></pre>\n\n<p>Do note that this will cause the offending lines to be skipped.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	913
Read .mat files in Python	<p>An import is required, <code>import scipy.io</code>...</p>\n\n<pre><code>import scipy.io\n\nmat = scipy.io.loadmat('file.mat')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	914
Finding the average of a list	<pre><code>l = [15, 18, 2, 36, 12, 78, 5, 6, 9]\n\nsum(l) / len(l)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	915
How to sort a list of strings?	<p>Basic answer:</p>\n\n<pre><code>mylist = ["b", "C", "A"]\n\nmylist.sort()\n\n</code></pre>\n\n<p>This modifies your original list (i.e. sorts in-place). To get a sorted copy of the list, without changing the original, use the <a href="http://docs.python.org/library/functions.html#sorted" rel="noreferrer"><code>sorted()</code></a> function:</p>\n\n<pre><code>for x in sorted(mylist):\n\n print x\n\n</code></pre>\n\n<p>However, the examples above are a bit naive, because they don't take locale into account, and perform a case-sensitive sorting. You can take advantage of the optional parameter <code>key</code> to specify custom sorting order (the alternative, using <code>cmp</code>, is a deprecated solution, as it has to be evaluated multiple times - <code>key</code> is only computed once per element).</p>\n\n<p>So, to sort according to the current locale, taking language-specific rules into account (<a href="http://docs.python.org/library/functools.html#functools.cmp_to_key" rel="noreferrer"><code>cmp_to_key</code></a> is a helper function from functools):</p>\n\n<pre><code>sorted(mylist, key=cmp_to_key(locale.strcoll))\n\n</code></pre>\n\n<p>And finally, if you need, you can specify a <a href="http://docs.python.org/library/locale.html" rel="noreferrer">custom locale</a> for sorting:</p>\n\n<pre><code>import locale\n\nlocale.setlocale(locale.LC_ALL, 'en_US.UTF-8') # vary depending on your lang/locale\n\nassert sorted((u'Ab', u'ad', u'aa'),\n\n key=cmp_to_key(locale.strcoll)) == [u'aa', u'Ab', u'ad']\n\n</code></pre>\n\n<p>Last note: you will see examples of case-insensitive sorting which use the <code>lower()</code> method - those are incorrect, because they work only for the ASCII subset of characters. Those two are wrong for any non-English data:</p>\n\n<pre><code># this is incorrect!\n\nmylist.sort(key=lambda x: x.lower())\n\n# alternative notation, a bit faster, but still wrong\n\nmylist.sort(key=str.lower)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	916
What is the reason for having '//' in Python?	<p>In Python 3, they made the <code>/</code> operator do a floating-point division, and added the <code>//</code> operator to do integer division (i.e. quotient without remainder); whereas in Python 2, the <code>/</code> operator was simply integer division, unless one of the operands was already a floating point number.</p>\n\n<p>In Python 2.X:</p>\n\n<pre><code>>>> 10/3\n\n3\n\n>>> # to get a floating point number from integer division:\n\n>>> 10.0/3\n\n3.3333333333333335\n\n>>> float(10)/3\n\n3.3333333333333335\n\n</code></pre>\n\n<p>In Python 3:</p>\n\n<pre><code>>>> 10/3\n\n3.3333333333333335\n\n>>> 10//3\n\n3\n\n</code></pre>\n\n<p>For further reference, see <a href="http://www.python.org/dev/peps/pep-0238/" rel="noreferrer">PEP238</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	917
How to download image using requests	<p>You can either use the <a href="https://requests.readthedocs.io/en/latest/api/#requests.Response.raw" rel="noreferrer"><code>response.raw</code> file object</a>, or iterate over the response.</p>\n\n<p>To use the <code>response.raw</code> file-like object will not, by default, decode compressed responses (with GZIP or deflate). You can force it to decompress for you anyway by setting the <code>decode_content</code> attribute to <code>True</code> (<code>requests</code> sets it to <code>False</code> to control decoding itself). You can then use <a href="https://docs.python.org/2/library/shutil.html#shutil.copyfileobj" rel="noreferrer"><code>shutil.copyfileobj()</code></a> to have Python stream the data to a file object:</p>\n\n<pre><code>import requests\n\nimport shutil\n\nr = requests.get(settings.STATICMAP_URL.format(**data), stream=True)\n\nif r.status_code == 200:\n\n with open(path, 'wb') as f:\n\n r.raw.decode_content = True\n\n shutil.copyfileobj(r.raw, f) \n\n</code></pre>\n\n<p>To iterate over the response use a loop; iterating like this ensures that data is decompressed by this stage:</p>\n\n<pre><code>r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)\n\nif r.status_code == 200:\n\n with open(path, 'wb') as f:\n\n for chunk in r:\n\n f.write(chunk)\n\n</code></pre>\n\n<p>This'll read the data in 128 byte chunks; if you feel another chunk size works better, use the <a href="https://requests.readthedocs.io/en/latest/api/#requests.Response.iter_content" rel="noreferrer"><code>Response.iter_content()</code> method</a> with a custom chunk size:</p>\n\n<pre><code>r = requests.get(settings.STATICMAP_URL.format(**data), stream=True)\n\nif r.status_code == 200:\n\n with open(path, 'wb') as f:\n\n for chunk in r.iter_content(1024):\n\n f.write(chunk)\n\n</code></pre>\n\n<p>Note that you need to open the destination file in binary mode to ensure python doesn't try and translate newlines for you. We also set <code>stream=True</code> so that <code>requests</code> doesn't download the whole image into memory first.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	918
Python Dictionary Comprehension	<p>There are <a href="https://www.python.org/dev/peps/pep-0274/" rel="noreferrer">dictionary comprehensions in Python 2.7+</a>, but they don't work quite the way you're trying. Like a list comprehension, they create a <em>new</em> dictionary; you can't use them to add keys to an existing dictionary. Also, you have to specify the keys and values, although of course you can specify a dummy value if you like.</p>\n\n<pre><code>>>> d = {n: n**2 for n in range(5)}\n\n>>> print d\n\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}\n\n</code></pre>\n\n<p>If you want to set them all to True:</p>\n\n<pre><code>>>> d = {n: True for n in range(5)}\n\n>>> print d\n\n{0: True, 1: True, 2: True, 3: True, 4: True}\n\n</code></pre>\n\n<p>What you seem to be asking for is a way to set multiple keys at once on an existing dictionary. There's no direct shortcut for that. You can either loop like you already showed, or you could use a dictionary comprehension to create a new dict with the new values, and then do <code>oldDict.update(newDict)</code> to merge the new values into the old dict.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	919
How to get last items of a list in Python?	<p>You can use negative integers with the slicing operator for that. Here's an example using the python CLI interpreter:</p>\n\n<pre><code>>>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n>>> a\n\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n>>> a[-9:]\n\n[4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n</code></pre>\n\n<p>the important line is <code>a[-9:]</code></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	920
What blocks Ruby, Python to get Javascript V8 speed?	<blockquote>\n\n <p>What blocks Ruby, Python to get Javascript V8 speed?</p>\n\n</blockquote>\n\n<p>Nothing.</p>\n\n<p>Well, okay: money. (And time, people, resources, but if you have money, you can buy those.)</p>\n\n<p>V8 has a team of brilliant, highly-specialized, highly-experienced (and thus highly-paid) engineers working on it, that have decades of experience (I'm talking individually – collectively it's more like centuries) in creating high-performance execution engines for dynamic OO languages. They are basically the same people who also created the Sun HotSpot JVM (among many others).</p>\n\n<p>Lars Bak, the lead developer, has been literally working on VMs for 25 years (and all of those VMs have lead up to V8), which is basically his entire (professional) life. Some of the people writing Ruby VMs aren't even 25 years old.</p>\n\n<blockquote>\n\n <p>Are there any Ruby / Python features that are blocking implementation of optimizations (e.g. inline caching) V8 engine has?</p>\n\n</blockquote>\n\n<p>Given that at least IronRuby, JRuby, MagLev, MacRuby and Rubinius have either monomorphic (IronRuby) or polymorphic inline caching, the answer is obviously no.</p>\n\n<p>Modern Ruby implementations already do a great deal of optimizations. For example, for certain operations, Rubinius's <code>Hash</code> class is faster than YARV's. Now, this doesn't sound terribly exciting until you realize that Rubinius's <code>Hash</code> class is implemented in 100% pure Ruby, while YARV's is implemented in 100% hand-optimized C.</p>\n\n<p>So, at least in some cases, Rubinius can generate better code than GCC!</p>\n\n<blockquote>\n\n <p>Or this is rather matter of resources put into the V8 project by Google.</p>\n\n</blockquote>\n\n<p>Yes. Not just Google. The lineage of V8's source code is 25 years old now. The people who are working on V8 also created the Self VM (to this day one of the fastest dynamic OO language execution engines ever created), the Animorphic Smalltalk VM (to this day one of the fastest Smalltalk execution engines ever created), the HotSpot JVM (the fastest JVM ever created, probably the fastest VM period) and OOVM (one of the most efficient Smalltalk VMs ever created).</p>\n\n<p>In fact, Lars Bak, the lead developer of V8, worked on <em>every single one</em> of those, plus a few others.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	921
Generating a PNG with matplotlib when DISPLAY is undefined	<p>The main problem is that (on your system) matplotlib chooses an x-using backend by default. I just had the same problem on one of my servers. The solution for me was to add the following code in a place that gets read <em>before</em> any other pylab/matplotlib/<strong>pyplot</strong> import:</p>\n\n<pre><code>import matplotlib\n\n# Force matplotlib to not use any Xwindows backend.\n\nmatplotlib.use('Agg')\n\n</code></pre>\n\n<p>The alternative is to set it in your .matplotlibrc</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	922
How to delete a record in Django models?	<p>There are a couple of ways:</p>\n\n<p>To delete it directly:</p>\n\n<pre><code>SomeModel.objects.filter(id=id).delete()\n\n</code></pre>\n\n<p>To delete it from an instance:</p>\n\n<pre><code>instance = SomeModel.objects.get(id=id)\n\ninstance.delete()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	923
Find nearest value in numpy array	<pre><code>import numpy as np\n\ndef find_nearest(array, value):\n\n array = np.asarray(array)\n\n idx = (np.abs(array - value)).argmin()\n\n return array[idx]\n\narray = np.random.random(10)\n\nprint(array)\n\n# [ 0.21069679 0.61290182 0.63425412 0.84635244 0.91599191 0.00213826\n\n# 0.17104965 0.56874386 0.57319379 0.28719469]\n\nvalue = 0.5\n\nprint(find_nearest(array, value))\n\n# 0.568743859261\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	924
How to iterate over rows in a DataFrame in Pandas	<blockquote>\n\n <h2>How to iterate over rows in a DataFrame in Pandas?</h2>\n\n</blockquote>\n\n<h1>Answer: DON'T<sup>*</sup>!</h1>\n\n<p>Iteration in Pandas is an anti-pattern and is something you should only do when you have exhausted every other option. You should not use any function with "<code>iter</code>" in its name for more than a few thousand rows or you will have to get used to a <strong>lot</strong> of waiting.</p>\n\n<p>Do you want to print a DataFrame? Use <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_string.html" rel="noreferrer"><strong><code>DataFrame.to_string()</code></strong></a>.</p>\n\n<p>Do you want to compute something? In that case, search for methods in this order (list modified from <a href="https://stackoverflow.com/questions/24870953/does-iterrows-have-performance-issues">here</a>):</p>\n\n<ol>\n\n<li>Vectorization</li>\n\n<li><a href="https://en.wikipedia.org/wiki/Cython" rel="noreferrer">Cython</a> routines</li>\n\n<li>List Comprehensions (vanilla <code>for</code> loop)</li>\n\n<li><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.apply.html" rel="noreferrer"><strong><code>DataFrame.apply()</code></strong></a>: i)  Reductions that can be performed in Cython, ii) Iteration in Python space</li>\n\n<li><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.itertuples.html" rel="noreferrer"><strong><code>DataFrame.itertuples()</code></strong></a> and <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iteritems.html#pandas.DataFrame.iteritems" rel="noreferrer"><strong><code>iteritems()</code></strong></a></li>\n\n<li><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.iterrows.html#pandas.DataFrame.iterrows" rel="noreferrer"><strong><code>DataFrame.iterrows()</code></strong></a></li>\n\n</ol>\n\n<p><code>iterrows</code> and <code>itertuples</code> (both receiving many votes in answers to this question) should be used in very rare circumstances, such as generating row objects/nametuples for sequential processing, which is really the only thing these functions are useful for.</p>\n\n<p><strong>Appeal to Authority</strong></p>\n\n<p><a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/basics.html#iteration" rel="noreferrer">The documentation page</a> on iteration has a huge red warning box that says:</p>\n\n<blockquote>\n\n <p>Iterating through pandas objects is generally slow. In many cases, iterating manually over the rows is not needed [...].</p>\n\n</blockquote>\n\n<p><sub>* It's actually a little more complicated than "don't". <code>df.iterrows()</code> is the correct answer to this question, but "vectorize your ops" is the better one. I will concede that there are circumstances where iteration cannot be avoided (for example, some operations where the result depends on the value computed for the previous row). However, it takes some familiarity with the library to know when. If you're not sure whether you need an iterative solution, you probably don't. PS: To know more about my rationale for writing this answer, skip to the very bottom.</sub></p>\n\n<hr>\n\n<h2>Faster than Looping: <a href="https://stackoverflow.com/questions/1422149/what-is-vectorization">Vectorization</a>, <a href="https://cython.org" rel="noreferrer">Cython</a></h2>\n\n<p>A good number of basic operations and computations are "vectorised" by pandas (either through NumPy, or through Cythonized functions). This includes arithmetic, comparisons, (most) reductions, reshaping (such as pivoting), joins, and groupby operations. Look through the documentation on <a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/basics.html#essential-basic-functionality" rel="noreferrer">Essential Basic Functionality</a> to find a suitable vectorised method for your problem.</p>\n\n<p>If none exists, feel free to write your own using custom <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html#cython-writing-c-extensions-for-pandas" rel="noreferrer">Cython extensions</a>.</p>\n\n<hr>\n\n<h2>Next Best Thing: <a href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">List Comprehensions</a><sup>*</sup></h2>\n\n<p>List comprehensions should be your next port of call if 1) there is no vectorized solution available, 2) performance is important, but not important enough to go through the hassle of cythonizing your code, and 3) you're trying to perform elementwise transformation on your code. There is a <a href="https://stackoverflow.com/questions/54028199/for-loops-with-pandas-when-should-i-care">good amount of evidence</a> to suggest that list comprehensions are sufficiently fast (and even sometimes faster) for many common Pandas tasks.</p>\n\n<p>The formula is simple,</p>\n\n<pre><code># Iterating over one column - `f` is some function that processes your data\n\nresult = [f(x) for x in df['col']]\n\n# Iterating over two columns, use `zip`\n\nresult = [f(x, y) for x, y in zip(df['col1'], df['col2'])]\n\n# Iterating over multiple columns - same data type\n\nresult = [f(row[0], ..., row[n]) for row in df[['col1', ...,'coln']].to_numpy()]\n\n# Iterating over multiple columns - differing data type\n\nresult = [f(row[0], ..., row[n]) for row in zip(df['col1'], ..., df['coln'])]\n\n</code></pre>\n\n<p>If you can encapsulate your business logic into a function, you can use a list comprehension that calls it. You can make arbitrarily complex things work through the simplicity and speed of raw Python code.</p>\n\n<p><strong>Caveats</strong></p>\n\n<p>List comprehensions assume that your data is easy to work with - what that means is your data types are consistent and you don't have NaNs, but this cannot always be guaranteed.</p>\n\n<ol>\n\n<li>The first one is more obvious, but when dealing with NaNs, prefer in-built pandas methods if they exist (because they have much better corner-case handling logic), or ensure your business logic includes appropriate NaN handling logic.</li>\n\n<li>When dealing with mixed data types you should iterate over <code>zip(df['A'], df['B'], ...)</code> instead of <code>df[['A', 'B']].to_numpy()</code> as the latter implicitly upcasts data to the most common type. As an example if A is numeric and B is string, <code>to_numpy()</code> will cast the entire array to string, which may not be what you want. Fortunately <code>zip</code>ping your columns together is the most straightforward workaround to this.</li>\n\n</ol>\n\n<p><sub>*Your mileage may vary for the reasons outlined in the <strong>Caveats</strong> section above.</sub></p>\n\n<hr>\n\n<h2>An Obvious Example</h2>\n\n<p>Let's demonstrate the difference with a simple example of adding two pandas columns <code>A + B</code>. This is a vectorizable operaton, so it will be easy to contrast the performance of the methods discussed above.</p>\n\n<p><img src="https://i.stack.imgur.com/ZY7Ec.png" width="600" /></p>\n\n<p><a href="https://gist.github.com/Coldsp33d/948f96b384ca5bdf6e8ce203ac97c9a0" rel="noreferrer">Benchmarking code, for your reference</a>. The line at the bottom measures a function written in numpandas, a style of Pandas that mixes heavily with NumPy to squeeze out maximum performance. Writing numpandas code should be avoided unless you know what you're doing. Stick to the API where you can (i.e., prefer <code>vec</code> over <code>vec_numpy</code>).</p>\n\n<p>I should mention, however, that it isn't always this cut and dry. Sometimes the answer to "what is the best method for an operation" is "it depends on your data". My advice is to test out different approaches on your data before settling on one.</p>\n\n<hr>\n\n<h2>Further Reading</h2>\n\n<ul>\n\n<li><p><a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/10min.html" rel="noreferrer">10 Minutes to pandas</a>, and <a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/basics.html" rel="noreferrer">Essential Basic Functionality</a> - Useful links that introduce you to Pandas and its library of vectorized*/cythonized functions.</p></li>\n\n<li><p><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/enhancingperf.html" rel="noreferrer">Enhancing Performance</a> - A primer from the documentation on enhancing standard Pandas operations</p></li>\n\n<li><p><em><a href="https://stackoverflow.com/questions/54028199/for-loops-with-pandas-when-should-i-care">Are for-loops in pandas really bad? When should I care?</a></em> - a detailed writeup by me on list comprehensions and their suitability for various operations (mainly ones involving non-numeric data)</p></li>\n\n<li><p><em><a href="https://stackoverflow.com/questions/54432583/when-should-i-ever-want-to-use-pandas-apply-in-my-code">When should I ever want to use pandas apply() in my code?</a></em> - <code>apply</code> is slow (but not as slow as the <code>iter*</code> family. There are, however, situations where one can (or should) consider <code>apply</code> as a serious alternative, especially in some <code>GroupBy</code> operations).</p></li>\n\n</ul>\n\n<p><sub>* Pandas string methods are "vectorized" in the sense that they are specified on the series but operate on each element. The underlying mechanisms are still iterative, because string operations are inherently hard to vectorize.</sub></p>\n\n<hr>\n\n<h2>Why I Wrote this Answer</h2>\n\n<p>A common trend I notice from new users is to ask questions of the form "How can I iterate over my df to do X?". Showing code that calls <code>iterrows()</code> while doing something inside a <code>for</code> loop. Here is why. A new user to the library who has not been introduced to the concept of vectorization will likely envision the code that solves their problem as iterating over their data to do something. Not knowing how to iterate over a DataFrame, the first thing they do is Google it and end up here, at this question. They then see the accepted answer telling them how to, and they close their eyes and run this code without ever first questioning if iteration is not the right thing to do.</p>\n\n<p>The aim of this answer is to help new users understand that iteration is not necessarily the solution to every problem, and that better, faster and more idiomatic solutions could exist, and that it is worth investing time in exploring them. I'm not trying to start a war of iteration vs. vectorization, but I want new users to be informed when developing solutions to their problems with this library.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	925
if else in a list comprehension	<pre><code>>>> l = [22, 13, 45, 50, 98, 69, 43, 44, 1]\n\n>>> [x+1 if x >= 45 else x+5 for x in l]\n\n[27, 18, 46, 51, 99, 70, 48, 49, 6]\n\n</code></pre>\n\n<p>Do-something if <code><condition></code>, else do-something else.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	926
How can I format a decimal to always show 2 decimal places?	<p>You should use the <a href="https://docs.python.org/2/library/string.html#format-specification-mini-language" rel="noreferrer" title="Format Specification Mini-Language">new format specifications</a> to define how your value should be represented:</p>\n\n<pre><code>>>> from math import pi # pi ~ 3.141592653589793\n\n>>> '{0:.2f}'.format(pi)\n\n'3.14'\n\n</code></pre>\n\n<p>The documentation can be a bit obtuse at times, so I recommend the following, easier readable references:</p>\n\n<ul>\n\n<li>the <a href="https://mkaz.blog/code/python-string-format-cookbook/" rel="noreferrer" title="Python String Format Cookbook">Python String Format Cookbook</a>: shows examples of the new-style <a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="noreferrer"><code>.format()</code></a> string formatting</li>\n\n<li><a href="https://pyformat.info/" rel="noreferrer">pyformat.info</a>: compares the old-style <code>%</code> string formatting with the new-style <a href="https://docs.python.org/2/library/string.html#format-string-syntax" rel="noreferrer"><code>.format()</code></a> string formatting </li>\n\n</ul>\n\n<p>Python 3.6 introduced <a href="https://www.python.org/dev/peps/pep-0498/" rel="noreferrer">literal string interpolation</a> (also known as f-strings) so now you can write the above even more succinct as:</p>\n\n<pre><code>>>> f'{pi:.2f}'\n\n'3.14'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	927
Measuring elapsed time with the Time module	<pre><code>start_time = time.time()\n\n# your code\n\nelapsed_time = time.time() - start_time\n\n</code></pre>\n\n<p>You can also write simple decorator to simplify measurement of execution time of various functions:</p>\n\n<pre><code>import time\n\nfrom functools import wraps\n\nPROF_DATA = {}\n\ndef profile(fn):\n\n @wraps(fn)\n\n def with_profiling(*args, **kwargs):\n\n start_time = time.time()\n\n ret = fn(*args, **kwargs)\n\n elapsed_time = time.time() - start_time\n\n if fn.__name__ not in PROF_DATA:\n\n PROF_DATA[fn.__name__] = [0, []]\n\n PROF_DATA[fn.__name__][0] += 1\n\n PROF_DATA[fn.__name__][1].append(elapsed_time)\n\n return ret\n\n return with_profiling\n\ndef print_prof_data():\n\n for fname, data in PROF_DATA.items():\n\n max_time = max(data[1])\n\n avg_time = sum(data[1]) / len(data[1])\n\n print "Function %s called %d times. " % (fname, data[0]),\n\n print 'Execution time max: %.3f, average: %.3f' % (max_time, avg_time)\n\ndef clear_prof_data():\n\n global PROF_DATA\n\n PROF_DATA = {}\n\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>@profile\n\ndef your_function(...):\n\n ...\n\n</code></pre>\n\n<p>You can profile more then one function simultaneously. Then to print measurements just call the print_prof_data():</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	928
Rotate axis text in python matplotlib	<p>This works for me:</p>\n\n<pre><code>plt.xticks(rotation=90)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	929
How to break out of multiple loops?	<p>My first instinct would be to refactor the nested loop into a function and use <code>return</code> to break out. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	930
How do I parse a string to a float or int?	<pre><code>def num(s):\n\n try:\n\n return int(s)\n\n except ValueError:\n\n return float(s)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	931
Installing specific package versions with pip	<p>You can even use a version range with <code>pip install</code> command. Something like this:</p>\n\n<pre><code>pip install 'stevedore>=1.3.0,<1.4.0'\n\n</code></pre>\n\n<p>And if the package is already installed and you want to downgrade it add <code>--force-reinstall</code> like this:</p>\n\n<pre><code>pip install 'stevedore>=1.3.0,<1.4.0' --force-reinstall\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	932
How do I check the difference, in seconds, between two dates?	<p>if you want to compute differences between two known dates, use <code>total_seconds</code> like this:</p>\n\n<pre><code>import datetime as dt\n\na = dt.datetime(2013,12,30,23,59,59)\n\nb = dt.datetime(2013,12,31,23,59,59)\n\n(b-a).total_seconds()\n\n</code></pre>\n\n<p>86400.0</p>\n\n<pre><code>#note that seconds doesn't give you what you want:\n\n(b-a).seconds\n\n</code></pre>\n\n<p>0</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	933
What does if __name__ == "__main__": do?	<blockquote>\n\n <h2>What does the <code>if __name__ == "__main__":</code> do?</h2>\n\n</blockquote>\n\n<p>To outline the basics:</p>\n\n<ul>\n\n<li><p>The global variable, <code>__name__</code>, in the module that is the entry point to your program, is <code>'__main__'</code>. Otherwise, it's the name you import the module by.</p></li>\n\n<li><p>So, code under the <code>if</code> block will only run if the module is the entry point to your program.</p></li>\n\n<li><p>It allows the code in the module to be importable by other modules, without executing the code block beneath on import.</p></li>\n\n</ul>\n\n<hr>\n\n<p>Why do we need this?</p>\n\n<h2>Developing and Testing Your Code</h2>\n\n<p>Say you're writing a Python script designed to be used as a module:</p>\n\n<pre><code>def do_important():\n\n """This function does something very important"""\n\n</code></pre>\n\n<p>You <em>could</em> test the module by adding this call of the function to the bottom:</p>\n\n<pre><code>do_important()\n\n</code></pre>\n\n<p>and running it (on a command prompt) with something like:</p>\n\n<pre><code>~$ python important.py\n\n</code></pre>\n\n<h2>The Problem</h2>\n\n<p>However, if you want to import the module to another script:</p>\n\n<pre><code>import important\n\n</code></pre>\n\n<p>On import, the <code>do_important</code> function would be called, so you'd probably comment out your function call, <code>do_important()</code>, at the bottom. </p>\n\n<pre><code># do_important() # I must remember to uncomment to execute this!\n\n</code></pre>\n\n<p>And then you'll have to remember whether or not you've commented out your test function call. And this extra complexity would mean you're likely to forget, making your development process more troublesome.</p>\n\n<h2>A Better Way</h2>\n\n<p>The <code>__name__</code> variable points to the namespace wherever the Python interpreter happens to be at the moment. </p>\n\n<p>Inside an imported module, it's the name of that module. </p>\n\n<p>But inside the primary module (or an interactive Python session, i.e. the interpreter's Read, Eval, Print Loop, or REPL) you are running everything from its <code>"__main__"</code>.</p>\n\n<p>So if you check before executing:</p>\n\n<pre><code>if __name__ == "__main__":\n\n do_important()\n\n</code></pre>\n\n<p>With the above, your code will only execute when you're running it as the primary module (or intentionally call it from another script). </p>\n\n<h2>An Even Better Way</h2>\n\n<p>There's a Pythonic way to improve on this, though. </p>\n\n<p>What if we want to run this business process from outside the module?</p>\n\n<p>If we put the code we want to exercise as we develop and test in a function like this and then do our check for <code>'__main__'</code> immediately after:</p>\n\n<pre><code>def main():\n\n """business logic for when running this module as the primary one!"""\n\n setup()\n\n foo = do_important()\n\n bar = do_even_more_important(foo)\n\n for baz in bar:\n\n do_super_important(baz)\n\n teardown()\n\n# Here's our payoff idiom!\n\nif __name__ == '__main__':\n\n main()\n\n</code></pre>\n\n<p>We now have a final function for the end of our module that will run if we run the module as the primary module. </p>\n\n<p>It will allow the module and its functions and classes to be imported into other scripts without running the <code>main</code> function, and will also allow the module (and its functions and classes) to be called when running from a different <code>'__main__'</code> module, i.e.</p>\n\n<pre><code>import important\n\nimportant.main()\n\n</code></pre>\n\n<p><a href="https://docs.python.org/2/library/__main__.html" rel="noreferrer">This idiom can also be found in the Python documentation in an explanation of the <code>__main__</code> module.</a> That text states:</p>\n\n<blockquote>\n\n <p>This module represents the (otherwise anonymous) scope in which the\n\n interpreterâs main program executes â commands read either from\n\n standard input, from a script file, or from an interactive prompt. It\n\n is this environment in which the idiomatic âconditional scriptâ stanza\n\n causes a script to run:</p>\n\n<pre><code>if __name__ == '__main__':\n\n main()\n\n</code></pre>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	934
'pip' is not recognized as an internal or external command	<p><strong>You need to add the path of your pip installation to your PATH system variable</strong>. By default, pip is installed to <code>C:\Python34\Scripts\pip</code> (pip now comes bundled with new versions of python), so the path "C:\Python34\Scripts" needs to be added to your PATH variable.</p>\n\n<p>To check if it is already in your PATH variable, type <code>echo %PATH%</code> at the CMD prompt</p>\n\n<p><strong>To add the path of your pip installation to your PATH variable</strong>, you can use the Control Panel or the <code>setx</code> command. For example:</p>\n\n<pre><code>setx PATH "%PATH%;C:\Python34\Scripts"\n\n</code></pre>\n\n<hr>\n\n<p><strong>Note</strong>:\n\nAccording to the <a href="https://technet.microsoft.com/en-us/library/cc755104%28v=ws.11%29.aspx">official documentation</a>, "[v]ariables set with setx variables are available in future command windows only, not in the current command window". In particular, <em>you will need to start a new cmd.exe instance</em> after entering the above command in order to utilize the new environment variable. </p>\n\n<p>Thanks to Scott Bartell for pointing this out.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	935
How do I parse a string to a float or int?	<h2>Python method to check if a string is a float:</h2>\n\n<pre><code>def is_float(value):\n\n try:\n\n float(value)\n\n return True\n\n except:\n\n return False\n\n</code></pre>\n\n<p>A longer and more accurate name for this function could be: <code>is_convertible_to_float(value)</code></p>\n\n<h2>What is, and is not a float in <a href="http://en.wikipedia.org/wiki/Python_%28programming_language%29" rel="noreferrer">Python</a> may surprise you:</h2>\n\n<pre><code>val is_float(val) Note\n\n-------------------- ---------- --------------------------------\n\n"" False Blank string\n\n"127" True Passed string\n\nTrue True Pure sweet Truth\n\n"True" False Vile contemptible lie\n\nFalse True So false it becomes true\n\n"123.456" True Decimal\n\n" -127 " True Spaces trimmed\n\n" 12 " True whitespace ignored\n\n"NaN" True Not a number\n\n"NaNanananaBATMAN" False I am Batman\n\n"-iNF" True Negative infinity\n\n"123.E4" True Exponential notation\n\n".1" True mantissa only\n\n"1,234" False Commas gtfo\n\nu'\x30' True Unicode is fine.\n\n"NULL" False Null is not special\n\n0x3fade True Hexadecimal\n\n"6e7777777777777" True Shrunk to infinity\n\n"1.797693e+308" True This is max value\n\n"infinity" True Same as inf\n\n"infinityandBEYOND" False Extra characters wreck it\n\n"12.34.56" False Only one dot allowed\n\nu'å' False Japanese '4' is not a float.\n\n"#56" False Pound sign\n\n"56%" False Percent of what?\n\n"0E0" True Exponential, move dot 0 places\n\n0**0 True 0___0 Exponentiation\n\n"-5e-5" True Raise to a negative number\n\n"+1e1" True Plus is OK with exponent\n\n"+1e1^5" False Fancy exponent not interpreted\n\n"+1e1.3" False No decimals in exponent\n\n"-+1" False Make up your mind\n\n"(1)" False Parenthesis is bad\n\n</code></pre>\n\n<p>You think you know what numbers are? You are not so good as you think! Not big surprise.</p>\n\n<h2>Don't use this code on life-critical software!</h2>\n\n<p>Catching broad exceptions this way, killing canaries and gobbling the exception creates a tiny chance that a valid float as string will return false. The <code>float(...)</code> line of code can failed for any of a thousand reasons that have nothing to do with the contents of the string. But if you're writing life-critical software in a duck-typing prototype language like Python, then you've got much larger problems.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	936
In Matplotlib, what does the argument mean in fig.add_subplot(111)?	<p>I think this would be best explained by the following picture:</p>\n\n<p><img src="https://i.stack.imgur.com/AEGXG.png" alt="enter image description here"></p>\n\n<p>To initialize the above, one would type:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nfig = plt.figure()\n\nfig.add_subplot(221) #top left\n\nfig.add_subplot(222) #top right\n\nfig.add_subplot(223) #bottom left\n\nfig.add_subplot(224) #bottom right \n\nplt.show()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	937
What does enumerate() mean?	<p>The <a href="http://docs.python.org/2/library/functions.html#enumerate" rel="noreferrer"><code>enumerate()</code> function</a> adds a counter to an iterable.</p>\n\n<p>So for each element in <code>cursor</code>, a tuple is produced with <code>(counter, element)</code>; the <code>for</code> loop binds that to <code>row_number</code> and <code>row</code>, respectively.</p>\n\n<p>Demo:</p>\n\n<pre><code>>>> elements = ('foo', 'bar', 'baz')\n\n>>> for elem in elements:\n\n... print elem\n\n... \n\nfoo\n\nbar\n\nbaz\n\n>>> for count, elem in enumerate(elements):\n\n... print count, elem\n\n... \n\n0 foo\n\n1 bar\n\n2 baz\n\n</code></pre>\n\n<p>By default, <code>enumerate()</code> starts counting at <code>0</code> but if you give it a second integer argument, it'll start from that number instead:</p>\n\n<pre><code>>>> for count, elem in enumerate(elements, 42):\n\n... print count, elem\n\n... \n\n42 foo\n\n43 bar\n\n44 baz\n\n</code></pre>\n\n<p>If you were to re-implement <code>enumerate()</code> in Python, here are two ways of achieving that; one using <a href="https://docs.python.org/3/library/itertools.html#itertools.count" rel="noreferrer"><code>itertools.count()</code></a> to do the counting, the other manually counting in a <a href="https://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do">generator function</a>:</p>\n\n<pre><code>from itertools import count\n\ndef enumerate(it, start=0):\n\n # return an iterator that adds a counter to each element of it\n\n return zip(count(start), it)\n\n</code></pre>\n\n<p>and</p>\n\n<pre><code>def enumerate(it, start=0):\n\n count = start\n\n for elem in it:\n\n yield (count, elem)\n\n count += 1\n\n</code></pre>\n\n<p>The <a href="https://github.com/python/cpython/blob/master/Objects/enumobject.c" rel="noreferrer">actual implementation in C</a> is closer to the latter, with optimisations to reuse a single tuple object for the common <code>for i, ...</code> unpacking case and using a standard C integer value for the counter until the counter becomes too large to avoid using a Python integer object (which is unbounded).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	938
Making Python loggers output all messages to stdout in addition to log file	<p>The simplest way to log to stdout:</p>\n\n<pre><code>import logging\n\nimport sys\n\nlogging.basicConfig(stream=sys.stdout, level=logging.DEBUG)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	939
bash: pip: command not found	<p>Why not just do <code>sudo easy_install pip</code> or if this is for python 2.6 <code>sudo easy_install-2.6 pip</code>?</p>\n\n<p>This installs pip using the default python package installer system and saves you the hassle of manual set-up all at the same time.</p>\n\n<p>This will allow you to then run the <code>pip</code> command for python package installation as it will be installed with the system python. I also recommend once you have pip using the <a href="https://pypi.python.org/pypi/virtualenv" rel="noreferrer">virtualenv</a> package and pattern. :)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	940
Difference between modes a, a+, w, w+, and r+ in built-in open function?	<p>I noticed that every now and then I need to Google fopen all over again, just to build a mental image of what the primary differences between the modes are. So, I thought a diagram will be faster to read next time. Maybe someone else will find that helpful too.</p>\n\n<p><img src="https://i.stack.imgur.com/ExWNT.png" alt=""></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	941
Hidden features of Python	<p><strong>Get the python regex parse tree to debug your regex.</strong></p>\n\n<p>Regular expressions are a great feature of python, but debugging them can be a pain, and it's all too easy to get a regex wrong.</p>\n\n<p>Fortunately, python can print the regex parse tree, by passing the undocumented, experimental, hidden flag <code>re.DEBUG</code> (actually, 128) to <code>re.compile</code>.</p>\n\n<pre><code>>>> re.compile("^\[font(?:=(?P<size>[-+][0-9]{1,2}))?\](.*?)[/font]",\n\n re.DEBUG)\n\nat at_beginning\n\nliteral 91\n\nliteral 102\n\nliteral 111\n\nliteral 110\n\nliteral 116\n\nmax_repeat 0 1\n\n subpattern None\n\n literal 61\n\n subpattern 1\n\n in\n\n literal 45\n\n literal 43\n\n max_repeat 1 2\n\n in\n\n range (48, 57)\n\nliteral 93\n\nsubpattern 2\n\n min_repeat 0 65535\n\n any None\n\nin\n\n literal 47\n\n literal 102\n\n literal 111\n\n literal 110\n\n literal 116\n\n</code></pre>\n\n<p>Once you understand the syntax, you can spot your errors. There we can see that I forgot to escape the <code>[]</code> in <code>[/font]</code>.</p>\n\n<p>Of course you can combine it with whatever flags you want, like commented regexes:</p>\n\n<pre><code>>>> re.compile("""\n\n ^ # start of a line\n\n \[font # the font tag\n\n (?:=(?P<size> # optional [font=+size]\n\n [-+][0-9]{1,2} # size specification\n\n ))?\n\n \] # end of tag\n\n (.*?) # text between the tags\n\n \[/font\] # end of the tag\n\n """, re.DEBUG|re.VERBOSE|re.DOTALL)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	942
How to check if a user is logged in (how to properly use user.is_authenticated)?	<p><strong>Update for Django 1.10+</strong>:</p>\n\n<p><code>is_authenticated</code> is now an <strong>attribute</strong> in Django 1.10.</p>\n\n<p>The method was removed in Django 2.0.</p>\n\n<p><strong>For Django 1.9 and older</strong>:</p>\n\n<p><code>is_authenticated</code> is a function. You should call it like</p>\n\n<pre><code>if request.user.is_authenticated():\n\n # do something if the user is authenticated\n\n</code></pre>\n\n<p>As Peter Rowell pointed out, what may be tripping you up is that in the default Django template language, you don't tack on parenthesis to call functions. So you may have seen something like this in template code:</p>\n\n<pre><code>{% if user.is_authenticated %}\n\n</code></pre>\n\n<p>However, in Python code, it is indeed a method in the <code>User</code> class.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	943
What is the difference between re.search and re.match?	<p><code>re.match</code> is anchored at the beginning of the string. That has nothing to do with newlines, so it is not the same as using <code>^</code> in the pattern.</p>\n\n<p>As the <a href="http://docs.python.org/2/library/re.html#re.match" rel="noreferrer">re.match documentation</a> says:</p>\n\n<blockquote>\n\n <p>If zero or more characters at the\n\n <strong>beginning of string</strong> match the regular expression pattern, return a\n\n corresponding <code>MatchObject</code> instance.\n\n Return <code>None</code> if the string does not\n\n match the pattern; note that this is\n\n different from a zero-length match.</p>\n\n <p>Note: If you want to locate a match\n\n anywhere in string, use <code>search()</code>\n\n instead.</p>\n\n</blockquote>\n\n<p><code>re.search</code> searches the entire string, as <a href="http://docs.python.org/2/library/re.html#re.search" rel="noreferrer">the documentation says</a>:</p>\n\n<blockquote>\n\n <p><strong>Scan through string</strong> looking for a\n\n location where the regular expression\n\n pattern produces a match, and return a\n\n corresponding <code>MatchObject</code> instance.\n\n Return <code>None</code> if no position in the\n\n string matches the pattern; note that\n\n this is different from finding a\n\n zero-length match at some point in the\n\n string.</p>\n\n</blockquote>\n\n<p>So if you need to match at the beginning of the string, or to match the entire string use <code>match</code>. It is faster. Otherwise use <code>search</code>.</p>\n\n<p>The documentation has a <a href="http://docs.python.org/2/library/re.html#search-vs-match" rel="noreferrer">specific section for <code>match</code> vs. <code>search</code></a> that also covers multiline strings:</p>\n\n<blockquote>\n\n <p>Python offers two different primitive\n\n operations based on regular\n\n expressions: <code>match</code> checks for a match\n\n <strong>only at the beginning</strong> of the string,\n\n while <code>search</code> checks for a match\n\n <strong>anywhere</strong> in the string (this is what\n\n Perl does by default).</p>\n\n <p>Note that <code>match</code> may differ from <code>search</code>\n\n even when using a regular expression\n\n beginning with <code>'^'</code>: <code>'^'</code> matches only\n\n at the start of the string, or in\n\n <code>MULTILINE</code> mode also immediately\n\n following a newline. The â<code>match</code>â\n\n operation succeeds <em>only if the pattern\n\n matches at the <strong>start</strong> of the string</em>\n\n regardless of mode, or at the starting\n\n position given by the optional <code>pos</code>\n\n argument regardless of whether a\n\n newline precedes it.</p>\n\n</blockquote>\n\n<p>Now, enough talk. Time to see some example code:</p>\n\n<pre><code># example code:\n\nstring_with_newlines = """something\n\nsomeotherthing"""\n\nimport re\n\nprint re.match('some', string_with_newlines) # matches\n\nprint re.match('someother', \n\n string_with_newlines) # won't match\n\nprint re.match('^someother', string_with_newlines, \n\n re.MULTILINE) # also won't match\n\nprint re.search('someother', \n\n string_with_newlines) # finds something\n\nprint re.search('^someother', string_with_newlines, \n\n re.MULTILINE) # also finds something\n\nm = re.compile('thing$', re.MULTILINE)\n\nprint m.match(string_with_newlines) # no match\n\nprint m.match(string_with_newlines, pos=4) # matches\n\nprint m.search(string_with_newlines, \n\n re.MULTILINE) # also matches\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	944
Matplotlib make tick labels font size smaller	<p>There is a simpler way actually. I just found: </p>\n\n<pre><code>import matplotlib.pyplot as plt\n\n# We prepare the plot \n\nfig, ax = plt.subplots()\n\n# We change the fontsize of minor ticks label \n\nax.tick_params(axis='both', which='major', labelsize=10)\n\nax.tick_params(axis='both', which='minor', labelsize=8)\n\n</code></pre>\n\n<p>This only answers to the size of <code>label</code> part of your question though.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	945
Set up Python simpleHTTPserver on Windows	<p>From Stack Overflow question <em><a href="https://stackoverflow.com/questions/7943751/what-is-the-python3-equivalent-of-python-m-simplehttpserver">What is the Python 3 equivalent of "python -m SimpleHTTPServer"</a></em>:</p>\n\n<p>The following works for me:</p>\n\n<pre><code>python -m http.server [<portNo>]\n\n</code></pre>\n\n<p>Because I am using <strong>Python 3</strong> the module <code>SimpleHTTPServer</code> has been replaced by <code>http.server</code>, at least in Windows.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	946
Remove all occurrences of a value from a list?	<p>Functional approach:</p>\n\n<p><strong>Python 3.x</strong></p>\n\n<pre><code>>>> x = [1,2,3,2,2,2,3,4]\n\n>>> list(filter((2).__ne__, x))\n\n[1, 3, 3, 4]\n\n</code></pre>\n\n<p>or </p>\n\n<pre><code>>>> x = [1,2,3,2,2,2,3,4]\n\n>>> list(filter(lambda a: a != 2, x))\n\n[1, 3, 3, 4]\n\n</code></pre>\n\n<p><strong>Python 2.x</strong></p>\n\n<pre><code>>>> x = [1,2,3,2,2,2,3,4]\n\n>>> filter(lambda a: a != 2, x)\n\n[1, 3, 3, 4]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	947
Removing pip's cache?	<p>If using pip 6.0 or newer, try adding the <a href="https://pip.pypa.io/en/stable/reference/pip_install/#caching" rel="noreferrer"><code>--no-cache-dir</code> option</a>.</p>\n\n<p>If using pip older than pip 6.0, upgrade it with <code>pip install -U pip</code>. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	948
Python multiprocessing pool.map for multiple arguments	<blockquote>\n\n <p>is there a variant of pool.map which support multiple arguments?</p>\n\n</blockquote>\n\n<p>Python 3.3 includes <a href="http://docs.python.org/dev/library/multiprocessing.html#multiprocessing.pool.Pool.starmap" rel="noreferrer"><code>pool.starmap()</code> method</a>:</p>\n\n<pre><code>#!/usr/bin/env python3\n\nfrom functools import partial\n\nfrom itertools import repeat\n\nfrom multiprocessing import Pool, freeze_support\n\ndef func(a, b):\n\n return a + b\n\ndef main():\n\n a_args = [1,2,3]\n\n second_arg = 1\n\n with Pool() as pool:\n\n L = pool.starmap(func, [(1, 1), (2, 1), (3, 1)])\n\n M = pool.starmap(func, zip(a_args, repeat(second_arg)))\n\n N = pool.map(partial(func, b=second_arg), a_args)\n\n assert L == M == N\n\nif __name__=="__main__":\n\n freeze_support()\n\n main()\n\n</code></pre>\n\n<p>For older versions:</p>\n\n<pre><code>#!/usr/bin/env python2\n\nimport itertools\n\nfrom multiprocessing import Pool, freeze_support\n\ndef func(a, b):\n\n print a, b\n\ndef func_star(a_b):\n\n """Convert `f([1,2])` to `f(1,2)` call."""\n\n return func(*a_b)\n\ndef main():\n\n pool = Pool()\n\n a_args = [1,2,3]\n\n second_arg = 1\n\n pool.map(func_star, itertools.izip(a_args, itertools.repeat(second_arg)))\n\nif __name__=="__main__":\n\n freeze_support()\n\n main()\n\n</code></pre>\n\n<h3>Output</h3>\n\n<pre><code>1 1\n\n2 1\n\n3 1\n\n</code></pre>\n\n<p>Notice how <a href="https://docs.python.org/2.7/library/itertools.html#itertools.izip" rel="noreferrer"><code>itertools.izip()</code></a> and <a href="https://docs.python.org/2.7/library/itertools.html#itertools.repeat" rel="noreferrer"><code>itertools.repeat()</code></a> are used here.</p>\n\n<p>Due to <a href="http://bugs.python.org/issue5228" rel="noreferrer">the bug mentioned by @unutbu</a> you can't use <a href="http://docs.python.org/library/functools.html#functools.partial" rel="noreferrer"><code>functools.partial()</code></a> or similar capabilities on Python 2.6, so the simple wrapper function <code>func_star()</code> should be defined explicitly. See also <a href="http://paste.pocoo.org/show/351774/" rel="noreferrer">the workaround</a> <a href="http://bugs.python.org/issue5228#msg130548" rel="noreferrer">suggested by <code>uptimebox</code></a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	949
ImportError: Cannot import name X	<p>You have circular dependent imports. <code>physics.py</code> is imported from <code>entity</code> before class <code>Ent</code> is defined and <code>physics</code> tries to import <code>entity</code> that is already initializing. Remove the dependency to <code>physics</code> from <code>entity</code> module.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	950
How do I detect the Python version at runtime?	<p>Sure, take a look at <a href="http://docs.python.org/library/sys.html#sys.version" rel="noreferrer"><code>sys.version</code></a> and <a href="http://docs.python.org/library/sys.html#sys.version_info" rel="noreferrer"><code>sys.version_info</code></a>.</p>\n\n<p>For example, to check that you are running Python 3.x, use</p>\n\n<pre><code>import sys\n\nif sys.version_info[0] < 3:\n\n raise Exception("Must be using Python 3")\n\n</code></pre>\n\n<p>Here, <code>sys.version_info[0]</code> is the major version number. <code>sys.version_info[1]</code> would give you the minor version number.</p>\n\n<p>In Python 2.7 and later, the components of <code>sys.version_info</code> can also be accessed by name, so the major version number is <code>sys.version_info.major</code>.</p>\n\n<p>See also <a href="https://stackoverflow.com/questions/446052/python-best-way-to-check-for-python-version-in-program-that-uses-new-language-f">How can I check for Python version in a program that uses new language features?</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	951
numpy: most efficient frequency counts for unique values in an array	<p>As of Numpy 1.9, the easiest and fastest method is to simply use <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.unique.html"><code>numpy.unique</code></a>, which now has a <code>return_counts</code> keyword argument:</p>\n\n<pre><code>import numpy as np\n\nx = np.array([1,1,1,2,2,2,5,25,1,1])\n\nunique, counts = np.unique(x, return_counts=True)\n\nprint np.asarray((unique, counts)).T\n\n</code></pre>\n\n<p>Which gives:</p>\n\n<pre><code> [[ 1 5]\n\n [ 2 3]\n\n [ 5 1]\n\n [25 1]]\n\n</code></pre>\n\n<p>A quick comparison with <code>scipy.stats.itemfreq</code>:</p>\n\n<pre><code>In [4]: x = np.random.random_integers(0,100,1e6)\n\nIn [5]: %timeit unique, counts = np.unique(x, return_counts=True)\n\n10 loops, best of 3: 31.5 ms per loop\n\nIn [6]: %timeit scipy.stats.itemfreq(x)\n\n10 loops, best of 3: 170 ms per loop\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	952
Proper way to declare custom exceptions in modern Python?	<p>With modern Python Exceptions, you don't need to abuse <code>.message</code>, or override <code>.__str__()</code> or <code>.__repr__()</code> or any of it. If all you want is an informative message when your exception is raised, do this:</p>\n\n<pre><code>class MyException(Exception):\n\n pass\n\nraise MyException("My hovercraft is full of eels")\n\n</code></pre>\n\n<p>That will give a traceback ending with <code>MyException: My hovercraft is full of eels</code>.</p>\n\n<p>If you want more flexibility from the exception, you could pass a dictionary as the argument:</p>\n\n<pre><code>raise MyException({"message":"My hovercraft is full of animals", "animal":"eels"})\n\n</code></pre>\n\n<p>However, to get at those details in an <code>except</code> block is a bit more complicated. The details are stored in the <code>args</code> attribute, which is a list. You would need to do something like this:</p>\n\n<pre><code>try:\n\n raise MyException({"message":"My hovercraft is full of animals", "animal":"eels"})\n\nexcept MyException as e:\n\n details = e.args[0]\n\n print(details["animal"])\n\n</code></pre>\n\n<p>It is still possible to pass in multiple items to the exception and access them via tuple indexes, but this is <em>highly discouraged</em> (and was even intended for deprecation a while back). If you do need more than a single piece of information and the above method is not sufficient for you, then you should subclass <code>Exception</code> as described in the <a href="https://docs.python.org/3.3/tutorial/errors.html#tut-userexceptions" rel="noreferrer">tutorial</a>.</p>\n\n<pre><code>class MyError(Exception):\n\n def __init__(self, message, animal):\n\n self.message = message\n\n self.animal = animal\n\n def __str__(self):\n\n return self.message\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	953
Check if something is (not) in a list in Python	<p>The bug is probably somewhere else in your code, because it should work fine:</p>\n\n<pre><code>>>> 3 not in [2, 3, 4]\n\nFalse\n\n>>> 3 not in [4, 5, 6]\n\nTrue\n\n</code></pre>\n\n<p>Or with tuples:</p>\n\n<pre><code>>>> (2, 3) not in [(2, 3), (5, 6), (9, 1)]\n\nFalse\n\n>>> (2, 3) not in [(2, 7), (7, 3), "hi"]\n\nTrue\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	954
What is setup.py?	<p>It helps to install a python package <code>foo</code> on your machine (can also be in <code>virtualenv</code>) so that you can import the package <code>foo</code> from other projects and also from [I]Python prompts. </p>\n\n<p><strong><em>It does the similar job of <code>pip</code>, <code>easy_install</code> etc.,</em></strong></p>\n\n<hr>\n\n<p><strong>Using <code>setup.py</code></strong> </p>\n\n<p>Let's start with some definitions:</p>\n\n<p><em>Package</em> - A folder/directory that contains <code>__init__.py</code> file.<br>\n\n<em>Module</em> - A valid python file with <code>.py</code> extension.<br>\n\n<em>Distribution</em> - How one <em>package</em> relates to other <em>packages</em> and <em>modules</em>. </p>\n\n<p>Let's say you want to install a package named <code>foo</code>. Then you do, </p>\n\n<pre><code>$ git clone https://github.com/user/foo \n\n$ cd foo\n\n$ python setup.py install\n\n</code></pre>\n\n<p>Instead, if you don't want to actually install it but still would like to use it. Then do, </p>\n\n<pre><code>$ python setup.py develop \n\n</code></pre>\n\n<p>This command will create symlinks to the source directory within site-packages instead of copying things. Because of this, it is quite fast (particularly for large packages). </p>\n\n<hr>\n\n<p><strong>Creating <code>setup.py</code></strong> </p>\n\n<p>If you have your package tree like, </p>\n\n<pre><code>foo\n\nâââ foo\n\nâÂ Â âââ data_struct.py\n\nâÂ Â âââ __init__.py\n\nâÂ Â âââ internals.py\n\nâââ README\n\nâââ requirements.txt\n\nâââ setup.py\n\n</code></pre>\n\n<p>Then, you do the following in your <strong><code>setup.py</code></strong> script so that it can be installed on some machine: </p>\n\n<pre><code>from setuptools import setup\n\nsetup(\n\n name='foo',\n\n version='1.0',\n\n description='A useful module',\n\n author='Man Foo',\n\n author_email='foomail@foo.com',\n\n packages=['foo'], #same as name\n\n install_requires=['bar', 'greek'], #external packages as dependencies\n\n)\n\n</code></pre>\n\n<p>Instead, if your package tree is more complex like the one below: </p>\n\n<pre><code>foo\n\nâââ foo\n\nâÂ Â âââ data_struct.py\n\nâÂ Â âââ __init__.py\n\nâÂ Â âââ internals.py\n\nâââ README\n\nâââ requirements.txt\n\nâââ scripts\n\nâÂ Â âââ cool\n\nâÂ Â âââ skype\n\nâââ setup.py\n\n</code></pre>\n\n<p>Then, your <strong><code>setup.py</code></strong> in this case would be like:</p>\n\n<pre><code>from setuptools import setup\n\nsetup(\n\n name='foo',\n\n version='1.0',\n\n description='A useful module',\n\n author='Man Foo',\n\n author_email='foomail@foo.com',\n\n packages=['foo'], #same as name\n\n install_requires=['bar', 'greek'], #external packages as dependencies\n\n scripts=[\n\n 'scripts/cool',\n\n 'scripts/skype',\n\n ]\n\n)\n\n</code></pre>\n\n<hr>\n\n<p><strong>Add more stuff to (<code>setup.py</code>)</strong> & make it decent:</p>\n\n<pre><code>from setuptools import setup\n\nwith open("README", 'r') as f:\n\n long_description = f.read()\n\nsetup(\n\n name='foo',\n\n version='1.0',\n\n description='A useful module',\n\n license="MIT",\n\n long_description=long_description,\n\n author='Man Foo',\n\n author_email='foomail@foo.com',\n\n url="http://www.foopackage.com/",\n\n packages=['foo'], #same as name\n\n install_requires=['bar', 'greek'], #external packages as dependencies\n\n scripts=[\n\n 'scripts/cool',\n\n 'scripts/skype',\n\n ]\n\n)\n\n</code></pre>\n\n<p>The <code>long_description</code> is used in <a href="http://pypi.org" rel="noreferrer">pypi.org</a> as the README description of your package. </p>\n\n<hr>\n\n<p>And finally, you're now ready to upload your package to <a href="http://pypi.org" rel="noreferrer">PyPi.org</a> so that others can install your package using <code>pip install yourpackage</code>. </p>\n\n<p>First step is to claim your package name & space in pypi using:</p>\n\n<pre><code>$ python setup.py register\n\n</code></pre>\n\n<p>Once your package name is registered, nobody can claim or use it. After successful registration, you have to upload your package there (to the cloud) by,</p>\n\n<pre><code>$ python setup.py upload\n\n</code></pre>\n\n<p>Optionally, you can also sign your package with <code>GPG</code> by,</p>\n\n<pre><code>$ python setup.py --sign upload\n\n</code></pre>\n\n<hr>\n\n<p><strong>Bonus</strong>: See a sample <strong><code>setup.py</code></strong> from a real project here: <a href="https://github.com/pytorch/vision/blob/master/setup.py" rel="noreferrer"><strong><code>torchvision-setup.py</code></strong></a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	955
How do I access command line arguments in Python?	<p><a href="http://docs.python.org/tutorial/stdlib.html#command-line-arguments">Python tutorial explains it</a>:</p>\n\n<pre><code>import sys\n\nprint(sys.argv)\n\n</code></pre>\n\n<p>More specifically, if you run <code>python example.py one two three</code>:</p>\n\n<pre><code>>>> import sys\n\n>>> print(sys.argv)\n\n['example.py', 'one', 'two', 'three']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	956
Create Pandas DataFrame from a string	<p>A simple way to do this is to use <a href="https://docs.python.org/2/library/io.html#io.StringIO" rel="noreferrer"><code>StringIO.StringIO</code> (python2)</a> or <a href="https://docs.python.org/3/library/io.html#io.StringIO" rel="noreferrer"><code>io.StringIO</code> (python3)</a> and pass that to the <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html#pandas.read_csv" rel="noreferrer"><code>pandas.read_csv</code></a> function. E.g:</p>\n\n<pre><code>import sys\n\nif sys.version_info[0] < 3: \n\n from StringIO import StringIO\n\nelse:\n\n from io import StringIO\n\nimport pandas as pd\n\nTESTDATA = StringIO("""col1;col2;col3\n\n 1;4.4;99\n\n 2;4.5;200\n\n 3;4.7;65\n\n 4;3.2;140\n\n """)\n\ndf = pd.read_csv(TESTDATA, sep=";")\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	957
return, return None, and no return at all?	<p>On the actual behavior, there is no difference. They all return <code>None</code> and that's it. However, there is a time and place for all of these.\n\nThe following instructions are basically how the different methods should be used (or at least how I was taught they should be used), but they are not absolute rules so you can mix them up if you feel necessary to.</p>\n\n<h2>Using <code>return None</code></h2>\n\n<p>This tells that the function is indeed meant to return a value for later use, and in this case it returns <code>None</code>. This value <code>None</code> can then be used elsewhere. <code>return None</code> is never used if there are no other possible return values from the function.</p>\n\n<p>In the following example, we return <code>person</code>'s <code>mother</code> if the <code>person</code> given is a human. If it's not a human, we return <code>None</code> since the <code>person</code> doesn't have a <code>mother</code> (let's suppose it's not an animal or something).</p>\n\n<pre><code>def get_mother(person):\n\n if is_human(person):\n\n return person.mother\n\n else:\n\n return None\n\n</code></pre>\n\n<h2>Using <code>return</code></h2>\n\n<p>This is used for the same reason as <code>break</code> in loops. The return value doesn't matter and you only want to exit the whole function. It's extremely useful in some places, even though you don't need it that often.</p>\n\n<p>We've got 15 <code>prisoners</code> and we know one of them has a knife. We loop through each <code>prisoner</code> one by one to check if they have a knife. If we hit the person with a knife, we can just exit the function because we know there's only one knife and no reason the check rest of the <code>prisoners</code>. If we don't find the <code>prisoner</code> with a knife, we raise an alert. This could be done in many different ways and using <code>return</code> is probably not even the best way, but it's just an example to show how to use <code>return</code> for exiting a function.</p>\n\n<pre><code>def find_prisoner_with_knife(prisoners):\n\n for prisoner in prisoners:\n\n if "knife" in prisoner.items:\n\n prisoner.move_to_inquisition()\n\n return # no need to check rest of the prisoners nor raise an alert\n\n raise_alert()\n\n</code></pre>\n\n<p>Note: You should never do <code>var = find_prisoner_with_knife()</code>, since the return value is not meant to be caught.</p>\n\n<h2>Using no <code>return</code> at all</h2>\n\n<p>This will also return <code>None</code>, but that value is not meant to be used or caught. It simply means that the function ended successfully. It's basically the same as <code>return</code> in <code>void</code> functions in languages such as C++ or Java.</p>\n\n<p>In the following example, we set person's mother's name and then the function exits after completing successfully.</p>\n\n<pre><code>def set_mother(person, mother):\n\n if is_human(person):\n\n person.mother = mother\n\n</code></pre>\n\n<p>Note: You should never do <code>var = set_mother(my_person, my_mother)</code>, since the return value is not meant to be caught.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	958
Django: Display Choice Value	<p>It looks like you were on the right track - <a href="https://docs.djangoproject.com/en/stable/ref/models/instances/#django.db.models.Model.get_FOO_display" rel="noreferrer"><code>get_FOO_display()</code></a> is most certainly what you want:</p>\n\n<p>In <strong>templates</strong>, you don't include <code>()</code> in the name of a method. Do the following:</p>\n\n<pre><code>{{ person.get_gender_display }}\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	959
User input and command line arguments	<p>To read user input you can try <a href="https://docs.python.org/dev/library/cmd.html" rel="noreferrer">the <code>cmd</code> module</a> for easily creating a mini-command line interpreter (with help texts and autocompletion) and <a href="https://docs.python.org/2/library/functions.html#raw_input" rel="noreferrer"><code>raw_input</code></a> (<a href="https://docs.python.org/dev/library/functions.html#input" rel="noreferrer"><code>input</code></a> for Python 3+) for reading a line of text from the user.</p>\n\n<pre><code>text = raw_input("prompt") # Python 2\n\ntext = input("prompt") # Python 3\n\n</code></pre>\n\n<p>Command line inputs are in <code>sys.argv</code>. Try this in your script:</p>\n\n<pre><code>import sys\n\nprint (sys.argv)\n\n</code></pre>\n\n<p>There are two modules for parsing command line options: <a href="https://docs.python.org/dev/library/optparse.html" rel="noreferrer"><s><code>optparse</code></s></a> (deprecated since Python 2.7, use <a href="https://docs.python.org/dev/library/argparse.html" rel="noreferrer"><code>argparse</code></a> instead) and <a href="https://docs.python.org/dev/library/getopt.html" rel="noreferrer"><code>getopt</code></a>. If you just want to input files to your script, behold the power of <a href="https://docs.python.org/dev/library/fileinput.html" rel="noreferrer"><code>fileinput</code></a>.</p>\n\n<p>The <a href="https://docs.python.org/dev/library/" rel="noreferrer">Python library reference</a> is your friend.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	960
How to format a floating number to fixed width in Python	<pre><code>for x in numbers:\n\n print "{:10.4f}".format(x)\n\n</code></pre>\n\n<p>prints</p>\n\n<pre><code> 23.2300\n\n 0.1233\n\n 1.0000\n\n 4.2230\n\n 9887.2000\n\n</code></pre>\n\n<p>The format specifier inside the curly braces follows the <a href="https://docs.python.org/3/library/string.html#format-string-syntax" rel="noreferrer">Python format string syntax</a>. Specifically, in this case, it consists of the following parts:</p>\n\n<ul>\n\n<li>The <em>empty string</em> before the colon means "take the next provided argument to <code>format()</code>" â in this case the <code>x</code> as the only argument.</li>\n\n<li>The <code>10.4f</code> part after the colon is the <a href="https://docs.python.org/3/library/string.html#format-specification-mini-language" rel="noreferrer">format specification</a>.</li>\n\n<li>The <code>f</code> denotes fixed-point notation.</li>\n\n<li>The <code>10</code> is the total width of the field being printed, lefted-padded by spaces.</li>\n\n<li>The <code>4</code> is the number of digits after the decimal point.</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	961
How do I put a variable inside a string?	<p>Oh, the many, many ways...</p>\n\n<p>String concatenation:</p>\n\n<pre><code>plot.savefig('hanning' + str(num) + '.pdf')\n\n</code></pre>\n\n<p>Conversion Specifier:</p>\n\n<pre><code>plot.savefig('hanning%s.pdf' % num)\n\n</code></pre>\n\n<p>Using local variable names:</p>\n\n<pre><code>plot.savefig('hanning%(num)s.pdf' % locals()) # Neat trick\n\n</code></pre>\n\n<p>Using <a href="https://docs.python.org/3/library/stdtypes.html#str.format" rel="noreferrer"><code>str.format()</code></a>:</p>\n\n<pre><code>plot.savefig('hanning{0}.pdf'.format(num)) # Note: This is the new preferred way\n\n</code></pre>\n\n<p>Using f-strings:</p>\n\n<pre><code>plot.savefig(f'hanning{num}.pdf') # added in Python 3.6\n\n</code></pre>\n\n<p>Using <a href="https://docs.python.org/3/library/string.html#string.Template" rel="noreferrer"><code>string.Template</code></a>:</p>\n\n<pre><code>plot.savefig(string.Template('hanning${num}.pdf').substitute(locals()))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	962
get list from pandas dataframe column	<p>Pandas DataFrame columns are Pandas Series when you pull them out, which you can then call <code>x.tolist()</code> on to turn them into a Python list. Alternatively you cast it with <code>list(x)</code>.</p>\n\n<pre class="lang-py prettyprint-override"><code>import pandas as pd\n\ndata_dict = {'one': pd.Series([1, 2, 3], index=['a', 'b', 'c']),\n\n 'two': pd.Series([1, 2, 3, 4], index=['a', 'b', 'c', 'd'])}\n\ndf = pd.DataFrame(data_dict)\n\nprint(f"DataFrame: {df} ")\n\nprint(f"column types: {df.dtypes}")\n\ncol_one_list = df['one'].tolist()\n\ncol_one_arr = df['one'].to_numpy()\n\nprint(f" col_one_list: {col_one_list} type:{type(col_one_list)}")\n\nprint(f" col_one_arr: {col_one_arr} type:{type(col_one_arr)}")\n\n</code></pre>\n\n<p>Output:</p>\n\n<pre class="lang-none prettyprint-override"><code>DataFrame:\n\n one two\n\na 1.0 1\n\nb 2.0 2\n\nc 3.0 3\n\nd NaN 4\n\ncolumn types:\n\none float64\n\ntwo int64\n\ndtype: object\n\ncol_one_list:\n\n[1.0, 2.0, 3.0, nan]\n\ntype:<class 'list'>\n\ncol_one_arr:\n\n[ 1. 2. 3. nan]\n\ntype:<class 'numpy.ndarray'>\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	963
What is the standard way to add N seconds to datetime.time in Python?	<p>You can use full <code>datetime</code> variables with <code>timedelta</code>, and by providing a dummy date then using <code>time</code> to just get the time value.</p>\n\n<p>For example:</p>\n\n<pre><code>import datetime\n\na = datetime.datetime(100,1,1,11,34,59)\n\nb = a + datetime.timedelta(0,3) # days, seconds, then other fields.\n\nprint(a.time())\n\nprint(b.time())\n\n</code></pre>\n\n<p>results in the two values, three seconds apart:</p>\n\n<pre><code>11:34:59\n\n11:35:02\n\n</code></pre>\n\n<p>You could also opt for the more readable</p>\n\n<pre><code>b = a + datetime.timedelta(seconds=3)\n\n</code></pre>\n\n<p>if you're so inclined.</p>\n\n<hr>\n\n<p>If you're after a function that can do this, you can look into using <code>addSecs</code> below:</p>\n\n<pre><code>import datetime\n\ndef addSecs(tm, secs):\n\n fulldate = datetime.datetime(100, 1, 1, tm.hour, tm.minute, tm.second)\n\n fulldate = fulldate + datetime.timedelta(seconds=secs)\n\n return fulldate.time()\n\na = datetime.datetime.now().time()\n\nb = addSecs(a, 300)\n\nprint(a)\n\nprint(b)\n\n</code></pre>\n\n<p>This outputs:</p>\n\n<pre><code> 09:11:55.775695\n\n 09:16:55\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	964
How to take the first N items from a generator or list in Python?	<h1>Slicing a list</h1>\n\n<pre><code>top5 = array[:5]\n\n</code></pre>\n\n<ul>\n\n<li>To slice a list, there's a simple syntax: <code>array[start:stop:step]</code></li>\n\n<li>You can omit any parameter. These are all valid: <code>array[start:]</code>, <code>array[:stop]</code>, <code>array[::step]</code></li>\n\n</ul>\n\n<h1>Slicing a generator</h1>\n\n<pre><code> import itertools\n\n top5 = itertools.islice(my_list, 5) # grab the first five elements\n\n</code></pre>\n\n<ul>\n\n<li><p>You can't slice a generator directly in Python. <a href="http://docs.python.org/library/itertools.html#itertools.islice" rel="noreferrer"><code>itertools.islice()</code></a> will wrap an object in a new slicing generator using the syntax <code>itertools.islice(generator, start, stop, step)</code></p></li>\n\n<li><p>Remember, slicing a generator will exhaust it partially. If you want to keep the entire generator intact, perhaps turn it into a tuple or list first, like: <code>result = tuple(generator)</code></p></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	965
Append a dictionary to a dictionary	<p>You can do</p>\n\n<pre><code>orig.update(extra)\n\n</code></pre>\n\n<p>or, if you don't want <code>orig</code> to be modified, make a copy first:</p>\n\n<pre><code>dest = dict(orig) # or orig.copy()\n\ndest.update(extra)\n\n</code></pre>\n\n<p>Note that if extra and orig have overlapping keys, the final value will be taken from extra. For example,</p>\n\n<pre><code>>>> d1 = {1: 1, 2: 2}\n\n>>> d2 = {2: 'ha!', 3: 3}\n\n>>> d1.update(d2)\n\n>>> d1\n\n{1: 1, 2: 'ha!', 3: 3}\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	966
How to use a different version of python during NPM install?	<p>You can use <code>--python</code> option to npm like so:</p>\n\n<pre><code>npm install --python=python2.7\n\n</code></pre>\n\n<p>or set it to be used always:</p>\n\n<pre><code>npm config set python python2.7\n\n</code></pre>\n\n<p>Npm will in turn pass this option to node-gyp when needed.</p>\n\n<p>(note: I'm the one who opened an issue on Github to have this included in the docs, as there were so many questions about it ;-) )</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	967
When is del useful in python?	<p>Firstly, you can del other things besides local variables</p>\n\n<pre><code>del list_item[4]\n\ndel dictionary["alpha"]\n\n</code></pre>\n\n<p>Both of which should be clearly useful. Secondly, using <code>del</code> on a local variable makes the intent clearer. Compare:</p>\n\n<pre><code>del foo\n\n</code></pre>\n\n<p>to</p>\n\n<pre><code>foo = None\n\n</code></pre>\n\n<p>I know in the case of <code>del foo</code> that the intent is to remove the variable from scope. It's not clear that <code>foo = None</code> is doing that. If somebody just assigned <code>foo = None</code> I might think it was dead code. But I instantly know what somebody who codes <code>del foo</code> was trying to do.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	968
Numpy array dimensions	<p>It is <a href="http://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.shape.html#numpy.ndarray.shape" rel="noreferrer"><code>.shape</code></a>:</p>\n\n<blockquote>\n\n <p>ndarray.<strong>shape</strong><br>\n\n Tuple of array dimensions.</p>\n\n</blockquote>\n\n<p>Thus:</p>\n\n<pre><code>>>> a.shape\n\n(2, 2)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	969
Set variable in jinja	<p><code>{{ }}</code> tells the template to <em>print</em> the value, this won't work in expressions like you're trying to do. Instead, use the <code>{% set %}</code> template tag and then assign the value the same way you would in normal python code.</p>\n\n<pre><code>{% set testing = 'it worked' %}\n\n{% set another = testing %}\n\n{{ another }}\n\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>it worked\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	970
Difference between __getattr__ vs __getattribute__	<p>A key difference between <code>__getattr__</code> and <code>__getattribute__</code> is that <code>__getattr__</code> is only invoked if the attribute wasn't found the usual ways. It's good for implementing a fallback for missing attributes, and is probably the one of two you want.</p>\n\n<p><code>__getattribute__</code> is invoked before looking at the actual attributes on the object, and so can be tricky to implement correctly. You can end up in infinite recursions very easily.</p>\n\n<p>New-style classes derive from <code>object</code>, old-style classes are those in Python 2.x with no explicit base class. But the distinction between old-style and new-style classes is not the important one when choosing between <code>__getattr__</code> and <code>__getattribute__</code>.</p>\n\n<p>You almost certainly want <code>__getattr__</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	971
Cannot install Lxml on Mac os x 10.9	<p>You should install or upgrade the commandline tool for xcode.\n\nTry this in a terminal:</p>\n\n<pre><code>xcode-select --install\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	972
How to pretty print nested dictionaries?	<p>My first thought was that the JSON serializer is probably pretty good at nested dictionaries, so I'd cheat and use that:</p>\n\n<pre><code>>>> import json\n\n>>> print json.dumps({'a':2, 'b':{'x':3, 'y':{'t1': 4, 't2':5}}},\n\n... sort_keys=True, indent=4)\n\n{\n\n "a": 2,\n\n "b": {\n\n "x": 3,\n\n "y": {\n\n "t1": 4,\n\n "t2": 5\n\n }\n\n }\n\n}\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	973
How can I get list of values from dict?	<p>Yes it's the exact same thing in <a href="https://docs.python.org/2/library/stdtypes.html#dict.values" rel="noreferrer">Python 2</a>:</p>\n\n<pre><code>d.values()\n\n</code></pre>\n\n<p>In <a href="https://docs.python.org/3/library/stdtypes.html#dict.values" rel="noreferrer">Python 3</a> (where <code>dict.values</code> returns a <a href="https://docs.python.org/3/library/stdtypes.html#dict-views" rel="noreferrer"><em>view</em></a> of the dictionaryâs values instead):</p>\n\n<pre><code>list(d.values())\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	974
How to list all functions in a Python module?	<p>You can use <code>dir(module)</code> to see all available methods/attributes. Also check out PyDocs.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	975
How can I see the entire HTTP request that's being sent by my Python application?	<p>A simple method: enable logging in recent versions of Requests (1.x and higher.) </p>\n\n<p>Requests uses the <code>http.client</code> and <code>logging</code> module configuration to control logging verbosity, as described <a href="https://requests.readthedocs.io/en/master/api/#api-changes" rel="noreferrer">here</a>. </p>\n\n<h2>Demonstration</h2>\n\n<p>Code excerpted from the linked documentation:</p>\n\n<pre><code>import requests\n\nimport logging\n\n# These two lines enable debugging at httplib level (requests->urllib3->http.client)\n\n# You will see the REQUEST, including HEADERS and DATA, and RESPONSE with HEADERS but without DATA.\n\n# The only thing missing will be the response.body which is not logged.\n\ntry:\n\n import http.client as http_client\n\nexcept ImportError:\n\n # Python 2\n\n import httplib as http_client\n\nhttp_client.HTTPConnection.debuglevel = 1\n\n# You must initialize logging, otherwise you'll not see debug output.\n\nlogging.basicConfig()\n\nlogging.getLogger().setLevel(logging.DEBUG)\n\nrequests_log = logging.getLogger("requests.packages.urllib3")\n\nrequests_log.setLevel(logging.DEBUG)\n\nrequests_log.propagate = True\n\nrequests.get('https://httpbin.org/headers')\n\n</code></pre>\n\n<h2>Example Output</h2>\n\n<pre><code>$ python requests-logging.py \n\nINFO:requests.packages.urllib3.connectionpool:Starting new HTTPS connection (1): httpbin.org\n\nsend: 'GET /headers HTTP/1.1 Host: httpbin.org Accept-Encoding: gzip, deflate, compress Accept: */* User-Agent: python-requests/1.2.0 CPython/2.7.3 Linux/3.2.0-48-generic '\n\nreply: 'HTTP/1.1 200 OK '\n\nheader: Content-Type: application/json\n\nheader: Date: Sat, 29 Jun 2013 11:19:34 GMT\n\nheader: Server: gunicorn/0.17.4\n\nheader: Content-Length: 226\n\nheader: Connection: keep-alive\n\nDEBUG:requests.packages.urllib3.connectionpool:"GET /headers HTTP/1.1" 200 226\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	976
combinations between two lists?	<p>The simplest way is to use <code>itertools.product</code>:</p>\n\n<pre><code>a = ["foo", "melon"]\n\nb = [True, False]\n\nc = list(itertools.product(a, b))\n\n>> [("foo", True), ("foo", False), ("melon", True), ("melon", False)]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	977
How to fix: "UnicodeDecodeError: 'ascii' codec can't decode byte"	<p><strong>Finally I got it:</strong></p>\n\n<pre><code>as3:/usr/local/lib/python2.7/site-packages# cat sitecustomize.py\n\n# encoding=utf8 \n\nimport sys \n\nreload(sys) \n\nsys.setdefaultencoding('utf8')\n\n</code></pre>\n\n<p><strong>Let me check:</strong></p>\n\n<pre><code>as3:~/ngokevin-site# python\n\nPython 2.7.6 (default, Dec 6 2013, 14:49:02)\n\n[GCC 4.4.5] on linux2\n\nType "help", "copyright", "credits" or "license" for more information.\n\n>>> import sys\n\n>>> reload(sys)\n\n<module 'sys' (built-in)>\n\n>>> sys.getdefaultencoding()\n\n'utf8'\n\n>>>\n\n</code></pre>\n\n<p>The above shows the default encoding of python is <code>utf8</code>. Then the error is no more.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	978
How to compare two dates?	<p>Use the <code>datetime</code> method and the operator <code><</code> and its kin.</p>\n\n<pre><code>>>> from datetime import datetime, timedelta\n\n>>> past = datetime.now() - timedelta(days=1)\n\n>>> present = datetime.now()\n\n>>> past < present\n\nTrue\n\n>>> datetime(3000, 1, 1) < present\n\nFalse\n\n>>> present - datetime(2000, 4, 4)\n\ndatetime.timedelta(4242, 75703, 762105)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	979
How are Python's Built In Dictionaries Implemented?	<p>Here is everything about Python dicts that I was able to put together (probably more than anyone would like to know; but the answer is comprehensive). </p>\n\n<ul>\n\n<li>Python dictionaries are implemented as <strong>hash tables</strong>.</li>\n\n<li>Hash tables must allow for <strong>hash collisions</strong> i.e. even if two distinct keys have the same hash value, the table's implementation must have a strategy to insert and retrieve the key and value pairs unambiguously.</li>\n\n<li>Python <code>dict</code> uses <strong>open addressing</strong> to resolve hash collisions (explained below) (see <a href="http://hg.python.org/cpython/file/52f68c95e025/Objects/dictobject.c#l296" rel="noreferrer">dictobject.c:296-297</a>).</li>\n\n<li>Python hash table is just a contiguous block of memory (sort of like an array, so you can do an <code>O(1)</code> lookup by index). </li>\n\n<li><strong>Each slot in the table can store one and only one entry.</strong> This is important.</li>\n\n<li>Each <strong>entry</strong> in the table actually a combination of the three values: <strong>< hash, key, value ></strong>. This is implemented as a C struct (see <a href="http://hg.python.org/cpython/file/52f68c95e025/Include/dictobject.h#l51" rel="noreferrer">dictobject.h:51-56</a>).</li>\n\n<li><p>The figure below is a logical representation of a Python hash table. In the figure below, <code>0, 1, ..., i, ...</code> on the left are indices of the <strong>slots</strong> in the hash table (they are just for illustrative purposes and are not stored along with the table obviously!).</p>\n\n<pre><code># Logical model of Python Hash table\n\n-+-----------------+\n\n0| <hash|key|value>|\n\n-+-----------------+\n\n1| ... |\n\n-+-----------------+\n\n.| ... |\n\n-+-----------------+\n\ni| ... |\n\n-+-----------------+\n\n.| ... |\n\n-+-----------------+\n\nn| ... |\n\n-+-----------------+\n\n</code></pre></li>\n\n<li><p>When a new dict is initialized it starts with 8 <em>slots</em>. (see <a href="http://hg.python.org/cpython/file/52f68c95e025/Include/dictobject.h#l49" rel="noreferrer">dictobject.h:49</a>)</p></li>\n\n<li>When adding entries to the table, we start with some slot, <code>i</code>, that is based on the hash of the key. CPython initially uses <code>i = hash(key) & mask</code> (where <code>mask = PyDictMINSIZE - 1</code>, but that's not really important). Just note that the initial slot, <code>i</code>, that is checked depends on the <em>hash</em> of the key.</li>\n\n<li>If that slot is empty, the entry is added to the slot (by entry, I mean, <code><hash|key|value></code>). But what if that slot is occupied!? Most likely because another entry has the same hash (hash collision!)</li>\n\n<li>If the slot is occupied, CPython (and even PyPy) compares <strong>the hash AND the key</strong> (by compare I mean <code>==</code> comparison not the <code>is</code> comparison) of the entry in the slot against the hash and key of the current entry to be inserted (<a href="http://hg.python.org/cpython/file/52f68c95e025/Objects/dictobject.c#l337" rel="noreferrer">dictobject.c:337,344-345</a>) respectively. If <em>both</em> match, then it thinks the entry already exists, gives up and moves on to the next entry to be inserted. If either hash or the key don't match, it starts <strong>probing</strong>. </li>\n\n<li>Probing just means it searches the slots by slot to find an empty slot. Technically we could just go one by one, <code>i+1, i+2, ...</code> and use the first available one (that's linear probing). But for reasons explained beautifully in the comments (see <a href="http://hg.python.org/cpython/file/52f68c95e025/Objects/dictobject.c#l33" rel="noreferrer">dictobject.c:33-126</a>), CPython uses <strong>random probing</strong>. In random probing, the next slot is picked in a pseudo random order. The entry is added to the first empty slot. For this discussion, the actual algorithm used to pick the next slot is not really important (see <a href="http://hg.python.org/cpython/file/52f68c95e025/Objects/dictobject.c#l33" rel="noreferrer">dictobject.c:33-126</a> for the algorithm for probing). What is important is that the slots are probed until first empty slot is found.</li>\n\n<li>The same thing happens for lookups, just starts with the initial slot i (where i depends on the hash of the key). If the hash and the key both don't match the entry in the slot, it starts probing, until it finds a slot with a match. If all slots are exhausted, it reports a fail.</li>\n\n<li>BTW, the <code>dict</code> will be resized if it is two-thirds full. This avoids slowing down lookups. (see <a href="http://hg.python.org/cpython/file/52f68c95e025/Include/dictobject.h#l64" rel="noreferrer">dictobject.h:64-65</a>)</li>\n\n</ul>\n\n<p>NOTE: I did the research on Python Dict implementation in response to my own <a href="https://stackoverflow.com/questions/9010222/">question</a> about how multiple entries in a dict can have same hash values. I posted a slightly edited version of the response here because all the research is very relevant for this question as well.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	980
Remove all the elements that occur in one list from another	<p>Python has a language feature called <a href="http://docs.python.org/tutorial/datastructures.html#list-comprehensions" rel="noreferrer">List Comprehensions</a> that is perfectly suited to making this sort of thing extremely easy. The following statement does exactly what you want and stores the result in <code>l3</code>:</p>\n\n<pre><code>l3 = [x for x in l1 if x not in l2]\n\n</code></pre>\n\n<p><code>l3</code> will contain <code>[1, 6]</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	981
What is the difference between Python's list methods append and extend?	<blockquote>\n\n <h2>What is the difference between the list methods append and extend?</h2>\n\n</blockquote>\n\n<ul>\n\n<li><code>append</code> adds its argument as a single element to the end of a list. The length of the list itself will increase by one.</li>\n\n<li><code>extend</code> iterates over its argument adding each element to the list, extending the list. The length of the list will increase by however many elements were in the iterable argument.</li>\n\n</ul>\n\n<h2><code>append</code></h2>\n\n<p>The <code>list.append</code> method appends an object to the end of the list.</p>\n\n<pre><code>my_list.append(object) \n\n</code></pre>\n\n<p>Whatever the object is, whether a number, a string, another list, or something else, it gets added onto the end of <code>my_list</code> as a single entry on the list. </p>\n\n<pre><code>>>> my_list\n\n['foo', 'bar']\n\n>>> my_list.append('baz')\n\n>>> my_list\n\n['foo', 'bar', 'baz']\n\n</code></pre>\n\n<p>So keep in mind that a list is an object. If you append another list onto a list, the first list will be a single object at the end of the list (which may not be what you want):</p>\n\n<pre><code>>>> another_list = [1, 2, 3]\n\n>>> my_list.append(another_list)\n\n>>> my_list\n\n['foo', 'bar', 'baz', [1, 2, 3]]\n\n #^^^^^^^^^--- single item at the end of the list.\n\n</code></pre>\n\n<h2><code>extend</code></h2>\n\n<p>The <code>list.extend</code> method extends a list by appending elements from an iterable:</p>\n\n<pre><code>my_list.extend(iterable)\n\n</code></pre>\n\n<p>So with extend, each element of the iterable gets appended onto the list. For example:</p>\n\n<pre><code>>>> my_list\n\n['foo', 'bar']\n\n>>> another_list = [1, 2, 3]\n\n>>> my_list.extend(another_list)\n\n>>> my_list\n\n['foo', 'bar', 1, 2, 3]\n\n</code></pre>\n\n<p>Keep in mind that a string is an iterable, so if you extend a list with a string, you'll append each character as you iterate over the string (which may not be what you want):</p>\n\n<pre><code>>>> my_list.extend('baz')\n\n>>> my_list\n\n['foo', 'bar', 1, 2, 3, 'b', 'a', 'z']\n\n</code></pre>\n\n<h2>Operator Overload, <code>__add__</code> (<code>+</code>) and <code>__iadd__</code> (<code>+=</code>)</h2>\n\n<p>Both <code>+</code> and <code>+=</code> operators are defined for <code>list</code>. They are semantically similar to extend.</p>\n\n<p><code>my_list + another_list</code> creates a third list in memory, so you can return the result of it, but it requires that the second iterable be a list. </p>\n\n<p><code>my_list += another_list</code> modifies the list in-place (it <em>is</em> the in-place operator, and lists are mutable objects, as we've seen) so it does not create a new list. It also works like extend, in that the second iterable can be any kind of iterable.</p>\n\n<p>Don't get confused - <code>my_list = my_list + another_list</code> is not equivalent to <code>+=</code> - it gives you a brand new list assigned to my_list.</p>\n\n<h2>Time Complexity</h2>\n\n<p>Append has <a href="https://wiki.python.org/moin/TimeComplexity" rel="noreferrer">constant time complexity</a>, O(1). </p>\n\n<p>Extend has time complexity, O(k). </p>\n\n<p>Iterating through the multiple calls to <code>append</code> adds to the complexity, making it equivalent to that of extend, and since extend's iteration is implemented in C, it will always be faster if you intend to append successive items from an iterable onto a list.</p>\n\n<h2>Performance</h2>\n\n<p>You may wonder what is more performant, since append can be used to achieve the same outcome as extend. The following functions do the same thing:</p>\n\n<pre><code>def append(alist, iterable):\n\n for item in iterable:\n\n alist.append(item)\n\ndef extend(alist, iterable):\n\n alist.extend(iterable)\n\n</code></pre>\n\n<p>So let's time them:</p>\n\n<pre><code>import timeit\n\n>>> min(timeit.repeat(lambda: append([], "abcdefghijklmnopqrstuvwxyz")))\n\n2.867846965789795\n\n>>> min(timeit.repeat(lambda: extend([], "abcdefghijklmnopqrstuvwxyz")))\n\n0.8060121536254883\n\n</code></pre>\n\n<h3>Addressing a comment on timings</h3>\n\n<p>A commenter said:</p>\n\n<blockquote>\n\n <p>Perfect answer, I just miss the timing of comparing adding only one element</p>\n\n</blockquote>\n\n<p>Do the semantically correct thing. If you want to append all elements in an iterable, use <code>extend</code>. If you're just adding one element, use <code>append</code>.</p>\n\n<p>Ok, so let's create an experiment to see how this works out in time:</p>\n\n<pre><code>def append_one(a_list, element):\n\n a_list.append(element)\n\ndef extend_one(a_list, element):\n\n """creating a new list is semantically the most direct\n\n way to create an iterable to give to extend"""\n\n a_list.extend([element])\n\nimport timeit\n\n</code></pre>\n\n<p>And we see that going out of our way to create an iterable just to use extend is a (minor) waste of time:</p>\n\n<pre><code>>>> min(timeit.repeat(lambda: append_one([], 0)))\n\n0.2082819009956438\n\n>>> min(timeit.repeat(lambda: extend_one([], 0)))\n\n0.2397019260097295\n\n</code></pre>\n\n<p>We learn from this that there's nothing gained from using <code>extend</code> when we have only <em>one</em> element to append.</p>\n\n<p>Also, these timings are not that important. I am just showing them to make the point that, in Python, doing the semantically correct thing is doing things the <em>Right</em> Wayâ¢.</p>\n\n<p>It's conceivable that you might test timings on two comparable operations and get an ambiguous or inverse result. Just focus on doing the semantically correct thing.</p>\n\n<h2>Conclusion</h2>\n\n<p>We see that <code>extend</code> is semantically clearer, and that it can run much faster than <code>append</code>, <em>when you intend to append each element in an iterable to a list.</em> </p>\n\n<p>If you only have a single element (not in an iterable) to add to the list, use <code>append</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	982
Add one row to pandas DataFrame	<p>In case you can get all data for the data frame upfront, there is a much faster approach than appending to a data frame: </p>\n\n<ol>\n\n<li>Create a list of dictionaries in which each dictionary corresponds to an input data row. </li>\n\n<li>Create a data frame from this list.</li>\n\n</ol>\n\n<p>I had a similar task for which appending to a data frame row by row took 30 min, and creating a data frame from a list of dictionaries completed within seconds.</p>\n\n<pre><code>rows_list = []\n\nfor row in input_rows:\n\n dict1 = {}\n\n # get input row in dictionary format\n\n # key = col_name\n\n dict1.update(blah..) \n\n rows_list.append(dict1)\n\ndf = pd.DataFrame(rows_list) \n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	983
How can I compare two lists in python and return matches	<p>Not the most efficient one, but by far the most obvious way to do it is:</p>\n\n<pre><code>>>> a = [1, 2, 3, 4, 5]\n\n>>> b = [9, 8, 7, 6, 5]\n\n>>> set(a) & set(b)\n\n{5}\n\n</code></pre>\n\n<p>if order is significant you can do it with list comprehensions like this:</p>\n\n<pre><code>>>> [i for i, j in zip(a, b) if i == j]\n\n[5]\n\n</code></pre>\n\n<p>(only works for equal-sized lists, which order-significance implies).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	984
How to generate all permutations of a list?	<p><strong>Starting with Python 2.6</strong> (and if you're on Python 3) you have a <strong>standard-library</strong> tool for this: <a href="https://docs.python.org/2/library/itertools.html#itertools.permutations" rel="noreferrer"><code>itertools.permutations</code></a>.</p>\n\n<pre><code>import itertools\n\nlist(itertools.permutations([1, 2, 3]))\n\n</code></pre>\n\n<hr>\n\n<p>If you're using an <strong>older Python (<2.6)</strong> for some reason or are just curious to know how it works, here's one nice approach, taken from <a href="http://code.activestate.com/recipes/252178/" rel="noreferrer">http://code.activestate.com/recipes/252178/</a>:</p>\n\n<pre><code>def all_perms(elements):\n\n if len(elements) <=1:\n\n yield elements\n\n else:\n\n for perm in all_perms(elements[1:]):\n\n for i in range(len(elements)):\n\n # nb elements[0:1] works in both string and list contexts\n\n yield perm[:i] + elements[0:1] + perm[i:]\n\n</code></pre>\n\n<p>A couple of alternative approaches are listed in the documentation of <code>itertools.permutations</code>. Here's one:</p>\n\n<pre><code>def permutations(iterable, r=None):\n\n # permutations('ABCD', 2) --> AB AC AD BA BC BD CA CB CD DA DB DC\n\n # permutations(range(3)) --> 012 021 102 120 201 210\n\n pool = tuple(iterable)\n\n n = len(pool)\n\n r = n if r is None else r\n\n if r > n:\n\n return\n\n indices = range(n)\n\n cycles = range(n, n-r, -1)\n\n yield tuple(pool[i] for i in indices[:r])\n\n while n:\n\n for i in reversed(range(r)):\n\n cycles[i] -= 1\n\n if cycles[i] == 0:\n\n indices[i:] = indices[i+1:] + indices[i:i+1]\n\n cycles[i] = n - i\n\n else:\n\n j = cycles[i]\n\n indices[i], indices[-j] = indices[-j], indices[i]\n\n yield tuple(pool[i] for i in indices[:r])\n\n break\n\n else:\n\n return\n\n</code></pre>\n\n<p>And another, based on <code>itertools.product</code>:</p>\n\n<pre><code>def permutations(iterable, r=None):\n\n pool = tuple(iterable)\n\n n = len(pool)\n\n r = n if r is None else r\n\n for indices in product(range(n), repeat=r):\n\n if len(set(indices)) == r:\n\n yield tuple(pool[i] for i in indices)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	985
How to parse JSON in Python?	<p>Very simple:</p>\n\n<pre><code>import json\n\ndata = json.loads('{"one" : "1", "two" : "2", "three" : "3"}')\n\nprint data['two']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	986
How can I make one python file run another?	<p>There are more than a few ways. I'll list them in order of inverted preference (<em>i.e.</em>, best first, worst last):</p>\n\n<ol>\n\n<li><strong>Treat it like a module:</strong> <code>import file</code>. This is good because it's secure, fast, and maintainable. Code gets reused as it's supposed to be done. Most Python libraries run using multiple methods stretched over lots of files. Highly recommended. Note that if your file is called <code>file.py</code>, your <code>import</code> should <em>not</em> include the <code>.py</code> extension at the end.</li>\n\n<li><strong>The infamous (and unsafe) <a href="http://docs.python.org/library/functions.html#exec" rel="noreferrer">exec</a> command:</strong> Insecure, hacky, usually the wrong answer. Avoid where possible.\n\n<ul>\n\n<li><code>execfile('file.py')</code> in Python 2</li>\n\n<li><code>exec(open('file.py').read())</code> in Python 3</li>\n\n</ul></li>\n\n<li><strong>Spawn a shell process:</strong> <code>os.system('python file.py')</code>. Use when desperate.</li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	987
Convert datetime object to a String of date only in Python	<p>You can use <a href="http://docs.python.org/2/library/time.html#time.strftime" rel="noreferrer">strftime</a> to help you format your date.</p>\n\n<p>E.g.,</p>\n\n<pre><code>import datetime\n\nt = datetime.datetime(2012, 2, 23, 0, 0)\n\nt.strftime('%m/%d/%Y')\n\n</code></pre>\n\n<p>will yield:</p>\n\n<pre><code>'02/23/2012'\n\n</code></pre>\n\n<p>More information about formatting see <a href="http://docs.python.org/library/datetime.html#strftime-strptime-behavior" rel="noreferrer">here</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	988
You need to install postgresql-server-dev-X.Y for building a server-side extension or libpq-dev for building a client-side application	<p>Use these following commands, this will solve the error:</p>\n\n<pre><code>sudo apt-get install postgresql\n\n</code></pre>\n\n<p>then fire:</p>\n\n<pre><code>sudo apt-get install python-psycopg2\n\n</code></pre>\n\n<p>and last:</p>\n\n<pre><code>sudo apt-get install libpq-dev\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	989
How to know if an object has an attribute in Python	<p>You can use <code>hasattr()</code> or catch <code>AttributeError</code>, but if you really just want the value of the attribute with a default if it isn't there, the best option is just to use <a href="https://docs.python.org/library/functions.html#getattr" rel="noreferrer"><code>getattr()</code></a>:</p>\n\n<pre><code>getattr(a, 'property', 'default value')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	990
How to query as GROUP BY in django?	<p>If you mean to do aggregation you can use the <a href="http://docs.djangoproject.com/en/dev/topics/db/aggregation/#topics-db-aggregation" rel="noreferrer">aggregation features of the ORM</a>:</p>\n\n<pre><code>from django.db.models import Count\n\nMembers.objects.values('designation').annotate(dcount=Count('designation'))\n\n</code></pre>\n\n<p>This results in a query similar to</p>\n\n<pre><code>SELECT designation, COUNT(designation) AS dcount\n\nFROM members GROUP BY designation\n\n</code></pre>\n\n<p>and the output would be of the form</p>\n\n<pre><code>[{'designation': 'Salesman', 'dcount': 2}, \n\n {'designation': 'Manager', 'dcount': 2}]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	991
Python Logging (function name, file name, line number) using a single file	<p>The correct answer for this is to use the already provided <a href="https://docs.python.org/2/library/logging.html#logrecord-attributes"><code>funcName</code></a> variable </p>\n\n<pre><code>import logging\n\nlogger = logging.getLogger('root')\n\nFORMAT = "[%(filename)s:%(lineno)s - %(funcName)20s() ] %(message)s"\n\nlogging.basicConfig(format=FORMAT)\n\nlogger.setLevel(logging.DEBUG)\n\n</code></pre>\n\n<p>Then anywhere you want, just add:</p>\n\n<pre><code>logger.debug('your message') \n\n</code></pre>\n\n<p>Example output from a script I'm working on right now:</p>\n\n<pre><code>[invRegex.py:150 - handleRange() ] ['[A-Z]']\n\n[invRegex.py:155 - handleRepetition() ] [[<__main__.CharacterRangeEmitter object at 0x10ba03050>, '{', '1', '}']]\n\n[invRegex.py:197 - handleMacro() ] ['\\d']\n\n[invRegex.py:155 - handleRepetition() ] [[<__main__.CharacterRangeEmitter object at 0x10ba03950>, '{', '1', '}']]\n\n[invRegex.py:210 - handleSequence() ] [[<__main__.GroupEmitter object at 0x10b9fedd0>, <__main__.GroupEmitter object at 0x10ba03ad0>]]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	992
multiprocessing.Pool: What's the difference between map_async and imap?	<p>There are two key differences between <code>imap</code>/<code>imap_unordered</code> and <code>map</code>/<code>map_async</code>:</p>\n\n<ol>\n\n<li>The way they consume the iterable you pass to them.</li>\n\n<li>The way they return the result back to you.</li>\n\n</ol>\n\n<p><code>map</code> consumes your iterable by converting the iterable to a list (assuming it isn't a list already), breaking it into chunks, and sending those chunks to the worker processes in the <code>Pool</code>. Breaking the iterable into chunks performs better than passing each item in the iterable between processes one item at a time - particularly if the iterable is large. However, turning the iterable into a list in order to chunk it can have a very high memory cost, since the entire list will need to be kept in memory. </p>\n\n<p><code>imap</code> doesn't turn the iterable you give it into a list, nor does break it into chunks (by default). It will iterate over the iterable one element at a time, and send them each to a worker process. This means you don't take the memory hit of converting the whole iterable to a list, but it also means the performance is slower for large iterables, because of the lack of chunking. This can be mitigated by passing a <code>chunksize</code> argument larger than default of 1, however.</p>\n\n<p>The other major difference between <code>imap</code>/<code>imap_unordered</code> and <code>map</code>/<code>map_async</code>, is that with <code>imap</code>/<code>imap_unordered</code>, you can start receiving results from workers as soon as they're ready, rather than having to wait for all of them to be finished. With <code>map_async</code>, an <code>AsyncResult</code> is returned right away, but you can't actually retrieve results from that object until all of them have been processed, at which points it returns the same list that <code>map</code> does (<code>map</code> is actually implemented internally as <code>map_async(...).get()</code>). There's no way to get partial results; you either have the entire result, or nothing.</p>\n\n<p><code>imap</code> and <code>imap_unordered</code> both return iterables right away. With <code>imap</code>, the results will be yielded from the iterable as soon as they're ready, while still preserving the ordering of the input iterable. With <code>imap_unordered</code>, results will be yielded as soon as they're ready, regardless of the order of the input iterable. So, say you have this:</p>\n\n<pre><code>import multiprocessing\n\nimport time\n\ndef func(x):\n\n time.sleep(x)\n\n return x + 2\n\nif __name__ == "__main__": \n\n p = multiprocessing.Pool()\n\n start = time.time()\n\n for x in p.imap(func, [1,5,3]):\n\n print("{} (Time elapsed: {}s)".format(x, int(time.time() - start)))\n\n</code></pre>\n\n<p>This will output:</p>\n\n<pre><code>3 (Time elapsed: 1s)\n\n7 (Time elapsed: 5s)\n\n5 (Time elapsed: 5s)\n\n</code></pre>\n\n<p>If you use <code>p.imap_unordered</code> instead of <code>p.imap</code>, you'll see:</p>\n\n<pre><code>3 (Time elapsed: 1s)\n\n5 (Time elapsed: 3s)\n\n7 (Time elapsed: 5s)\n\n</code></pre>\n\n<p>If you use <code>p.map</code> or <code>p.map_async().get()</code>, you'll see:</p>\n\n<pre><code>3 (Time elapsed: 5s)\n\n7 (Time elapsed: 5s)\n\n5 (Time elapsed: 5s)\n\n</code></pre>\n\n<p>So, the primary reasons to use <code>imap</code>/<code>imap_unordered</code> over <code>map_async</code> are:</p>\n\n<ol>\n\n<li>Your iterable is large enough that converting it to a list would cause you to run out of/use too much memory.</li>\n\n<li>You want to be able to start processing the results before <em>all</em> of them are completed.</li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	993
Converting string into datetime	<p>Check out <a href="http://docs.python.org/3/library/time.html#time.strptime" rel="noreferrer">strptime</a> in the <a href="http://docs.python.org/3/library/time.html" rel="noreferrer">time</a> module. It is the inverse of <a href="http://docs.python.org/3/library/time.html#time.strftime" rel="noreferrer">strftime</a>.</p>\n\n<pre><code>$ python\n\n>>> import time\n\n>>> my_time = time.strptime('Jun 1 2005 1:33PM', '%b %d %Y %I:%M%p')\n\ntime.struct_time(tm_year=2005, tm_mon=6, tm_mday=1,\n\n tm_hour=13, tm_min=33, tm_sec=0,\n\n tm_wday=2, tm_yday=152, tm_isdst=-1)\n\ntimestamp = time.mktime(my_time)\n\n# convert time object to datetime\n\nfrom datetime import datetime\n\nmy_datetime = datetime.fromtimestamp(timestamp)\n\n# convert time object to date\n\nfrom datetime import date\n\nmy_date = date.fromtimestamp(timestamp)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	994
How to extract numbers from a string in Python?	<p>If you only want to extract only positive integers, try the following:</p>\n\n<pre><code>>>> str = "h3110 23 cat 444.4 rabbit 11 2 dog"\n\n>>> [int(s) for s in str.split() if s.isdigit()]\n\n[23, 11, 2]\n\n</code></pre>\n\n<p>I would argue that this is better than the regex example for three reasons. First, you don't need another module; secondly, it's more readable because you don't need to parse the regex mini-language; and third, it is faster (and thus likely more pythonic):</p>\n\n<pre><code>python -m timeit -s "str = 'h3110 23 cat 444.4 rabbit 11 2 dog' * 1000" "[s for s in str.split() if s.isdigit()]"\n\n100 loops, best of 3: 2.84 msec per loop\n\npython -m timeit -s "import re" "str = 'h3110 23 cat 444.4 rabbit 11 2 dog' * 1000" "re.findall('\\b\\d+\\b', str)"\n\n100 loops, best of 3: 5.66 msec per loop\n\n</code></pre>\n\n<p>This will not recognize floats, negative integers, or integers in hexadecimal format. If you can't accept these limitations, <a href="https://stackoverflow.com/questions/4289331/python-extract-numbers-of-a-string/4289415#4289415">slim's answer below</a> will do the trick.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	995
Fixed digits after decimal with f-strings	<p>Include the type specifier in your format expression:</p>\n\n<pre><code>>>> a = 10.1234\n\n>>> f'{a:.2f}'\n\n'10.12'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	996
What is __init__.py for?	<p>In addition to labeling a directory as a Python package and defining <code>__all__</code>, <strong><code>__init__.py</code> allows you to define any variable at the package level.</strong> Doing so is often convenient if a package defines something that will be imported frequently, in an API-like fashion. This pattern promotes adherence to the Pythonic "flat is better than nested" philosophy.</p>\n\n<h2>An example</h2>\n\n<p>Here is an example from one of my projects, in which I frequently import a <code>sessionmaker</code> called <code>Session</code> to interact with my database. I wrote a "database" package with a few modules:</p>\n\n<pre><code>database/\n\n __init__.py\n\n schema.py\n\n insertions.py\n\n queries.py\n\n</code></pre>\n\n<p>My <code>__init__.py</code> contains the following code:</p>\n\n<pre><code>import os\n\nfrom sqlalchemy.orm import sessionmaker\n\nfrom sqlalchemy import create_engine\n\nengine = create_engine(os.environ['DATABASE_URL'])\n\nSession = sessionmaker(bind=engine)\n\n</code></pre>\n\n<p>Since I define <code>Session</code> here, I can start a new session using the syntax below. This code would be the same executed from inside or outside of the "database" package directory.</p>\n\n<pre><code>from database import Session\n\nsession = Session()\n\n</code></pre>\n\n<p>Of course, this is a small convenience -- the alternative would be to define <code>Session</code> in a new file like "create_session.py" in my database package, and start new sessions using:</p>\n\n<pre><code>from database.create_session import Session\n\nsession = Session()\n\n</code></pre>\n\n<h2>Further reading</h2>\n\n<p>There is a pretty interesting reddit thread covering appropriate uses of <code>__init__.py</code> here:</p>\n\n<p><a href="http://www.reddit.com/r/Python/comments/1bbbwk/whats_your_opinion_on_what_to_include_in_init_py/">http://www.reddit.com/r/Python/comments/1bbbwk/whats_your_opinion_on_what_to_include_in_init_py/</a></p>\n\n<p>The majority opinion seems to be that <code>__init__.py</code> files should be very thin to avoid violating the "explicit is better than implicit" philosophy.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	997
Python Image Library fails with message "decoder JPEG not available" - PIL	<p>libjpeg-dev is required to be able to process jpegs with pillow (or PIL), so you need to install it and then recompile pillow. It also seems that libjpeg8-dev is needed on Ubuntu 14.04</p>\n\n<p>If you're still using PIL then you should really be using pillow these days though, so first <code>pip uninstall PIL</code> before following these instructions to switch, or if you have a good reason for sticking with PIL then replace "pillow" with "PIL" in the below).</p>\n\n<p>On Ubuntu:</p>\n\n<pre><code># install libjpeg-dev with apt\n\nsudo apt-get install libjpeg-dev\n\n# if you're on Ubuntu 14.04, also install this\n\nsudo apt-get install libjpeg8-dev\n\n# reinstall pillow\n\npip install --no-cache-dir -I pillow\n\n</code></pre>\n\n<p>If that doesn't work, try one of the below, depending on whether you are on 64bit or 32bit Ubuntu.</p>\n\n<p>For Ubuntu x64:</p>\n\n<pre><code>sudo ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib\n\nsudo ln -s /usr/lib/x86_64-linux-gnu/libfreetype.so /usr/lib\n\nsudo ln -s /usr/lib/x86_64-linux-gnu/libz.so /usr/lib\n\n</code></pre>\n\n<p>Or for Ubuntu 32bit:</p>\n\n<pre><code>sudo ln -s /usr/lib/i386-linux-gnu/libjpeg.so /usr/lib/\n\nsudo ln -s /usr/lib/i386-linux-gnu/libfreetype.so.6 /usr/lib/\n\nsudo ln -s /usr/lib/i386-linux-gnu/libz.so /usr/lib/\n\n</code></pre>\n\n<p>Then reinstall pillow:</p>\n\n<pre><code>pip install --no-cache-dir -I pillow\n\n</code></pre>\n\n<p>(Edits to include feedback from comments. Thanks Charles Offenbacher for pointing out this differs for 32bit, and t-mart for suggesting use of <code>--no-cache-dir</code>).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	998
How do you get the logical xor of two variables in Python?	<p>You can always use the definition of xor to compute it from other logical operations:</p>\n\n<pre><code>(a and not b) or (not a and b)\n\n</code></pre>\n\n<p>But this is a little too verbose for me, and isn't particularly clear at first glance. Another way to do it is:</p>\n\n<pre><code>bool(a) ^ bool(b)\n\n</code></pre>\n\n<p>The xor operator on two booleans is logical xor (unlike on ints, where it's bitwise). Which makes sense, since <a href="http://docs.python.org/library/functions.html?highlight=bool#bool" rel="noreferrer"><code>bool</code> is just a subclass of <code>int</code></a>, but is implemented to only have the values <code>0</code> and <code>1</code>. And logical xor is equivalent to bitwise xor when the domain is restricted to <code>0</code> and <code>1</code>.</p>\n\n<p>So the <code>logical_xor</code> function would be implemented like:</p>\n\n<pre><code>def logical_xor(str1, str2):\n\n return bool(str1) ^ bool(str2)\n\n</code></pre>\n\n<p>Credit to <a href="http://mail.python.org/pipermail/python-3000/2007-December/011560.html" rel="noreferrer">Nick Coghlan on the Python-3000 mailing list</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	999
Sorting list based on values from another list?	<p><strong>Shortest Code</strong></p>\n\n<pre><code>[x for _,x in sorted(zip(Y,X))]\n\n</code></pre>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>X = ["a", "b", "c", "d", "e", "f", "g", "h", "i"]\n\nY = [ 0, 1, 1, 0, 1, 2, 2, 0, 1]\n\nZ = [x for _,x in sorted(zip(Y,X))]\n\nprint(Z) # ["a", "d", "h", "b", "c", "e", "i", "f", "g"]\n\n</code></pre>\n\n<hr>\n\n<p><strong>Generally Speaking</strong></p>\n\n<pre><code>[x for _, x in sorted(zip(Y,X), key=lambda pair: pair[0])]\n\n</code></pre>\n\n<p><strong>Explained:</strong></p>\n\n<ol>\n\n<li><a href="https://docs.python.org/3/library/functions.html#zip" rel="noreferrer"><code>zip</code></a> the two <code>list</code>s.</li>\n\n<li>create a new, sorted <code>list</code> based on the <code>zip</code> using <a href="https://www.programiz.com/python-programming/methods/built-in/sorted" rel="noreferrer"><code>sorted()</code></a>.</li>\n\n<li>using a list comprehension <em>extract</em> the first elements of each pair from the sorted, zipped <code>list</code>.</li>\n\n</ol>\n\n<p><em>For more information on how to set\use the <code>key</code> parameter as well as the <code>sorted</code> function in general, take a look at <a href="http://pythoncentral.io/how-to-sort-a-list-tuple-or-object-with-sorted-in-python/" rel="noreferrer">this</a>.</em></p>\n\n<hr>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1000
How to split a string into a list?	<pre><code>text.split()\n\n</code></pre>\n\n<p>This should be enough to store each word in a list. <code>words</code> is already a list of the words from the sentence, so there is no need for the loop.</p>\n\n<p>Second, it might be a typo, but you have your loop a little messed up. If you really did want to use append, it would be:</p>\n\n<pre><code>words.append(word)\n\n</code></pre>\n\n<p>not </p>\n\n<pre><code>word.append(words)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1001
Why is python setup.py saying invalid command 'bdist_wheel' on Travis CI?	<p>Had to install the <code>wheel</code> package. Everything was up to date but still giving the error.</p>\n\n<pre><code>pip install wheel\n\n</code></pre>\n\n<p>then</p>\n\n<pre><code>python setup.py bdist_wheel \n\n</code></pre>\n\n<p>Worked without issues.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1002
How to store a dataframe using Pandas	<p>The easiest way is to <a href="http://docs.python.org/2/library/pickle.html" rel="noreferrer">pickle</a> it using <a href="http://pandas.pydata.org/pandas-docs/stable/io.html#pickling" rel="noreferrer"><code>to_pickle</code></a>:</p>\n\n<pre><code>df.to_pickle(file_name) # where to save it, usually as a .pkl\n\n</code></pre>\n\n<p>Then you can load it back using:</p>\n\n<pre><code>df = pd.read_pickle(file_name)\n\n</code></pre>\n\n<p><em>Note: before 0.11.1 <code>save</code> and <code>load</code> were the only way to do this (they are now deprecated in favor of <code>to_pickle</code> and <code>read_pickle</code> respectively).</em></p>\n\n<hr>\n\n<p>Another popular choice is to use <a href="http://pandas.pydata.org/pandas-docs/stable/io.html#hdf5-pytables" rel="noreferrer">HDF5</a> (<a href="http://www.pytables.org" rel="noreferrer">pytables</a>) which offers <a href="https://stackoverflow.com/questions/16628329/hdf5-and-sqlite-concurrency-compression-i-o-performance">very fast</a> access times for large datasets:</p>\n\n<pre><code>store = HDFStore('store.h5')\n\nstore['df'] = df # save it\n\nstore['df'] # load it\n\n</code></pre>\n\n<p><em>More advanced strategies are discussed in the <a href="http://pandas-docs.github.io/pandas-docs-travis/#pandas-powerful-python-data-analysis-toolkit" rel="noreferrer">cookbook</a>.</em></p>\n\n<hr>\n\n<p>Since 0.13 there's also <a href="http://pandas.pydata.org/pandas-docs/stable/io.html#msgpack-experimental" rel="noreferrer">msgpack</a> which may be be better for interoperability, as a faster alternative to JSON, or if you have python object/text-heavy data (see <a href="https://stackoverflow.com/q/30651724/1240268">this question</a>).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1003
How do I check if a given Python string is a substring of another one?	<p>Try using <code>in</code> like this:</p>\n\n<pre><code>>>> x = 'hello'\n\n>>> y = 'll'\n\n>>> y in x\n\nTrue\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1004
How do I get the picture size with PIL?	<pre><code>from PIL import Image\n\nim = Image.open('whatever.png')\n\nwidth, height = im.size\n\n</code></pre>\n\n<p>According to the <a href="http://effbot.org/imagingbook/image.htm" rel="noreferrer">documentation</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1005
builtins.TypeError: must be str, not bytes	<p>The outfile should be in binary mode.</p>\n\n<pre><code>outFile = open('output.xml', 'wb')\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1006
Use of *args and **kwargs	<p>One place where the use of <code>*args</code> and <code>**kwargs</code> is quite useful is for subclassing.</p>\n\n<pre><code>class Foo(object):\n\n def __init__(self, value1, value2):\n\n # do something with the values\n\n print value1, value2\n\nclass MyFoo(Foo):\n\n def __init__(self, *args, **kwargs):\n\n # do something else, don't care about the args\n\n print 'myfoo'\n\n super(MyFoo, self).__init__(*args, **kwargs)\n\n</code></pre>\n\n<p>This way you can extend the behaviour of the Foo class, without having to know too much about Foo. This can be quite convenient if you are programming to an API which might change. MyFoo just passes all arguments to the Foo class.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1007
Generate random integers between 0 and 9	<pre><code>import random\n\nprint(random.randint(0,9))\n\n</code></pre>\n\n<hr>\n\n<pre><code>random.randint(a, b)\n\n</code></pre>\n\n<p>Return a random integer N such that a <= N <= b.</p>\n\n<p>Docs: <a href="https://docs.python.org/3.1/library/random.html#random.randint" rel="noreferrer">https://docs.python.org/3.1/library/random.html#random.randint</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1008
Get the first item from an iterable that matches a condition	<p>In Python 2.6 or newer:</p>\n\n<p>If you want <code>StopIteration</code> to be raised if no matching element is found:</p>\n\n<pre class="lang-py prettyprint-override"><code>next(x for x in the_iterable if x > 3)\n\n</code></pre>\n\n<p>If you want <code>default_value</code> (e.g. <code>None</code>) to be returned instead:</p>\n\n<pre class="lang-py prettyprint-override"><code>next((x for x in the_iterable if x > 3), default_value)\n\n</code></pre>\n\n<p>Note that you need an extra pair of parentheses around the generator expression in this case â they are needed whenever the generator expression isn't the only argument.</p>\n\n<p>I see most answers resolutely ignore the <a href="https://docs.python.org/2/library/functions.html#next" rel="noreferrer"><code>next</code></a> built-in and so I assume that for some mysterious reason they're 100% focused on versions 2.5 and older -- without mentioning the Python-version issue (but then I don't see that mention in the answers that <em>do</em> mention the <code>next</code> built-in, which is why I thought it necessary to provide an answer myself -- at least the "correct version" issue gets on record this way;-).</p>\n\n<p>In 2.5, the <a href="https://docs.python.org/2.5/ref/yieldexpr.html#l2h-407" rel="noreferrer"><code>.next()</code></a> method of iterators immediately raises <code>StopIteration</code> if the iterator immediately finishes -- i.e., for your use case, if no item in the iterable satisfies the condition. If you don't care (i.e., you know there <strong>must</strong> be at least one satisfactory item) then just use <code>.next()</code> (best on a genexp, line for the <code>next</code> built-in in Python 2.6 and better).</p>\n\n<p>If you <em>do</em> care, wrapping things in a function as you had first indicated in your Q seems best, and while the function implementation you proposed is just fine, you could alternatively use <code>itertools</code>, a <code>for...: break</code> loop, or a genexp, or a <code>try/except StopIteration</code> as the function's body, as various answers suggested. There's not much added value in any of these alternatives so I'd go for the starkly-simple version you first proposed.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1009
How do I install pip on macOS or OS X?	<p>You can install it through Homebrew on OS X. Why would you install Python with Homebrew?</p>\n\n<blockquote>\n\n <p>The version of Python that ships with OS X is great for learning but\n\n itâs not good for development. The version shipped with OS X may be\n\n out of date from the official current Python release, which is\n\n considered the stable production version. (<a href="http://docs.python-guide.org/en/latest/starting/install/osx/">source</a>)</p>\n\n</blockquote>\n\n<p>Homebrew is something of a package manager for OS X. Find more details on the <a href="http://mxcl.github.io/homebrew/">Homebrew page</a>. Once Homebrew is installed, run the following to install the latest Python, Pip & Setuptools:</p>\n\n<pre><code>brew install python\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1010
What do the python file extensions, .pyc .pyd .pyo stand for?	<ol>\n\n<li><code>.py</code>: This is normally the input source code that you've written.</li>\n\n<li><code>.pyc</code>: This is the compiled bytecode. If you import a module, python will build a <code>*.pyc</code> file that contains the bytecode to make importing it again later easier (and faster).</li>\n\n<li><code>.pyo</code>: This was a file format used before Python 3.5 for <code>*.pyc</code> files that were created with optimizations (<code>-O</code>) flag. (see the note below)</li>\n\n<li><code>.pyd</code>: This is basically a windows dll file. <a href="http://docs.python.org/faq/windows.html#is-a-pyd-file-the-same-as-a-dll" rel="noreferrer">http://docs.python.org/faq/windows.html#is-a-pyd-file-the-same-as-a-dll</a></li>\n\n</ol>\n\n<p>Also for some further discussion on <code>.pyc</code> vs <code>.pyo</code>, take a look at: <a href="https://web.archive.org/web/20160130165632/http://www.network-theory.co.uk/docs/pytut/CompiledPythonfiles.html" rel="noreferrer">http://www.network-theory.co.uk/docs/pytut/CompiledPythonfiles.html</a> (I've copied the important part below)</p>\n\n<blockquote>\n\n <ul>\n\n <li>When the Python interpreter is invoked with the -O flag, optimized code is generated and stored in â.pyoâ files. The optimizer currently doesn't help much; it only removes assert statements. When -O is used, all bytecode is optimized; .pyc files are ignored and .py files are compiled to optimized bytecode.</li>\n\n <li>Passing two -O flags to the Python interpreter (-OO) will cause the bytecode compiler to perform optimizations that could in some rare cases result in malfunctioning programs. Currently only <code>__doc__</code> strings are removed from the bytecode, resulting in more compact â.pyoâ files. Since some programs may rely on having these available, you should only use this option if you know what you're doing.</li>\n\n <li>A program doesn't run any faster when it is read from a â.pycâ or â.pyoâ file than when it is read from a â.pyâ file; the only thing that's faster about â.pycâ or â.pyoâ files is the speed with which they are loaded.</li>\n\n <li>When a script is run by giving its name on the command line, the bytecode for the script is never written to a â.pycâ or â.pyoâ file. Thus, the startup time of a script may be reduced by moving most of its code to a module and having a small bootstrap script that imports that module. It is also possible to name a â.pycâ or â.pyoâ file directly on the command line.</li>\n\n </ul>\n\n</blockquote>\n\n<p><strong>Note:</strong> </p>\n\n<p>On 2015-09-15 the <a href="https://docs.python.org/3/whatsnew/3.5.html#pep-488-elimination-of-pyo-files" rel="noreferrer">Python 3.5 release</a> implemented PEP-488 and eliminated <code>.pyo</code> files. \n\nThis means that <code>.pyc</code> files represent both unoptimized and optimized bytecode.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1011
Get difference between two lists	<p>The existing solutions all offer either one or the other of:</p>\n\n<ul>\n\n<li>Faster than O(n*m) performance.</li>\n\n<li>Preserve order of input list.</li>\n\n</ul>\n\n<p>But so far no solution has both. If you want both, try this:</p>\n\n<pre><code>s = set(temp2)\n\ntemp3 = [x for x in temp1 if x not in s]\n\n</code></pre>\n\n<p><strong>Performance test</strong></p>\n\n<pre><code>import timeit\n\ninit = 'temp1 = list(range(100)); temp2 = [i * 2 for i in range(50)]'\n\nprint timeit.timeit('list(set(temp1) - set(temp2))', init, number = 100000)\n\nprint timeit.timeit('s = set(temp2);[x for x in temp1 if x not in s]', init, number = 100000)\n\nprint timeit.timeit('[item for item in temp1 if item not in temp2]', init, number = 100000)\n\n</code></pre>\n\n<p>Results:</p>\n\n<pre><code>4.34620224079 # ars' answer\n\n4.2770634955 # This answer\n\n30.7715615392 # matt b's answer\n\n</code></pre>\n\n<p>The method I presented as well as preserving order is also (slightly) faster than the set subtraction because it doesn't require construction of an unnecessary set. The performance difference would be more noticable if the first list is considerably longer than the second and if hashing is expensive. Here's a second test demonstrating this:</p>\n\n<pre><code>init = '''\n\ntemp1 = [str(i) for i in range(100000)]\n\ntemp2 = [str(i * 2) for i in range(50)]\n\n'''\n\n</code></pre>\n\n<p>Results:</p>\n\n<pre><code>11.3836875916 # ars' answer\n\n3.63890368748 # this answer (3 times faster!)\n\n37.7445402279 # matt b's answer\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1012
Print in one line dynamically	<p>Change <code>print item</code> to:</p>\n\n<ul>\n\n<li><code>print item,</code> in Python 2.7</li>\n\n<li><code>print(item, end=" ")</code> in Python 3</li>\n\n</ul>\n\n<p>If you want to print the data dynamically use following syntax:</p>\n\n<ul>\n\n<li><code>print(item, sep=' ', end='', flush=True)</code> in Python 3</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1013
How do you test that a Python function throws an exception?	<p>Since Python 2.7 you can use context manager to get ahold of the actual Exception object thrown:</p>\n\n<pre><code>import unittest\n\ndef broken_function():\n\n raise Exception('This is broken')\n\nclass MyTestCase(unittest.TestCase):\n\n def test(self):\n\n with self.assertRaises(Exception) as context:\n\n broken_function()\n\n self.assertTrue('This is broken' in context.exception)\n\nif __name__ == '__main__':\n\n unittest.main()\n\n</code></pre>\n\n<p><a href="http://docs.python.org/dev/library/unittest.html#unittest.TestCase.assertRaises" rel="noreferrer">http://docs.python.org/dev/library/unittest.html#unittest.TestCase.assertRaises</a></p>\n\n<hr>\n\n<p>In <strong>Python 3.5</strong>, you have to wrap <code>context.exception</code> in <code>str</code>, otherwise you'll get a <code>TypeError</code></p>\n\n<pre><code>self.assertTrue('This is broken' in str(context.exception))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1014
How do I get the parent directory in Python?	<h1><strong>Update from Python 3.4</strong></h1>\n\n<p>Use the <code>pathlib</code> module.</p>\n\n<pre><code>from pathlib import Path\n\npath = Path("/here/your/path/file.txt")\n\nprint(path.parent)\n\n</code></pre>\n\n<h1><strong>Old answer</strong></h1>\n\n<p>Try this:</p>\n\n<pre><code>import os.path\n\nprint os.path.abspath(os.path.join(yourpath, os.pardir))\n\n</code></pre>\n\n<p>where <code>yourpath</code> is the path you want the parent for.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1015
How do I resize an image using PIL and maintain its aspect ratio?	<p>Define a maximum size.\n\nThen, compute a resize ratio by taking <code>min(maxwidth/width, maxheight/height)</code>.</p>\n\n<p>The proper size is <code>oldsize*ratio</code>.</p>\n\n<p>There is of course also a library method to do this: the method <code>Image.thumbnail</code>.<br>\n\nBelow is an (edited) example from the <a href="http://effbot.org/imagingbook/introduction.htm" rel="noreferrer">PIL documentation</a>.</p>\n\n<pre><code>import os, sys\n\nimport Image\n\nsize = 128, 128\n\nfor infile in sys.argv[1:]:\n\n outfile = os.path.splitext(infile)[0] + ".thumbnail"\n\n if infile != outfile:\n\n try:\n\n im = Image.open(infile)\n\n im.thumbnail(size, Image.ANTIALIAS)\n\n im.save(outfile, "JPEG")\n\n except IOError:\n\n print "cannot create thumbnail for '%s'" % infile\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1016
join list of lists in python	<pre><code>import itertools\n\na = [['a','b'], ['c']]\n\nprint(list(itertools.chain.from_iterable(a)))\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1017
Is a Python list guaranteed to have its elements stay in the order they are inserted in?	<p>Yes, the order of elements in a python list is persistent.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1018
'too many values to unpack', iterating over a dict. key=>string, value=>list	<h2>Python 2</h2>\n\n<p>You need to use something like <a href="http://docs.python.org/library/stdtypes.html#dict.iteritems" rel="noreferrer"><code>iteritems</code></a>.</p>\n\n<pre><code>for field, possible_values in fields.iteritems():\n\n print field, possible_values\n\n</code></pre>\n\n<p>See <a href="https://stackoverflow.com/a/3294899/1489538">this answer</a> for more information on iterating through dictionaries, such as using <code>items()</code>, across python versions.</p>\n\n<h2>Python 3</h2>\n\n<p>Since <b>Python 3</b> <code>iteritems()</code> is <a href="https://docs.python.org/3/whatsnew/3.0.html#views-and-iterators-instead-of-lists" rel="noreferrer">no longer supported</a>. Use <code>items()</code> instead.</p>\n\n<pre><code>for field, possible_values in fields.items():\n\n print(field, possible_values)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1019
libxml install error using pip	<blockquote>\n\n <p>** make sure the development packages of libxml2 and libxslt are installed **</p>\n\n</blockquote>\n\n<p>From the <a href="https://lxml.de/installation.html#requirements" rel="noreferrer">lxml documentation</a>, assuming you are running a Debian-based distribution :</p>\n\n<pre><code>sudo apt-get install libxml2-dev libxslt-dev python-dev\n\n</code></pre>\n\n<p>For Debian based systems, it should be enough to install the known build dependencies of <code>python-lxml</code> or <code>python3-lxml</code>, e.g.</p>\n\n<pre><code>sudo apt-get build-dep python3-lxml\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1020
How do I get the path of the Python script I am running in?	<p><code>os.path.realpath(__file__)</code> will give you the path of the current file, resolving any symlinks in the path. This works fine on my mac.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1021
Convert DataFrame column type from string to datetime, dd/mm/yyyy format	<p>The easiest way is to use <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.to_datetime.html"><code>to_datetime</code></a>:</p>\n\n<pre><code>df['col'] = pd.to_datetime(df['col'])\n\n</code></pre>\n\n<p>It also offers a <code>dayfirst</code> argument for European times (but beware <a href="https://github.com/pydata/pandas/issues/3341">this isn't strict</a>).</p>\n\n<p>Here it is in action:</p>\n\n<pre><code>In [11]: pd.to_datetime(pd.Series(['05/23/2005']))\n\nOut[11]:\n\n0 2005-05-23 00:00:00\n\ndtype: datetime64[ns]\n\n</code></pre>\n\n<p>You can pass a specific <a href="https://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior">format</a>:</p>\n\n<pre><code>In [12]: pd.to_datetime(pd.Series(['05/23/2005']), format="%m/%d/%Y")\n\nOut[12]:\n\n0 2005-05-23\n\ndtype: datetime64[ns]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1022
List comprehension vs map	<p><strong>Cases</strong></p>\n\n<ul>\n\n<li><strong>Common case</strong>: Almost always, you will want to use a list comprehension in <em>python</em> because it will be more obvious what you're doing to novice programmers reading your code. (This does not apply to other languages, where other idioms may apply.) It will even be more obvious what you're doing to python programmers, since list comprehensions are the de-facto standard in python for iteration; they are <em>expected</em>.</li>\n\n<li><strong>Less-common case</strong>: However if you <em>already have a function defined</em>, it is often reasonable to use <code>map</code>, though it is considered 'unpythonic'. For example, <code>map(sum, myLists)</code> is more elegant/terse than <code>[sum(x) for x in myLists]</code>. You gain the elegance of not having to make up a dummy variable (e.g. <code>sum(x) for x...</code> or <code>sum(_) for _...</code> or <code>sum(readableName) for readableName...</code>) which you have to type twice, just to iterate. The same argument holds for <code>filter</code> and <code>reduce</code> and anything from the <code>itertools</code> module: if you already have a function handy, you could go ahead and do some functional programming. This gains readability in some situations, and loses it in others (e.g. novice programmers, multiple arguments)... but the readability of your code highly depends on your comments anyway.</li>\n\n<li><strong>Almost never</strong>: You may want to use the <code>map</code> function as a pure abstract function while doing functional programming, where you're mapping <code>map</code>, or currying <code>map</code>, or otherwise benefit from talking about <code>map</code> as a function. In Haskell for example, a functor interface called <code>fmap</code> generalizes mapping over any data structure. This is very uncommon in python because the python grammar compels you to use generator-style to talk about iteration; you can't generalize it easily. (This is sometimes good and sometimes bad.) You can probably come up with rare python examples where <code>map(f, *lists)</code> is a reasonable thing to do. The closest example I can come up with would be <code>sumEach = partial(map,sum)</code>, which is a one-liner that is very roughly equivalent to:</li>\n\n</ul>\n\n<p></p>\n\n<pre><code>def sumEach(myLists):\n\n return [sum(_) for _ in myLists]\n\n</code></pre>\n\n<ul>\n\n<li><strong>Just using a <code>for</code>-loop</strong>: You can also of course just use a for-loop. While not as elegant from a functional-programming viewpoint, sometimes non-local variables make code clearer in imperative programming languages such as python, because people are very used to reading code that way. For-loops are also, generally, the most efficient when you are merely doing any complex operation that is not building a list like list-comprehensions and map are optimized for (e.g. summing, or making a tree, etc.) -- at least efficient in terms of memory (not necessarily in terms of time, where I'd expect at worst a constant factor, barring some rare pathological garbage-collection hiccuping).</li>\n\n</ul>\n\n<p><strong>"Pythonism"</strong></p>\n\n<p>I dislike the word "pythonic" because I don't find that pythonic is always elegant in my eyes. Nevertheless, <code>map</code> and <code>filter</code> and similar functions (like the very useful <code>itertools</code> module) are probably considered unpythonic in terms of style.</p>\n\n<p><strong>Laziness</strong></p>\n\n<p>In terms of efficiency, like most functional programming constructs, <strong>MAP CAN BE LAZY</strong>, and in fact is lazy in python. That means you can do this (in <em>python3</em>) and your computer will not run out of memory and lose all your unsaved data:</p>\n\n<pre><code>>>> map(str, range(10**100))\n\n<map object at 0x2201d50>\n\n</code></pre>\n\n<p>Try doing that with a list comprehension:</p>\n\n<pre><code>>>> [str(n) for n in range(10**100)]\n\n# DO NOT TRY THIS AT HOME OR YOU WILL BE SAD #\n\n</code></pre>\n\n<p>Do note that list comprehensions are also inherently lazy, but <em>python has chosen to implement them as non-lazy</em>. Nevertheless, python does support lazy list comprehensions in the form of generator expressions, as follows:</p>\n\n<pre><code>>>> (str(n) for n in range(10**100))\n\n<generator object <genexpr> at 0xacbdef>\n\n</code></pre>\n\n<p>You can basically think of the <code>[...]</code> syntax as passing in a generator expression to the list constructor, like <code>list(x for x in range(5))</code>.</p>\n\n<p><strong>Brief contrived example</strong></p>\n\n<pre><code>from operator import neg\n\nprint({x:x**2 for x in map(neg,range(5))})\n\nprint({x:x**2 for x in [-y for y in range(5)]})\n\nprint({x:x**2 for x in (-y for y in range(5))})\n\n</code></pre>\n\n<p>List comprehensions are non-lazy, so may require more memory (unless you use generator comprehensions). The square brackets <code>[...]</code> often make things obvious, especially when in a mess of parentheses. On the other hand, sometimes you end up being verbose like typing <code>[x for x in...</code>. As long as you keep your iterator variables short, list comprehensions are usually clearer if you don't indent your code. But you could always indent your code.</p>\n\n<pre><code>print(\n\n {x:x**2 for x in (-y for y in range(5))}\n\n)\n\n</code></pre>\n\n<p>or break things up:</p>\n\n<pre><code>rangeNeg5 = (-y for y in range(5))\n\nprint(\n\n {x:x**2 for x in rangeNeg5}\n\n)\n\n</code></pre>\n\n<p><strong>Efficiency comparison for python3</strong></p>\n\n<p><code>map</code> is now lazy:</p>\n\n<pre><code>% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=map(f,xs)'\n\n1000000 loops, best of 3: 0.336 usec per loop ^^^^^^^^^\n\n</code></pre>\n\n<p><em>Therefore if you will not be using all your data, or do not know ahead of time how much data you need, <code>map</code> in python3 (and generator expressions in python2 or python3) will avoid calculating their values until the last moment necessary. Usually this will usually outweigh any overhead from using <code>map</code>. The downside is that this is very limited in python as opposed to most functional languages: you only get this benefit if you access your data left-to-right "in order", because python generator expressions can only be evaluated the order <code>x[0], x[1], x[2], ...</code>.</em></p>\n\n<p>However let's say that we have a pre-made function <code>f</code> we'd like to <code>map</code>, and we ignore the laziness of <code>map</code> by immediately forcing evaluation with <code>list(...)</code>. We get some very interesting results:</p>\n\n<pre><code>% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=list(map(f,xs))' \n\n10000 loops, best of 3: 165/124/135 usec per loop ^^^^^^^^^^^^^^^\n\n for list(<map object>)\n\n% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=[f(x) for x in xs]' \n\n10000 loops, best of 3: 181/118/123 usec per loop ^^^^^^^^^^^^^^^^^^\n\n for list(<generator>), probably optimized\n\n% python3 -mtimeit -s 'xs=range(1000)' 'f=lambda x:x' 'z=list(f(x) for x in xs)' \n\n1000 loops, best of 3: 215/150/150 usec per loop ^^^^^^^^^^^^^^^^^^^^^^\n\n for list(<generator>)\n\n</code></pre>\n\n<p>In results are in the form AAA/BBB/CCC where A was performed with on a circa-2010 Intel workstation with python 3.?.?, and B and C were performed with a circa-2013 AMD workstation with python 3.2.1, with extremely different hardware. The result seems to be that map and list comprehensions are comparable in performance, which is most strongly affected by other random factors. The only thing we can tell seems to be that, oddly, while we expect list comprehensions <code>[...]</code> to perform better than generator expressions <code>(...)</code>, <code>map</code> is ALSO more efficient that generator expressions (again assuming that all values are evaluated/used).</p>\n\n<p>It is important to realize that these tests assume a very simple function (the identity function); however this is fine because if the function were complicated, then performance overhead would be negligible compared to other factors in the program. (It may still be interesting to test with other simple things like <code>f=lambda x:x+x</code>)</p>\n\n<p>If you're skilled at reading python assembly, you can use the <code>dis</code> module to see if that's actually what's going on behind the scenes:</p>\n\n<pre><code>>>> listComp = compile('[f(x) for x in xs]', 'listComp', 'eval')\n\n>>> dis.dis(listComp)\n\n 1 0 LOAD_CONST 0 (<code object <listcomp> at 0x2511a48, file "listComp", line 1>) \n\n 3 MAKE_FUNCTION 0 \n\n 6 LOAD_NAME 0 (xs) \n\n 9 GET_ITER \n\n 10 CALL_FUNCTION 1 \n\n 13 RETURN_VALUE \n\n>>> listComp.co_consts\n\n(<code object <listcomp> at 0x2511a48, file "listComp", line 1>,)\n\n>>> dis.dis(listComp.co_consts[0])\n\n 1 0 BUILD_LIST 0 \n\n 3 LOAD_FAST 0 (.0) \n\n >> 6 FOR_ITER 18 (to 27) \n\n 9 STORE_FAST 1 (x) \n\n 12 LOAD_GLOBAL 0 (f) \n\n 15 LOAD_FAST 1 (x) \n\n 18 CALL_FUNCTION 1 \n\n 21 LIST_APPEND 2 \n\n 24 JUMP_ABSOLUTE 6 \n\n >> 27 RETURN_VALUE\n\n</code></pre>\n\n<p> </p>\n\n<pre><code>>>> listComp2 = compile('list(f(x) for x in xs)', 'listComp2', 'eval')\n\n>>> dis.dis(listComp2)\n\n 1 0 LOAD_NAME 0 (list) \n\n 3 LOAD_CONST 0 (<code object <genexpr> at 0x255bc68, file "listComp2", line 1>) \n\n 6 MAKE_FUNCTION 0 \n\n 9 LOAD_NAME 1 (xs) \n\n 12 GET_ITER \n\n 13 CALL_FUNCTION 1 \n\n 16 CALL_FUNCTION 1 \n\n 19 RETURN_VALUE \n\n>>> listComp2.co_consts\n\n(<code object <genexpr> at 0x255bc68, file "listComp2", line 1>,)\n\n>>> dis.dis(listComp2.co_consts[0])\n\n 1 0 LOAD_FAST 0 (.0) \n\n >> 3 FOR_ITER 17 (to 23) \n\n 6 STORE_FAST 1 (x) \n\n 9 LOAD_GLOBAL 0 (f) \n\n 12 LOAD_FAST 1 (x) \n\n 15 CALL_FUNCTION 1 \n\n 18 YIELD_VALUE \n\n 19 POP_TOP \n\n 20 JUMP_ABSOLUTE 3 \n\n >> 23 LOAD_CONST 0 (None) \n\n 26 RETURN_VALUE\n\n</code></pre>\n\n<p> </p>\n\n<pre><code>>>> evalledMap = compile('list(map(f,xs))', 'evalledMap', 'eval')\n\n>>> dis.dis(evalledMap)\n\n 1 0 LOAD_NAME 0 (list) \n\n 3 LOAD_NAME 1 (map) \n\n 6 LOAD_NAME 2 (f) \n\n 9 LOAD_NAME 3 (xs) \n\n 12 CALL_FUNCTION 2 \n\n 15 CALL_FUNCTION 1 \n\n 18 RETURN_VALUE \n\n</code></pre>\n\n<p>It seems it is better to use <code>[...]</code> syntax than <code>list(...)</code>. Sadly the <code>map</code> class is a bit opaque to disassembly, but we can make due with our speed test.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1023
Pandas - Get first row value of a given column	<p>To select the <code>ith</code> row, <a href="http://pandas.pydata.org/pandas-docs/stable/indexing.html#different-choices-for-indexing-loc-iloc-and-ix" rel="noreferrer">use <code>iloc</code></a>:</p>\n\n<pre><code>In [31]: df_test.iloc[0]\n\nOut[31]: \n\nATime 1.2\n\nX 2.0\n\nY 15.0\n\nZ 2.0\n\nBtime 1.2\n\nC 12.0\n\nD 25.0\n\nE 12.0\n\nName: 0, dtype: float64\n\n</code></pre>\n\n<p>To select the ith value in the <code>Btime</code> column you could use:</p>\n\n<pre><code>In [30]: df_test['Btime'].iloc[0]\n\nOut[30]: 1.2\n\n</code></pre>\n\n<hr>\n\n<h2>There is a difference between <code>df_test['Btime'].iloc[0]</code> (recommended) and <code>df_test.iloc[0]['Btime']</code>:</h2>\n\n<p>DataFrames store data in column-based blocks (where each block has a single\n\ndtype). If you select by column first, a <em>view</em> can be returned (which is\n\nquicker than returning a copy) and the original dtype is preserved. In contrast,\n\nif you select by row first, and if the DataFrame has columns of different\n\ndtypes, then Pandas <em>copies</em> the data into a new Series of object dtype. So\n\nselecting columns is a bit faster than selecting rows. Thus, although\n\n<code>df_test.iloc[0]['Btime']</code> works, <code>df_test['Btime'].iloc[0]</code> is a little bit\n\nmore efficient.</p>\n\n<p>There is a big difference between the two when it comes to assignment.\n\n<code>df_test['Btime'].iloc[0] = x</code> affects <code>df_test</code>, but <code>df_test.iloc[0]['Btime']</code>\n\nmay not. See below for an explanation of why. Because a subtle difference in\n\nthe order of indexing makes a big difference in behavior, it is better to use single indexing assignment:</p>\n\n<pre><code>df.iloc[0, df.columns.get_loc('Btime')] = x\n\n</code></pre>\n\n<hr>\n\n<h2><code>df.iloc[0, df.columns.get_loc('Btime')] = x</code> (recommended):</h2>\n\n<p>The <strong><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#indexing-view-versus-copy" rel="noreferrer">recommended way</a></strong> to assign new values to a\n\nDataFrame is to <a href="https://www.dataquest.io/blog/settingwithcopywarning/" rel="noreferrer">avoid chained indexing</a>, and instead use the method <a href="https://stackoverflow.com/a/32103253/190597">shown by\n\nandrew</a>,</p>\n\n<pre><code>df.loc[df.index[n], 'Btime'] = x\n\n</code></pre>\n\n<p>or </p>\n\n<pre><code>df.iloc[n, df.columns.get_loc('Btime')] = x\n\n</code></pre>\n\n<p>The latter method is a bit faster, because <code>df.loc</code> has to convert the row and column labels to\n\npositional indices, so there is a little less conversion necessary if you use\n\n<code>df.iloc</code> instead.</p>\n\n<hr>\n\n<h2><code>df['Btime'].iloc[0] = x</code> works, but is not recommended:</h2>\n\n<p>Although this works, it is taking advantage of the way DataFrames are <em>currently</em> implemented. There is no guarantee that Pandas has to work this way in the future. In particular, it is taking advantage of the fact that (currently) <code>df['Btime']</code> always returns a\n\nview (not a copy) so <code>df['Btime'].iloc[n] = x</code> can be used to <em>assign</em> a new value\n\nat the nth location of the <code>Btime</code> column of <code>df</code>.</p>\n\n<p>Since Pandas makes no explicit guarantees about when indexers return a view versus a copy, assignments that use chained indexing generally always raise a <code>SettingWithCopyWarning</code> even though in this case the assignment succeeds in modifying <code>df</code>:</p>\n\n<pre><code>In [22]: df = pd.DataFrame({'foo':list('ABC')}, index=[0,2,1])\n\nIn [24]: df['bar'] = 100\n\nIn [25]: df['bar'].iloc[0] = 99\n\n/home/unutbu/data/binky/bin/ipython:1: SettingWithCopyWarning: \n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n\n self._setitem_with_indexer(indexer, value)\n\nIn [26]: df\n\nOut[26]: \n\n foo bar\n\n0 A 99 <-- assignment succeeded\n\n2 B 100\n\n1 C 100\n\n</code></pre>\n\n<hr>\n\n<h2><code>df.iloc[0]['Btime'] = x</code> does not work:</h2>\n\n<p>In contrast, assignment with <code>df.iloc[0]['bar'] = 123</code> does not work because <code>df.iloc[0]</code> is returning a copy:</p>\n\n<pre><code>In [66]: df.iloc[0]['bar'] = 123\n\n/home/unutbu/data/binky/bin/ipython:1: SettingWithCopyWarning: \n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n\nIn [67]: df\n\nOut[67]: \n\n foo bar\n\n0 A 99 <-- assignment failed\n\n2 B 100\n\n1 C 100\n\n</code></pre>\n\n<hr>\n\n<p><strong>Warning</strong>: I had previously suggested <code>df_test.ix[i, 'Btime']</code>. But this is not guaranteed to give you the <code>ith</code> value since <code>ix</code> tries to index by <em>label</em> before trying to index by <em>position</em>. So if the DataFrame has an integer index which is not in sorted order starting at 0, then using <code>ix[i]</code> will return the row <em>labeled</em> <code>i</code> rather than the <code>ith</code> row. For example,</p>\n\n<pre><code>In [1]: df = pd.DataFrame({'foo':list('ABC')}, index=[0,2,1])\n\nIn [2]: df\n\nOut[2]: \n\n foo\n\n0 A\n\n2 B\n\n1 C\n\nIn [4]: df.ix[1, 'foo']\n\nOut[4]: 'C'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1024
How do I run all Python unit tests in a directory?	<p>With Python 2.7 and higher you don't have to write new code or use third-party tools to do this; recursive test execution via the command line is built-in. Put an <code>__init__.py</code> in your test directory and:</p>\n\n<pre><code>python -m unittest discover <test_directory>\n\n# or\n\npython -m unittest discover -s <directory> -p '*_test.py'\n\n</code></pre>\n\n<p>You can read more in the <a href="http://docs.python.org/2/library/unittest.html#command-line-interface" rel="noreferrer">python 2.7</a>\n\nor <a href="http://docs.python.org/3/library/unittest.html#command-line-interface" rel="noreferrer">python 3.x</a> unittest documentation.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1025
Deep copy of a dict in python	<p>How about:</p>\n\n<pre><code>import copy\n\nd = { ... }\n\nd2 = copy.deepcopy(d)\n\n</code></pre>\n\n<p>Python 2 or 3:</p>\n\n<pre><code>Python 3.2 (r32:88445, Feb 20 2011, 21:30:00) [MSC v.1500 64 bit (AMD64)] on win32\n\nType "help", "copyright", "credits" or "license" for more information.\n\n>>> import copy\n\n>>> my_dict = {'a': [1, 2, 3], 'b': [4, 5, 6]}\n\n>>> my_copy = copy.deepcopy(my_dict)\n\n>>> my_dict['a'][2] = 7\n\n>>> my_copy['a'][2]\n\n3\n\n>>>\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1026
Pandas - How to flatten a hierarchical index in columns	<p>I think the easiest way to do this would be to set the columns to the top level:</p>\n\n<pre><code>df.columns = df.columns.get_level_values(0)\n\n</code></pre>\n\n<p><em>Note: if the to level has a name you can also access it by this, rather than 0.</em></p>\n\n<p>.</p>\n\n<p>If you want to combine/<a href="http://docs.python.org/2/library/stdtypes.html#str.join"><code>join</code></a> your MultiIndex into one Index <em>(assuming you have just string entries in your columns)</em> you could:</p>\n\n<pre><code>df.columns = [' '.join(col).strip() for col in df.columns.values]\n\n</code></pre>\n\n<p><em>Note: we must <a href="http://docs.python.org/2/library/stdtypes.html#str.strip"><code>strip</code></a> the whitespace for when there is no second index.</em></p>\n\n<pre><code>In [11]: [' '.join(col).strip() for col in df.columns.values]\n\nOut[11]: \n\n['USAF',\n\n 'WBAN',\n\n 'day',\n\n 'month',\n\n 's_CD sum',\n\n 's_CL sum',\n\n 's_CNT sum',\n\n 's_PC sum',\n\n 'tempf amax',\n\n 'tempf amin',\n\n 'year']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1027
Getting the index of the returned max or min item using max()/min() on a list	<p>Say that you have a list <code>values = [3,6,1,5]</code>, and need the index of the smallest element, i.e. <code>index_min = 2</code> in this case.</p>\n\n<p>Avoid the solution with <code>itemgetter()</code> presented in the other answers, and use instead</p>\n\n<pre><code>index_min = min(range(len(values)), key=values.__getitem__)\n\n</code></pre>\n\n<p>because it doesn't require to <code>import operator</code> nor to use <code>enumerate</code>, and it is always faster(benchmark below) than a solution using <code>itemgetter()</code>.</p>\n\n<p>If you are dealing with numpy arrays or can afford <code>numpy</code> as a dependency, consider also using</p>\n\n<pre><code>import numpy as np\n\nindex_min = np.argmin(values)\n\n</code></pre>\n\n<p>This will be faster than the first solution even if you apply it to a pure Python list if:</p>\n\n<ul>\n\n<li>it is larger than a few elements (about 2**4 elements on my machine)</li>\n\n<li>you can afford the memory copy from a pure list to a <code>numpy</code> array</li>\n\n</ul>\n\n<p>as this benchmark points out:\n\n<a href="https://i.stack.imgur.com/UTXzO.png" rel="noreferrer"><img src="https://i.stack.imgur.com/UTXzO.png" alt="enter image description here"></a></p>\n\n<p>I have run the benchmark on my machine with python 2.7 for the two solutions above (blue: pure python, first solution) (red, numpy solution) and for the standard solution based on <code>itemgetter()</code> (black, reference solution).\n\nThe same benchmark with python 3.5 showed that the methods compare exactly the same of the python 2.7 case presented above</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1028
Python 3: UnboundLocalError: local variable referenced before assignment	<p>This is because, even though <code>Var1</code> exists, you're also using an assignment statement on the name <code>Var1</code> inside of the function (<code>Var1 -= 1</code> at the bottom line). Naturally, this creates a variable inside the function's scope called <code>Var1</code> (truthfully, a <code>-=</code> or <code>+=</code> will only update (reassign) an existing variable, but for reasons unknown (likely consistency in this context), Python treats it as an assignment). The Python interpreter sees this at module load time and decides (correctly so) that the global scope's <code>Var1</code> should not be used inside the local scope, which leads to a problem when you try to reference the variable before it is locally assigned.</p>\n\n<p>Using global variables, outside of necessity, is usually frowned upon by Python developers, because it leads to confusing and problematic code. However, if you'd like to use them to accomplish what your code is implying, you can simply add:</p>\n\n<pre><code>global Var1, Var2\n\n</code></pre>\n\n<p>inside the top of your function. This will tell Python that you don't intend to define a <code>Var1</code> or <code>Var2</code> variable inside the function's local scope. The Python interpreter sees this at module load time and decides (correctly so) to look up any references to the aforementioned variables in the global scope.</p>\n\n<h3>Some Resources</h3>\n\n<ul>\n\n<li>the Python website has a <a href="https://docs.python.org/3/faq/programming.html#why-am-i-getting-an-unboundlocalerror-when-the-variable-has-a-value" rel="noreferrer">great explanation</a> for this common issue.</li>\n\n<li>Python 3 offers a related <a href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal" rel="noreferrer"><code>nonlocal</code></a> statement - check that out as well.</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1029
What is PEP8's E128: continuation line under-indented for visual indent?	<p><a href="http://www.python.org/dev/peps/pep-0008/#indentation" rel="noreferrer">PEP-8 recommends</a> you indent lines to the opening parentheses if you put anything on the first line, so it should either be indenting to the opening bracket:</p>\n\n<pre><code>urlpatterns = patterns('',\n\n url(r'^$', listing, name='investment-listing'))\n\n</code></pre>\n\n<p>or not putting any arguments on the starting line, then indenting to a uniform level:</p>\n\n<pre><code>urlpatterns = patterns(\n\n '',\n\n url(r'^$', listing, name='investment-listing'),\n\n)\n\nurlpatterns = patterns(\n\n '', url(r'^$', listing, name='investment-listing'))\n\n</code></pre>\n\n<p>I suggest taking a read through PEP-8 - you can skim through a lot of it, and it's pretty easy to understand, unlike some of the more technical PEPs.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1030
How can I convert a datetime object to milliseconds since epoch (unix time) in Python?	<p>It appears to me that the simplest way to do this is</p>\n\n<pre><code>import datetime\n\nepoch = datetime.datetime.utcfromtimestamp(0)\n\ndef unix_time_millis(dt):\n\n return (dt - epoch).total_seconds() * 1000.0\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1031
Use 'import module' or 'from module import'?	<p>The difference between <code>import module</code> and <code>from module import foo</code> is mainly subjective. Pick the one you like best and be consistent in your use of it. Here are some points to help you decide.</p>\n\n<p><code>import module</code></p>\n\n<ul>\n\n<li><strong>Pros:</strong>\n\n<ul>\n\n<li>Less maintenance of your <code>import</code> statements. Don't need to add any additional imports to start using another item from the module</li>\n\n</ul></li>\n\n<li><strong>Cons:</strong>\n\n<ul>\n\n<li>Typing <code>module.foo</code> in your code can be tedious and redundant (tedium can be minimized by using <code>import module as mo</code> then typing <code>mo.foo</code>)</li>\n\n</ul></li>\n\n</ul>\n\n<p><code>from module import foo</code></p>\n\n<ul>\n\n<li><strong>Pros:</strong>\n\n<ul>\n\n<li>Less typing to use <code>foo</code></li>\n\n<li>More control over which items of a module can be accessed</li>\n\n</ul></li>\n\n<li><strong>Cons:</strong>\n\n<ul>\n\n<li>To use a new item from the module you have to update your <code>import</code> statement</li>\n\n<li>You lose context about <code>foo</code>. For example, it's less clear what <code>ceil()</code> does compared to <code>math.ceil()</code></li>\n\n</ul></li>\n\n</ul>\n\n<p>Either method is acceptable, but <strong>don't</strong> use <code>from module import *</code>. </p>\n\n<p>For any reasonable large set of code, if you <code>import *</code> you will likely be cementing it into the module, unable to be removed. This is because it is difficult to determine what items used in the code are coming from 'module', making it easy to get to the point where you think you don't use the <code>import</code> any more but it's extremely difficult to be sure.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1032
How to make a flat list out of list of lists?	<p>I tested most suggested solutions with <a href="https://github.com/nschloe/perfplot" rel="noreferrer">perfplot</a> (a pet project of mine, essentially a wrapper around <code>timeit</code>), and found</p>\n\n<pre class="lang-py prettyprint-override"><code>functools.reduce(operator.iconcat, a, [])\n\n</code></pre>\n\n<p>to be the fastest solution, both when many small lists and few long lists are concatenated. (<code>operator.iadd</code> is equally fast.)</p>\n\n<p><a href="https://i.stack.imgur.com/Yqu9I.png" rel="noreferrer"><img src="https://i.stack.imgur.com/Yqu9I.png" alt="enter image description here"></a></p>\n\n<p><a href="https://i.stack.imgur.com/b0JFU.png" rel="noreferrer"><img src="https://i.stack.imgur.com/b0JFU.png" alt="enter image description here"></a></p>\n\n<hr>\n\n<p>Code to reproduce the plot:</p>\n\n<pre class="lang-py prettyprint-override"><code>import functools\n\nimport itertools\n\nimport numpy\n\nimport operator\n\nimport perfplot\n\ndef forfor(a):\n\n return [item for sublist in a for item in sublist]\n\ndef sum_brackets(a):\n\n return sum(a, [])\n\ndef functools_reduce(a):\n\n return functools.reduce(operator.concat, a)\n\ndef functools_reduce_iconcat(a):\n\n return functools.reduce(operator.iconcat, a, [])\n\ndef itertools_chain(a):\n\n return list(itertools.chain.from_iterable(a))\n\ndef numpy_flat(a):\n\n return list(numpy.array(a).flat)\n\ndef numpy_concatenate(a):\n\n return list(numpy.concatenate(a))\n\nperfplot.show(\n\n setup=lambda n: [list(range(10))] * n,\n\n # setup=lambda n: [list(range(n))] * 10,\n\n kernels=[\n\n forfor,\n\n sum_brackets,\n\n functools_reduce,\n\n functools_reduce_iconcat,\n\n itertools_chain,\n\n numpy_flat,\n\n numpy_concatenate,\n\n ],\n\n n_range=[2 ** k for k in range(16)],\n\n xlabel="num lists (of length 10)",\n\n # xlabel="len lists (10 lists total)"\n\n)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1033
Why is my xlabel cut off in my matplotlib plot?	<p>Use:</p>\n\n<pre><code>import matplotlib.pyplot as plt\n\nplt.gcf().subplots_adjust(bottom=0.15)\n\n</code></pre>\n\n<p>to make room for the label.</p>\n\n<p>Edit:</p>\n\n<p>Since i gave the answer, <code>matplotlib</code> has added the <strong><code>tight_layout()</code></strong> function.\n\nSo i suggest to use it:</p>\n\n<pre><code>plt.tight_layout()\n\n</code></pre>\n\n<p>should make room for the xlabel.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1034
How to use the pass statement?	<p>Suppose you are designing a new class with some methods that you don't want to implement, yet.</p>\n\n<pre><code>class MyClass(object):\n\n def meth_a(self):\n\n pass\n\n def meth_b(self):\n\n print "I'm meth_b"\n\n</code></pre>\n\n<p>If you were to leave out the <code>pass</code>, the code wouldn't run.</p>\n\n<p>You would then get an:</p>\n\n<pre><code>IndentationError: expected an indented block\n\n</code></pre>\n\n<p>To summarize, the <code>pass</code> statement does nothing particular, but it can act as a placeholder, as demonstrated here.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1035
Python nonlocal statement	<p>Compare this, without using <code>nonlocal</code>:</p>\n\n<pre><code>x = 0\n\ndef outer():\n\n x = 1\n\n def inner():\n\n x = 2\n\n print("inner:", x)\n\n inner()\n\n print("outer:", x)\n\nouter()\n\nprint("global:", x)\n\n# inner: 2\n\n# outer: 1\n\n# global: 0\n\n</code></pre>\n\n<p>To this, using <strong><code>nonlocal</code></strong>, where <code>inner()</code>'s <code>x</code> is now also <code>outer()</code>'s <code>x</code>:</p>\n\n<pre><code>x = 0\n\ndef outer():\n\n x = 1\n\n def inner():\n\n nonlocal x\n\n x = 2\n\n print("inner:", x)\n\n inner()\n\n print("outer:", x)\n\nouter()\n\nprint("global:", x)\n\n# inner: 2\n\n# outer: 2\n\n# global: 0\n\n</code></pre>\n\n<blockquote>\n\n <p>If we were to use <strong><code>global</code></strong>, it would bind <code>x</code> to the properly "global" value:</p>\n\n<pre><code>x = 0\n\ndef outer():\n\n x = 1\n\n def inner():\n\n global x\n\n x = 2\n\n print("inner:", x)\n\n inner()\n\n print("outer:", x)\n\nouter()\n\nprint("global:", x)\n\n# inner: 2\n\n# outer: 1\n\n# global: 2\n\n</code></pre>\n\n</blockquote>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1036
Python int to binary string?	<p>If you're looking for <a href="http://docs.python.org/library/functions.html#bin" rel="noreferrer"><code>bin()</code></a> as an equivalent to <code>hex()</code>, it was added in python 2.6.</p>\n\n<p>Example:</p>\n\n<pre><code>>>> bin(10)\n\n'0b1010'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1037
Can "list_display" in a Django ModelAdmin display attributes of ForeignKey fields?	<p>As another option, you can do look ups like:</p>\n\n<pre><code>class UserAdmin(admin.ModelAdmin):\n\n list_display = (..., 'get_author')\n\n def get_author(self, obj):\n\n return obj.book.author\n\n get_author.short_description = 'Author'\n\n get_author.admin_order_field = 'book__author'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1038
Hiding axis text in matplotlib plots	<p>Instead of hiding each element, you can hide the whole axis:</p>\n\n<pre><code>frame1.axes.get_xaxis().set_visible(False)\n\nframe1.axes.get_yaxis().set_visible(False)\n\n</code></pre>\n\n<p>Or, you can set the ticks to an empty list:</p>\n\n<pre><code>frame1.axes.get_xaxis().set_ticks([])\n\nframe1.axes.get_yaxis().set_ticks([])\n\n</code></pre>\n\n<p>In this second option, you can still use <code>plt.xlabel()</code> and <code>plt.ylabel()</code> to add labels to the axes.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1039
What is the maximum recursion depth in Python, and how to increase it?	<p>It is a guard against a stack overflow, yes. Python (or rather, the CPython implementation) doesn't optimize tail recursion, and unbridled recursion causes stack overflows. You can check the recursion limit with <a href="https://docs.python.org/library/sys.html#sys.getrecursionlimit" rel="noreferrer"><code>sys.getrecursionlimit</code></a> and change the recursion limit with <a href="https://docs.python.org/library/sys.html#sys.setrecursionlimit" rel="noreferrer"><code>sys.setrecursionlimit</code></a>, but doing so is dangerous -- the standard limit is a little conservative, but Python stackframes can be quite big.</p>\n\n<p>Python isn't a functional language and tail recursion is not a particularly efficient technique. Rewriting the algorithm iteratively, if possible, is generally a better idea.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1040
Proper way to use **kwargs in Python	<p>You can pass a default value to <code>get()</code> for keys that are not in the dictionary:</p>\n\n<pre><code>self.val2 = kwargs.get('val2',"default value")\n\n</code></pre>\n\n<p>However, if you plan on using a particular argument with a particular default value, why not use named arguments in the first place?</p>\n\n<pre><code>def __init__(self, val2="default value", **kwargs):\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1041
In Matplotlib, what does the argument mean in fig.add_subplot(111)?	<p>These are subplot grid parameters encoded as a single integer. For example, "111" means "1x1 grid, first subplot" and "234" means "2x3 grid, 4th subplot".</p>\n\n<p>Alternative form for <code>add_subplot(111)</code> is <code>add_subplot(1, 1, 1)</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1042
How to sum all the values in a dictionary?	<p>As you'd expect:</p>\n\n<pre><code>sum(d.values())\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1043
What's the best way to parse a JSON response from the requests library?	<p>Since you're using <code>requests</code>, you should use the response's <a href="https://requests.readthedocs.io/en/latest/user/quickstart/#json-response-content" rel="noreferrer"><code>json</code></a> method.</p>\n\n<pre><code>import requests\n\nresponse = requests.get(...)\n\ndata = response.json()\n\n</code></pre>\n\n<p>It <a href="https://github.com/requests/requests/blob/4ea09e49f7d518d365e7c6f7ff6ed9ca70d6ec2e/requests/models.py#L868-L892" rel="noreferrer">autodetects which decoder to use</a>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1044
Why is there no tuple comprehension in Python?	<p>You can use a generator expression:</p>\n\n<pre><code>tuple(i for i in (1, 2, 3))\n\n</code></pre>\n\n<p>but parentheses were already taken for â¦ generator expressions.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1045
Python setup.py develop vs install	<p><code>python setup.py install</code> is used to install (typically third party) packages that you're not going to develop/modify/debug yourself.</p>\n\n<p>For your own stuff, you want to first install your package and then be able to frequently edit the code <em>without</em> having to re-install the package every time â and that is exactly what <code>python setup.py develop</code> does: it installs the package (typically just a source folder) in a way that allows you to conveniently edit your code after itâs installed to the (virtual) environment, and have the changes take effect immediately.</p>\n\n<p>Note that it is highly recommended to use <code>pip install .</code> (install) and <code>pip install -e .</code> (developer install) to install packages, as invoking <code>setup.py</code> directly will do the wrong things for many dependencies, such as pull prereleases and incompatible package versions, or make the package hard to uninstall with <code>pip</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1046
pandas three-way joining multiple dataframes on columns	<p>Assumed imports:</p>\n\n<pre><code>import pandas as pd\n\n</code></pre>\n\n<p><a href="https://stackoverflow.com/a/23671390/366309">John Galt's answer</a> is basically a <code>reduce</code> operation. If I have more than a handful of dataframes, I'd put them in a list like this (generated via list comprehensions or loops or whatnot):</p>\n\n<pre><code>dfs = [df0, df1, df2, dfN]\n\n</code></pre>\n\n<p>Assuming they have some common column, like <code>name</code> in your example, I'd do the following:</p>\n\n<pre><code>df_final = reduce(lambda left,right: pd.merge(left,right,on='name'), dfs)\n\n</code></pre>\n\n<p>That way, your code should work with whatever number of dataframes you want to merge.</p>\n\n<p><em>Edit August 1, 2016</em>: For those using Python 3: <code>reduce</code> has been moved into <code>functools</code>. So to use this function, you'll first need to import that module:</p>\n\n<pre><code>from functools import reduce\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1047
Text Progress Bar in the Console	<h1>Python 3</h1>\n\n<h2>A Simple, Customizable Progress Bar</h2>\n\n<p>Here's an aggregate of many of the answers below that I use regularly (no imports required).</p>\n\n<p><strong>Note:</strong> All code in this answer was created for Python 3; see end of answer to use this code with Python 2.</p>\n\n<pre><code># Print iterations progress\n\ndef printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = 'â', printEnd = " "):\n\n """\n\n Call in a loop to create terminal progress bar\n\n @params:\n\n iteration - Required : current iteration (Int)\n\n total - Required : total iterations (Int)\n\n prefix - Optional : prefix string (Str)\n\n suffix - Optional : suffix string (Str)\n\n decimals - Optional : positive number of decimals in percent complete (Int)\n\n length - Optional : character length of bar (Int)\n\n fill - Optional : bar fill character (Str)\n\n printEnd - Optional : end character (e.g. " ", " ") (Str)\n\n """\n\n percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))\n\n filledLength = int(length * iteration // total)\n\n bar = fill * filledLength + '-' * (length - filledLength)\n\n print(f' {prefix} |{bar}| {percent}% {suffix}', end = printEnd)\n\n # Print New Line on Complete\n\n if iteration == total: \n\n print()\n\n</code></pre>\n\n<h3>Sample Usage</h3>\n\n<pre><code>import time\n\n# A List of Items\n\nitems = list(range(0, 57))\n\nl = len(items)\n\n# Initial call to print 0% progress\n\nprintProgressBar(0, l, prefix = 'Progress:', suffix = 'Complete', length = 50)\n\nfor i, item in enumerate(items):\n\n # Do stuff...\n\n time.sleep(0.1)\n\n # Update Progress Bar\n\n printProgressBar(i + 1, l, prefix = 'Progress:', suffix = 'Complete', length = 50)\n\n</code></pre>\n\n<h3>Sample Output</h3>\n\n<pre class="lang-none prettyprint-override"><code>Progress: |âââââââââââââââââââââââââââââââââââââââââââââ-----| 90.0% Complete\n\n</code></pre>\n\n<h3>Update</h3>\n\n<p>There was discussion in the comments regarding an option that allows the progress bar to adjust dynamically to the terminal window width. While I don't recommend this, here's a <a href="https://gist.github.com/greenstick/b23e475d2bfdc3a82e34eaa1f6781ee4" rel="nofollow noreferrer">gist</a> that implements this feature (and notes the caveats).</p>\n\n<h2>Single-Call Version of The Above</h2>\n\n<p>A comment below referenced a nice <a href="https://stackoverflow.com/a/34482761/2206251">answer</a> posted in response to a similar question. I liked the ease of use it demonstrated and wrote a similar one, but opted to leave out the import of the <code>sys</code> module while adding in some of the features of the original <code>printProgressBar</code> function above.</p>\n\n<p>Some benefits of this approach over the original function above include the elimination of an initial call to the function to print the progress bar at 0% and the use of <code>enumerate</code> becoming optional (i.e. it is no longer explicitly required to make the function work).</p>\n\n<pre><code>def progressBar(iterable, prefix = '', suffix = '', decimals = 1, length = 100, fill = 'â', printEnd = " "):\n\n """\n\n Call in a loop to create terminal progress bar\n\n @params:\n\n iteration - Required : current iteration (Int)\n\n total - Required : total iterations (Int)\n\n prefix - Optional : prefix string (Str)\n\n suffix - Optional : suffix string (Str)\n\n decimals - Optional : positive number of decimals in percent complete (Int)\n\n length - Optional : character length of bar (Int)\n\n fill - Optional : bar fill character (Str)\n\n printEnd - Optional : end character (e.g. " ", " ") (Str)\n\n """\n\n total = len(iterable)\n\n # Progress Bar Printing Function\n\n def printProgressBar (iteration):\n\n percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))\n\n filledLength = int(length * iteration // total)\n\n bar = fill * filledLength + '-' * (length - filledLength)\n\n print(f' {prefix} |{bar}| {percent}% {suffix}', end = printEnd)\n\n # Initial Call\n\n printProgressBar(0)\n\n # Update Progress Bar\n\n for i, item in enumerate(iterable):\n\n yield item\n\n printProgressBar(i + 1)\n\n # Print New Line on Complete\n\n print()\n\n</code></pre>\n\n<h3>Sample Usage</h3>\n\n<pre><code>import time\n\n# A List of Items\n\nitems = list(range(0, 57))\n\n# A Nicer, Single-Call Usage\n\nfor item in progressBar(items, prefix = 'Progress:', suffix = 'Complete', length = 50):\n\n # Do stuff...\n\n time.sleep(0.1)\n\n</code></pre>\n\n<h3>Sample Output</h3>\n\n<pre class="lang-none prettyprint-override"><code>Progress: |âââââââââââââââââââââââââââââââââââââââââââââ-----| 90.0% Complete\n\n</code></pre>\n\n<h1>Python 2</h1>\n\n<p>To use the above functions in Python 2, set the encoding to UTF-8 at the top of your script:</p>\n\n<pre><code># -*- coding: utf-8 -*-\n\n</code></pre>\n\n<p>And replace the Python 3 string formatting in this line:</p>\n\n<pre><code>print(f' {prefix} |{bar}| {percent}% {suffix}', end = printEnd)\n\n</code></pre>\n\n<p>With Python 2 string formatting:</p>\n\n<pre><code>print(' %s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = printEnd)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1048
How to install python3 version of package via pip on Ubuntu?	<p><strong>Ubuntu 12.10+ and Fedora 13+ have a package called <code>python3-pip</code> which will install <code>pip-3.2</code> (or <code>pip-3.3</code>, <code>pip-3.4</code> or <code>pip3</code> for newer versions) without needing this jumping through hoops.</strong></p>\n\n<hr>\n\n<p>I came across this and fixed this without needing the likes of <code>wget</code> or virtualenvs (assuming Ubuntu 12.04):</p>\n\n<ol>\n\n<li>Install package <code>python3-setuptools</code>: run <code>sudo aptitude install python3-setuptools</code>, this will give you the command <code>easy_install3</code>.</li>\n\n<li>Install pip using Python 3's setuptools: run <code>sudo easy_install3 pip</code>, this will give you the command <code>pip-3.2</code> like kev's solution.</li>\n\n<li>Install your PyPI packages: run <code>sudo pip-3.2 install <package></code> (installing python packages into your base system requires root, of course).</li>\n\n<li>â¦</li>\n\n<li>Profit!</li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1049
How to get all possible combinations of a listâs elements?	<p>Have a look at <a href="http://docs.python.org/library/itertools.html#itertools.combinations" rel="noreferrer">itertools.combinations</a>:</p>\n\n<blockquote>\n\n<pre><code>itertools.combinations(iterable, r)\n\n</code></pre>\n\n <p>Return r length subsequences of elements from\n\n the input iterable.</p>\n\n <p>Combinations are emitted in lexicographic sort order. So, if the\n\n input iterable is sorted, the\n\n combination tuples will be produced in\n\n sorted order.</p>\n\n</blockquote>\n\n<p>Since 2.6, batteries are included!</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1050
Difference between exit() and sys.exit() in Python	<p><a href="http://docs.python.org/library/constants.html#exit" rel="noreferrer"><code>exit</code></a> is a helper for the interactive shell - <a href="http://docs.python.org/library/sys.html#sys.exit" rel="noreferrer"><code>sys.exit</code></a> is intended for use in programs.</p>\n\n<blockquote>\n\n <p>The <a href="https://docs.python.org/library/site.html#module-site" rel="noreferrer"><code>site</code></a> module (which is imported automatically during startup, except if the <a href="https://docs.python.org/using/cmdline.html#id3" rel="noreferrer"><code>-S</code></a> command-line option is given) adds several constants to the built-in namespace <em>(e.g. <code>exit</code>)</em>. <strong>They are useful for the interactive interpreter shell and should not be used in programs</strong>.</p>\n\n</blockquote>\n\n<hr>\n\n<p>Technically, they do mostly the same: raising <a href="https://docs.python.org/library/exceptions.html#SystemExit" rel="noreferrer"><code>SystemExit</code></a>. <code>sys.exit</code> does so in <a href="https://github.com/python/cpython/blob/06fe77a84bd29d51506ab2ff703ae585a6121af2/Python/sysmodule.c#L337-L346" rel="noreferrer"><em>sysmodule.c</em></a>:</p>\n\n<pre class="lang-c prettyprint-override"><code>static PyObject * sys_exit(PyObject *self, PyObject *args)\n\n{\n\n PyObject *exit_code = 0;\n\n if (!PyArg_UnpackTuple(args, "exit", 0, 1, &exit_code))\n\n return NULL;\n\n /* Raise SystemExit so callers may catch it or clean up. */\n\n PyErr_SetObject(PyExc_SystemExit, exit_code);\n\n return NULL;\n\n}\n\n</code></pre>\n\n<p>While <code>exit</code> is defined in <a href="https://github.com/python/cpython/blob/06fe77a84bd29d51506ab2ff703ae585a6121af2/Lib/site.py#L365-L366" rel="noreferrer">site.py</a> and <a href="https://github.com/python/cpython/blob/06fe77a84bd29d51506ab2ff703ae585a6121af2/Lib/_sitebuiltins.py#L13-L26" rel="noreferrer">_sitebuiltins.py</a>, respectively.</p>\n\n<pre><code>class Quitter(object):\n\n def __init__(self, name):\n\n self.name = name\n\n def __repr__(self):\n\n return 'Use %s() or %s to exit' % (self.name, eof)\n\n def __call__(self, code=None):\n\n # Shells like IDLE catch the SystemExit, but listen when their\n\n # stdin wrapper is closed.\n\n try:\n\n sys.stdin.close()\n\n except:\n\n pass\n\n raise SystemExit(code)\n\n__builtin__.quit = Quitter('quit')\n\n__builtin__.exit = Quitter('exit')\n\n</code></pre>\n\n<hr>\n\n<p>Note that there is a third exit option, namely <a href="http://docs.python.org/library/os.html#os._exit" rel="noreferrer">os._exit</a>, which exits without calling cleanup handlers, flushing stdio buffers, etc. (and which should normally only be used in the child process after a <code>fork()</code>).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1051
Python progression path - From apprentice to guru	<p>I thought the process of Python mastery went something like:</p>\n\n<ol>\n\n<li>Discover <a href="http://en.wikipedia.org/wiki/List_comprehension#Python" rel="noreferrer">list comprehensions</a></li>\n\n<li>Discover <a href="http://en.wikipedia.org/wiki/Python_syntax_and_semantics#Generators" rel="noreferrer">generators</a></li>\n\n<li>Incorporate <a href="http://docs.python.org/library/functions.html" rel="noreferrer">map, reduce, filter, iter, range, xrange</a> often into your code</li>\n\n<li>Discover <a href="http://wiki.python.org/moin/PythonDecorators" rel="noreferrer">Decorators</a></li>\n\n<li>Write recursive functions, a lot</li>\n\n<li>Discover <a href="http://docs.python.org/library/itertools.html" rel="noreferrer">itertools</a> and <a href="http://docs.python.org/library/functools.html" rel="noreferrer">functools</a></li>\n\n<li>Read <a href="https://rads.stackoverflow.com/amzn/click/com/0596514980" rel="noreferrer" rel="nofollow noreferrer">Real World Haskell</a> (<a href="http://book.realworldhaskell.org/read/" rel="noreferrer">read free online</a>)</li>\n\n<li>Rewrite all your old Python code with tons of higher order functions, recursion, and whatnot.</li>\n\n<li>Annoy your cubicle mates every time they present you with a Python class. Claim it could be "better" implemented as a dictionary plus some functions. Embrace functional programming.</li>\n\n<li>Rediscover the <a href="http://en.wikipedia.org/wiki/Strategy_pattern#Python" rel="noreferrer">Strategy</a> pattern and then <a href="https://rads.stackoverflow.com/amzn/click/com/0596007124" rel="noreferrer" rel="nofollow noreferrer">all those things</a> from imperative code you tried so hard to forget after Haskell.</li>\n\n<li>Find a balance.</li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1052
Remove rows with duplicate indices (Pandas DataFrame and TimeSeries)	<p>I would suggest using the <a href="http://pandas.pydata.org/pandas-docs/version/0.17.1/generated/pandas.Index.duplicated.html" rel="noreferrer">duplicated</a> method on the Pandas Index itself:</p>\n\n<pre><code>df3 = df3.loc[~df3.index.duplicated(keep='first')]\n\n</code></pre>\n\n<p>While all the other methods work, the <a href="https://stackoverflow.com/a/14900065/3622349">currently accepted answer</a> is by far the least performant for the provided example. Furthermore, while the <a href="https://stackoverflow.com/a/13036848/3622349">groupby method</a> is only slightly less performant, I find the duplicated method to be more readable.</p>\n\n<p>Using the sample data provided:</p>\n\n<pre><code>>>> %timeit df3.reset_index().drop_duplicates(subset='index', keep='first').set_index('index')\n\n1000 loops, best of 3: 1.54 ms per loop\n\n>>> %timeit df3.groupby(df3.index).first()\n\n1000 loops, best of 3: 580 Âµs per loop\n\n>>> %timeit df3[~df3.index.duplicated(keep='first')]\n\n1000 loops, best of 3: 307 Âµs per loop\n\n</code></pre>\n\n<p>Note that you can keep the last element by changing the keep argument.</p>\n\n<p>It should also be noted that this method works with <code>MultiIndex</code> as well (using df1 as specified in <a href="https://stackoverflow.com/a/13036848/3622349">Paul's example</a>):</p>\n\n<pre><code>>>> %timeit df1.groupby(level=df1.index.names).last()\n\n1000 loops, best of 3: 771 Âµs per loop\n\n>>> %timeit df1[~df1.index.duplicated(keep='last')]\n\n1000 loops, best of 3: 365 Âµs per loop\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1053
Store output of subprocess.Popen call in a string	<p><strong>In Python 2.7 or Python 3</strong></p>\n\n<p>Instead of making a <code>Popen</code> object directly, you can use the <a href="http://docs.python.org/2/library/subprocess.html#subprocess.check_output" rel="noreferrer"><code>subprocess.check_output()</code> function</a> to store output of a command in a string:</p>\n\n<pre><code>from subprocess import check_output\n\nout = check_output(["ntpq", "-p"])\n\n</code></pre>\n\n<p><strong>In Python 2.4-2.6</strong></p>\n\n<p>Use the <code>communicate</code> method.</p>\n\n<pre><code>import subprocess\n\np = subprocess.Popen(["ntpq", "-p"], stdout=subprocess.PIPE)\n\nout, err = p.communicate()\n\n</code></pre>\n\n<p><code>out</code> is what you want.</p>\n\n<p><strong>Important note about the other answers</strong></p>\n\n<p>Note how I passed in the command. The <code>"ntpq -p"</code> example brings up another matter. Since <code>Popen</code> does not invoke the shell, you would use a list of the command and optionsâ<code>["ntpq", "-p"]</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1054
Split Strings into words with multiple word boundary delimiters	<p>A case where regular expressions are justified:</p>\n\n<pre><code>import re\n\nDATA = "Hey, you - what are you doing here!?"\n\nprint re.findall(r"[\w']+", DATA)\n\n# Prints ['Hey', 'you', 'what', 'are', 'you', 'doing', 'here']\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1055
Generating an MD5 checksum of a file	<p>You can use <a href="http://docs.python.org/library/hashlib.html" rel="noreferrer">hashlib.md5()</a></p>\n\n<p>Note that sometimes you won't be able to fit the whole file in memory. In that case, you'll have to read chunks of 4096 bytes sequentially and feed them to the <code>md5</code> method:</p>\n\n<pre><code>import hashlib\n\ndef md5(fname):\n\n hash_md5 = hashlib.md5()\n\n with open(fname, "rb") as f:\n\n for chunk in iter(lambda: f.read(4096), b""):\n\n hash_md5.update(chunk)\n\n return hash_md5.hexdigest()\n\n</code></pre>\n\n<p><strong>Note:</strong> <code>hash_md5.hexdigest()</code> will return the <em>hex string</em> representation for the digest, if you just need the packed bytes use <code>return hash_md5.digest()</code>, so you don't have to convert back.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1056
Reverse colormap in matplotlib	<p>The standard colormaps also all have reversed versions. They have the same names with <code>_r</code> tacked on to the end. (<a href="http://matplotlib.org/api/pyplot_summary.html?highlight=colormaps#matplotlib.pyplot.colormaps" rel="noreferrer">Documentation here.</a>)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1057
Check if string matches pattern	<pre><code>import re\n\npattern = re.compile("^([A-Z][0-9]+)+$")\n\npattern.match(string)\n\n</code></pre>\n\n<p>Edit: As noted in the comments <code>match</code> checks only for matches at the beginning of the string while <code>re.search()</code> will match a pattern anywhere in string. (See also: <a href="https://docs.python.org/library/re.html#search-vs-match" rel="noreferrer">https://docs.python.org/library/re.html#search-vs-match</a>)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1058
Matplotlib scatter plot with different text at each data point	<p>I'm not aware of any plotting method which takes arrays or lists but you could use <code>annotate()</code> while iterating over the values in <code>n</code>.</p>\n\n<pre><code>y = [2.56422, 3.77284, 3.52623, 3.51468, 3.02199]\n\nz = [0.15, 0.3, 0.45, 0.6, 0.75]\n\nn = [58, 651, 393, 203, 123]\n\nfig, ax = plt.subplots()\n\nax.scatter(z, y)\n\nfor i, txt in enumerate(n):\n\n ax.annotate(txt, (z[i], y[i]))\n\n</code></pre>\n\n<p>There are a lot of formatting options for <code>annotate()</code>, see the <a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.annotate" rel="noreferrer">matplotlib website:</a></p>\n\n<p><img src="https://i.stack.imgur.com/6g4Et.png" alt="enter image description here"></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1059
How to check whether a pandas DataFrame is empty?	<p>You can use the attribute <code>df.empty</code> to check whether it's empty or not:</p>\n\n<pre><code>if df.empty:\n\n print('DataFrame is empty!')\n\n</code></pre>\n\n<p>Source: <a href="http://pandas-docs.github.io/pandas-docs-travis/generated/pandas.DataFrame.empty.html" rel="noreferrer">Pandas Documentation</a></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1060
Remove xticks in a matplotlib plot?	<p>The <a href="http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.tick_params" rel="noreferrer"><code>tick_params</code></a> method is very useful for stuff like this. This code turns off major and minor ticks and removes the labels from the x-axis.</p>\n\n<pre><code>from matplotlib import pyplot as plt\n\nplt.plot(range(10))\n\nplt.tick_params(\n\n axis='x', # changes apply to the x-axis\n\n which='both', # both major and minor ticks are affected\n\n bottom=False, # ticks along the bottom edge are off\n\n top=False, # ticks along the top edge are off\n\n labelbottom=False) # labels along the bottom edge are off\n\nplt.show()\n\nplt.savefig('plot')\n\nplt.clf()\n\n</code></pre>\n\n<p><img src="https://i.stack.imgur.com/0emBv.png" alt="enter image description here"></p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1061
User input and command line arguments	<pre><code>var = raw_input("Please enter something: ")\n\nprint "you entered", var\n\n</code></pre>\n\n<p>Or for Python 3:</p>\n\n<pre><code>var = input("Please enter something: ")\n\nprint("You entered: " + var)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1062
Python Requests throwing SSLError	<p>The problem you are having is caused by an untrusted SSL certificate.</p>\n\n<p>Like @dirk mentioned in a previous comment, the <em>quickest</em> fix is setting <code>verify=False</code>:</p>\n\n<pre><code>requests.get('https://example.com', verify=False)\n\n</code></pre>\n\n<p>Please note that this will cause the certificate not to be verified. <strong>This will expose your application to security risks, such as man-in-the-middle attacks.</strong> </p>\n\n<p>Of course, apply judgment. As mentioned in the comments, this <em>may</em> be acceptable for quick/throwaway applications/scripts, <em>but really should not go to production software</em>. </p>\n\n<p>If just skipping the certificate check is not acceptable in your particular context, consider the following options, your best option is to set the <code>verify</code> parameter to a string that is the path of the <code>.pem</code> file of the certificate (which you should obtain by some sort of secure means).</p>\n\n<p>So, as of version 2.0, the <code>verify</code> parameter accepts the following values, with their respective semantics:</p>\n\n<ul>\n\n<li><code>True</code>: causes the certificate to validated against the library's own trusted certificate authorities (Note: you can see which Root Certificates Requests uses via the Certifi library, a trust database of RCs extracted from Requests: <a href="http://certifiio.readthedocs.org/en/latest/" rel="noreferrer" title="Certifi - Trust Database for Humans">Certifi - Trust Database for Humans</a>).</li>\n\n<li><code>False</code>: bypasses certificate validation <em>completely</em>.</li>\n\n<li>Path to a CA_BUNDLE file for Requests to use to validate the certificates.</li>\n\n</ul>\n\n<p>Source: <a href="https://requests.readthedocs.io/en/latest/user/advanced/#ssl-cert-verification" rel="noreferrer">Requests - SSL Cert Verification</a></p>\n\n<p>Also take a look at the <code>cert</code> parameter on the same link.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1063
How do I parse an ISO 8601-formatted date?	<p>The <em>python-dateutil</em> package can parse not only RFC 3339 datetime strings like the one in the question, but also other <a href="https://en.wikipedia.org/wiki/ISO_8601" rel="noreferrer">ISO 8601</a> date and time strings that don't comply with RFC 3339 (such as ones with no UTC offset, or ones that represent only a date).</p>\n\n<pre><code>>>> import dateutil.parser\n\n>>> dateutil.parser.isoparse('2008-09-03T20:56:35.450686Z') # RFC 3339 format\n\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=tzutc())\n\n>>> dateutil.parser.isoparse('2008-09-03T20:56:35.450686') # ISO 8601 extended format\n\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686)\n\n>>> dateutil.parser.isoparse('20080903T205635.450686') # ISO 8601 basic format\n\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686)\n\n>>> dateutil.parser.isoparse('20080903') # ISO 8601 basic format, date only\n\ndatetime.datetime(2008, 9, 3, 0, 0)\n\n</code></pre>\n\n<hr>\n\n<p>Note that <a href="https://dateutil.readthedocs.io/en/stable/parser.html#dateutil.parser.isoparse" rel="noreferrer"><code>dateutil.parser.isoparse</code></a> is presumably stricter than the more hacky <a href="https://dateutil.readthedocs.io/en/stable/parser.html#dateutil.parser.parse" rel="noreferrer"><code>dateutil.parser.parse</code></a>, but both of them are quite forgiving and will attempt to interpret the string that you pass in. If you want to eliminate the possibility of any misreads, you need to use something stricter than either of these functions.</p>\n\n<p>The Pypi name is <a href="https://pypi.python.org/pypi/python-dateutil" rel="noreferrer"><code>python-dateutil</code></a>, not <code>dateutil</code> (thanks <a href="https://stackoverflow.com/users/1174169/cod3monk3y">code3monk3y</a>):</p>\n\n<pre><code>pip install python-dateutil\n\n</code></pre>\n\n<p>If you're using Python 3.7, have a look at <a href="https://stackoverflow.com/a/49784038/247696">this answer</a> about <code>datetime.datetime.fromisoformat</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1064
Finding local IP addresses using Python's stdlib	<p>I just found this but it seems a bit hackish, however they say tried it on *nix and I did on windows and it worked.</p>\n\n<pre><code>import socket\n\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\ns.connect(("8.8.8.8", 80))\n\nprint(s.getsockname()[0])\n\ns.close()\n\n</code></pre>\n\n<p>This assumes you have an internet access, and that there is no local proxy.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1065
Shuffle an array with python, randomize array item order with python	<pre><code>import random\n\nrandom.shuffle(array)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1066
Getting the SQL from a Django QuerySet	<p>You print the queryset's <code>query</code> attribute.</p>\n\n<pre><code>>>> queryset = MyModel.objects.all()\n\n>>> print(queryset.query)\n\nSELECT "myapp_mymodel"."id", ... FROM "myapp_mymodel"\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1067
How to print an exception in Python?	<p>The <a href="http://docs.python.org/library/traceback.html" rel="noreferrer"><code>traceback</code></a> module provides methods for <a href="https://docs.python.org/3/library/traceback.html#traceback-examples" rel="noreferrer">formatting and printing exceptions</a> and their tracebacks, e.g. this would print exception like the default handler does:</p>\n\n<pre><code>import traceback\n\ntry:\n\n 1/0\n\nexcept Exception:\n\n traceback.print_exc()\n\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>Traceback (most recent call last):\n\n File "C:\scripts\divide_by_zero.py", line 4, in <module>\n\n 1/0\n\nZeroDivisionError: division by zero\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1068
How can I rename a conda environment?	<p>You can't.</p>\n\n<p>One workaround is to <a href="https://conda.io/docs/commands/conda-create.html" rel="noreferrer">create</a> clone environment, and then <a href="https://conda.io/docs/commands/conda-remove.html" rel="noreferrer">remove</a> original one:</p>\n\n<p>(remember about deactivating current environment with <code>deactivate</code> on Windows and <code>source deactivate</code> on macOS/Linux)</p>\n\n<pre><code>conda create --name new_name --clone old_name\n\nconda remove --name old_name --all # or its alias: `conda env remove --name old_name`\n\n</code></pre>\n\n<p>There are several drawbacks of this method:</p>\n\n<ol>\n\n<li>it redownloads packages - you can use <code>--offline</code> flag to disable it,</li>\n\n<li>time consumed on copying environment's files,</li>\n\n<li>temporary double disk usage.</li>\n\n</ol>\n\n<p>There is an open <a href="https://github.com/conda/conda/issues/3097" rel="noreferrer">issue</a> requesting this feature.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1069
Convert Python dict into a dataframe	<p>The error here, is since calling the DataFrame constructor with scalar values (where it expects values to be a list/dict/... i.e. have multiple columns):</p>\n\n<pre><code>pd.DataFrame(d)\n\nValueError: If using all scalar values, you must must pass an index\n\n</code></pre>\n\n<p>You could take the items from the dictionary (i.e. the key-value pairs):</p>\n\n<pre><code>In [11]: pd.DataFrame(d.items()) # or list(d.items()) in python 3\n\nOut[11]:\n\n 0 1\n\n0 2012-07-02 392\n\n1 2012-07-06 392\n\n2 2012-06-29 391\n\n3 2012-06-28 391\n\n...\n\nIn [12]: pd.DataFrame(d.items(), columns=['Date', 'DateValue'])\n\nOut[12]:\n\n Date DateValue\n\n0 2012-07-02 392\n\n1 2012-07-06 392\n\n2 2012-06-29 391\n\n</code></pre>\n\n<p>But I think it makes more sense to pass the Series constructor:</p>\n\n<pre><code>In [21]: s = pd.Series(d, name='DateValue')\n\nOut[21]:\n\n2012-06-08 388\n\n2012-06-09 388\n\n2012-06-10 388\n\nIn [22]: s.index.name = 'Date'\n\nIn [23]: s.reset_index()\n\nOut[23]:\n\n Date DateValue\n\n0 2012-06-08 388\n\n1 2012-06-09 388\n\n2 2012-06-10 388\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1070
Import multiple csv files into pandas and concatenate into one DataFrame	<p>If you have same columns in all your <code>csv</code> files then you can try the code below.\n\nI have added <code>header=0</code> so that after reading <code>csv</code> first row can be assigned as the column names.</p>\n\n<pre><code>import pandas as pd\n\nimport glob\n\npath = r'C:\DRO\DCL_rawdata_files' # use your path\n\nall_files = glob.glob(path + "/*.csv")\n\nli = []\n\nfor filename in all_files:\n\n df = pd.read_csv(filename, index_col=None, header=0)\n\n li.append(df)\n\nframe = pd.concat(li, axis=0, ignore_index=True)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1071
Creating a range of dates in Python	<p>Marginally better...</p>\n\n<pre><code>base = datetime.datetime.today()\n\ndate_list = [base - datetime.timedelta(days=x) for x in range(numdays)]\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1072
Installing Python packages from local file system folder to virtualenv with pip	<p>What about::</p>\n\n<pre><code>pip install --help\n\n...\n\n -e, --editable <path/url> Install a project in editable mode (i.e. setuptools\n\n "develop mode") from a local project path or a VCS url.\n\n</code></pre>\n\n<p>eg, <code>pip install -e /srv/pkg</code></p>\n\n<p>where /srv/pkg is the top-level directory where 'setup.py' can be found.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1073
Converting datetime.date to UTC timestamp in Python	<p>If <code>d = date(2011, 1, 1)</code> is in UTC:</p>\n\n<pre><code>>>> from datetime import datetime, date\n\n>>> import calendar\n\n>>> timestamp1 = calendar.timegm(d.timetuple())\n\n>>> datetime.utcfromtimestamp(timestamp1)\n\ndatetime.datetime(2011, 1, 1, 0, 0)\n\n</code></pre>\n\n<p>If <code>d</code> is in local timezone:</p>\n\n<pre><code>>>> import time\n\n>>> timestamp2 = time.mktime(d.timetuple()) # DO NOT USE IT WITH UTC DATE\n\n>>> datetime.fromtimestamp(timestamp2)\n\ndatetime.datetime(2011, 1, 1, 0, 0)\n\n</code></pre>\n\n<p><code>timestamp1</code> and <code>timestamp2</code> may differ if midnight in the local timezone is not the same time instance as midnight in UTC.</p>\n\n<p><code>mktime()</code> may return a wrong result if <code>d</code> corresponds to an <a href="https://stackoverflow.com/questions/12165691/python-datetime-with-timezone-to-epoch/12166400#comment39565270_12166400">ambiguous local time (e.g., during DST transition)</a> or if <code>d</code> is a past(future) date when the utc offset might have been different <em>and</em> the C <code>mktime()</code> has no access to <a href="http://www.iana.org/time-zones/repository/tz-link.html" rel="noreferrer">the tz database</a> on the given platform. You could <a href="https://stackoverflow.com/a/17365806/4279">use <code>pytz</code> module (e.g., via <code>tzlocal.get_localzone()</code>) to get access to the tz database on all platforms</a>. Also, <a href="https://stackoverflow.com/questions/28949623/python-datetime-and-utc-offset-conversion-ignoring-timezone-daylight-savings/28950133#comment46155743_28950133"><code>utcfromtimestamp()</code> may fail and <code>mktime()</code> may return non-POSIX timestamp if <code>"right"</code> timezone is used</a>.</p>\n\n<hr>\n\n<p>To convert <code>datetime.date</code> object that represents date in UTC without <code>calendar.timegm()</code>:</p>\n\n<pre><code>DAY = 24*60*60 # POSIX day in seconds (exact value)\n\ntimestamp = (utc_date.toordinal() - date(1970, 1, 1).toordinal()) * DAY\n\ntimestamp = (utc_date - date(1970, 1, 1)).days * DAY\n\n</code></pre>\n\n<h2>How can I get a date converted to seconds since epoch according to UTC?</h2>\n\n<p>To convert <code>datetime.datetime</code> (not <code>datetime.date</code>) object that already represents time in UTC to the corresponding POSIX timestamp (a <code>float</code>).</p>\n\n<h3>Python 3.3+</h3>\n\n<p><a href="http://docs.python.org/3.3/library/datetime#datetime.datetime.timestamp" rel="noreferrer"><code>datetime.timestamp()</code></a>:</p>\n\n<pre><code>from datetime import timezone\n\ntimestamp = dt.replace(tzinfo=timezone.utc).timestamp()\n\n</code></pre>\n\n<p>Note: It is necessary to supply <code>timezone.utc</code> explicitly otherwise <code>.timestamp()</code> assume that your naive datetime object is in local timezone.</p>\n\n<h3>Python 3 (< 3.3)</h3>\n\n<p>From the docs for <a href="http://docs.python.org/dev/library/datetime#datetime.datetime.utcfromtimestamp" rel="noreferrer"><code>datetime.utcfromtimestamp()</code></a>:</p>\n\n<blockquote>\n\n <p>There is no method to obtain the timestamp from a datetime instance,\n\n but POSIX timestamp corresponding to a datetime instance dt can be\n\n easily calculated as follows. For a naive dt:</p>\n\n</blockquote>\n\n<pre><code>timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)\n\n</code></pre>\n\n<blockquote>\n\n <p>And for an aware dt:</p>\n\n</blockquote>\n\n<pre><code>timestamp = (dt - datetime(1970,1,1, tzinfo=timezone.utc)) / timedelta(seconds=1)\n\n</code></pre>\n\n<p>Interesting read: <a href="http://www.ucolick.org/~sla/leapsecs/epochtime.html" rel="noreferrer">Epoch time vs. time of day</a> on the difference between <em>What time is it?</em> and <em>How many seconds have elapsed?</em></p>\n\n<p>See also: <a href="http://bugs.python.org/issue2736" rel="noreferrer">datetime needs an "epoch" method</a></p>\n\n<h3>Python 2</h3>\n\n<p>To adapt the above code for Python 2:</p>\n\n<pre><code>timestamp = (dt - datetime(1970, 1, 1)).total_seconds()\n\n</code></pre>\n\n<p>where <a href="http://docs.python.org/library/datetime.html#datetime.timedelta.total_seconds" rel="noreferrer"><code>timedelta.total_seconds()</code></a> is equivalent to <code>(td.microseconds + (td.seconds + td.days * 24 * 3600) * 10**6) / 10**6</code> computed with true division enabled.</p>\n\n<h3><a href="http://ideone.com/rvH9u" rel="noreferrer">Example</a></h3>\n\n<pre><code>from __future__ import division\n\nfrom datetime import datetime, timedelta\n\ndef totimestamp(dt, epoch=datetime(1970,1,1)):\n\n td = dt - epoch\n\n # return td.total_seconds()\n\n return (td.microseconds + (td.seconds + td.days * 86400) * 10**6) / 10**6 \n\nnow = datetime.utcnow()\n\nprint now\n\nprint totimestamp(now)\n\n</code></pre>\n\n<p>Beware of <a href="http://bugs.python.org/issue8644" rel="noreferrer">floating-point issues</a>.</p>\n\n<h3>Output</h3>\n\n<pre><code>2012-01-08 15:34:10.022403\n\n1326036850.02\n\n</code></pre>\n\n<h2>How to convert an aware <code>datetime</code> object to POSIX timestamp</h2>\n\n<pre><code>assert dt.tzinfo is not None and dt.utcoffset() is not None\n\ntimestamp = dt.timestamp() # Python 3.3+\n\n</code></pre>\n\n<p>On Python 3:</p>\n\n<pre><code>from datetime import datetime, timedelta, timezone\n\nepoch = datetime(1970, 1, 1, tzinfo=timezone.utc)\n\ntimestamp = (dt - epoch) / timedelta(seconds=1)\n\ninteger_timestamp = (dt - epoch) // timedelta(seconds=1)\n\n</code></pre>\n\n<p>On Python 2:</p>\n\n<pre><code># utc time = local time - utc offset\n\nutc_naive = dt.replace(tzinfo=None) - dt.utcoffset()\n\ntimestamp = (utc_naive - datetime(1970, 1, 1)).total_seconds()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1074
Installing pip packages to $HOME folder	<p>While you can use a <code>virtualenv</code>, you don't need to. The trick is passing the PEP370 <code>--user</code> argument to the <code>setup.py</code> script. With the latest version of <code>pip</code>, one way to do it is:</p>\n\n<pre><code>pip install --user mercurial\n\n</code></pre>\n\n<p>This should result in the <code>hg</code> script being installed in <code>$HOME/.local/bin/hg</code> and the rest of the hg package in <code>$HOME/.local/lib/pythonx.y/site-packages/</code>.</p>\n\n<p>Note, that the above is true for Python 2.6. There has been a <a href="http://bugs.python.org/issue7175" rel="noreferrer">bit of controversy</a> among the Python core developers about what is the appropriate directory location on Mac OS X for PEP370-style <code>user</code> installations. In Python 2.7 and 3.2, the location on Mac OS X was changed from <code>$HOME/.local</code> to <code>$HOME/Library/Python</code>. This might change in a future release. But, for now, on 2.7 (and 3.2, if <code>hg</code> were supported on Python 3), the above locations will be <code>$HOME/Library/Python/x.y/bin/hg</code> and <code>$HOME/Library/Python/x.y/lib/python/site-packages</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1075
"Could not run curl-config: [Errno 2] No such file or directory" when installing pycurl	<p>On Debian I needed the following packages to fix this</p>\n\n<pre><code>sudo apt install libcurl4-openssl-dev libssl-dev\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1076
How do I update a Python package?	<p>The best way I've found is to run this command from terminal</p>\n\n<pre><code>sudo pip install [package_name] --upgrade\n\n</code></pre>\n\n<p><code>sudo</code> will ask to enter your root password to confirm the action.</p>\n\n<hr>\n\n<p>Note: Some users may have pip3 installed instead. In that case, use</p>\n\n<pre><code>sudo pip3 install [package_name] --upgrade\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1077
How can I explicitly free memory in Python?	<p>According to <a href="http://docs.python.org/library/gc.html" rel="noreferrer">Python Official Documentation</a>, you can force the Garbage Collector to release unreferenced memory with <code>gc.collect()</code>. Example:</p>\n\n<pre><code>import gc\n\ngc.collect()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1078
What does the "yield" keyword do?	<p>The <code>yield</code> keyword is reduced to two simple facts:</p>\n\n<ol>\n\n<li>If the compiler detects the <code>yield</code> keyword <em>anywhere</em> inside a function, that function no longer returns via the <code>return</code> statement. <strong><em>Instead</em></strong>, it <strong>immediately</strong> returns a <strong>lazy "pending list" object</strong> called a generator</li>\n\n<li>A generator is iterable. What is an <em>iterable</em>? It's anything like a <code>list</code> or <code>set</code> or <code>range</code> or dict-view, with a <em>built-in protocol for visiting each element in a certain order</em>.</li>\n\n</ol>\n\n<p>In a nutshell: <strong>a generator is a lazy, incrementally-pending list</strong>, and <strong><code>yield</code> statements allow you to use function notation to program the list values</strong> the generator should incrementally spit out.</p>\n\n<pre><code>generator = myYieldingFunction(...)\n\nx = list(generator)\n\n generator\n\n v\n\n[x[0], ..., ???]\n\n generator\n\n v\n\n[x[0], x[1], ..., ???]\n\n generator\n\n v\n\n[x[0], x[1], x[2], ..., ???]\n\n StopIteration exception\n\n[x[0], x[1], x[2]] done\n\nlist==[x[0], x[1], x[2]]\n\n</code></pre>\n\n<hr>\n\n<h2>Example</h2>\n\n<p>Let's define a function <code>makeRange</code> that's just like Python's <code>range</code>. Calling <code>makeRange(n)</code> RETURNS A GENERATOR:</p>\n\n<pre><code>def makeRange(n):\n\n # return 0,1,2,...,n-1\n\n i = 0\n\n while i < n:\n\n yield i\n\n i += 1\n\n>>> makeRange(5)\n\n<generator object makeRange at 0x19e4aa0>\n\n</code></pre>\n\n<p>To force the generator to immediately return its pending values, you can pass it into <code>list()</code> (just like you could any iterable):</p>\n\n<pre><code>>>> list(makeRange(5))\n\n[0, 1, 2, 3, 4]\n\n</code></pre>\n\n<hr>\n\n<h2>Comparing example to "just returning a list"</h2>\n\n<p>The above example can be thought of as merely creating a list which you append to and return:</p>\n\n<pre><code># list-version # # generator-version\n\ndef makeRange(n): # def makeRange(n):\n\n """return [0,1,2,...,n-1]""" #~ """return 0,1,2,...,n-1"""\n\n TO_RETURN = [] #>\n\n i = 0 # i = 0\n\n while i < n: # while i < n:\n\n TO_RETURN += [i] #~ yield i\n\n i += 1 # i += 1 ## indented\n\n return TO_RETURN #>\n\n>>> makeRange(5)\n\n[0, 1, 2, 3, 4]\n\n</code></pre>\n\n<p>There is one major difference, though; see the last section.</p>\n\n<hr>\n\n<h2>How you might use generators</h2>\n\n<p>An iterable is the last part of a list comprehension, and all generators are iterable, so they're often used like so:</p>\n\n<pre><code># _ITERABLE_\n\n>>> [x+10 for x in makeRange(5)]\n\n[10, 11, 12, 13, 14]\n\n</code></pre>\n\n<p>To get a better feel for generators, you can play around with the <code>itertools</code> module (be sure to use <code>chain.from_iterable</code> rather than <code>chain</code> when warranted). For example, you might even use generators to implement infinitely-long lazy lists like <code>itertools.count()</code>. You could implement your own <code>def enumerate(iterable): zip(count(), iterable)</code>, or alternatively do so with the <code>yield</code> keyword in a while-loop.</p>\n\n<p>Please note: generators can actually be used for many more things, such as <a href="http://www.dabeaz.com/coroutines/index.html" rel="noreferrer">implementing coroutines</a> or non-deterministic programming or other elegant things. However, the "lazy lists" viewpoint I present here is the most common use you will find.</p>\n\n<hr>\n\n<h2>Behind the scenes</h2>\n\n<p>This is how the "Python iteration protocol" works. That is, what is going on when you do <code>list(makeRange(5))</code>. This is what I describe earlier as a "lazy, incremental list".</p>\n\n<pre><code>>>> x=iter(range(5))\n\n>>> next(x)\n\n0\n\n>>> next(x)\n\n1\n\n>>> next(x)\n\n2\n\n>>> next(x)\n\n3\n\n>>> next(x)\n\n4\n\n>>> next(x)\n\nTraceback (most recent call last):\n\n File "<stdin>", line 1, in <module>\n\nStopIteration\n\n</code></pre>\n\n<p>The built-in function <code>next()</code> just calls the objects <code>.next()</code> function, which is a part of the "iteration protocol" and is found on all iterators. You can manually use the <code>next()</code> function (and other parts of the iteration protocol) to implement fancy things, usually at the expense of readability, so try to avoid doing that...</p>\n\n<hr>\n\n<h2>Minutiae</h2>\n\n<p>Normally, most people would not care about the following distinctions and probably want to stop reading here.</p>\n\n<p>In Python-speak, an <em>iterable</em> is any object which "understands the concept of a for-loop" like a list <code>[1,2,3]</code>, and an <em>iterator</em> is a specific instance of the requested for-loop like <code>[1,2,3].__iter__()</code>. A <em>generator</em> is exactly the same as any iterator, except for the way it was written (with function syntax).</p>\n\n<p>When you request an iterator from a list, it creates a new iterator. However, when you request an iterator from an iterator (which you would rarely do), it just gives you a copy of itself.</p>\n\n<p>Thus, in the unlikely event that you are failing to do something like this...</p>\n\n<pre><code>> x = myRange(5)\n\n> list(x)\n\n[0, 1, 2, 3, 4]\n\n> list(x)\n\n[]\n\n</code></pre>\n\n<p>... then remember that a generator is an <em>iterator</em>; that is, it is one-time-use. If you want to reuse it, you should call <code>myRange(...)</code> again. If you need to use the result twice, convert the result to a list and store it in a variable <code>x = list(myRange(5))</code>. Those who absolutely need to clone a generator (for example, who are doing terrifyingly hackish metaprogramming) can use <a href="https://docs.python.org/2/library/itertools.html#itertools.tee" rel="noreferrer"><code>itertools.tee</code></a> if absolutely necessary, since the copyable iterator Python <a href="http://en.wikipedia.org/wiki/Python_Enhancement_Proposal#Development" rel="noreferrer">PEP</a> standards proposal has been deferred.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1079
Compiled vs. Interpreted Languages	<p>A compiled language is one where the program, once compiled, is expressed in the instructions of the target machine. For example, an addition "+" operation in your source code could be translated directly to the "ADD" instruction in machine code.</p>\n\n<p>An interpreted language is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally <em>is</em> written in the language of the native machine). For example, the same "+" operation would be recognised by the interpreter at run time, which would then call its own "add(a,b)" function with the appropriate arguments, which would then execute the machine code "ADD" instruction.</p>\n\n<p>You can do anything that you can do in an interpreted language in a compiled language and vice-versa - they are both Turing complete. Both however have advantages and disadvantages for implementation and use.</p>\n\n<p>I'm going to completely generalise (purists forgive me!) but, roughly, here are the advantages of compiled languages:</p>\n\n<ul>\n\n<li>Faster performance by directly using the native code of the target machine</li>\n\n<li>Opportunity to apply quite powerful optimisations during the compile stage</li>\n\n</ul>\n\n<p>And here are the advantages of interpreted languages:</p>\n\n<ul>\n\n<li>Easier to implement (writing good compilers is very hard!!)</li>\n\n<li>No need to run a compilation stage: can execute code directly "on the fly"</li>\n\n<li>Can be more convenient for dynamic languages</li>\n\n</ul>\n\n<p>Note that modern techniques such as bytecode compilation add some extra complexity - what happens here is that the compiler targets a "virtual machine" which is not the same as the underlying hardware. These virtual machine instructions can then be compiled again at a later stage to get native code (e.g. as done by the Java JVM JIT compiler).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1080
How to get the current time in Python	<p>Similar to <a href="https://stackoverflow.com/questions/415511/how-to-get-current-time-in-python/415519#415519">Harley's answer</a>, but use the <code>str()</code> function for a quick-n-dirty, slightly more human readable format:</p>\n\n<pre><code>>>> from datetime import datetime\n\n>>> str(datetime.now())\n\n'2011-05-03 17:45:35.177000'\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1081
How to avoid "RuntimeError: dictionary changed size during iteration" error?	<p>In Python 2.x calling <code>keys</code> makes a copy of the key that you can iterate over while modifying the <code>dict</code>:</p>\n\n<pre><code>for i in d.keys():\n\n</code></pre>\n\n<p>Note that this doesn't work in Python 3.x because <code>keys</code> returns an iterator instead of a list.</p>\n\n<p>Another way is to use <code>list</code> to force a copy of the keys to be made. This one also works in Python 3.x:</p>\n\n<pre><code>for i in list(d):\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1082
How to read/process command line arguments?	<p>The canonical solution in the standard library is <code>argparse</code> (<a href="https://docs.python.org/3/library/argparse.html" rel="noreferrer">docs</a>):</p>\n\n<p>Here is an example:</p>\n\n<pre><code>from argparse import ArgumentParser\n\nparser = ArgumentParser()\n\nparser.add_argument("-f", "--file", dest="filename",\n\n help="write report to FILE", metavar="FILE")\n\nparser.add_argument("-q", "--quiet",\n\n action="store_false", dest="verbose", default=True,\n\n help="don't print status messages to stdout")\n\nargs = parser.parse_args()\n\n</code></pre>\n\n<p><code>argparse</code> supports (among other things):</p>\n\n<ul>\n\n<li>Multiple options in any order.</li>\n\n<li>Short and long options.</li>\n\n<li>Default values.</li>\n\n<li>Generation of a usage help message.</li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1083
Python integer incrementing with ++	<p>Simply put, the <code>++</code> and <code>--</code> operators don't exist in Python because they wouldn't be <em>operators</em>, they would have to be <em>statements</em>. All namespace modification in Python is a statement, for simplicity and consistency. That's one of the design decisions. And because integers are immutable, the only way to 'change' a variable is by reassigning it.</p>\n\n<p>Fortunately we have wonderful tools for the use-cases of <code>++</code> and <code>--</code> in other languages, like <code>enumerate()</code> and <code>itertools.count()</code>.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1084
Hidden features of Python	<p><strong>enumerate</strong></p>\n\n<p>Wrap an iterable with enumerate and it will yield the item along with its index.</p>\n\n<p>For example:</p>\n\n<pre><code>\n\n>>> a = ['a', 'b', 'c', 'd', 'e']\n\n>>> for index, item in enumerate(a): print index, item\n\n...\n\n0 a\n\n1 b\n\n2 c\n\n3 d\n\n4 e\n\n>>>\n\n</code></pre>\n\n<p>References:</p>\n\n<ul>\n\n<li><a href="http://docs.python.org/tutorial/datastructures.html#looping-techniques" rel="nofollow noreferrer">Python tutorialâlooping techniques</a></li>\n\n<li><a href="http://docs.python.org/library/functions.html#enumerate" rel="nofollow noreferrer">Python docsâbuilt-in functionsâ<code>enumerate</code></a></li>\n\n<li><a href="http://www.python.org/dev/peps/pep-0279/" rel="nofollow noreferrer">PEP 279</a></li>\n\n</ul>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1085
Does "\d" in regex mean a digit?	<p><code>[0-9]</code> <strong>is not always equivalent</strong> to <code>\d</code>. In python3, <code>[0-9]</code> matches only <code>0123456789</code> characters, while <code>\d</code> matches <code>[0-9]</code> and other digit characters, for example Eastern Arabic numerals <code>Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©</code>. </p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1086
Removing pip's cache?	<p>Clear the cache directory where appropriate for your system</p>\n\n<p>Linux and Unix</p>\n\n<pre><code>~/.cache/pip # and it respects the XDG_CACHE_HOME directory.\n\n</code></pre>\n\n<p>OS X</p>\n\n<pre><code>~/Library/Caches/pip\n\n</code></pre>\n\n<p>Windows</p>\n\n<pre><code>%LocalAppData%\pip\Cache\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1087
logger configuration to log to file and print to stdout	<p>Just get a handle to the root logger and add the <code>StreamHandler</code>. The <code>StreamHandler</code> writes to stderr. Not sure if you really need stdout over stderr, but this is what I use when I setup the Python logger and I also add the <code>FileHandler</code> as well. Then all my logs go to both places (which is what it sounds like you want).</p>\n\n<pre><code>import logging\n\nlogging.getLogger().addHandler(logging.StreamHandler())\n\n</code></pre>\n\n<p>If you want to output to <code>stdout</code> instead of <code>stderr</code>, you just need to specify it to the <code>StreamHandler</code> constructor.</p>\n\n<pre><code>import sys\n\n# ...\n\nlogging.getLogger().addHandler(logging.StreamHandler(sys.stdout))\n\n</code></pre>\n\n<p>You could also add a <code>Formatter</code> to it so all your log lines have a common header.</p>\n\n<p>ie:</p>\n\n<pre><code>import logging\n\nlogFormatter = logging.Formatter("%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s] %(message)s")\n\nrootLogger = logging.getLogger()\n\nfileHandler = logging.FileHandler("{0}/{1}.log".format(logPath, fileName))\n\nfileHandler.setFormatter(logFormatter)\n\nrootLogger.addHandler(fileHandler)\n\nconsoleHandler = logging.StreamHandler()\n\nconsoleHandler.setFormatter(logFormatter)\n\nrootLogger.addHandler(consoleHandler)\n\n</code></pre>\n\n<p>Prints to the format of:</p>\n\n<pre><code>2012-12-05 16:58:26,618 [MainThread ] [INFO ] my message\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1088
How to sort a dataFrame in python pandas by two or more columns?	<p>As of the 0.17.0 release, the <a href="http://pandas.pydata.org/pandas-docs/version/0.17.0/generated/pandas.DataFrame.sort.html" rel="noreferrer"><code>sort</code></a> method was deprecated in favor of <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort_values.html" rel="noreferrer"><code>sort_values</code></a>. <code>sort</code> was completely removed in the 0.20.0 release. The arguments (and results) remain the same:</p>\n\n<pre><code>df.sort_values(['a', 'b'], ascending=[True, False])\n\n</code></pre>\n\n<hr>\n\n<p>You can use the ascending argument of <a href="http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.sort.html" rel="noreferrer"><code>sort</code></a>:</p>\n\n<pre><code>df.sort(['a', 'b'], ascending=[True, False])\n\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>In [11]: df1 = pd.DataFrame(np.random.randint(1, 5, (10,2)), columns=['a','b'])\n\nIn [12]: df1.sort(['a', 'b'], ascending=[True, False])\n\nOut[12]:\n\n a b\n\n2 1 4\n\n7 1 3\n\n1 1 2\n\n3 1 2\n\n4 3 2\n\n6 4 4\n\n0 4 3\n\n9 4 3\n\n5 4 1\n\n8 4 1\n\n</code></pre>\n\n<hr>\n\n<p>As commented by @renadeen</p>\n\n<blockquote>\n\n <p>Sort isn't in place by default! So you should assign result of the sort method to a variable or add inplace=True to method call.</p>\n\n</blockquote>\n\n<p>that is, if you want to reuse df1 as a sorted DataFrame:</p>\n\n<pre><code>df1 = df1.sort(['a', 'b'], ascending=[True, False])\n\n</code></pre>\n\n<p>or</p>\n\n<pre><code>df1.sort(['a', 'b'], ascending=[True, False], inplace=True)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1089
How do I download a file over HTTP using Python?	<p>Use <a href="https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen" rel="noreferrer"><code>urllib.request.urlopen()</code></a>:</p>\n\n<pre><code>import urllib.request\n\nwith urllib.request.urlopen('http://www.example.com/') as f:\n\n html = f.read().decode('utf-8')\n\n</code></pre>\n\n<p>This is the most basic way to use the library, minus any error handling. You can also do more complex stuff such as changing headers.</p>\n\n<p>On Python 2, the method is in <a href="http://docs.python.org/2/library/urllib2.html" rel="noreferrer"><code>urllib2</code></a>:</p>\n\n<pre><code>import urllib2\n\nresponse = urllib2.urlopen('http://www.example.com/')\n\nhtml = response.read()\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1090
Create empty file using python	<p><strike>There is no way to create a file without opening it</strike> There is <code>os.mknod("newfile.txt")</code> (<em>but it requires root privileges on OSX</em>). The system call to create a file is actually <code>open()</code> with the <code>O_CREAT</code> flag. So no matter how, you'll always open the file.</p>\n\n<p>So the easiest way to simply create a file without truncating it in case it exists is this:</p>\n\n<pre><code>open(x, 'a').close()\n\n</code></pre>\n\n<p>Actually you could omit the <code>.close()</code> since the refcounting GC of CPython will close it immediately after the <code>open()</code> statement finished - but it's cleaner to do it explicitely and relying on CPython-specific behaviour is not good either.</p>\n\n<p>In case you want <code>touch</code>'s behaviour (i.e. update the mtime in case the file exists):</p>\n\n<pre><code>import os\n\ndef touch(path):\n\n with open(path, 'a'):\n\n os.utime(path, None)\n\n</code></pre>\n\n<p>You could extend this to also create any directories in the path that do not exist:</p>\n\n<pre><code>basedir = os.path.dirname(path)\n\nif not os.path.exists(basedir):\n\n os.makedirs(basedir)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1091
Pelican 3.3 pelican-quickstart error "ValueError: unknown locale: UTF-8"	<p>You could try a solution posted <a href="https://coderwall.com/p/-k_93g">here</a> or <a href="http://patrick.arminio.info/blog/2012/02/fix-valueerror-unknown-locale-utf8/">here</a>. Basically, add some lines to your ~/.bash_profile:</p>\n\n<pre><code>export LC_ALL=en_US.UTF-8\n\nexport LANG=en_US.UTF-8\n\n</code></pre>\n\n<p>There is an outstanding <a href="https://bugs.python.org/issue18378">bug report</a> related to this issue. It appears that Python makes some assumptions about the format of locale names that aren't universally valid. Explicitly setting these environment vars is basically just a workaround for that bug.</p>\n\n<p><strong>[Edit:]</strong> As @asmeurer correctly points out, the above fix assumes English and the U.S. You should really pick your preferred locale from the list given by <code>locale -a</code> (generally one that ends in <code>UTF-8</code>).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1092
How do I protect Python code?	<p>"Is there a good way to handle this problem?" No. Nothing can be protected against reverse engineering. Even the firmware on DVD machines has been reverse engineered and <a href="http://en.wikipedia.org/wiki/AACS_encryption_key_controversy" rel="noreferrer">AACS Encryption key</a> exposed. And that's in spite of the DMCA making that a criminal offense.</p>\n\n<p>Since no technical method can stop your customers from reading your code, you have to apply ordinary commercial methods.</p>\n\n<ol>\n\n<li><p>Licenses. Contracts. Terms and Conditions. This still works even when people can read the code. Note that some of your Python-based components may require that you pay fees before you sell software using those components. Also, some open-source licenses prohibit you from concealing the source or origins of that component. </p></li>\n\n<li><p>Offer significant value. If your stuff is so good -- at a price that is hard to refuse -- there's no incentive to waste time and money reverse engineering anything. Reverse engineering is expensive. Make your product slightly less expensive.</p></li>\n\n<li><p>Offer upgrades and enhancements that make any reverse engineering a bad idea. When the next release breaks their reverse engineering, there's no point. This can be carried to absurd extremes, but you should offer new features that make the next release more valuable than reverse engineering.</p></li>\n\n<li><p>Offer customization at rates so attractive that they'd rather pay you do build and support the enhancements.</p></li>\n\n<li><p>Use a license key which expires. This is cruel, and will give you a bad reputation, but it certainly makes your software stop working. </p></li>\n\n<li><p>Offer it as a web service. SaaS involves no downloads to customers. </p></li>\n\n</ol>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1093
Starting python debugger automatically on error	<pre><code>python -m pdb -c continue myscript.py\n\n</code></pre>\n\n<p>If you don't provide the <code>-c continue</code> flag then you'll need to enter 'c' (for Continue) when execution begins. Then it will run to the error point and give you control there. As <a href="https://stackoverflow.com/questions/242485/starting-python-debugger-automatically-on-error#comment73725114_2438834">mentioned by eqzx</a>, this flag is a new addition in python 3.2 so entering 'c' is required for earlier Python versions (see <a href="https://docs.python.org/3/library/pdb.html" rel="noreferrer">https://docs.python.org/3/library/pdb.html</a>).</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1094
Proper indentation for Python multiline strings	<p>You probably want to line up with the <code>"""</code></p>\n\n<pre><code>def foo():\n\n string = """line one\n\n line two\n\n line three"""\n\n</code></pre>\n\n<p>Since the newlines and spaces are included in the string itself, you will have to postprocess it. If you don't want to do that and you have a whole lot of text, you might want to store it separately in a text file. If a text file does not work well for your application and you don't want to postprocess, I'd probably go with</p>\n\n<pre><code>def foo():\n\n string = ("this is an "\n\n "implicitly joined "\n\n "string")\n\n</code></pre>\n\n<p>If you want to postprocess a multiline string to trim out the parts you don't need, you should consider the <a href="http://docs.python.org/3/library/textwrap.html" rel="noreferrer"><code>textwrap</code></a> module or the technique for postprocessing docstrings presented in <a href="http://www.python.org/dev/peps/pep-0257/" rel="noreferrer">PEP 257</a>:</p>\n\n<pre><code>def trim(docstring):\n\n if not docstring:\n\n return ''\n\n # Convert tabs to spaces (following the normal Python rules)\n\n # and split into a list of lines:\n\n lines = docstring.expandtabs().splitlines()\n\n # Determine minimum indentation (first line doesn't count):\n\n indent = sys.maxint\n\n for line in lines[1:]:\n\n stripped = line.lstrip()\n\n if stripped:\n\n indent = min(indent, len(line) - len(stripped))\n\n # Remove indentation (first line is special):\n\n trimmed = [lines[0].strip()]\n\n if indent < sys.maxint:\n\n for line in lines[1:]:\n\n trimmed.append(line[indent:].rstrip())\n\n # Strip off trailing and leading blank lines:\n\n while trimmed and not trimmed[-1]:\n\n trimmed.pop()\n\n while trimmed and not trimmed[0]:\n\n trimmed.pop(0)\n\n # Return a single string:\n\n return ' '.join(trimmed)\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1095
List of zeros in python	<pre><code>#add code here to figure out the number of 0's you need, naming the variable n.\n\nlistofzeros = [0] * n\n\n</code></pre>\n\n<p>if you prefer to put it in the function, just drop in that code and add <code>return listofzeros</code></p>\n\n<p>Which would look like this:</p>\n\n<pre><code>def zerolistmaker(n):\n\n listofzeros = [0] * n\n\n return listofzeros\n\n</code></pre>\n\n<p>sample output:</p>\n\n<pre><code>>>> zerolistmaker(4)\n\n[0, 0, 0, 0]\n\n>>> zerolistmaker(5)\n\n[0, 0, 0, 0, 0]\n\n>>> zerolistmaker(15)\n\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n\n>>> \n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1096
Read file from line 2 or skip header row	<pre><code>with open(fname) as f:\n\n next(f)\n\n for line in f:\n\n #do something\n\n</code></pre>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1097
Fatal error in launcher: Unable to create process using ""C:\Program Files (x86)\Python33\python.exe" "C:\Program Files (x86)\Python33\pip.exe""	<p>it seems that</p>\n\n<pre><code>python -m pip install XXX \n\n</code></pre>\n\n<p>will work anyway (worked for me)\n\n(see <a href="https://stackoverflow.com/a/25812942/3368958">link by user474491</a>)</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1098
How do I install pip on macOS or OS X?	<p>I'm surprised no-one has mentioned this - since 2013, python itself is capable of installing <code>pip</code>, no external commands (and no internet connection) required.</p>\n\n<pre><code>sudo -H python -m ensurepip\n\n</code></pre>\n\n<p>This will create a similar install to what <code>easy_install</code> would.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1099
Best way to find the intersection of multiple sets?	<p>From Python version 2.6 on you can use multiple arguments to <a href="https://docs.python.org/library/stdtypes.html#frozenset.intersection" rel="noreferrer"><code>set.intersection()</code></a>, like</p>\n\n<pre><code>u = set.intersection(s1, s2, s3)\n\n</code></pre>\n\n<p>If the sets are in a list, this translates to:</p>\n\n<pre><code>u = set.intersection(*setlist)\n\n</code></pre>\n\n<p>where <code>*a_list</code> is <a href="https://stackoverflow.com/questions/36901/what-does-double-star-and-star-do-for-python-parameters">list expansion</a></p>\n\n<p>Note that <code>set.intersection</code> is <em>not</em> a static method, but this uses the functional notation to apply intersection of the first set with the rest of the list. So if the argument list is empty this will fail.</p>\n\n	QuestionAnswerPython.xlsx		[]	false	[]	1100